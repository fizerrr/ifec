
ifec_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063e0  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08006678  08006678  00016678  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066b0  080066b0  000200d0  2**0
                  CONTENTS
  4 .ARM          00000008  080066b0  080066b0  000166b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066b8  080066b8  000200d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066b8  080066b8  000166b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080066bc  080066bc  000166bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  24000000  080066c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000010  080066d0  00020010  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  24000070  08006730  00020070  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000688  240000d0  08006790  000200d0  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  24000758  08006790  00020758  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  000200fe  2**0
                  CONTENTS, READONLY
 15 .debug_info   0001856e  00000000  00000000  00020141  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00002a3c  00000000  00000000  000386af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001048  00000000  00000000  0003b0f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000c90  00000000  00000000  0003c138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0003ac50  00000000  00000000  0003cdc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000153f0  00000000  00000000  00077a18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00182632  00000000  00000000  0008ce08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00004530  00000000  00000000  0020f43c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000064  00000000  00000000  0021396c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	240000d0 	.word	0x240000d0
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08006660 	.word	0x08006660

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	240000d4 	.word	0x240000d4
 80002d4:	08006660 	.word	0x08006660

080002d8 <__aeabi_uldivmod>:
 80002d8:	b953      	cbnz	r3, 80002f0 <__aeabi_uldivmod+0x18>
 80002da:	b94a      	cbnz	r2, 80002f0 <__aeabi_uldivmod+0x18>
 80002dc:	2900      	cmp	r1, #0
 80002de:	bf08      	it	eq
 80002e0:	2800      	cmpeq	r0, #0
 80002e2:	bf1c      	itt	ne
 80002e4:	f04f 31ff 	movne.w	r1, #4294967295
 80002e8:	f04f 30ff 	movne.w	r0, #4294967295
 80002ec:	f000 b970 	b.w	80005d0 <__aeabi_idiv0>
 80002f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80002f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002f8:	f000 f806 	bl	8000308 <__udivmoddi4>
 80002fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000300:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000304:	b004      	add	sp, #16
 8000306:	4770      	bx	lr

08000308 <__udivmoddi4>:
 8000308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800030c:	9e08      	ldr	r6, [sp, #32]
 800030e:	460d      	mov	r5, r1
 8000310:	4604      	mov	r4, r0
 8000312:	460f      	mov	r7, r1
 8000314:	2b00      	cmp	r3, #0
 8000316:	d14a      	bne.n	80003ae <__udivmoddi4+0xa6>
 8000318:	428a      	cmp	r2, r1
 800031a:	4694      	mov	ip, r2
 800031c:	d965      	bls.n	80003ea <__udivmoddi4+0xe2>
 800031e:	fab2 f382 	clz	r3, r2
 8000322:	b143      	cbz	r3, 8000336 <__udivmoddi4+0x2e>
 8000324:	fa02 fc03 	lsl.w	ip, r2, r3
 8000328:	f1c3 0220 	rsb	r2, r3, #32
 800032c:	409f      	lsls	r7, r3
 800032e:	fa20 f202 	lsr.w	r2, r0, r2
 8000332:	4317      	orrs	r7, r2
 8000334:	409c      	lsls	r4, r3
 8000336:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800033a:	fa1f f58c 	uxth.w	r5, ip
 800033e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000342:	0c22      	lsrs	r2, r4, #16
 8000344:	fb0e 7711 	mls	r7, lr, r1, r7
 8000348:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800034c:	fb01 f005 	mul.w	r0, r1, r5
 8000350:	4290      	cmp	r0, r2
 8000352:	d90a      	bls.n	800036a <__udivmoddi4+0x62>
 8000354:	eb1c 0202 	adds.w	r2, ip, r2
 8000358:	f101 37ff 	add.w	r7, r1, #4294967295
 800035c:	f080 811c 	bcs.w	8000598 <__udivmoddi4+0x290>
 8000360:	4290      	cmp	r0, r2
 8000362:	f240 8119 	bls.w	8000598 <__udivmoddi4+0x290>
 8000366:	3902      	subs	r1, #2
 8000368:	4462      	add	r2, ip
 800036a:	1a12      	subs	r2, r2, r0
 800036c:	b2a4      	uxth	r4, r4
 800036e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000372:	fb0e 2210 	mls	r2, lr, r0, r2
 8000376:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037a:	fb00 f505 	mul.w	r5, r0, r5
 800037e:	42a5      	cmp	r5, r4
 8000380:	d90a      	bls.n	8000398 <__udivmoddi4+0x90>
 8000382:	eb1c 0404 	adds.w	r4, ip, r4
 8000386:	f100 32ff 	add.w	r2, r0, #4294967295
 800038a:	f080 8107 	bcs.w	800059c <__udivmoddi4+0x294>
 800038e:	42a5      	cmp	r5, r4
 8000390:	f240 8104 	bls.w	800059c <__udivmoddi4+0x294>
 8000394:	4464      	add	r4, ip
 8000396:	3802      	subs	r0, #2
 8000398:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	2100      	movs	r1, #0
 80003a0:	b11e      	cbz	r6, 80003aa <__udivmoddi4+0xa2>
 80003a2:	40dc      	lsrs	r4, r3
 80003a4:	2300      	movs	r3, #0
 80003a6:	e9c6 4300 	strd	r4, r3, [r6]
 80003aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d908      	bls.n	80003c4 <__udivmoddi4+0xbc>
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	f000 80ed 	beq.w	8000592 <__udivmoddi4+0x28a>
 80003b8:	2100      	movs	r1, #0
 80003ba:	e9c6 0500 	strd	r0, r5, [r6]
 80003be:	4608      	mov	r0, r1
 80003c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c4:	fab3 f183 	clz	r1, r3
 80003c8:	2900      	cmp	r1, #0
 80003ca:	d149      	bne.n	8000460 <__udivmoddi4+0x158>
 80003cc:	42ab      	cmp	r3, r5
 80003ce:	d302      	bcc.n	80003d6 <__udivmoddi4+0xce>
 80003d0:	4282      	cmp	r2, r0
 80003d2:	f200 80f8 	bhi.w	80005c6 <__udivmoddi4+0x2be>
 80003d6:	1a84      	subs	r4, r0, r2
 80003d8:	eb65 0203 	sbc.w	r2, r5, r3
 80003dc:	2001      	movs	r0, #1
 80003de:	4617      	mov	r7, r2
 80003e0:	2e00      	cmp	r6, #0
 80003e2:	d0e2      	beq.n	80003aa <__udivmoddi4+0xa2>
 80003e4:	e9c6 4700 	strd	r4, r7, [r6]
 80003e8:	e7df      	b.n	80003aa <__udivmoddi4+0xa2>
 80003ea:	b902      	cbnz	r2, 80003ee <__udivmoddi4+0xe6>
 80003ec:	deff      	udf	#255	; 0xff
 80003ee:	fab2 f382 	clz	r3, r2
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	f040 8090 	bne.w	8000518 <__udivmoddi4+0x210>
 80003f8:	1a8a      	subs	r2, r1, r2
 80003fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003fe:	fa1f fe8c 	uxth.w	lr, ip
 8000402:	2101      	movs	r1, #1
 8000404:	fbb2 f5f7 	udiv	r5, r2, r7
 8000408:	fb07 2015 	mls	r0, r7, r5, r2
 800040c:	0c22      	lsrs	r2, r4, #16
 800040e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000412:	fb0e f005 	mul.w	r0, lr, r5
 8000416:	4290      	cmp	r0, r2
 8000418:	d908      	bls.n	800042c <__udivmoddi4+0x124>
 800041a:	eb1c 0202 	adds.w	r2, ip, r2
 800041e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000422:	d202      	bcs.n	800042a <__udivmoddi4+0x122>
 8000424:	4290      	cmp	r0, r2
 8000426:	f200 80cb 	bhi.w	80005c0 <__udivmoddi4+0x2b8>
 800042a:	4645      	mov	r5, r8
 800042c:	1a12      	subs	r2, r2, r0
 800042e:	b2a4      	uxth	r4, r4
 8000430:	fbb2 f0f7 	udiv	r0, r2, r7
 8000434:	fb07 2210 	mls	r2, r7, r0, r2
 8000438:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800043c:	fb0e fe00 	mul.w	lr, lr, r0
 8000440:	45a6      	cmp	lr, r4
 8000442:	d908      	bls.n	8000456 <__udivmoddi4+0x14e>
 8000444:	eb1c 0404 	adds.w	r4, ip, r4
 8000448:	f100 32ff 	add.w	r2, r0, #4294967295
 800044c:	d202      	bcs.n	8000454 <__udivmoddi4+0x14c>
 800044e:	45a6      	cmp	lr, r4
 8000450:	f200 80bb 	bhi.w	80005ca <__udivmoddi4+0x2c2>
 8000454:	4610      	mov	r0, r2
 8000456:	eba4 040e 	sub.w	r4, r4, lr
 800045a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800045e:	e79f      	b.n	80003a0 <__udivmoddi4+0x98>
 8000460:	f1c1 0720 	rsb	r7, r1, #32
 8000464:	408b      	lsls	r3, r1
 8000466:	fa22 fc07 	lsr.w	ip, r2, r7
 800046a:	ea4c 0c03 	orr.w	ip, ip, r3
 800046e:	fa05 f401 	lsl.w	r4, r5, r1
 8000472:	fa20 f307 	lsr.w	r3, r0, r7
 8000476:	40fd      	lsrs	r5, r7
 8000478:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800047c:	4323      	orrs	r3, r4
 800047e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000482:	fa1f fe8c 	uxth.w	lr, ip
 8000486:	fb09 5518 	mls	r5, r9, r8, r5
 800048a:	0c1c      	lsrs	r4, r3, #16
 800048c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000490:	fb08 f50e 	mul.w	r5, r8, lr
 8000494:	42a5      	cmp	r5, r4
 8000496:	fa02 f201 	lsl.w	r2, r2, r1
 800049a:	fa00 f001 	lsl.w	r0, r0, r1
 800049e:	d90b      	bls.n	80004b8 <__udivmoddi4+0x1b0>
 80004a0:	eb1c 0404 	adds.w	r4, ip, r4
 80004a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80004a8:	f080 8088 	bcs.w	80005bc <__udivmoddi4+0x2b4>
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	f240 8085 	bls.w	80005bc <__udivmoddi4+0x2b4>
 80004b2:	f1a8 0802 	sub.w	r8, r8, #2
 80004b6:	4464      	add	r4, ip
 80004b8:	1b64      	subs	r4, r4, r5
 80004ba:	b29d      	uxth	r5, r3
 80004bc:	fbb4 f3f9 	udiv	r3, r4, r9
 80004c0:	fb09 4413 	mls	r4, r9, r3, r4
 80004c4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004c8:	fb03 fe0e 	mul.w	lr, r3, lr
 80004cc:	45a6      	cmp	lr, r4
 80004ce:	d908      	bls.n	80004e2 <__udivmoddi4+0x1da>
 80004d0:	eb1c 0404 	adds.w	r4, ip, r4
 80004d4:	f103 35ff 	add.w	r5, r3, #4294967295
 80004d8:	d26c      	bcs.n	80005b4 <__udivmoddi4+0x2ac>
 80004da:	45a6      	cmp	lr, r4
 80004dc:	d96a      	bls.n	80005b4 <__udivmoddi4+0x2ac>
 80004de:	3b02      	subs	r3, #2
 80004e0:	4464      	add	r4, ip
 80004e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004e6:	fba3 9502 	umull	r9, r5, r3, r2
 80004ea:	eba4 040e 	sub.w	r4, r4, lr
 80004ee:	42ac      	cmp	r4, r5
 80004f0:	46c8      	mov	r8, r9
 80004f2:	46ae      	mov	lr, r5
 80004f4:	d356      	bcc.n	80005a4 <__udivmoddi4+0x29c>
 80004f6:	d053      	beq.n	80005a0 <__udivmoddi4+0x298>
 80004f8:	b156      	cbz	r6, 8000510 <__udivmoddi4+0x208>
 80004fa:	ebb0 0208 	subs.w	r2, r0, r8
 80004fe:	eb64 040e 	sbc.w	r4, r4, lr
 8000502:	fa04 f707 	lsl.w	r7, r4, r7
 8000506:	40ca      	lsrs	r2, r1
 8000508:	40cc      	lsrs	r4, r1
 800050a:	4317      	orrs	r7, r2
 800050c:	e9c6 7400 	strd	r7, r4, [r6]
 8000510:	4618      	mov	r0, r3
 8000512:	2100      	movs	r1, #0
 8000514:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000518:	f1c3 0120 	rsb	r1, r3, #32
 800051c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000520:	fa20 f201 	lsr.w	r2, r0, r1
 8000524:	fa25 f101 	lsr.w	r1, r5, r1
 8000528:	409d      	lsls	r5, r3
 800052a:	432a      	orrs	r2, r5
 800052c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000530:	fa1f fe8c 	uxth.w	lr, ip
 8000534:	fbb1 f0f7 	udiv	r0, r1, r7
 8000538:	fb07 1510 	mls	r5, r7, r0, r1
 800053c:	0c11      	lsrs	r1, r2, #16
 800053e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000542:	fb00 f50e 	mul.w	r5, r0, lr
 8000546:	428d      	cmp	r5, r1
 8000548:	fa04 f403 	lsl.w	r4, r4, r3
 800054c:	d908      	bls.n	8000560 <__udivmoddi4+0x258>
 800054e:	eb1c 0101 	adds.w	r1, ip, r1
 8000552:	f100 38ff 	add.w	r8, r0, #4294967295
 8000556:	d22f      	bcs.n	80005b8 <__udivmoddi4+0x2b0>
 8000558:	428d      	cmp	r5, r1
 800055a:	d92d      	bls.n	80005b8 <__udivmoddi4+0x2b0>
 800055c:	3802      	subs	r0, #2
 800055e:	4461      	add	r1, ip
 8000560:	1b49      	subs	r1, r1, r5
 8000562:	b292      	uxth	r2, r2
 8000564:	fbb1 f5f7 	udiv	r5, r1, r7
 8000568:	fb07 1115 	mls	r1, r7, r5, r1
 800056c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000570:	fb05 f10e 	mul.w	r1, r5, lr
 8000574:	4291      	cmp	r1, r2
 8000576:	d908      	bls.n	800058a <__udivmoddi4+0x282>
 8000578:	eb1c 0202 	adds.w	r2, ip, r2
 800057c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000580:	d216      	bcs.n	80005b0 <__udivmoddi4+0x2a8>
 8000582:	4291      	cmp	r1, r2
 8000584:	d914      	bls.n	80005b0 <__udivmoddi4+0x2a8>
 8000586:	3d02      	subs	r5, #2
 8000588:	4462      	add	r2, ip
 800058a:	1a52      	subs	r2, r2, r1
 800058c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000590:	e738      	b.n	8000404 <__udivmoddi4+0xfc>
 8000592:	4631      	mov	r1, r6
 8000594:	4630      	mov	r0, r6
 8000596:	e708      	b.n	80003aa <__udivmoddi4+0xa2>
 8000598:	4639      	mov	r1, r7
 800059a:	e6e6      	b.n	800036a <__udivmoddi4+0x62>
 800059c:	4610      	mov	r0, r2
 800059e:	e6fb      	b.n	8000398 <__udivmoddi4+0x90>
 80005a0:	4548      	cmp	r0, r9
 80005a2:	d2a9      	bcs.n	80004f8 <__udivmoddi4+0x1f0>
 80005a4:	ebb9 0802 	subs.w	r8, r9, r2
 80005a8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005ac:	3b01      	subs	r3, #1
 80005ae:	e7a3      	b.n	80004f8 <__udivmoddi4+0x1f0>
 80005b0:	4645      	mov	r5, r8
 80005b2:	e7ea      	b.n	800058a <__udivmoddi4+0x282>
 80005b4:	462b      	mov	r3, r5
 80005b6:	e794      	b.n	80004e2 <__udivmoddi4+0x1da>
 80005b8:	4640      	mov	r0, r8
 80005ba:	e7d1      	b.n	8000560 <__udivmoddi4+0x258>
 80005bc:	46d0      	mov	r8, sl
 80005be:	e77b      	b.n	80004b8 <__udivmoddi4+0x1b0>
 80005c0:	3d02      	subs	r5, #2
 80005c2:	4462      	add	r2, ip
 80005c4:	e732      	b.n	800042c <__udivmoddi4+0x124>
 80005c6:	4608      	mov	r0, r1
 80005c8:	e70a      	b.n	80003e0 <__udivmoddi4+0xd8>
 80005ca:	4464      	add	r4, ip
 80005cc:	3802      	subs	r0, #2
 80005ce:	e742      	b.n	8000456 <__udivmoddi4+0x14e>

080005d0 <__aeabi_idiv0>:
 80005d0:	4770      	bx	lr
 80005d2:	bf00      	nop

080005d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80005d8:	4b3d      	ldr	r3, [pc, #244]	; (80006d0 <SystemInit+0xfc>)
 80005da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005de:	4a3c      	ldr	r2, [pc, #240]	; (80006d0 <SystemInit+0xfc>)
 80005e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80005e8:	4b39      	ldr	r3, [pc, #228]	; (80006d0 <SystemInit+0xfc>)
 80005ea:	691b      	ldr	r3, [r3, #16]
 80005ec:	4a38      	ldr	r2, [pc, #224]	; (80006d0 <SystemInit+0xfc>)
 80005ee:	f043 0310 	orr.w	r3, r3, #16
 80005f2:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80005f4:	4b37      	ldr	r3, [pc, #220]	; (80006d4 <SystemInit+0x100>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f003 030f 	and.w	r3, r3, #15
 80005fc:	2b06      	cmp	r3, #6
 80005fe:	d807      	bhi.n	8000610 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000600:	4b34      	ldr	r3, [pc, #208]	; (80006d4 <SystemInit+0x100>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f023 030f 	bic.w	r3, r3, #15
 8000608:	4a32      	ldr	r2, [pc, #200]	; (80006d4 <SystemInit+0x100>)
 800060a:	f043 0307 	orr.w	r3, r3, #7
 800060e:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000610:	4b31      	ldr	r3, [pc, #196]	; (80006d8 <SystemInit+0x104>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	4a30      	ldr	r2, [pc, #192]	; (80006d8 <SystemInit+0x104>)
 8000616:	f043 0301 	orr.w	r3, r3, #1
 800061a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800061c:	4b2e      	ldr	r3, [pc, #184]	; (80006d8 <SystemInit+0x104>)
 800061e:	2200      	movs	r2, #0
 8000620:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000622:	4b2d      	ldr	r3, [pc, #180]	; (80006d8 <SystemInit+0x104>)
 8000624:	681a      	ldr	r2, [r3, #0]
 8000626:	492c      	ldr	r1, [pc, #176]	; (80006d8 <SystemInit+0x104>)
 8000628:	4b2c      	ldr	r3, [pc, #176]	; (80006dc <SystemInit+0x108>)
 800062a:	4013      	ands	r3, r2
 800062c:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800062e:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <SystemInit+0x100>)
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	f003 0308 	and.w	r3, r3, #8
 8000636:	2b00      	cmp	r3, #0
 8000638:	d007      	beq.n	800064a <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800063a:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <SystemInit+0x100>)
 800063c:	681b      	ldr	r3, [r3, #0]
 800063e:	f023 030f 	bic.w	r3, r3, #15
 8000642:	4a24      	ldr	r2, [pc, #144]	; (80006d4 <SystemInit+0x100>)
 8000644:	f043 0307 	orr.w	r3, r3, #7
 8000648:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800064a:	4b23      	ldr	r3, [pc, #140]	; (80006d8 <SystemInit+0x104>)
 800064c:	2200      	movs	r2, #0
 800064e:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000650:	4b21      	ldr	r3, [pc, #132]	; (80006d8 <SystemInit+0x104>)
 8000652:	2200      	movs	r2, #0
 8000654:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 8000656:	4b20      	ldr	r3, [pc, #128]	; (80006d8 <SystemInit+0x104>)
 8000658:	2200      	movs	r2, #0
 800065a:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800065c:	4b1e      	ldr	r3, [pc, #120]	; (80006d8 <SystemInit+0x104>)
 800065e:	4a20      	ldr	r2, [pc, #128]	; (80006e0 <SystemInit+0x10c>)
 8000660:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000662:	4b1d      	ldr	r3, [pc, #116]	; (80006d8 <SystemInit+0x104>)
 8000664:	4a1f      	ldr	r2, [pc, #124]	; (80006e4 <SystemInit+0x110>)
 8000666:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000668:	4b1b      	ldr	r3, [pc, #108]	; (80006d8 <SystemInit+0x104>)
 800066a:	4a1f      	ldr	r2, [pc, #124]	; (80006e8 <SystemInit+0x114>)
 800066c:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 800066e:	4b1a      	ldr	r3, [pc, #104]	; (80006d8 <SystemInit+0x104>)
 8000670:	2200      	movs	r2, #0
 8000672:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000674:	4b18      	ldr	r3, [pc, #96]	; (80006d8 <SystemInit+0x104>)
 8000676:	4a1c      	ldr	r2, [pc, #112]	; (80006e8 <SystemInit+0x114>)
 8000678:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800067a:	4b17      	ldr	r3, [pc, #92]	; (80006d8 <SystemInit+0x104>)
 800067c:	2200      	movs	r2, #0
 800067e:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000680:	4b15      	ldr	r3, [pc, #84]	; (80006d8 <SystemInit+0x104>)
 8000682:	4a19      	ldr	r2, [pc, #100]	; (80006e8 <SystemInit+0x114>)
 8000684:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8000686:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <SystemInit+0x104>)
 8000688:	2200      	movs	r2, #0
 800068a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800068c:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <SystemInit+0x104>)
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a11      	ldr	r2, [pc, #68]	; (80006d8 <SystemInit+0x104>)
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000698:	4b0f      	ldr	r3, [pc, #60]	; (80006d8 <SystemInit+0x104>)
 800069a:	2200      	movs	r2, #0
 800069c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 800069e:	4b13      	ldr	r3, [pc, #76]	; (80006ec <SystemInit+0x118>)
 80006a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80006a2:	4a12      	ldr	r2, [pc, #72]	; (80006ec <SystemInit+0x118>)
 80006a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80006a8:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80006aa:	4b11      	ldr	r3, [pc, #68]	; (80006f0 <SystemInit+0x11c>)
 80006ac:	681a      	ldr	r2, [r3, #0]
 80006ae:	4b11      	ldr	r3, [pc, #68]	; (80006f4 <SystemInit+0x120>)
 80006b0:	4013      	ands	r3, r2
 80006b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80006b6:	d202      	bcs.n	80006be <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80006b8:	4b0f      	ldr	r3, [pc, #60]	; (80006f8 <SystemInit+0x124>)
 80006ba:	2201      	movs	r2, #1
 80006bc:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <SystemInit+0x128>)
 80006c0:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80006c4:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	e000ed00 	.word	0xe000ed00
 80006d4:	52002000 	.word	0x52002000
 80006d8:	58024400 	.word	0x58024400
 80006dc:	eaf6ed7f 	.word	0xeaf6ed7f
 80006e0:	02020200 	.word	0x02020200
 80006e4:	01ff0000 	.word	0x01ff0000
 80006e8:	01010280 	.word	0x01010280
 80006ec:	580000c0 	.word	0x580000c0
 80006f0:	5c001000 	.word	0x5c001000
 80006f4:	ffff0000 	.word	0xffff0000
 80006f8:	51008108 	.word	0x51008108
 80006fc:	52004000 	.word	0x52004000

08000700 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000706:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800070a:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 800070c:	bf00      	nop
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <main+0x9c>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000716:	2b00      	cmp	r3, #0
 8000718:	d004      	beq.n	8000724 <main+0x24>
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	1e5a      	subs	r2, r3, #1
 800071e:	607a      	str	r2, [r7, #4]
 8000720:	2b00      	cmp	r3, #0
 8000722:	dcf4      	bgt.n	800070e <main+0xe>
  if ( timeout < 0 )
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	2b00      	cmp	r3, #0
 8000728:	da01      	bge.n	800072e <main+0x2e>
  {
  Error_Handler();
 800072a:	f000 f9e9 	bl	8000b00 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800072e:	f000 fc0f 	bl	8000f50 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000732:	f000 f835 	bl	80007a0 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000736:	4b19      	ldr	r3, [pc, #100]	; (800079c <main+0x9c>)
 8000738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800073c:	4a17      	ldr	r2, [pc, #92]	; (800079c <main+0x9c>)
 800073e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000742:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000746:	4b15      	ldr	r3, [pc, #84]	; (800079c <main+0x9c>)
 8000748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800074c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000750:	603b      	str	r3, [r7, #0]
 8000752:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000754:	2000      	movs	r0, #0
 8000756:	f001 fb99 	bl	8001e8c <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800075a:	2100      	movs	r1, #0
 800075c:	2000      	movs	r0, #0
 800075e:	f001 fbaf 	bl	8001ec0 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000762:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000766:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000768:	bf00      	nop
 800076a:	4b0c      	ldr	r3, [pc, #48]	; (800079c <main+0x9c>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000772:	2b00      	cmp	r3, #0
 8000774:	d104      	bne.n	8000780 <main+0x80>
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	1e5a      	subs	r2, r3, #1
 800077a:	607a      	str	r2, [r7, #4]
 800077c:	2b00      	cmp	r3, #0
 800077e:	dcf4      	bgt.n	800076a <main+0x6a>
if ( timeout < 0 )
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	2b00      	cmp	r3, #0
 8000784:	da01      	bge.n	800078a <main+0x8a>
{
Error_Handler();
 8000786:	f000 f9bb 	bl	8000b00 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800078a:	f000 f953 	bl	8000a34 <MX_GPIO_Init>
  MX_ETH_Init();
 800078e:	f000 f887 	bl	80008a0 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000792:	f000 f8d1 	bl	8000938 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000796:	f000 f91b 	bl	80009d0 <MX_USB_OTG_FS_PCD_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800079a:	e7fe      	b.n	800079a <main+0x9a>
 800079c:	58024400 	.word	0x58024400

080007a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b09c      	sub	sp, #112	; 0x70
 80007a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007aa:	224c      	movs	r2, #76	; 0x4c
 80007ac:	2100      	movs	r1, #0
 80007ae:	4618      	mov	r0, r3
 80007b0:	f005 ff29 	bl	8006606 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007b4:	1d3b      	adds	r3, r7, #4
 80007b6:	2220      	movs	r2, #32
 80007b8:	2100      	movs	r1, #0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f005 ff23 	bl	8006606 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80007c0:	2004      	movs	r0, #4
 80007c2:	f001 fcc1 	bl	8002148 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007c6:	2300      	movs	r3, #0
 80007c8:	603b      	str	r3, [r7, #0]
 80007ca:	4b33      	ldr	r3, [pc, #204]	; (8000898 <SystemClock_Config+0xf8>)
 80007cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007ce:	4a32      	ldr	r2, [pc, #200]	; (8000898 <SystemClock_Config+0xf8>)
 80007d0:	f023 0301 	bic.w	r3, r3, #1
 80007d4:	62d3      	str	r3, [r2, #44]	; 0x2c
 80007d6:	4b30      	ldr	r3, [pc, #192]	; (8000898 <SystemClock_Config+0xf8>)
 80007d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80007da:	f003 0301 	and.w	r3, r3, #1
 80007de:	603b      	str	r3, [r7, #0]
 80007e0:	4b2e      	ldr	r3, [pc, #184]	; (800089c <SystemClock_Config+0xfc>)
 80007e2:	699b      	ldr	r3, [r3, #24]
 80007e4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007e8:	4a2c      	ldr	r2, [pc, #176]	; (800089c <SystemClock_Config+0xfc>)
 80007ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ee:	6193      	str	r3, [r2, #24]
 80007f0:	4b2a      	ldr	r3, [pc, #168]	; (800089c <SystemClock_Config+0xfc>)
 80007f2:	699b      	ldr	r3, [r3, #24]
 80007f4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007f8:	603b      	str	r3, [r7, #0]
 80007fa:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80007fc:	bf00      	nop
 80007fe:	4b27      	ldr	r3, [pc, #156]	; (800089c <SystemClock_Config+0xfc>)
 8000800:	699b      	ldr	r3, [r3, #24]
 8000802:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000806:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800080a:	d1f8      	bne.n	80007fe <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 800080c:	2303      	movs	r3, #3
 800080e:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000810:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000814:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000816:	2301      	movs	r3, #1
 8000818:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800081a:	2340      	movs	r3, #64	; 0x40
 800081c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	2302      	movs	r3, #2
 8000820:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000822:	2302      	movs	r3, #2
 8000824:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000826:	2301      	movs	r3, #1
 8000828:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 24;
 800082a:	2318      	movs	r3, #24
 800082c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 800082e:	2302      	movs	r3, #2
 8000830:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000832:	2304      	movs	r3, #4
 8000834:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000836:	2302      	movs	r3, #2
 8000838:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800083a:	230c      	movs	r3, #12
 800083c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 800083e:	2300      	movs	r3, #0
 8000840:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000842:	2300      	movs	r3, #0
 8000844:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000846:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084a:	4618      	mov	r0, r3
 800084c:	f001 fce6 	bl	800221c <HAL_RCC_OscConfig>
 8000850:	4603      	mov	r3, r0
 8000852:	2b00      	cmp	r3, #0
 8000854:	d001      	beq.n	800085a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8000856:	f000 f953 	bl	8000b00 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085a:	233f      	movs	r3, #63	; 0x3f
 800085c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800085e:	2300      	movs	r3, #0
 8000860:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000866:	2300      	movs	r3, #0
 8000868:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800086a:	2300      	movs	r3, #0
 800086c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 800086e:	2300      	movs	r3, #0
 8000870:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000872:	2300      	movs	r3, #0
 8000874:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000876:	2300      	movs	r3, #0
 8000878:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800087a:	1d3b      	adds	r3, r7, #4
 800087c:	2101      	movs	r1, #1
 800087e:	4618      	mov	r0, r3
 8000880:	f002 f926 	bl	8002ad0 <HAL_RCC_ClockConfig>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <SystemClock_Config+0xee>
  {
    Error_Handler();
 800088a:	f000 f939 	bl	8000b00 <Error_Handler>
  }
}
 800088e:	bf00      	nop
 8000890:	3770      	adds	r7, #112	; 0x70
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	58000400 	.word	0x58000400
 800089c:	58024800 	.word	0x58024800

080008a0 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80008a4:	4b1e      	ldr	r3, [pc, #120]	; (8000920 <MX_ETH_Init+0x80>)
 80008a6:	4a1f      	ldr	r2, [pc, #124]	; (8000924 <MX_ETH_Init+0x84>)
 80008a8:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80008aa:	4b1f      	ldr	r3, [pc, #124]	; (8000928 <MX_ETH_Init+0x88>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80008b0:	4b1d      	ldr	r3, [pc, #116]	; (8000928 <MX_ETH_Init+0x88>)
 80008b2:	2280      	movs	r2, #128	; 0x80
 80008b4:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80008b6:	4b1c      	ldr	r3, [pc, #112]	; (8000928 <MX_ETH_Init+0x88>)
 80008b8:	22e1      	movs	r2, #225	; 0xe1
 80008ba:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80008bc:	4b1a      	ldr	r3, [pc, #104]	; (8000928 <MX_ETH_Init+0x88>)
 80008be:	2200      	movs	r2, #0
 80008c0:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80008c2:	4b19      	ldr	r3, [pc, #100]	; (8000928 <MX_ETH_Init+0x88>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80008c8:	4b17      	ldr	r3, [pc, #92]	; (8000928 <MX_ETH_Init+0x88>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80008ce:	4b14      	ldr	r3, [pc, #80]	; (8000920 <MX_ETH_Init+0x80>)
 80008d0:	4a15      	ldr	r2, [pc, #84]	; (8000928 <MX_ETH_Init+0x88>)
 80008d2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80008d4:	4b12      	ldr	r3, [pc, #72]	; (8000920 <MX_ETH_Init+0x80>)
 80008d6:	2201      	movs	r2, #1
 80008d8:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <MX_ETH_Init+0x80>)
 80008dc:	4a13      	ldr	r2, [pc, #76]	; (800092c <MX_ETH_Init+0x8c>)
 80008de:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80008e0:	4b0f      	ldr	r3, [pc, #60]	; (8000920 <MX_ETH_Init+0x80>)
 80008e2:	4a13      	ldr	r2, [pc, #76]	; (8000930 <MX_ETH_Init+0x90>)
 80008e4:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <MX_ETH_Init+0x80>)
 80008e8:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80008ec:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80008ee:	480c      	ldr	r0, [pc, #48]	; (8000920 <MX_ETH_Init+0x80>)
 80008f0:	f000 fce8 	bl	80012c4 <HAL_ETH_Init>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_ETH_Init+0x5e>
  {
    Error_Handler();
 80008fa:	f000 f901 	bl	8000b00 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80008fe:	2238      	movs	r2, #56	; 0x38
 8000900:	2100      	movs	r1, #0
 8000902:	480c      	ldr	r0, [pc, #48]	; (8000934 <MX_ETH_Init+0x94>)
 8000904:	f005 fe7f 	bl	8006606 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000908:	4b0a      	ldr	r3, [pc, #40]	; (8000934 <MX_ETH_Init+0x94>)
 800090a:	2221      	movs	r2, #33	; 0x21
 800090c:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800090e:	4b09      	ldr	r3, [pc, #36]	; (8000934 <MX_ETH_Init+0x94>)
 8000910:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000914:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000916:	4b07      	ldr	r3, [pc, #28]	; (8000934 <MX_ETH_Init+0x94>)
 8000918:	2200      	movs	r2, #0
 800091a:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 800091c:	bf00      	nop
 800091e:	bd80      	pop	{r7, pc}
 8000920:	24000124 	.word	0x24000124
 8000924:	40028000 	.word	0x40028000
 8000928:	2400074c 	.word	0x2400074c
 800092c:	24000070 	.word	0x24000070
 8000930:	24000010 	.word	0x24000010
 8000934:	240000ec 	.word	0x240000ec

08000938 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800093c:	4b22      	ldr	r3, [pc, #136]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 800093e:	4a23      	ldr	r2, [pc, #140]	; (80009cc <MX_USART3_UART_Init+0x94>)
 8000940:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000942:	4b21      	ldr	r3, [pc, #132]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 8000944:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000948:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800094a:	4b1f      	ldr	r3, [pc, #124]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000950:	4b1d      	ldr	r3, [pc, #116]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000956:	4b1c      	ldr	r3, [pc, #112]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800095c:	4b1a      	ldr	r3, [pc, #104]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 800095e:	220c      	movs	r2, #12
 8000960:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000962:	4b19      	ldr	r3, [pc, #100]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 8000964:	2200      	movs	r2, #0
 8000966:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000968:	4b17      	ldr	r3, [pc, #92]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 800096a:	2200      	movs	r2, #0
 800096c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 8000970:	2200      	movs	r2, #0
 8000972:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000974:	4b14      	ldr	r3, [pc, #80]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 8000976:	2200      	movs	r2, #0
 8000978:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800097a:	4b13      	ldr	r3, [pc, #76]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 800097c:	2200      	movs	r2, #0
 800097e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000980:	4811      	ldr	r0, [pc, #68]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 8000982:	f004 fa5d 	bl	8004e40 <HAL_UART_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 800098c:	f000 f8b8 	bl	8000b00 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000990:	2100      	movs	r1, #0
 8000992:	480d      	ldr	r0, [pc, #52]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 8000994:	f005 fa65 	bl	8005e62 <HAL_UARTEx_SetTxFifoThreshold>
 8000998:	4603      	mov	r3, r0
 800099a:	2b00      	cmp	r3, #0
 800099c:	d001      	beq.n	80009a2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 800099e:	f000 f8af 	bl	8000b00 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009a2:	2100      	movs	r1, #0
 80009a4:	4808      	ldr	r0, [pc, #32]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 80009a6:	f005 fa9a 	bl	8005ede <HAL_UARTEx_SetRxFifoThreshold>
 80009aa:	4603      	mov	r3, r0
 80009ac:	2b00      	cmp	r3, #0
 80009ae:	d001      	beq.n	80009b4 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80009b0:	f000 f8a6 	bl	8000b00 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80009b4:	4804      	ldr	r0, [pc, #16]	; (80009c8 <MX_USART3_UART_Init+0x90>)
 80009b6:	f005 fa1b 	bl	8005df0 <HAL_UARTEx_DisableFifoMode>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80009c0:	f000 f89e 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80009c4:	bf00      	nop
 80009c6:	bd80      	pop	{r7, pc}
 80009c8:	240001d4 	.word	0x240001d4
 80009cc:	40004800 	.word	0x40004800

080009d0 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80009d0:	b580      	push	{r7, lr}
 80009d2:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80009d4:	4b15      	ldr	r3, [pc, #84]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009d6:	4a16      	ldr	r2, [pc, #88]	; (8000a30 <MX_USB_OTG_FS_PCD_Init+0x60>)
 80009d8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 80009da:	4b14      	ldr	r3, [pc, #80]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009dc:	2209      	movs	r2, #9
 80009de:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80009e0:	4b12      	ldr	r3, [pc, #72]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e2:	2202      	movs	r2, #2
 80009e4:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80009e6:	4b11      	ldr	r3, [pc, #68]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009e8:	2200      	movs	r2, #0
 80009ea:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80009ec:	4b0f      	ldr	r3, [pc, #60]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009ee:	2202      	movs	r2, #2
 80009f0:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80009f2:	4b0e      	ldr	r3, [pc, #56]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80009f8:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80009fe:	4b0b      	ldr	r3, [pc, #44]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000a04:	4b09      	ldr	r3, [pc, #36]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a06:	2201      	movs	r2, #1
 8000a08:	735a      	strb	r2, [r3, #13]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000a0a:	4b08      	ldr	r3, [pc, #32]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a0c:	2201      	movs	r2, #1
 8000a0e:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000a10:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000a16:	4805      	ldr	r0, [pc, #20]	; (8000a2c <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8000a18:	f001 fa66 	bl	8001ee8 <HAL_PCD_Init>
 8000a1c:	4603      	mov	r3, r0
 8000a1e:	2b00      	cmp	r3, #0
 8000a20:	d001      	beq.n	8000a26 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 8000a22:	f000 f86d 	bl	8000b00 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000a26:	bf00      	nop
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	24000268 	.word	0x24000268
 8000a30:	40080000 	.word	0x40080000

08000a34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b087      	sub	sp, #28
 8000a38:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a3a:	4b30      	ldr	r3, [pc, #192]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000a3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a40:	4a2e      	ldr	r2, [pc, #184]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000a42:	f043 0304 	orr.w	r3, r3, #4
 8000a46:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4a:	4b2c      	ldr	r3, [pc, #176]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000a4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a50:	f003 0304 	and.w	r3, r3, #4
 8000a54:	617b      	str	r3, [r7, #20]
 8000a56:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a58:	4b28      	ldr	r3, [pc, #160]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a5e:	4a27      	ldr	r2, [pc, #156]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000a60:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a64:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a68:	4b24      	ldr	r3, [pc, #144]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000a6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a72:	613b      	str	r3, [r7, #16]
 8000a74:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a76:	4b21      	ldr	r3, [pc, #132]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000a78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a7c:	4a1f      	ldr	r2, [pc, #124]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000a7e:	f043 0301 	orr.w	r3, r3, #1
 8000a82:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000a88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a8c:	f003 0301 	and.w	r3, r3, #1
 8000a90:	60fb      	str	r3, [r7, #12]
 8000a92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a94:	4b19      	ldr	r3, [pc, #100]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000a96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9a:	4a18      	ldr	r2, [pc, #96]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000a9c:	f043 0302 	orr.w	r3, r3, #2
 8000aa0:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa4:	4b15      	ldr	r3, [pc, #84]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000aa6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aaa:	f003 0302 	and.w	r3, r3, #2
 8000aae:	60bb      	str	r3, [r7, #8]
 8000ab0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000ab4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ab8:	4a10      	ldr	r2, [pc, #64]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000aba:	f043 0308 	orr.w	r3, r3, #8
 8000abe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ac2:	4b0e      	ldr	r3, [pc, #56]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000ac4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ac8:	f003 0308 	and.w	r3, r3, #8
 8000acc:	607b      	str	r3, [r7, #4]
 8000ace:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000ad0:	4b0a      	ldr	r3, [pc, #40]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000ad2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ad6:	4a09      	ldr	r2, [pc, #36]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000ad8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000adc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ae0:	4b06      	ldr	r3, [pc, #24]	; (8000afc <MX_GPIO_Init+0xc8>)
 8000ae2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000ae6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000aea:	603b      	str	r3, [r7, #0]
 8000aec:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000aee:	bf00      	nop
 8000af0:	371c      	adds	r7, #28
 8000af2:	46bd      	mov	sp, r7
 8000af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af8:	4770      	bx	lr
 8000afa:	bf00      	nop
 8000afc:	58024400 	.word	0x58024400

08000b00 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b04:	b672      	cpsid	i
}
 8000b06:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b08:	e7fe      	b.n	8000b08 <Error_Handler+0x8>
	...

08000b0c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b0c:	b480      	push	{r7}
 8000b0e:	b083      	sub	sp, #12
 8000b10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b12:	4b0a      	ldr	r3, [pc, #40]	; (8000b3c <HAL_MspInit+0x30>)
 8000b14:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b18:	4a08      	ldr	r2, [pc, #32]	; (8000b3c <HAL_MspInit+0x30>)
 8000b1a:	f043 0302 	orr.w	r3, r3, #2
 8000b1e:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000b22:	4b06      	ldr	r3, [pc, #24]	; (8000b3c <HAL_MspInit+0x30>)
 8000b24:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000b28:	f003 0302 	and.w	r3, r3, #2
 8000b2c:	607b      	str	r3, [r7, #4]
 8000b2e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	58024400 	.word	0x58024400

08000b40 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b08e      	sub	sp, #56	; 0x38
 8000b44:	af00      	add	r7, sp, #0
 8000b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b48:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	601a      	str	r2, [r3, #0]
 8000b50:	605a      	str	r2, [r3, #4]
 8000b52:	609a      	str	r2, [r3, #8]
 8000b54:	60da      	str	r2, [r3, #12]
 8000b56:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a59      	ldr	r2, [pc, #356]	; (8000cc4 <HAL_ETH_MspInit+0x184>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	f040 80ab 	bne.w	8000cba <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000b64:	4b58      	ldr	r3, [pc, #352]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000b66:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b6a:	4a57      	ldr	r2, [pc, #348]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000b6c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b70:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b74:	4b54      	ldr	r3, [pc, #336]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000b76:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b7a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b7e:	623b      	str	r3, [r7, #32]
 8000b80:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 8000b82:	4b51      	ldr	r3, [pc, #324]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000b84:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b88:	4a4f      	ldr	r2, [pc, #316]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000b8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b8e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000b92:	4b4d      	ldr	r3, [pc, #308]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000b94:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000b98:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b9c:	61fb      	str	r3, [r7, #28]
 8000b9e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 8000ba0:	4b49      	ldr	r3, [pc, #292]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000ba2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000ba6:	4a48      	ldr	r2, [pc, #288]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bac:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000bb0:	4b45      	ldr	r3, [pc, #276]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000bb2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000bb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bba:	61bb      	str	r3, [r7, #24]
 8000bbc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bbe:	4b42      	ldr	r3, [pc, #264]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000bc0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bc4:	4a40      	ldr	r2, [pc, #256]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000bc6:	f043 0304 	orr.w	r3, r3, #4
 8000bca:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bce:	4b3e      	ldr	r3, [pc, #248]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000bd0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bd4:	f003 0304 	and.w	r3, r3, #4
 8000bd8:	617b      	str	r3, [r7, #20]
 8000bda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bdc:	4b3a      	ldr	r3, [pc, #232]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000bde:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000be2:	4a39      	ldr	r2, [pc, #228]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000be4:	f043 0301 	orr.w	r3, r3, #1
 8000be8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000bec:	4b36      	ldr	r3, [pc, #216]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000bee:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000bf2:	f003 0301 	and.w	r3, r3, #1
 8000bf6:	613b      	str	r3, [r7, #16]
 8000bf8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bfa:	4b33      	ldr	r3, [pc, #204]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000bfc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c00:	4a31      	ldr	r2, [pc, #196]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000c02:	f043 0302 	orr.w	r3, r3, #2
 8000c06:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c0a:	4b2f      	ldr	r3, [pc, #188]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c10:	f003 0302 	and.w	r3, r3, #2
 8000c14:	60fb      	str	r3, [r7, #12]
 8000c16:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c18:	4b2b      	ldr	r3, [pc, #172]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000c1a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c1e:	4a2a      	ldr	r2, [pc, #168]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000c20:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c24:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c28:	4b27      	ldr	r3, [pc, #156]	; (8000cc8 <HAL_ETH_MspInit+0x188>)
 8000c2a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c32:	60bb      	str	r3, [r7, #8]
 8000c34:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000c36:	2332      	movs	r3, #50	; 0x32
 8000c38:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c3a:	2302      	movs	r3, #2
 8000c3c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c42:	2300      	movs	r3, #0
 8000c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c46:	230b      	movs	r3, #11
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c4a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c4e:	4619      	mov	r1, r3
 8000c50:	481e      	ldr	r0, [pc, #120]	; (8000ccc <HAL_ETH_MspInit+0x18c>)
 8000c52:	f000 ff6b 	bl	8001b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000c56:	2386      	movs	r3, #134	; 0x86
 8000c58:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5a:	2302      	movs	r3, #2
 8000c5c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c62:	2300      	movs	r3, #0
 8000c64:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c66:	230b      	movs	r3, #11
 8000c68:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c6e:	4619      	mov	r1, r3
 8000c70:	4817      	ldr	r0, [pc, #92]	; (8000cd0 <HAL_ETH_MspInit+0x190>)
 8000c72:	f000 ff5b 	bl	8001b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000c76:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c80:	2300      	movs	r3, #0
 8000c82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c84:	2300      	movs	r3, #0
 8000c86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000c88:	230b      	movs	r3, #11
 8000c8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c90:	4619      	mov	r1, r3
 8000c92:	4810      	ldr	r0, [pc, #64]	; (8000cd4 <HAL_ETH_MspInit+0x194>)
 8000c94:	f000 ff4a 	bl	8001b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8000c98:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000c9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c9e:	2302      	movs	r3, #2
 8000ca0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ca2:	2300      	movs	r3, #0
 8000ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ca6:	2300      	movs	r3, #0
 8000ca8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000caa:	230b      	movs	r3, #11
 8000cac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000cae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4808      	ldr	r0, [pc, #32]	; (8000cd8 <HAL_ETH_MspInit+0x198>)
 8000cb6:	f000 ff39 	bl	8001b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8000cba:	bf00      	nop
 8000cbc:	3738      	adds	r7, #56	; 0x38
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop
 8000cc4:	40028000 	.word	0x40028000
 8000cc8:	58024400 	.word	0x58024400
 8000ccc:	58020800 	.word	0x58020800
 8000cd0:	58020000 	.word	0x58020000
 8000cd4:	58020400 	.word	0x58020400
 8000cd8:	58021800 	.word	0x58021800

08000cdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b0ba      	sub	sp, #232	; 0xe8
 8000ce0:	af00      	add	r7, sp, #0
 8000ce2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce4:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000ce8:	2200      	movs	r2, #0
 8000cea:	601a      	str	r2, [r3, #0]
 8000cec:	605a      	str	r2, [r3, #4]
 8000cee:	609a      	str	r2, [r3, #8]
 8000cf0:	60da      	str	r2, [r3, #12]
 8000cf2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cf4:	f107 0310 	add.w	r3, r7, #16
 8000cf8:	22c0      	movs	r2, #192	; 0xc0
 8000cfa:	2100      	movs	r1, #0
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f005 fc82 	bl	8006606 <memset>
  if(huart->Instance==USART3)
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	4a27      	ldr	r2, [pc, #156]	; (8000da4 <HAL_UART_MspInit+0xc8>)
 8000d08:	4293      	cmp	r3, r2
 8000d0a:	d146      	bne.n	8000d9a <HAL_UART_MspInit+0xbe>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000d0c:	f04f 0202 	mov.w	r2, #2
 8000d10:	f04f 0300 	mov.w	r3, #0
 8000d14:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000d18:	2300      	movs	r3, #0
 8000d1a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d1e:	f107 0310 	add.w	r3, r7, #16
 8000d22:	4618      	mov	r0, r3
 8000d24:	f002 fa60 	bl	80031e8 <HAL_RCCEx_PeriphCLKConfig>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	d001      	beq.n	8000d32 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d2e:	f7ff fee7 	bl	8000b00 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d32:	4b1d      	ldr	r3, [pc, #116]	; (8000da8 <HAL_UART_MspInit+0xcc>)
 8000d34:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d38:	4a1b      	ldr	r2, [pc, #108]	; (8000da8 <HAL_UART_MspInit+0xcc>)
 8000d3a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d3e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000d42:	4b19      	ldr	r3, [pc, #100]	; (8000da8 <HAL_UART_MspInit+0xcc>)
 8000d44:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000d48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d4c:	60fb      	str	r3, [r7, #12]
 8000d4e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d50:	4b15      	ldr	r3, [pc, #84]	; (8000da8 <HAL_UART_MspInit+0xcc>)
 8000d52:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d56:	4a14      	ldr	r2, [pc, #80]	; (8000da8 <HAL_UART_MspInit+0xcc>)
 8000d58:	f043 0308 	orr.w	r3, r3, #8
 8000d5c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d60:	4b11      	ldr	r3, [pc, #68]	; (8000da8 <HAL_UART_MspInit+0xcc>)
 8000d62:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d66:	f003 0308 	and.w	r3, r3, #8
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000d6e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d72:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d76:	2302      	movs	r3, #2
 8000d78:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7c:	2300      	movs	r3, #0
 8000d7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d88:	2307      	movs	r3, #7
 8000d8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d8e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000d92:	4619      	mov	r1, r3
 8000d94:	4805      	ldr	r0, [pc, #20]	; (8000dac <HAL_UART_MspInit+0xd0>)
 8000d96:	f000 fec9 	bl	8001b2c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000d9a:	bf00      	nop
 8000d9c:	37e8      	adds	r7, #232	; 0xe8
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
 8000da2:	bf00      	nop
 8000da4:	40004800 	.word	0x40004800
 8000da8:	58024400 	.word	0x58024400
 8000dac:	58020c00 	.word	0x58020c00

08000db0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b0ba      	sub	sp, #232	; 0xe8
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db8:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
 8000dc0:	605a      	str	r2, [r3, #4]
 8000dc2:	609a      	str	r2, [r3, #8]
 8000dc4:	60da      	str	r2, [r3, #12]
 8000dc6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000dc8:	f107 0310 	add.w	r3, r7, #16
 8000dcc:	22c0      	movs	r2, #192	; 0xc0
 8000dce:	2100      	movs	r1, #0
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f005 fc18 	bl	8006606 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a30      	ldr	r2, [pc, #192]	; (8000e9c <HAL_PCD_MspInit+0xec>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d159      	bne.n	8000e94 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 8000de0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 8000dec:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000df0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000df4:	f107 0310 	add.w	r3, r7, #16
 8000df8:	4618      	mov	r0, r3
 8000dfa:	f002 f9f5 	bl	80031e8 <HAL_RCCEx_PeriphCLKConfig>
 8000dfe:	4603      	mov	r3, r0
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	d001      	beq.n	8000e08 <HAL_PCD_MspInit+0x58>
    {
      Error_Handler();
 8000e04:	f7ff fe7c 	bl	8000b00 <Error_Handler>
    }

  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 8000e08:	f001 f9f8 	bl	80021fc <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e0c:	4b24      	ldr	r3, [pc, #144]	; (8000ea0 <HAL_PCD_MspInit+0xf0>)
 8000e0e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e12:	4a23      	ldr	r2, [pc, #140]	; (8000ea0 <HAL_PCD_MspInit+0xf0>)
 8000e14:	f043 0301 	orr.w	r3, r3, #1
 8000e18:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000e1c:	4b20      	ldr	r3, [pc, #128]	; (8000ea0 <HAL_PCD_MspInit+0xf0>)
 8000e1e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000e22:	f003 0301 	and.w	r3, r3, #1
 8000e26:	60fb      	str	r3, [r7, #12]
 8000e28:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 8000e2a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8000e2e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e32:	2302      	movs	r3, #2
 8000e34:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e38:	2300      	movs	r3, #0
 8000e3a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e3e:	2300      	movs	r3, #0
 8000e40:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 8000e44:	230a      	movs	r3, #10
 8000e46:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4814      	ldr	r0, [pc, #80]	; (8000ea4 <HAL_PCD_MspInit+0xf4>)
 8000e52:	f000 fe6b 	bl	8001b2c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000e56:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e5a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e64:	2300      	movs	r3, #0
 8000e66:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000e6e:	4619      	mov	r1, r3
 8000e70:	480c      	ldr	r0, [pc, #48]	; (8000ea4 <HAL_PCD_MspInit+0xf4>)
 8000e72:	f000 fe5b 	bl	8001b2c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e76:	4b0a      	ldr	r3, [pc, #40]	; (8000ea0 <HAL_PCD_MspInit+0xf0>)
 8000e78:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e7c:	4a08      	ldr	r2, [pc, #32]	; (8000ea0 <HAL_PCD_MspInit+0xf0>)
 8000e7e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8000e82:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000e86:	4b06      	ldr	r3, [pc, #24]	; (8000ea0 <HAL_PCD_MspInit+0xf0>)
 8000e88:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000e8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e94:	bf00      	nop
 8000e96:	37e8      	adds	r7, #232	; 0xe8
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	40080000 	.word	0x40080000
 8000ea0:	58024400 	.word	0x58024400
 8000ea4:	58020000 	.word	0x58020000

08000ea8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eac:	e7fe      	b.n	8000eac <NMI_Handler+0x4>

08000eae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000eb2:	e7fe      	b.n	8000eb2 <HardFault_Handler+0x4>

08000eb4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000eb4:	b480      	push	{r7}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <MemManage_Handler+0x4>

08000eba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ebe:	e7fe      	b.n	8000ebe <BusFault_Handler+0x4>

08000ec0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ec4:	e7fe      	b.n	8000ec4 <UsageFault_Handler+0x4>

08000ec6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eca:	bf00      	nop
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ed8:	bf00      	nop
 8000eda:	46bd      	mov	sp, r7
 8000edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee0:	4770      	bx	lr

08000ee2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ee2:	b480      	push	{r7}
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ee6:	bf00      	nop
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr

08000ef0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ef4:	f000 f89e 	bl	8001034 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	bd80      	pop	{r7, pc}

08000efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f34 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f00:	f7ff fb68 	bl	80005d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480c      	ldr	r0, [pc, #48]	; (8000f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f06:	490d      	ldr	r1, [pc, #52]	; (8000f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f08:	4a0d      	ldr	r2, [pc, #52]	; (8000f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	; (8000f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	; (8000f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f005 fb75 	bl	8006618 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f2e:	f7ff fbe7 	bl	8000700 <main>
  bx  lr
 8000f32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f34:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f38:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f3c:	24000010 	.word	0x24000010
  ldr r2, =_sidata
 8000f40:	080066c0 	.word	0x080066c0
  ldr r2, =_sbss
 8000f44:	240000d0 	.word	0x240000d0
  ldr r4, =_ebss
 8000f48:	24000758 	.word	0x24000758

08000f4c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC3_IRQHandler>
	...

08000f50 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b082      	sub	sp, #8
 8000f54:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f000 f982 	bl	8001260 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f5c:	f001 ff6e 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8000f60:	4602      	mov	r2, r0
 8000f62:	4b15      	ldr	r3, [pc, #84]	; (8000fb8 <HAL_Init+0x68>)
 8000f64:	699b      	ldr	r3, [r3, #24]
 8000f66:	0a1b      	lsrs	r3, r3, #8
 8000f68:	f003 030f 	and.w	r3, r3, #15
 8000f6c:	4913      	ldr	r1, [pc, #76]	; (8000fbc <HAL_Init+0x6c>)
 8000f6e:	5ccb      	ldrb	r3, [r1, r3]
 8000f70:	f003 031f 	and.w	r3, r3, #31
 8000f74:	fa22 f303 	lsr.w	r3, r2, r3
 8000f78:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f7a:	4b0f      	ldr	r3, [pc, #60]	; (8000fb8 <HAL_Init+0x68>)
 8000f7c:	699b      	ldr	r3, [r3, #24]
 8000f7e:	f003 030f 	and.w	r3, r3, #15
 8000f82:	4a0e      	ldr	r2, [pc, #56]	; (8000fbc <HAL_Init+0x6c>)
 8000f84:	5cd3      	ldrb	r3, [r2, r3]
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	687a      	ldr	r2, [r7, #4]
 8000f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8000f90:	4a0b      	ldr	r2, [pc, #44]	; (8000fc0 <HAL_Init+0x70>)
 8000f92:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f94:	4a0b      	ldr	r2, [pc, #44]	; (8000fc4 <HAL_Init+0x74>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f9a:	2000      	movs	r0, #0
 8000f9c:	f000 f814 	bl	8000fc8 <HAL_InitTick>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	e002      	b.n	8000fb0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000faa:	f7ff fdaf 	bl	8000b0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3708      	adds	r7, #8
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	58024400 	.word	0x58024400
 8000fbc:	08006678 	.word	0x08006678
 8000fc0:	24000004 	.word	0x24000004
 8000fc4:	24000000 	.word	0x24000000

08000fc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000fd0:	4b15      	ldr	r3, [pc, #84]	; (8001028 <HAL_InitTick+0x60>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e021      	b.n	8001020 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000fdc:	4b13      	ldr	r3, [pc, #76]	; (800102c <HAL_InitTick+0x64>)
 8000fde:	681a      	ldr	r2, [r3, #0]
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <HAL_InitTick+0x60>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fea:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fee:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f000 f959 	bl	80012aa <HAL_SYSTICK_Config>
 8000ff8:	4603      	mov	r3, r0
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d001      	beq.n	8001002 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000ffe:	2301      	movs	r3, #1
 8001000:	e00e      	b.n	8001020 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	2b0f      	cmp	r3, #15
 8001006:	d80a      	bhi.n	800101e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001008:	2200      	movs	r2, #0
 800100a:	6879      	ldr	r1, [r7, #4]
 800100c:	f04f 30ff 	mov.w	r0, #4294967295
 8001010:	f000 f931 	bl	8001276 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001014:	4a06      	ldr	r2, [pc, #24]	; (8001030 <HAL_InitTick+0x68>)
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
 800101c:	e000      	b.n	8001020 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800101e:	2301      	movs	r3, #1
}
 8001020:	4618      	mov	r0, r3
 8001022:	3708      	adds	r7, #8
 8001024:	46bd      	mov	sp, r7
 8001026:	bd80      	pop	{r7, pc}
 8001028:	2400000c 	.word	0x2400000c
 800102c:	24000000 	.word	0x24000000
 8001030:	24000008 	.word	0x24000008

08001034 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <HAL_IncTick+0x20>)
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	461a      	mov	r2, r3
 800103e:	4b06      	ldr	r3, [pc, #24]	; (8001058 <HAL_IncTick+0x24>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	4413      	add	r3, r2
 8001044:	4a04      	ldr	r2, [pc, #16]	; (8001058 <HAL_IncTick+0x24>)
 8001046:	6013      	str	r3, [r2, #0]
}
 8001048:	bf00      	nop
 800104a:	46bd      	mov	sp, r7
 800104c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001050:	4770      	bx	lr
 8001052:	bf00      	nop
 8001054:	2400000c 	.word	0x2400000c
 8001058:	24000754 	.word	0x24000754

0800105c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800105c:	b480      	push	{r7}
 800105e:	af00      	add	r7, sp, #0
  return uwTick;
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <HAL_GetTick+0x14>)
 8001062:	681b      	ldr	r3, [r3, #0]
}
 8001064:	4618      	mov	r0, r3
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	24000754 	.word	0x24000754

08001074 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b084      	sub	sp, #16
 8001078:	af00      	add	r7, sp, #0
 800107a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800107c:	f7ff ffee 	bl	800105c <HAL_GetTick>
 8001080:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108c:	d005      	beq.n	800109a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800108e:	4b0a      	ldr	r3, [pc, #40]	; (80010b8 <HAL_Delay+0x44>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	461a      	mov	r2, r3
 8001094:	68fb      	ldr	r3, [r7, #12]
 8001096:	4413      	add	r3, r2
 8001098:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800109a:	bf00      	nop
 800109c:	f7ff ffde 	bl	800105c <HAL_GetTick>
 80010a0:	4602      	mov	r2, r0
 80010a2:	68bb      	ldr	r3, [r7, #8]
 80010a4:	1ad3      	subs	r3, r2, r3
 80010a6:	68fa      	ldr	r2, [r7, #12]
 80010a8:	429a      	cmp	r2, r3
 80010aa:	d8f7      	bhi.n	800109c <HAL_Delay+0x28>
  {
  }
}
 80010ac:	bf00      	nop
 80010ae:	bf00      	nop
 80010b0:	3710      	adds	r7, #16
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bd80      	pop	{r7, pc}
 80010b6:	bf00      	nop
 80010b8:	2400000c 	.word	0x2400000c

080010bc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010c0:	4b03      	ldr	r3, [pc, #12]	; (80010d0 <HAL_GetREVID+0x14>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	0c1b      	lsrs	r3, r3, #16
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr
 80010d0:	5c001000 	.word	0x5c001000

080010d4 <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b083      	sub	sp, #12
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 80010e4:	4904      	ldr	r1, [pc, #16]	; (80010f8 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	4313      	orrs	r3, r2
 80010ea:	604b      	str	r3, [r1, #4]
}
 80010ec:	bf00      	nop
 80010ee:	370c      	adds	r7, #12
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	58000400 	.word	0x58000400

080010fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b085      	sub	sp, #20
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	f003 0307 	and.w	r3, r3, #7
 800110a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800110c:	4b0b      	ldr	r3, [pc, #44]	; (800113c <__NVIC_SetPriorityGrouping+0x40>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001112:	68ba      	ldr	r2, [r7, #8]
 8001114:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001118:	4013      	ands	r3, r2
 800111a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001120:	68bb      	ldr	r3, [r7, #8]
 8001122:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001124:	4b06      	ldr	r3, [pc, #24]	; (8001140 <__NVIC_SetPriorityGrouping+0x44>)
 8001126:	4313      	orrs	r3, r2
 8001128:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800112a:	4a04      	ldr	r2, [pc, #16]	; (800113c <__NVIC_SetPriorityGrouping+0x40>)
 800112c:	68bb      	ldr	r3, [r7, #8]
 800112e:	60d3      	str	r3, [r2, #12]
}
 8001130:	bf00      	nop
 8001132:	3714      	adds	r7, #20
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	e000ed00 	.word	0xe000ed00
 8001140:	05fa0000 	.word	0x05fa0000

08001144 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001144:	b480      	push	{r7}
 8001146:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001148:	4b04      	ldr	r3, [pc, #16]	; (800115c <__NVIC_GetPriorityGrouping+0x18>)
 800114a:	68db      	ldr	r3, [r3, #12]
 800114c:	0a1b      	lsrs	r3, r3, #8
 800114e:	f003 0307 	and.w	r3, r3, #7
}
 8001152:	4618      	mov	r0, r3
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	88fb      	ldrh	r3, [r7, #6]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr
	...

0800121c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	3b01      	subs	r3, #1
 8001228:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800122c:	d301      	bcc.n	8001232 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800122e:	2301      	movs	r3, #1
 8001230:	e00f      	b.n	8001252 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001232:	4a0a      	ldr	r2, [pc, #40]	; (800125c <SysTick_Config+0x40>)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	3b01      	subs	r3, #1
 8001238:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800123a:	210f      	movs	r1, #15
 800123c:	f04f 30ff 	mov.w	r0, #4294967295
 8001240:	f7ff ff8e 	bl	8001160 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001244:	4b05      	ldr	r3, [pc, #20]	; (800125c <SysTick_Config+0x40>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800124a:	4b04      	ldr	r3, [pc, #16]	; (800125c <SysTick_Config+0x40>)
 800124c:	2207      	movs	r2, #7
 800124e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	e000e010 	.word	0xe000e010

08001260 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001268:	6878      	ldr	r0, [r7, #4]
 800126a:	f7ff ff47 	bl	80010fc <__NVIC_SetPriorityGrouping>
}
 800126e:	bf00      	nop
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b086      	sub	sp, #24
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	60b9      	str	r1, [r7, #8]
 8001280:	607a      	str	r2, [r7, #4]
 8001282:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001284:	f7ff ff5e 	bl	8001144 <__NVIC_GetPriorityGrouping>
 8001288:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800128a:	687a      	ldr	r2, [r7, #4]
 800128c:	68b9      	ldr	r1, [r7, #8]
 800128e:	6978      	ldr	r0, [r7, #20]
 8001290:	f7ff ff90 	bl	80011b4 <NVIC_EncodePriority>
 8001294:	4602      	mov	r2, r0
 8001296:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800129a:	4611      	mov	r1, r2
 800129c:	4618      	mov	r0, r3
 800129e:	f7ff ff5f 	bl	8001160 <__NVIC_SetPriority>
}
 80012a2:	bf00      	nop
 80012a4:	3718      	adds	r7, #24
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}

080012aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80012aa:	b580      	push	{r7, lr}
 80012ac:	b082      	sub	sp, #8
 80012ae:	af00      	add	r7, sp, #0
 80012b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f7ff ffb2 	bl	800121c <SysTick_Config>
 80012b8:	4603      	mov	r3, r0
}
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
	...

080012c4 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b084      	sub	sp, #16
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d101      	bne.n	80012d6 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80012d2:	2301      	movs	r3, #1
 80012d4:	e0e3      	b.n	800149e <HAL_ETH_Init+0x1da>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d106      	bne.n	80012ee <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2223      	movs	r2, #35	; 0x23
 80012e4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80012e8:	6878      	ldr	r0, [r7, #4]
 80012ea:	f7ff fc29 	bl	8000b40 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012ee:	4b6e      	ldr	r3, [pc, #440]	; (80014a8 <HAL_ETH_Init+0x1e4>)
 80012f0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80012f4:	4a6c      	ldr	r2, [pc, #432]	; (80014a8 <HAL_ETH_Init+0x1e4>)
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80012fe:	4b6a      	ldr	r3, [pc, #424]	; (80014a8 <HAL_ETH_Init+0x1e4>)
 8001300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]

  if (heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	7a1b      	ldrb	r3, [r3, #8]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d103      	bne.n	800131c <HAL_ETH_Init+0x58>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8001314:	2000      	movs	r0, #0
 8001316:	f7ff fedd 	bl	80010d4 <HAL_SYSCFG_ETHInterfaceSelect>
 800131a:	e003      	b.n	8001324 <HAL_ETH_Init+0x60>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800131c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8001320:	f7ff fed8 	bl	80010d4 <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Dummy read to sync with ETH */
  (void)SYSCFG->PMCR;
 8001324:	4b61      	ldr	r3, [pc, #388]	; (80014ac <HAL_ETH_Init+0x1e8>)
 8001326:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	687a      	ldr	r2, [r7, #4]
 8001334:	6812      	ldr	r2, [r2, #0]
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800133e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001340:	f7ff fe8c 	bl	800105c <HAL_GetTick>
 8001344:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 8001346:	e011      	b.n	800136c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001348:	f7ff fe88 	bl	800105c <HAL_GetTick>
 800134c:	4602      	mov	r2, r0
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	1ad3      	subs	r3, r2, r3
 8001352:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001356:	d909      	bls.n	800136c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2204      	movs	r2, #4
 800135c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	22e0      	movs	r2, #224	; 0xe0
 8001364:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	e098      	b.n	800149e <HAL_ETH_Init+0x1da>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f003 0301 	and.w	r3, r3, #1
 800137a:	2b00      	cmp	r3, #0
 800137c:	d1e4      	bne.n	8001348 <HAL_ETH_Init+0x84>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  HAL_ETH_SetMDIOClockRange(heth);
 800137e:	6878      	ldr	r0, [r7, #4]
 8001380:	f000 f89e 	bl	80014c0 <HAL_ETH_SetMDIOClockRange>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 8001384:	f001 fed4 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8001388:	4603      	mov	r3, r0
 800138a:	4a49      	ldr	r2, [pc, #292]	; (80014b0 <HAL_ETH_Init+0x1ec>)
 800138c:	fba2 2303 	umull	r2, r3, r2, r3
 8001390:	0c9a      	lsrs	r2, r3, #18
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	3a01      	subs	r2, #1
 8001398:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f000 fa81 	bl	80018a4 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013aa:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
 80013ae:	f423 13e0 	bic.w	r3, r3, #1835008	; 0x1c0000
 80013b2:	687a      	ldr	r2, [r7, #4]
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80013ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80013be:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	695b      	ldr	r3, [r3, #20]
 80013c6:	f003 0303 	and.w	r3, r3, #3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d009      	beq.n	80013e2 <HAL_ETH_Init+0x11e>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	2201      	movs	r2, #1
 80013d2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	22e0      	movs	r2, #224	; 0xe0
 80013da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    /* Return Error */
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e05d      	b.n	800149e <HAL_ETH_Init+0x1da>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80013ea:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 80013ee:	4b31      	ldr	r3, [pc, #196]	; (80014b4 <HAL_ETH_Init+0x1f0>)
 80013f0:	4013      	ands	r3, r2
 80013f2:	687a      	ldr	r2, [r7, #4]
 80013f4:	6952      	ldr	r2, [r2, #20]
 80013f6:	0051      	lsls	r1, r2, #1
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	6812      	ldr	r2, [r2, #0]
 80013fc:	430b      	orrs	r3, r1
 80013fe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001402:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f000 fae9 	bl	80019de <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800140c:	6878      	ldr	r0, [r7, #4]
 800140e:	f000 fb2f 	bl	8001a70 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	3305      	adds	r3, #5
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	021a      	lsls	r2, r3, #8
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	685b      	ldr	r3, [r3, #4]
 8001420:	3304      	adds	r3, #4
 8001422:	781b      	ldrb	r3, [r3, #0]
 8001424:	4619      	mov	r1, r3
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	430a      	orrs	r2, r1
 800142c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	3303      	adds	r3, #3
 8001436:	781b      	ldrb	r3, [r3, #0]
 8001438:	061a      	lsls	r2, r3, #24
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	3302      	adds	r3, #2
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	041b      	lsls	r3, r3, #16
 8001444:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	3301      	adds	r3, #1
 800144c:	781b      	ldrb	r3, [r3, #0]
 800144e:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001450:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	685b      	ldr	r3, [r3, #4]
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 800145e:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 8001460:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RXLPITRCIM | ETH_MMCRIMR_RXLPIUSCIM | \
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	f8d3 170c 	ldr.w	r1, [r3, #1804]	; 0x70c
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681a      	ldr	r2, [r3, #0]
 8001470:	4b11      	ldr	r3, [pc, #68]	; (80014b8 <HAL_ETH_Init+0x1f4>)
 8001472:	430b      	orrs	r3, r1
 8001474:	f8c2 370c 	str.w	r3, [r2, #1804]	; 0x70c
          ETH_MMCRIMR_RXUCGPIM | ETH_MMCRIMR_RXALGNERPIM | ETH_MMCRIMR_RXCRCERPIM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TXLPITRCIM | ETH_MMCTIMR_TXLPIUSCIM | \
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f8d3 1710 	ldr.w	r1, [r3, #1808]	; 0x710
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681a      	ldr	r2, [r3, #0]
 8001484:	4b0d      	ldr	r3, [pc, #52]	; (80014bc <HAL_ETH_Init+0x1f8>)
 8001486:	430b      	orrs	r3, r1
 8001488:	f8c2 3710 	str.w	r3, [r2, #1808]	; 0x710
          ETH_MMCTIMR_TXGPKTIM | ETH_MMCTIMR_TXMCOLGPIM | ETH_MMCTIMR_TXSCOLGPIM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	2200      	movs	r2, #0
 8001490:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	2210      	movs	r2, #16
 8001498:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800149c:	2300      	movs	r3, #0
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3710      	adds	r7, #16
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}
 80014a6:	bf00      	nop
 80014a8:	58024400 	.word	0x58024400
 80014ac:	58000400 	.word	0x58000400
 80014b0:	431bde83 	.word	0x431bde83
 80014b4:	ffff8001 	.word	0xffff8001
 80014b8:	0c020060 	.word	0x0c020060
 80014bc:	0c20c000 	.word	0x0c20c000

080014c0 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b084      	sub	sp, #16
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014d0:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80014d8:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 80014da:	f001 fe29 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 80014de:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 80014e0:	68bb      	ldr	r3, [r7, #8]
 80014e2:	4a1a      	ldr	r2, [pc, #104]	; (800154c <HAL_ETH_SetMDIOClockRange+0x8c>)
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d804      	bhi.n	80014f2 <HAL_ETH_SetMDIOClockRange+0x32>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80014ee:	60fb      	str	r3, [r7, #12]
 80014f0:	e022      	b.n	8001538 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 60000000U)
 80014f2:	68bb      	ldr	r3, [r7, #8]
 80014f4:	4a16      	ldr	r2, [pc, #88]	; (8001550 <HAL_ETH_SetMDIOClockRange+0x90>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d204      	bcs.n	8001504 <HAL_ETH_SetMDIOClockRange+0x44>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001500:	60fb      	str	r3, [r7, #12]
 8001502:	e019      	b.n	8001538 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 100000000U)
 8001504:	68bb      	ldr	r3, [r7, #8]
 8001506:	4a13      	ldr	r2, [pc, #76]	; (8001554 <HAL_ETH_SetMDIOClockRange+0x94>)
 8001508:	4293      	cmp	r3, r2
 800150a:	d915      	bls.n	8001538 <HAL_ETH_SetMDIOClockRange+0x78>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if (hclk < 150000000U)
 800150c:	68bb      	ldr	r3, [r7, #8]
 800150e:	4a12      	ldr	r2, [pc, #72]	; (8001558 <HAL_ETH_SetMDIOClockRange+0x98>)
 8001510:	4293      	cmp	r3, r2
 8001512:	d804      	bhi.n	800151e <HAL_ETH_SetMDIOClockRange+0x5e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800151a:	60fb      	str	r3, [r7, #12]
 800151c:	e00c      	b.n	8001538 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else if (hclk < 250000000U)
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	4a0e      	ldr	r2, [pc, #56]	; (800155c <HAL_ETH_SetMDIOClockRange+0x9c>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d804      	bhi.n	8001530 <HAL_ETH_SetMDIOClockRange+0x70>
  {
    /* CSR Clock Range between 150-250 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	e003      	b.n	8001538 <HAL_ETH_SetMDIOClockRange+0x78>
  }
  else /* (hclk >= 250000000U) */
  {
    /* CSR Clock >= 250 MHz */
    tmpreg |= (uint32_t)(ETH_MACMDIOAR_CR_DIV124);
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	f443 63a0 	orr.w	r3, r3, #1280	; 0x500
 8001536:	60fb      	str	r3, [r7, #12]
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	68fa      	ldr	r2, [r7, #12]
 800153e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8001542:	bf00      	nop
 8001544:	3710      	adds	r7, #16
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	02160ebf 	.word	0x02160ebf
 8001550:	03938700 	.word	0x03938700
 8001554:	05f5e0ff 	.word	0x05f5e0ff
 8001558:	08f0d17f 	.word	0x08f0d17f
 800155c:	0ee6b27f 	.word	0x0ee6b27f

08001560 <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8001560:	b480      	push	{r7}
 8001562:	b085      	sub	sp, #20
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval = (macconf->InterPacketGapVal |
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	689a      	ldr	r2, [r3, #8]
               macconf->SourceAddrControl |
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
  macregval = (macconf->InterPacketGapVal |
 8001572:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	791b      	ldrb	r3, [r3, #4]
 8001578:	06db      	lsls	r3, r3, #27
               macconf->SourceAddrControl |
 800157a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	7b1b      	ldrb	r3, [r3, #12]
 8001580:	05db      	lsls	r3, r3, #23
               ((uint32_t)macconf->ChecksumOffload << 27) |
 8001582:	431a      	orrs	r2, r3
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001584:	683b      	ldr	r3, [r7, #0]
 8001586:	7b5b      	ldrb	r3, [r3, #13]
 8001588:	059b      	lsls	r3, r3, #22
               ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 800158a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	7b9b      	ldrb	r3, [r3, #14]
 8001590:	055b      	lsls	r3, r3, #21
               ((uint32_t)macconf->Support2KPacket  << 22) |
 8001592:	431a      	orrs	r2, r3
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	7bdb      	ldrb	r3, [r3, #15]
 8001598:	051b      	lsls	r3, r3, #20
               ((uint32_t)macconf->CRCStripTypePacket << 21) |
 800159a:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	7c12      	ldrb	r2, [r2, #16]
 80015a0:	2a00      	cmp	r2, #0
 80015a2:	d102      	bne.n	80015aa <ETH_SetMACConfig+0x4a>
 80015a4:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80015a8:	e000      	b.n	80015ac <ETH_SetMACConfig+0x4c>
 80015aa:	2200      	movs	r2, #0
               ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 80015ac:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80015ae:	683a      	ldr	r2, [r7, #0]
 80015b0:	7c52      	ldrb	r2, [r2, #17]
 80015b2:	2a00      	cmp	r2, #0
 80015b4:	d102      	bne.n	80015bc <ETH_SetMACConfig+0x5c>
 80015b6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ba:	e000      	b.n	80015be <ETH_SetMACConfig+0x5e>
 80015bc:	2200      	movs	r2, #0
               ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 80015be:	431a      	orrs	r2, r3
               ((uint32_t)macconf->JumboPacket << 16) |
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	7c9b      	ldrb	r3, [r3, #18]
 80015c4:	041b      	lsls	r3, r3, #16
               ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 80015c6:	431a      	orrs	r2, r3
               macconf->Speed |
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	695b      	ldr	r3, [r3, #20]
               ((uint32_t)macconf->JumboPacket << 16) |
 80015cc:	431a      	orrs	r2, r3
               macconf->DuplexMode |
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	699b      	ldr	r3, [r3, #24]
               macconf->Speed |
 80015d2:	431a      	orrs	r2, r3
               ((uint32_t)macconf->LoopbackMode << 12) |
 80015d4:	683b      	ldr	r3, [r7, #0]
 80015d6:	7f1b      	ldrb	r3, [r3, #28]
 80015d8:	031b      	lsls	r3, r3, #12
               macconf->DuplexMode |
 80015da:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	7f5b      	ldrb	r3, [r3, #29]
 80015e0:	02db      	lsls	r3, r3, #11
               ((uint32_t)macconf->LoopbackMode << 12) |
 80015e2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80015e4:	683a      	ldr	r2, [r7, #0]
 80015e6:	7f92      	ldrb	r2, [r2, #30]
 80015e8:	2a00      	cmp	r2, #0
 80015ea:	d102      	bne.n	80015f2 <ETH_SetMACConfig+0x92>
 80015ec:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015f0:	e000      	b.n	80015f4 <ETH_SetMACConfig+0x94>
 80015f2:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11) |
 80015f4:	431a      	orrs	r2, r3
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 80015f6:	683b      	ldr	r3, [r7, #0]
 80015f8:	7fdb      	ldrb	r3, [r3, #31]
 80015fa:	025b      	lsls	r3, r3, #9
               ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10) |
 80015fc:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001604:	2a00      	cmp	r2, #0
 8001606:	d102      	bne.n	800160e <ETH_SetMACConfig+0xae>
 8001608:	f44f 7280 	mov.w	r2, #256	; 0x100
 800160c:	e000      	b.n	8001610 <ETH_SetMACConfig+0xb0>
 800160e:	2200      	movs	r2, #0
               ((uint32_t)macconf->CarrierSenseDuringTransmit << 9) |
 8001610:	431a      	orrs	r2, r3
               macconf->BackOffLimit |
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	6a5b      	ldr	r3, [r3, #36]	; 0x24
               ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8) |
 8001616:	431a      	orrs	r2, r3
               ((uint32_t)macconf->DeferralCheck << 4) |
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800161e:	011b      	lsls	r3, r3, #4
               macconf->BackOffLimit |
 8001620:	431a      	orrs	r2, r3
               macconf->PreambleLength);
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval = (macconf->InterPacketGapVal |
 8001626:	4313      	orrs	r3, r2
 8001628:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	4b56      	ldr	r3, [pc, #344]	; (800178c <ETH_SetMACConfig+0x22c>)
 8001632:	4013      	ands	r3, r2
 8001634:	687a      	ldr	r2, [r7, #4]
 8001636:	6812      	ldr	r2, [r2, #0]
 8001638:	68f9      	ldr	r1, [r7, #12]
 800163a:	430b      	orrs	r3, r1
 800163c:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001642:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001644:	683b      	ldr	r3, [r7, #0]
 8001646:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800164a:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800164c:	431a      	orrs	r2, r3
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 800164e:	683b      	ldr	r3, [r7, #0]
 8001650:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001654:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24) |
 8001656:	431a      	orrs	r2, r3
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 800165e:	045b      	lsls	r3, r3, #17
               ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18) |
 8001660:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U) << 16) |
 8001662:	683a      	ldr	r2, [r7, #0]
 8001664:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8001668:	2a00      	cmp	r2, #0
 800166a:	d102      	bne.n	8001672 <ETH_SetMACConfig+0x112>
 800166c:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001670:	e000      	b.n	8001674 <ETH_SetMACConfig+0x114>
 8001672:	2200      	movs	r2, #0
               ((uint32_t)macconf->SlowProtocolDetect << 17) |
 8001674:	431a      	orrs	r2, r3
               macconf->GiantPacketSizeLimit);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25) |
 800167a:	4313      	orrs	r3, r2
 800167c:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	685a      	ldr	r2, [r3, #4]
 8001684:	4b42      	ldr	r3, [pc, #264]	; (8001790 <ETH_SetMACConfig+0x230>)
 8001686:	4013      	ands	r3, r2
 8001688:	687a      	ldr	r2, [r7, #4]
 800168a:	6812      	ldr	r2, [r2, #0]
 800168c:	68f9      	ldr	r1, [r7, #12]
 800168e:	430b      	orrs	r3, r1
 8001690:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001698:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800169e:	4313      	orrs	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	68da      	ldr	r2, [r3, #12]
 80016a8:	4b3a      	ldr	r3, [pc, #232]	; (8001794 <ETH_SetMACConfig+0x234>)
 80016aa:	4013      	ands	r3, r2
 80016ac:	687a      	ldr	r2, [r7, #4]
 80016ae:	6812      	ldr	r2, [r2, #0]
 80016b0:	68f9      	ldr	r1, [r7, #12]
 80016b2:	430b      	orrs	r3, r1
 80016b4:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 80016bc:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016c2:	4313      	orrs	r3, r2
               ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7) |
 80016c4:	683a      	ldr	r2, [r7, #0]
 80016c6:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80016ca:	2a00      	cmp	r2, #0
 80016cc:	d101      	bne.n	80016d2 <ETH_SetMACConfig+0x172>
 80016ce:	2280      	movs	r2, #128	; 0x80
 80016d0:	e000      	b.n	80016d4 <ETH_SetMACConfig+0x174>
 80016d2:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 80016d4:	431a      	orrs	r2, r3
               (macconf->PauseTime << 16));
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80016da:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 80016dc:	4313      	orrs	r3, r2
 80016de:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80016e6:	f64f 730d 	movw	r3, #65293	; 0xff0d
 80016ea:	4013      	ands	r3, r2
 80016ec:	687a      	ldr	r2, [r7, #4]
 80016ee:	6812      	ldr	r2, [r2, #0]
 80016f0:	68f9      	ldr	r1, [r7, #12]
 80016f2:	430b      	orrs	r3, r1
 80016f4:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80016f6:	683b      	ldr	r3, [r7, #0]
 80016f8:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 80016fc:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 8001704:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8001706:	4313      	orrs	r3, r2
 8001708:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001712:	f023 0103 	bic.w	r1, r3, #3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	68fa      	ldr	r2, [r7, #12]
 800171c:	430a      	orrs	r2, r1
 800171e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 800172a:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 800173c:	683b      	ldr	r3, [r7, #0]
 800173e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 8001740:	683a      	ldr	r2, [r7, #0]
 8001742:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 8001746:	2a00      	cmp	r2, #0
 8001748:	d101      	bne.n	800174e <ETH_SetMACConfig+0x1ee>
 800174a:	2240      	movs	r2, #64	; 0x40
 800174c:	e000      	b.n	8001750 <ETH_SetMACConfig+0x1f0>
 800174e:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 8001750:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 8001758:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 800175a:	431a      	orrs	r2, r3
               ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8001762:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8001764:	4313      	orrs	r3, r2
 8001766:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 8001770:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	68fa      	ldr	r2, [r7, #12]
 800177a:	430a      	orrs	r2, r1
 800177c:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 8001780:	bf00      	nop
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr
 800178c:	00048083 	.word	0x00048083
 8001790:	c0f88000 	.word	0xc0f88000
 8001794:	fffffef0 	.word	0xfffffef0

08001798 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8001798:	b480      	push	{r7}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
 80017a0:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017aa:	681a      	ldr	r2, [r3, #0]
 80017ac:	4b38      	ldr	r3, [pc, #224]	; (8001890 <ETH_SetDMAConfig+0xf8>)
 80017ae:	4013      	ands	r3, r2
 80017b0:	683a      	ldr	r2, [r7, #0]
 80017b2:	6811      	ldr	r1, [r2, #0]
 80017b4:	687a      	ldr	r2, [r7, #4]
 80017b6:	6812      	ldr	r2, [r2, #0]
 80017b8:	430b      	orrs	r3, r1
 80017ba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017be:	6013      	str	r3, [r2, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	791b      	ldrb	r3, [r3, #4]
 80017c4:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 80017c6:	683b      	ldr	r3, [r7, #0]
 80017c8:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80017ca:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	7b1b      	ldrb	r3, [r3, #12]
 80017d0:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 80017d2:	4313      	orrs	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	4b2c      	ldr	r3, [pc, #176]	; (8001894 <ETH_SetDMAConfig+0xfc>)
 80017e2:	4013      	ands	r3, r2
 80017e4:	687a      	ldr	r2, [r7, #4]
 80017e6:	6812      	ldr	r2, [r2, #0]
 80017e8:	68f9      	ldr	r1, [r7, #12]
 80017ea:	430b      	orrs	r3, r1
 80017ec:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80017f0:	6053      	str	r3, [r2, #4]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	7b5b      	ldrb	r3, [r3, #13]
 80017f6:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 80017fc:	4313      	orrs	r3, r2
 80017fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001808:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800180c:	4b22      	ldr	r3, [pc, #136]	; (8001898 <ETH_SetDMAConfig+0x100>)
 800180e:	4013      	ands	r3, r2
 8001810:	687a      	ldr	r2, [r7, #4]
 8001812:	6812      	ldr	r2, [r2, #0]
 8001814:	68f9      	ldr	r1, [r7, #12]
 8001816:	430b      	orrs	r3, r1
 8001818:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800181c:	f8c2 3100 	str.w	r3, [r2, #256]	; 0x100

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 8001820:	683b      	ldr	r3, [r7, #0]
 8001822:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4) |
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	7d1b      	ldrb	r3, [r3, #20]
 8001828:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 800182a:	431a      	orrs	r2, r3
               ((uint32_t)dmaconf->TCPSegmentation << 12));
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	7f5b      	ldrb	r3, [r3, #29]
 8001830:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 8001832:	4313      	orrs	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800183e:	f8d3 2104 	ldr.w	r2, [r3, #260]	; 0x104
 8001842:	4b16      	ldr	r3, [pc, #88]	; (800189c <ETH_SetDMAConfig+0x104>)
 8001844:	4013      	ands	r3, r2
 8001846:	687a      	ldr	r2, [r7, #4]
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	68f9      	ldr	r1, [r7, #12]
 800184c:	430b      	orrs	r3, r1
 800184e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001852:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001856:	683b      	ldr	r3, [r7, #0]
 8001858:	7f1b      	ldrb	r3, [r3, #28]
 800185a:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 8001860:	4313      	orrs	r3, r2
 8001862:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800186c:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
 8001870:	4b0b      	ldr	r3, [pc, #44]	; (80018a0 <ETH_SetDMAConfig+0x108>)
 8001872:	4013      	ands	r3, r2
 8001874:	687a      	ldr	r2, [r7, #4]
 8001876:	6812      	ldr	r2, [r2, #0]
 8001878:	68f9      	ldr	r1, [r7, #12]
 800187a:	430b      	orrs	r3, r1
 800187c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001880:	f8c2 3108 	str.w	r3, [r2, #264]	; 0x108
}
 8001884:	bf00      	nop
 8001886:	3714      	adds	r7, #20
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	ffff87fd 	.word	0xffff87fd
 8001894:	ffff2ffe 	.word	0xffff2ffe
 8001898:	fffec000 	.word	0xfffec000
 800189c:	ffc0efef 	.word	0xffc0efef
 80018a0:	7fc0ffff 	.word	0x7fc0ffff

080018a4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b0a4      	sub	sp, #144	; 0x90
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 80018ac:	2301      	movs	r3, #1
 80018ae:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80018b2:	2300      	movs	r3, #0
 80018b4:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 80018b6:	2300      	movs	r3, #0
 80018b8:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80018bc:	2300      	movs	r3, #0
 80018be:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 80018c2:	2301      	movs	r3, #1
 80018c4:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 80018c8:	2301      	movs	r3, #1
 80018ca:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80018ce:	2301      	movs	r3, #1
 80018d0:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 80018d4:	2300      	movs	r3, #0
 80018d6:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 80018da:	2301      	movs	r3, #1
 80018dc:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 80018e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80018e4:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 80018e6:	2300      	movs	r3, #0
 80018e8:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0U;
 80018ec:	2300      	movs	r3, #0
 80018ee:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 80018f0:	2300      	movs	r3, #0
 80018f2:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 80018f6:	2300      	movs	r3, #0
 80018f8:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618U;
 80018fc:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 8001900:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 8001902:	2300      	movs	r3, #0
 8001904:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 800190c:	2301      	movs	r3, #1
 800190e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 8001912:	2300      	movs	r3, #0
 8001914:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 8001918:	2300      	movs	r3, #0
 800191a:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 800191e:	2300      	movs	r3, #0
 8001920:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0U;
 8001922:	2300      	movs	r3, #0
 8001924:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 8001926:	2300      	movs	r3, #0
 8001928:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 800192a:	2300      	movs	r3, #0
 800192c:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 8001936:	2301      	movs	r3, #1
 8001938:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 800193c:	2320      	movs	r3, #32
 800193e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 8001942:	2301      	movs	r3, #1
 8001944:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 8001948:	2300      	movs	r3, #0
 800194a:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 800194e:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 8001952:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001954:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001958:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 800195a:	2300      	movs	r3, #0
 800195c:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 8001960:	2302      	movs	r3, #2
 8001962:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800196c:	2300      	movs	r3, #0
 800196e:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 8001972:	2300      	movs	r3, #0
 8001974:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8001978:	2301      	movs	r3, #1
 800197a:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800197e:	2300      	movs	r3, #0
 8001980:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 8001982:	2301      	movs	r3, #1
 8001984:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001988:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198c:	4619      	mov	r1, r3
 800198e:	6878      	ldr	r0, [r7, #4]
 8001990:	f7ff fde6 	bl	8001560 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001994:	2301      	movs	r3, #1
 8001996:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001998:	2301      	movs	r3, #1
 800199a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 800199c:	2300      	movs	r3, #0
 800199e:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 80019a0:	2300      	movs	r3, #0
 80019a2:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 80019a6:	2300      	movs	r3, #0
 80019a8:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 80019aa:	2300      	movs	r3, #0
 80019ac:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80019ae:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019b2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 80019b4:	2300      	movs	r3, #0
 80019b6:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80019b8:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80019bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 80019be:	2300      	movs	r3, #0
 80019c0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = ETH_SEGMENT_SIZE_DEFAULT;
 80019c4:	f44f 7306 	mov.w	r3, #536	; 0x218
 80019c8:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80019ca:	f107 0308 	add.w	r3, r7, #8
 80019ce:	4619      	mov	r1, r3
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f7ff fee1 	bl	8001798 <ETH_SetDMAConfig>
}
 80019d6:	bf00      	nop
 80019d8:	3790      	adds	r7, #144	; 0x90
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}

080019de <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80019de:	b480      	push	{r7}
 80019e0:	b085      	sub	sp, #20
 80019e2:	af00      	add	r7, sp, #0
 80019e4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80019e6:	2300      	movs	r3, #0
 80019e8:	60fb      	str	r3, [r7, #12]
 80019ea:	e01d      	b.n	8001a28 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	68d9      	ldr	r1, [r3, #12]
 80019f0:	68fa      	ldr	r2, [r7, #12]
 80019f2:	4613      	mov	r3, r2
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	4413      	add	r3, r2
 80019f8:	00db      	lsls	r3, r3, #3
 80019fa:	440b      	add	r3, r1
 80019fc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	2200      	movs	r2, #0
 8001a02:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8001a04:	68bb      	ldr	r3, [r7, #8]
 8001a06:	2200      	movs	r2, #0
 8001a08:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8001a0a:	68bb      	ldr	r3, [r7, #8]
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	2200      	movs	r2, #0
 8001a14:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8001a16:	68b9      	ldr	r1, [r7, #8]
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68fa      	ldr	r2, [r7, #12]
 8001a1c:	3206      	adds	r2, #6
 8001a1e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8001a22:	68fb      	ldr	r3, [r7, #12]
 8001a24:	3301      	adds	r3, #1
 8001a26:	60fb      	str	r3, [r7, #12]
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b03      	cmp	r3, #3
 8001a2c:	d9de      	bls.n	80019ec <ETH_DMATxDescListInit+0xe>

  }

  heth->TxDescList.CurTxDesc = 0;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2200      	movs	r2, #0
 8001a32:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT - 1U));
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	2303      	movs	r3, #3
 8001a40:	f8c2 312c 	str.w	r3, [r2, #300]	; 0x12c

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	68da      	ldr	r2, [r3, #12]
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a50:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	68da      	ldr	r2, [r3, #12]
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a60:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120
}
 8001a64:	bf00      	nop
 8001a66:	3714      	adds	r7, #20
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001a78:	2300      	movs	r3, #0
 8001a7a:	60fb      	str	r3, [r7, #12]
 8001a7c:	e023      	b.n	8001ac6 <ETH_DMARxDescListInit+0x56>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6919      	ldr	r1, [r3, #16]
 8001a82:	68fa      	ldr	r2, [r7, #12]
 8001a84:	4613      	mov	r3, r2
 8001a86:	005b      	lsls	r3, r3, #1
 8001a88:	4413      	add	r3, r2
 8001a8a:	00db      	lsls	r3, r3, #3
 8001a8c:	440b      	add	r3, r1
 8001a8e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	2200      	movs	r2, #0
 8001a94:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8001a96:	68bb      	ldr	r3, [r7, #8]
 8001a98:	2200      	movs	r2, #0
 8001a9a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8001a9c:	68bb      	ldr	r3, [r7, #8]
 8001a9e:	2200      	movs	r2, #0
 8001aa0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8001ab4:	68b9      	ldr	r1, [r7, #8]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	68fa      	ldr	r2, [r7, #12]
 8001aba:	3212      	adds	r2, #18
 8001abc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	60fb      	str	r3, [r7, #12]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	2b03      	cmp	r3, #3
 8001aca:	d9d8      	bls.n	8001a7e <ETH_DMARxDescListInit+0xe>

  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	2200      	movs	r2, #0
 8001adc:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1U)));
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001af2:	461a      	mov	r2, r3
 8001af4:	2303      	movs	r3, #3
 8001af6:	f8c2 3130 	str.w	r3, [r2, #304]	; 0x130

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	691a      	ldr	r2, [r3, #16]
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b06:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1U))));
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	691b      	ldr	r3, [r3, #16]
 8001b0e:	f103 0248 	add.w	r2, r3, #72	; 0x48
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b1a:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
}
 8001b1e:	bf00      	nop
 8001b20:	3714      	adds	r7, #20
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
	...

08001b2c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b089      	sub	sp, #36	; 0x24
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001b36:	2300      	movs	r3, #0
 8001b38:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8001b3a:	4b89      	ldr	r3, [pc, #548]	; (8001d60 <HAL_GPIO_Init+0x234>)
 8001b3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001b3e:	e194      	b.n	8001e6a <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	681a      	ldr	r2, [r3, #0]
 8001b44:	2101      	movs	r1, #1
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	4013      	ands	r3, r2
 8001b4e:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001b50:	693b      	ldr	r3, [r7, #16]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	f000 8186 	beq.w	8001e64 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d005      	beq.n	8001b70 <HAL_GPIO_Init+0x44>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d130      	bne.n	8001bd2 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68da      	ldr	r2, [r3, #12]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	69fb      	ldr	r3, [r7, #28]
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	091b      	lsrs	r3, r3, #4
 8001bbc:	f003 0201 	and.w	r2, r3, #1
 8001bc0:	69fb      	ldr	r3, [r7, #28]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	69ba      	ldr	r2, [r7, #24]
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	69ba      	ldr	r2, [r7, #24]
 8001bd0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
 8001bda:	2b03      	cmp	r3, #3
 8001bdc:	d017      	beq.n	8001c0e <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	68db      	ldr	r3, [r3, #12]
 8001be2:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	689a      	ldr	r2, [r3, #8]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d123      	bne.n	8001c62 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	08da      	lsrs	r2, r3, #3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	3208      	adds	r2, #8
 8001c22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c26:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8001c28:	69fb      	ldr	r3, [r7, #28]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	009b      	lsls	r3, r3, #2
 8001c30:	220f      	movs	r2, #15
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	691a      	ldr	r2, [r3, #16]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	f003 0307 	and.w	r3, r3, #7
 8001c48:	009b      	lsls	r3, r3, #2
 8001c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	08da      	lsrs	r2, r3, #3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	3208      	adds	r2, #8
 8001c5c:	69b9      	ldr	r1, [r7, #24]
 8001c5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	2203      	movs	r2, #3
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	43db      	mvns	r3, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4013      	ands	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c7a:	683b      	ldr	r3, [r7, #0]
 8001c7c:	685b      	ldr	r3, [r3, #4]
 8001c7e:	f003 0203 	and.w	r2, r3, #3
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	005b      	lsls	r3, r3, #1
 8001c86:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8a:	69ba      	ldr	r2, [r7, #24]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c96:	683b      	ldr	r3, [r7, #0]
 8001c98:	685b      	ldr	r3, [r3, #4]
 8001c9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	f000 80e0 	beq.w	8001e64 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca4:	4b2f      	ldr	r3, [pc, #188]	; (8001d64 <HAL_GPIO_Init+0x238>)
 8001ca6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001caa:	4a2e      	ldr	r2, [pc, #184]	; (8001d64 <HAL_GPIO_Init+0x238>)
 8001cac:	f043 0302 	orr.w	r3, r3, #2
 8001cb0:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8001cb4:	4b2b      	ldr	r3, [pc, #172]	; (8001d64 <HAL_GPIO_Init+0x238>)
 8001cb6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8001cba:	f003 0302 	and.w	r3, r3, #2
 8001cbe:	60fb      	str	r3, [r7, #12]
 8001cc0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001cc2:	4a29      	ldr	r2, [pc, #164]	; (8001d68 <HAL_GPIO_Init+0x23c>)
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	089b      	lsrs	r3, r3, #2
 8001cc8:	3302      	adds	r3, #2
 8001cca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f003 0303 	and.w	r3, r3, #3
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	220f      	movs	r2, #15
 8001cda:	fa02 f303 	lsl.w	r3, r2, r3
 8001cde:	43db      	mvns	r3, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	4a20      	ldr	r2, [pc, #128]	; (8001d6c <HAL_GPIO_Init+0x240>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d052      	beq.n	8001d94 <HAL_GPIO_Init+0x268>
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	4a1f      	ldr	r2, [pc, #124]	; (8001d70 <HAL_GPIO_Init+0x244>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d031      	beq.n	8001d5a <HAL_GPIO_Init+0x22e>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	4a1e      	ldr	r2, [pc, #120]	; (8001d74 <HAL_GPIO_Init+0x248>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d02b      	beq.n	8001d56 <HAL_GPIO_Init+0x22a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4a1d      	ldr	r2, [pc, #116]	; (8001d78 <HAL_GPIO_Init+0x24c>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d025      	beq.n	8001d52 <HAL_GPIO_Init+0x226>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	4a1c      	ldr	r2, [pc, #112]	; (8001d7c <HAL_GPIO_Init+0x250>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d01f      	beq.n	8001d4e <HAL_GPIO_Init+0x222>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	4a1b      	ldr	r2, [pc, #108]	; (8001d80 <HAL_GPIO_Init+0x254>)
 8001d12:	4293      	cmp	r3, r2
 8001d14:	d019      	beq.n	8001d4a <HAL_GPIO_Init+0x21e>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a1a      	ldr	r2, [pc, #104]	; (8001d84 <HAL_GPIO_Init+0x258>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d013      	beq.n	8001d46 <HAL_GPIO_Init+0x21a>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a19      	ldr	r2, [pc, #100]	; (8001d88 <HAL_GPIO_Init+0x25c>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d00d      	beq.n	8001d42 <HAL_GPIO_Init+0x216>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a18      	ldr	r2, [pc, #96]	; (8001d8c <HAL_GPIO_Init+0x260>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d007      	beq.n	8001d3e <HAL_GPIO_Init+0x212>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a17      	ldr	r2, [pc, #92]	; (8001d90 <HAL_GPIO_Init+0x264>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d101      	bne.n	8001d3a <HAL_GPIO_Init+0x20e>
 8001d36:	2309      	movs	r3, #9
 8001d38:	e02d      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d3a:	230a      	movs	r3, #10
 8001d3c:	e02b      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d3e:	2308      	movs	r3, #8
 8001d40:	e029      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d42:	2307      	movs	r3, #7
 8001d44:	e027      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d46:	2306      	movs	r3, #6
 8001d48:	e025      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	e023      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d4e:	2304      	movs	r3, #4
 8001d50:	e021      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d52:	2303      	movs	r3, #3
 8001d54:	e01f      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e01d      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e01b      	b.n	8001d96 <HAL_GPIO_Init+0x26a>
 8001d5e:	bf00      	nop
 8001d60:	58000080 	.word	0x58000080
 8001d64:	58024400 	.word	0x58024400
 8001d68:	58000400 	.word	0x58000400
 8001d6c:	58020000 	.word	0x58020000
 8001d70:	58020400 	.word	0x58020400
 8001d74:	58020800 	.word	0x58020800
 8001d78:	58020c00 	.word	0x58020c00
 8001d7c:	58021000 	.word	0x58021000
 8001d80:	58021400 	.word	0x58021400
 8001d84:	58021800 	.word	0x58021800
 8001d88:	58021c00 	.word	0x58021c00
 8001d8c:	58022000 	.word	0x58022000
 8001d90:	58022400 	.word	0x58022400
 8001d94:	2300      	movs	r3, #0
 8001d96:	69fa      	ldr	r2, [r7, #28]
 8001d98:	f002 0203 	and.w	r2, r2, #3
 8001d9c:	0092      	lsls	r2, r2, #2
 8001d9e:	4093      	lsls	r3, r2
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	4313      	orrs	r3, r2
 8001da4:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001da6:	4938      	ldr	r1, [pc, #224]	; (8001e88 <HAL_GPIO_Init+0x35c>)
 8001da8:	69fb      	ldr	r3, [r7, #28]
 8001daa:	089b      	lsrs	r3, r3, #2
 8001dac:	3302      	adds	r3, #2
 8001dae:	69ba      	ldr	r2, [r7, #24]
 8001db0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001db4:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dbc:	693b      	ldr	r3, [r7, #16]
 8001dbe:	43db      	mvns	r3, r3
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d003      	beq.n	8001dda <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8001dd2:	69ba      	ldr	r2, [r7, #24]
 8001dd4:	693b      	ldr	r3, [r7, #16]
 8001dd6:	4313      	orrs	r3, r2
 8001dd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8001dda:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001de2:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001dea:	693b      	ldr	r3, [r7, #16]
 8001dec:	43db      	mvns	r3, r3
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	4013      	ands	r3, r2
 8001df2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8001e08:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8001e0c:	69bb      	ldr	r3, [r7, #24]
 8001e0e:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001e10:	697b      	ldr	r3, [r7, #20]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e16:	693b      	ldr	r3, [r7, #16]
 8001e18:	43db      	mvns	r3, r3
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d003      	beq.n	8001e34 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001e2c:	69ba      	ldr	r2, [r7, #24]
 8001e2e:	693b      	ldr	r3, [r7, #16]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8001e3a:	697b      	ldr	r3, [r7, #20]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001e40:	693b      	ldr	r3, [r7, #16]
 8001e42:	43db      	mvns	r3, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4013      	ands	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e4a:	683b      	ldr	r3, [r7, #0]
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8001e56:	69ba      	ldr	r2, [r7, #24]
 8001e58:	693b      	ldr	r3, [r7, #16]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	3301      	adds	r3, #1
 8001e68:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	fa22 f303 	lsr.w	r3, r2, r3
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f47f ae63 	bne.w	8001b40 <HAL_GPIO_Init+0x14>
  }
}
 8001e7a:	bf00      	nop
 8001e7c:	bf00      	nop
 8001e7e:	3724      	adds	r7, #36	; 0x24
 8001e80:	46bd      	mov	sp, r7
 8001e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e86:	4770      	bx	lr
 8001e88:	58000400 	.word	0x58000400

08001e8c <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8001e94:	4a08      	ldr	r2, [pc, #32]	; (8001eb8 <HAL_HSEM_FastTake+0x2c>)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	3320      	adds	r3, #32
 8001e9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9e:	4a07      	ldr	r2, [pc, #28]	; (8001ebc <HAL_HSEM_FastTake+0x30>)
 8001ea0:	4293      	cmp	r3, r2
 8001ea2:	d101      	bne.n	8001ea8 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	e000      	b.n	8001eaa <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
}
 8001eaa:	4618      	mov	r0, r3
 8001eac:	370c      	adds	r7, #12
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	58026400 	.word	0x58026400
 8001ebc:	80000300 	.word	0x80000300

08001ec0 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8001ec0:	b480      	push	{r7}
 8001ec2:	b083      	sub	sp, #12
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8001eca:	4906      	ldr	r1, [pc, #24]	; (8001ee4 <HAL_HSEM_Release+0x24>)
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8001ed8:	bf00      	nop
 8001eda:	370c      	adds	r7, #12
 8001edc:	46bd      	mov	sp, r7
 8001ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee2:	4770      	bx	lr
 8001ee4:	58026400 	.word	0x58026400

08001ee8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b086      	sub	sp, #24
 8001eec:	af02      	add	r7, sp, #8
 8001eee:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d101      	bne.n	8001efa <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e0fe      	b.n	80020f8 <HAL_PCD_Init+0x210>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	f893 3495 	ldrb.w	r3, [r3, #1173]	; 0x495
 8001f00:	b2db      	uxtb	r3, r3
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d106      	bne.n	8001f14 <HAL_PCD_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2494 	strb.w	r2, [r3, #1172]	; 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	f7fe ff4e 	bl	8000db0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2203      	movs	r2, #3
 8001f18:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4618      	mov	r0, r3
 8001f22:	f004 f8db 	bl	80060dc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	6818      	ldr	r0, [r3, #0]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7c1a      	ldrb	r2, [r3, #16]
 8001f2e:	f88d 2000 	strb.w	r2, [sp]
 8001f32:	3304      	adds	r3, #4
 8001f34:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f36:	f004 f85f 	bl	8005ff8 <USB_CoreInit>
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d005      	beq.n	8001f4c <HAL_PCD_Init+0x64>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001f48:	2301      	movs	r3, #1
 8001f4a:	e0d5      	b.n	80020f8 <HAL_PCD_Init+0x210>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	2100      	movs	r1, #0
 8001f52:	4618      	mov	r0, r3
 8001f54:	f004 f8d3 	bl	80060fe <USB_SetCurrentMode>
 8001f58:	4603      	mov	r3, r0
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d005      	beq.n	8001f6a <HAL_PCD_Init+0x82>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2202      	movs	r2, #2
 8001f62:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 8001f66:	2301      	movs	r3, #1
 8001f68:	e0c6      	b.n	80020f8 <HAL_PCD_Init+0x210>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	73fb      	strb	r3, [r7, #15]
 8001f6e:	e04a      	b.n	8002006 <HAL_PCD_Init+0x11e>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001f70:	7bfa      	ldrb	r2, [r7, #15]
 8001f72:	6879      	ldr	r1, [r7, #4]
 8001f74:	4613      	mov	r3, r2
 8001f76:	00db      	lsls	r3, r3, #3
 8001f78:	4413      	add	r3, r2
 8001f7a:	009b      	lsls	r3, r3, #2
 8001f7c:	440b      	add	r3, r1
 8001f7e:	3315      	adds	r3, #21
 8001f80:	2201      	movs	r2, #1
 8001f82:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001f84:	7bfa      	ldrb	r2, [r7, #15]
 8001f86:	6879      	ldr	r1, [r7, #4]
 8001f88:	4613      	mov	r3, r2
 8001f8a:	00db      	lsls	r3, r3, #3
 8001f8c:	4413      	add	r3, r2
 8001f8e:	009b      	lsls	r3, r3, #2
 8001f90:	440b      	add	r3, r1
 8001f92:	3314      	adds	r3, #20
 8001f94:	7bfa      	ldrb	r2, [r7, #15]
 8001f96:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001f98:	7bfa      	ldrb	r2, [r7, #15]
 8001f9a:	7bfb      	ldrb	r3, [r7, #15]
 8001f9c:	b298      	uxth	r0, r3
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	00db      	lsls	r3, r3, #3
 8001fa4:	4413      	add	r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	332e      	adds	r3, #46	; 0x2e
 8001fac:	4602      	mov	r2, r0
 8001fae:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fb0:	7bfa      	ldrb	r2, [r7, #15]
 8001fb2:	6879      	ldr	r1, [r7, #4]
 8001fb4:	4613      	mov	r3, r2
 8001fb6:	00db      	lsls	r3, r3, #3
 8001fb8:	4413      	add	r3, r2
 8001fba:	009b      	lsls	r3, r3, #2
 8001fbc:	440b      	add	r3, r1
 8001fbe:	3318      	adds	r3, #24
 8001fc0:	2200      	movs	r2, #0
 8001fc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001fc4:	7bfa      	ldrb	r2, [r7, #15]
 8001fc6:	6879      	ldr	r1, [r7, #4]
 8001fc8:	4613      	mov	r3, r2
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4413      	add	r3, r2
 8001fce:	009b      	lsls	r3, r3, #2
 8001fd0:	440b      	add	r3, r1
 8001fd2:	331c      	adds	r3, #28
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001fd8:	7bfa      	ldrb	r2, [r7, #15]
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	4413      	add	r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3320      	adds	r3, #32
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	4413      	add	r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	3324      	adds	r3, #36	; 0x24
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002000:	7bfb      	ldrb	r3, [r7, #15]
 8002002:	3301      	adds	r3, #1
 8002004:	73fb      	strb	r3, [r7, #15]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	791b      	ldrb	r3, [r3, #4]
 800200a:	7bfa      	ldrb	r2, [r7, #15]
 800200c:	429a      	cmp	r2, r3
 800200e:	d3af      	bcc.n	8001f70 <HAL_PCD_Init+0x88>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e044      	b.n	80020a0 <HAL_PCD_Init+0x1b8>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	f203 2355 	addw	r3, r3, #597	; 0x255
 8002028:	2200      	movs	r2, #0
 800202a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800202c:	7bfa      	ldrb	r2, [r7, #15]
 800202e:	6879      	ldr	r1, [r7, #4]
 8002030:	4613      	mov	r3, r2
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4413      	add	r3, r2
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	440b      	add	r3, r1
 800203a:	f503 7315 	add.w	r3, r3, #596	; 0x254
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	f503 7316 	add.w	r3, r3, #600	; 0x258
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002058:	7bfa      	ldrb	r2, [r7, #15]
 800205a:	6879      	ldr	r1, [r7, #4]
 800205c:	4613      	mov	r3, r2
 800205e:	00db      	lsls	r3, r3, #3
 8002060:	4413      	add	r3, r2
 8002062:	009b      	lsls	r3, r3, #2
 8002064:	440b      	add	r3, r1
 8002066:	f503 7317 	add.w	r3, r3, #604	; 0x25c
 800206a:	2200      	movs	r2, #0
 800206c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800206e:	7bfa      	ldrb	r2, [r7, #15]
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	4613      	mov	r3, r2
 8002074:	00db      	lsls	r3, r3, #3
 8002076:	4413      	add	r3, r2
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	440b      	add	r3, r1
 800207c:	f503 7318 	add.w	r3, r3, #608	; 0x260
 8002080:	2200      	movs	r2, #0
 8002082:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002084:	7bfa      	ldrb	r2, [r7, #15]
 8002086:	6879      	ldr	r1, [r7, #4]
 8002088:	4613      	mov	r3, r2
 800208a:	00db      	lsls	r3, r3, #3
 800208c:	4413      	add	r3, r2
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	440b      	add	r3, r1
 8002092:	f503 7319 	add.w	r3, r3, #612	; 0x264
 8002096:	2200      	movs	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800209a:	7bfb      	ldrb	r3, [r7, #15]
 800209c:	3301      	adds	r3, #1
 800209e:	73fb      	strb	r3, [r7, #15]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	791b      	ldrb	r3, [r3, #4]
 80020a4:	7bfa      	ldrb	r2, [r7, #15]
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d3b5      	bcc.n	8002016 <HAL_PCD_Init+0x12e>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6818      	ldr	r0, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	7c1a      	ldrb	r2, [r3, #16]
 80020b2:	f88d 2000 	strb.w	r2, [sp]
 80020b6:	3304      	adds	r3, #4
 80020b8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80020ba:	f004 f86d 	bl	8006198 <USB_DevInit>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d005      	beq.n	80020d0 <HAL_PCD_Init+0x1e8>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2202      	movs	r2, #2
 80020c8:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495
    return HAL_ERROR;
 80020cc:	2301      	movs	r3, #1
 80020ce:	e013      	b.n	80020f8 <HAL_PCD_Init+0x210>
  }

  hpcd->USB_Address = 0U;
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	2200      	movs	r2, #0
 80020d4:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	2201      	movs	r2, #1
 80020da:	f883 2495 	strb.w	r2, [r3, #1173]	; 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	7b1b      	ldrb	r3, [r3, #12]
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d102      	bne.n	80020ec <HAL_PCD_Init+0x204>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f000 f80a 	bl	8002100 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	4618      	mov	r0, r3
 80020f2:	f004 fa28 	bl	8006546 <USB_DevDisconnect>

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3710      	adds	r7, #16
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	2201      	movs	r2, #1
 8002112:	f8c3 24d8 	str.w	r2, [r3, #1240]	; 0x4d8
  hpcd->LPM_State = LPM_L0;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	2200      	movs	r2, #0
 800211a:	f883 24cc 	strb.w	r2, [r3, #1228]	; 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800212e:	4b05      	ldr	r3, [pc, #20]	; (8002144 <HAL_PCDEx_ActivateLPM+0x44>)
 8002130:	4313      	orrs	r3, r2
 8002132:	68fa      	ldr	r2, [r7, #12]
 8002134:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002136:	2300      	movs	r3, #0
}
 8002138:	4618      	mov	r0, r3
 800213a:	3714      	adds	r7, #20
 800213c:	46bd      	mov	sp, r7
 800213e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002142:	4770      	bx	lr
 8002144:	10000003 	.word	0x10000003

08002148 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b084      	sub	sp, #16
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002150:	4b29      	ldr	r3, [pc, #164]	; (80021f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002152:	68db      	ldr	r3, [r3, #12]
 8002154:	f003 0307 	and.w	r3, r3, #7
 8002158:	2b06      	cmp	r3, #6
 800215a:	d00a      	beq.n	8002172 <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800215c:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800215e:	68db      	ldr	r3, [r3, #12]
 8002160:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002164:	687a      	ldr	r2, [r7, #4]
 8002166:	429a      	cmp	r2, r3
 8002168:	d001      	beq.n	800216e <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	e040      	b.n	80021f0 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 800216e:	2300      	movs	r3, #0
 8002170:	e03e      	b.n	80021f0 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002172:	4b21      	ldr	r3, [pc, #132]	; (80021f8 <HAL_PWREx_ConfigSupply+0xb0>)
 8002174:	68db      	ldr	r3, [r3, #12]
 8002176:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 800217a:	491f      	ldr	r1, [pc, #124]	; (80021f8 <HAL_PWREx_ConfigSupply+0xb0>)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	4313      	orrs	r3, r2
 8002180:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002182:	f7fe ff6b 	bl	800105c <HAL_GetTick>
 8002186:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002188:	e009      	b.n	800219e <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800218a:	f7fe ff67 	bl	800105c <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002198:	d901      	bls.n	800219e <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	e028      	b.n	80021f0 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800219e:	4b16      	ldr	r3, [pc, #88]	; (80021f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80021aa:	d1ee      	bne.n	800218a <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2b1e      	cmp	r3, #30
 80021b0:	d008      	beq.n	80021c4 <HAL_PWREx_ConfigSupply+0x7c>
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2b2e      	cmp	r3, #46	; 0x2e
 80021b6:	d005      	beq.n	80021c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	2b1d      	cmp	r3, #29
 80021bc:	d002      	beq.n	80021c4 <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	2b2d      	cmp	r3, #45	; 0x2d
 80021c2:	d114      	bne.n	80021ee <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 80021c4:	f7fe ff4a 	bl	800105c <HAL_GetTick>
 80021c8:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80021ca:	e009      	b.n	80021e0 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80021cc:	f7fe ff46 	bl	800105c <HAL_GetTick>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	1ad3      	subs	r3, r2, r3
 80021d6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80021da:	d901      	bls.n	80021e0 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	e007      	b.n	80021f0 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 80021e0:	4b05      	ldr	r3, [pc, #20]	; (80021f8 <HAL_PWREx_ConfigSupply+0xb0>)
 80021e2:	68db      	ldr	r3, [r3, #12]
 80021e4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ec:	d1ee      	bne.n	80021cc <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}
 80021f8:	58024800 	.word	0x58024800

080021fc <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002200:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	4a04      	ldr	r2, [pc, #16]	; (8002218 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002206:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800220a:	60d3      	str	r3, [r2, #12]
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	58024800 	.word	0x58024800

0800221c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b08c      	sub	sp, #48	; 0x30
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d102      	bne.n	8002230 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800222a:	2301      	movs	r3, #1
 800222c:	f000 bc48 	b.w	8002ac0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f003 0301 	and.w	r3, r3, #1
 8002238:	2b00      	cmp	r3, #0
 800223a:	f000 8088 	beq.w	800234e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800223e:	4b99      	ldr	r3, [pc, #612]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 8002240:	691b      	ldr	r3, [r3, #16]
 8002242:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002246:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002248:	4b96      	ldr	r3, [pc, #600]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	2b10      	cmp	r3, #16
 8002252:	d007      	beq.n	8002264 <HAL_RCC_OscConfig+0x48>
 8002254:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002256:	2b18      	cmp	r3, #24
 8002258:	d111      	bne.n	800227e <HAL_RCC_OscConfig+0x62>
 800225a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	2b02      	cmp	r3, #2
 8002262:	d10c      	bne.n	800227e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002264:	4b8f      	ldr	r3, [pc, #572]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800226c:	2b00      	cmp	r3, #0
 800226e:	d06d      	beq.n	800234c <HAL_RCC_OscConfig+0x130>
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	685b      	ldr	r3, [r3, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d169      	bne.n	800234c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	f000 bc21 	b.w	8002ac0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	685b      	ldr	r3, [r3, #4]
 8002282:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002286:	d106      	bne.n	8002296 <HAL_RCC_OscConfig+0x7a>
 8002288:	4b86      	ldr	r3, [pc, #536]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a85      	ldr	r2, [pc, #532]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 800228e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002292:	6013      	str	r3, [r2, #0]
 8002294:	e02e      	b.n	80022f4 <HAL_RCC_OscConfig+0xd8>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d10c      	bne.n	80022b8 <HAL_RCC_OscConfig+0x9c>
 800229e:	4b81      	ldr	r3, [pc, #516]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4a80      	ldr	r2, [pc, #512]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80022a4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a8:	6013      	str	r3, [r2, #0]
 80022aa:	4b7e      	ldr	r3, [pc, #504]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	4a7d      	ldr	r2, [pc, #500]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80022b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b4:	6013      	str	r3, [r2, #0]
 80022b6:	e01d      	b.n	80022f4 <HAL_RCC_OscConfig+0xd8>
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	685b      	ldr	r3, [r3, #4]
 80022bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022c0:	d10c      	bne.n	80022dc <HAL_RCC_OscConfig+0xc0>
 80022c2:	4b78      	ldr	r3, [pc, #480]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	4a77      	ldr	r2, [pc, #476]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80022c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022cc:	6013      	str	r3, [r2, #0]
 80022ce:	4b75      	ldr	r3, [pc, #468]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a74      	ldr	r2, [pc, #464]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80022d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	e00b      	b.n	80022f4 <HAL_RCC_OscConfig+0xd8>
 80022dc:	4b71      	ldr	r3, [pc, #452]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	4a70      	ldr	r2, [pc, #448]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80022e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022e6:	6013      	str	r3, [r2, #0]
 80022e8:	4b6e      	ldr	r3, [pc, #440]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a6d      	ldr	r2, [pc, #436]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80022ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d013      	beq.n	8002324 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022fc:	f7fe feae 	bl	800105c <HAL_GetTick>
 8002300:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002302:	e008      	b.n	8002316 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002304:	f7fe feaa 	bl	800105c <HAL_GetTick>
 8002308:	4602      	mov	r2, r0
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	1ad3      	subs	r3, r2, r3
 800230e:	2b64      	cmp	r3, #100	; 0x64
 8002310:	d901      	bls.n	8002316 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002312:	2303      	movs	r3, #3
 8002314:	e3d4      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002316:	4b63      	ldr	r3, [pc, #396]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800231e:	2b00      	cmp	r3, #0
 8002320:	d0f0      	beq.n	8002304 <HAL_RCC_OscConfig+0xe8>
 8002322:	e014      	b.n	800234e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002324:	f7fe fe9a 	bl	800105c <HAL_GetTick>
 8002328:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800232a:	e008      	b.n	800233e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800232c:	f7fe fe96 	bl	800105c <HAL_GetTick>
 8002330:	4602      	mov	r2, r0
 8002332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002334:	1ad3      	subs	r3, r2, r3
 8002336:	2b64      	cmp	r3, #100	; 0x64
 8002338:	d901      	bls.n	800233e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e3c0      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800233e:	4b59      	ldr	r3, [pc, #356]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f0      	bne.n	800232c <HAL_RCC_OscConfig+0x110>
 800234a:	e000      	b.n	800234e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800234c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	f003 0302 	and.w	r3, r3, #2
 8002356:	2b00      	cmp	r3, #0
 8002358:	f000 80ca 	beq.w	80024f0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800235c:	4b51      	ldr	r3, [pc, #324]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 800235e:	691b      	ldr	r3, [r3, #16]
 8002360:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002364:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002366:	4b4f      	ldr	r3, [pc, #316]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 8002368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800236c:	6a3b      	ldr	r3, [r7, #32]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d007      	beq.n	8002382 <HAL_RCC_OscConfig+0x166>
 8002372:	6a3b      	ldr	r3, [r7, #32]
 8002374:	2b18      	cmp	r3, #24
 8002376:	d156      	bne.n	8002426 <HAL_RCC_OscConfig+0x20a>
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	2b00      	cmp	r3, #0
 8002380:	d151      	bne.n	8002426 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002382:	4b48      	ldr	r3, [pc, #288]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f003 0304 	and.w	r3, r3, #4
 800238a:	2b00      	cmp	r3, #0
 800238c:	d005      	beq.n	800239a <HAL_RCC_OscConfig+0x17e>
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	e392      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800239a:	4b42      	ldr	r3, [pc, #264]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f023 0219 	bic.w	r2, r3, #25
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	68db      	ldr	r3, [r3, #12]
 80023a6:	493f      	ldr	r1, [pc, #252]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80023a8:	4313      	orrs	r3, r2
 80023aa:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023ac:	f7fe fe56 	bl	800105c <HAL_GetTick>
 80023b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023b2:	e008      	b.n	80023c6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b4:	f7fe fe52 	bl	800105c <HAL_GetTick>
 80023b8:	4602      	mov	r2, r0
 80023ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023bc:	1ad3      	subs	r3, r2, r3
 80023be:	2b02      	cmp	r3, #2
 80023c0:	d901      	bls.n	80023c6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80023c2:	2303      	movs	r3, #3
 80023c4:	e37c      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80023c6:	4b37      	ldr	r3, [pc, #220]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0304 	and.w	r3, r3, #4
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d0f0      	beq.n	80023b4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023d2:	f7fe fe73 	bl	80010bc <HAL_GetREVID>
 80023d6:	4603      	mov	r3, r0
 80023d8:	f241 0203 	movw	r2, #4099	; 0x1003
 80023dc:	4293      	cmp	r3, r2
 80023de:	d817      	bhi.n	8002410 <HAL_RCC_OscConfig+0x1f4>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	691b      	ldr	r3, [r3, #16]
 80023e4:	2b40      	cmp	r3, #64	; 0x40
 80023e6:	d108      	bne.n	80023fa <HAL_RCC_OscConfig+0x1de>
 80023e8:	4b2e      	ldr	r3, [pc, #184]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80023f0:	4a2c      	ldr	r2, [pc, #176]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80023f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80023f6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80023f8:	e07a      	b.n	80024f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023fa:	4b2a      	ldr	r3, [pc, #168]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 80023fc:	685b      	ldr	r3, [r3, #4]
 80023fe:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	691b      	ldr	r3, [r3, #16]
 8002406:	031b      	lsls	r3, r3, #12
 8002408:	4926      	ldr	r1, [pc, #152]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 800240a:	4313      	orrs	r3, r2
 800240c:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800240e:	e06f      	b.n	80024f0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002410:	4b24      	ldr	r3, [pc, #144]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	691b      	ldr	r3, [r3, #16]
 800241c:	061b      	lsls	r3, r3, #24
 800241e:	4921      	ldr	r1, [pc, #132]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 8002420:	4313      	orrs	r3, r2
 8002422:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002424:	e064      	b.n	80024f0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d047      	beq.n	80024be <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800242e:	4b1d      	ldr	r3, [pc, #116]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f023 0219 	bic.w	r2, r3, #25
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	491a      	ldr	r1, [pc, #104]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 800243c:	4313      	orrs	r3, r2
 800243e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002440:	f7fe fe0c 	bl	800105c <HAL_GetTick>
 8002444:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002446:	e008      	b.n	800245a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002448:	f7fe fe08 	bl	800105c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b02      	cmp	r3, #2
 8002454:	d901      	bls.n	800245a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e332      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800245a:	4b12      	ldr	r3, [pc, #72]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b00      	cmp	r3, #0
 8002464:	d0f0      	beq.n	8002448 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002466:	f7fe fe29 	bl	80010bc <HAL_GetREVID>
 800246a:	4603      	mov	r3, r0
 800246c:	f241 0203 	movw	r2, #4099	; 0x1003
 8002470:	4293      	cmp	r3, r2
 8002472:	d819      	bhi.n	80024a8 <HAL_RCC_OscConfig+0x28c>
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	691b      	ldr	r3, [r3, #16]
 8002478:	2b40      	cmp	r3, #64	; 0x40
 800247a:	d108      	bne.n	800248e <HAL_RCC_OscConfig+0x272>
 800247c:	4b09      	ldr	r3, [pc, #36]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8002484:	4a07      	ldr	r2, [pc, #28]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 8002486:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800248a:	6053      	str	r3, [r2, #4]
 800248c:	e030      	b.n	80024f0 <HAL_RCC_OscConfig+0x2d4>
 800248e:	4b05      	ldr	r3, [pc, #20]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	691b      	ldr	r3, [r3, #16]
 800249a:	031b      	lsls	r3, r3, #12
 800249c:	4901      	ldr	r1, [pc, #4]	; (80024a4 <HAL_RCC_OscConfig+0x288>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	604b      	str	r3, [r1, #4]
 80024a2:	e025      	b.n	80024f0 <HAL_RCC_OscConfig+0x2d4>
 80024a4:	58024400 	.word	0x58024400
 80024a8:	4b9a      	ldr	r3, [pc, #616]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	691b      	ldr	r3, [r3, #16]
 80024b4:	061b      	lsls	r3, r3, #24
 80024b6:	4997      	ldr	r1, [pc, #604]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	604b      	str	r3, [r1, #4]
 80024bc:	e018      	b.n	80024f0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80024be:	4b95      	ldr	r3, [pc, #596]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a94      	ldr	r2, [pc, #592]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 80024c4:	f023 0301 	bic.w	r3, r3, #1
 80024c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024ca:	f7fe fdc7 	bl	800105c <HAL_GetTick>
 80024ce:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024d0:	e008      	b.n	80024e4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80024d2:	f7fe fdc3 	bl	800105c <HAL_GetTick>
 80024d6:	4602      	mov	r2, r0
 80024d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024da:	1ad3      	subs	r3, r2, r3
 80024dc:	2b02      	cmp	r3, #2
 80024de:	d901      	bls.n	80024e4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80024e0:	2303      	movs	r3, #3
 80024e2:	e2ed      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80024e4:	4b8b      	ldr	r3, [pc, #556]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0304 	and.w	r3, r3, #4
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d1f0      	bne.n	80024d2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0310 	and.w	r3, r3, #16
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 80a9 	beq.w	8002650 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024fe:	4b85      	ldr	r3, [pc, #532]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002506:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002508:	4b82      	ldr	r3, [pc, #520]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 800250a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800250c:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	2b08      	cmp	r3, #8
 8002512:	d007      	beq.n	8002524 <HAL_RCC_OscConfig+0x308>
 8002514:	69bb      	ldr	r3, [r7, #24]
 8002516:	2b18      	cmp	r3, #24
 8002518:	d13a      	bne.n	8002590 <HAL_RCC_OscConfig+0x374>
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b01      	cmp	r3, #1
 8002522:	d135      	bne.n	8002590 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002524:	4b7b      	ldr	r3, [pc, #492]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252c:	2b00      	cmp	r3, #0
 800252e:	d005      	beq.n	800253c <HAL_RCC_OscConfig+0x320>
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	69db      	ldr	r3, [r3, #28]
 8002534:	2b80      	cmp	r3, #128	; 0x80
 8002536:	d001      	beq.n	800253c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8002538:	2301      	movs	r3, #1
 800253a:	e2c1      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800253c:	f7fe fdbe 	bl	80010bc <HAL_GetREVID>
 8002540:	4603      	mov	r3, r0
 8002542:	f241 0203 	movw	r2, #4099	; 0x1003
 8002546:	4293      	cmp	r3, r2
 8002548:	d817      	bhi.n	800257a <HAL_RCC_OscConfig+0x35e>
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	6a1b      	ldr	r3, [r3, #32]
 800254e:	2b20      	cmp	r3, #32
 8002550:	d108      	bne.n	8002564 <HAL_RCC_OscConfig+0x348>
 8002552:	4b70      	ldr	r3, [pc, #448]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 800255a:	4a6e      	ldr	r2, [pc, #440]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 800255c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002560:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002562:	e075      	b.n	8002650 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8002564:	4b6b      	ldr	r3, [pc, #428]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a1b      	ldr	r3, [r3, #32]
 8002570:	069b      	lsls	r3, r3, #26
 8002572:	4968      	ldr	r1, [pc, #416]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 8002574:	4313      	orrs	r3, r2
 8002576:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8002578:	e06a      	b.n	8002650 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800257a:	4b66      	ldr	r3, [pc, #408]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	061b      	lsls	r3, r3, #24
 8002588:	4962      	ldr	r1, [pc, #392]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 800258a:	4313      	orrs	r3, r2
 800258c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800258e:	e05f      	b.n	8002650 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	69db      	ldr	r3, [r3, #28]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d042      	beq.n	800261e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8002598:	4b5e      	ldr	r3, [pc, #376]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a5d      	ldr	r2, [pc, #372]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 800259e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80025a2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025a4:	f7fe fd5a 	bl	800105c <HAL_GetTick>
 80025a8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025aa:	e008      	b.n	80025be <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80025ac:	f7fe fd56 	bl	800105c <HAL_GetTick>
 80025b0:	4602      	mov	r2, r0
 80025b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	2b02      	cmp	r3, #2
 80025b8:	d901      	bls.n	80025be <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80025ba:	2303      	movs	r3, #3
 80025bc:	e280      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80025be:	4b55      	ldr	r3, [pc, #340]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d0f0      	beq.n	80025ac <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80025ca:	f7fe fd77 	bl	80010bc <HAL_GetREVID>
 80025ce:	4603      	mov	r3, r0
 80025d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d817      	bhi.n	8002608 <HAL_RCC_OscConfig+0x3ec>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	2b20      	cmp	r3, #32
 80025de:	d108      	bne.n	80025f2 <HAL_RCC_OscConfig+0x3d6>
 80025e0:	4b4c      	ldr	r3, [pc, #304]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80025e8:	4a4a      	ldr	r2, [pc, #296]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 80025ea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80025ee:	6053      	str	r3, [r2, #4]
 80025f0:	e02e      	b.n	8002650 <HAL_RCC_OscConfig+0x434>
 80025f2:	4b48      	ldr	r3, [pc, #288]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 80025f4:	685b      	ldr	r3, [r3, #4]
 80025f6:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6a1b      	ldr	r3, [r3, #32]
 80025fe:	069b      	lsls	r3, r3, #26
 8002600:	4944      	ldr	r1, [pc, #272]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 8002602:	4313      	orrs	r3, r2
 8002604:	604b      	str	r3, [r1, #4]
 8002606:	e023      	b.n	8002650 <HAL_RCC_OscConfig+0x434>
 8002608:	4b42      	ldr	r3, [pc, #264]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 800260a:	68db      	ldr	r3, [r3, #12]
 800260c:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a1b      	ldr	r3, [r3, #32]
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	493f      	ldr	r1, [pc, #252]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 8002618:	4313      	orrs	r3, r2
 800261a:	60cb      	str	r3, [r1, #12]
 800261c:	e018      	b.n	8002650 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800261e:	4b3d      	ldr	r3, [pc, #244]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	4a3c      	ldr	r2, [pc, #240]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 8002624:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002628:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262a:	f7fe fd17 	bl	800105c <HAL_GetTick>
 800262e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002630:	e008      	b.n	8002644 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8002632:	f7fe fd13 	bl	800105c <HAL_GetTick>
 8002636:	4602      	mov	r2, r0
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b02      	cmp	r3, #2
 800263e:	d901      	bls.n	8002644 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002640:	2303      	movs	r3, #3
 8002642:	e23d      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8002644:	4b33      	ldr	r3, [pc, #204]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1f0      	bne.n	8002632 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0308 	and.w	r3, r3, #8
 8002658:	2b00      	cmp	r3, #0
 800265a:	d036      	beq.n	80026ca <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	695b      	ldr	r3, [r3, #20]
 8002660:	2b00      	cmp	r3, #0
 8002662:	d019      	beq.n	8002698 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002664:	4b2b      	ldr	r3, [pc, #172]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 8002666:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002668:	4a2a      	ldr	r2, [pc, #168]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 800266a:	f043 0301 	orr.w	r3, r3, #1
 800266e:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002670:	f7fe fcf4 	bl	800105c <HAL_GetTick>
 8002674:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002676:	e008      	b.n	800268a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002678:	f7fe fcf0 	bl	800105c <HAL_GetTick>
 800267c:	4602      	mov	r2, r0
 800267e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002680:	1ad3      	subs	r3, r2, r3
 8002682:	2b02      	cmp	r3, #2
 8002684:	d901      	bls.n	800268a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8002686:	2303      	movs	r3, #3
 8002688:	e21a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800268a:	4b22      	ldr	r3, [pc, #136]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 800268c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800268e:	f003 0302 	and.w	r3, r3, #2
 8002692:	2b00      	cmp	r3, #0
 8002694:	d0f0      	beq.n	8002678 <HAL_RCC_OscConfig+0x45c>
 8002696:	e018      	b.n	80026ca <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002698:	4b1e      	ldr	r3, [pc, #120]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 800269a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800269c:	4a1d      	ldr	r2, [pc, #116]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 800269e:	f023 0301 	bic.w	r3, r3, #1
 80026a2:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80026a4:	f7fe fcda 	bl	800105c <HAL_GetTick>
 80026a8:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80026ac:	f7fe fcd6 	bl	800105c <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e200      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80026be:	4b15      	ldr	r3, [pc, #84]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 80026c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80026c2:	f003 0302 	and.w	r3, r3, #2
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 0320 	and.w	r3, r3, #32
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d039      	beq.n	800274a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	699b      	ldr	r3, [r3, #24]
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d01c      	beq.n	8002718 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80026de:	4b0d      	ldr	r3, [pc, #52]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4a0c      	ldr	r2, [pc, #48]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 80026e4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80026e8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80026ea:	f7fe fcb7 	bl	800105c <HAL_GetTick>
 80026ee:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 80026f0:	e008      	b.n	8002704 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80026f2:	f7fe fcb3 	bl	800105c <HAL_GetTick>
 80026f6:	4602      	mov	r2, r0
 80026f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fa:	1ad3      	subs	r3, r2, r3
 80026fc:	2b02      	cmp	r3, #2
 80026fe:	d901      	bls.n	8002704 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8002700:	2303      	movs	r3, #3
 8002702:	e1dd      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8002704:	4b03      	ldr	r3, [pc, #12]	; (8002714 <HAL_RCC_OscConfig+0x4f8>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800270c:	2b00      	cmp	r3, #0
 800270e:	d0f0      	beq.n	80026f2 <HAL_RCC_OscConfig+0x4d6>
 8002710:	e01b      	b.n	800274a <HAL_RCC_OscConfig+0x52e>
 8002712:	bf00      	nop
 8002714:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002718:	4b9b      	ldr	r3, [pc, #620]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a9a      	ldr	r2, [pc, #616]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 800271e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002722:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8002724:	f7fe fc9a 	bl	800105c <HAL_GetTick>
 8002728:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800272a:	e008      	b.n	800273e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800272c:	f7fe fc96 	bl	800105c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b02      	cmp	r3, #2
 8002738:	d901      	bls.n	800273e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800273a:	2303      	movs	r3, #3
 800273c:	e1c0      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800273e:	4b92      	ldr	r3, [pc, #584]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002746:	2b00      	cmp	r3, #0
 8002748:	d1f0      	bne.n	800272c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f003 0304 	and.w	r3, r3, #4
 8002752:	2b00      	cmp	r3, #0
 8002754:	f000 8081 	beq.w	800285a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002758:	4b8c      	ldr	r3, [pc, #560]	; (800298c <HAL_RCC_OscConfig+0x770>)
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4a8b      	ldr	r2, [pc, #556]	; (800298c <HAL_RCC_OscConfig+0x770>)
 800275e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002762:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002764:	f7fe fc7a 	bl	800105c <HAL_GetTick>
 8002768:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800276a:	e008      	b.n	800277e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800276c:	f7fe fc76 	bl	800105c <HAL_GetTick>
 8002770:	4602      	mov	r2, r0
 8002772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002774:	1ad3      	subs	r3, r2, r3
 8002776:	2b64      	cmp	r3, #100	; 0x64
 8002778:	d901      	bls.n	800277e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800277a:	2303      	movs	r3, #3
 800277c:	e1a0      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800277e:	4b83      	ldr	r3, [pc, #524]	; (800298c <HAL_RCC_OscConfig+0x770>)
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0f0      	beq.n	800276c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	2b01      	cmp	r3, #1
 8002790:	d106      	bne.n	80027a0 <HAL_RCC_OscConfig+0x584>
 8002792:	4b7d      	ldr	r3, [pc, #500]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002794:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002796:	4a7c      	ldr	r2, [pc, #496]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	6713      	str	r3, [r2, #112]	; 0x70
 800279e:	e02d      	b.n	80027fc <HAL_RCC_OscConfig+0x5e0>
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10c      	bne.n	80027c2 <HAL_RCC_OscConfig+0x5a6>
 80027a8:	4b77      	ldr	r3, [pc, #476]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 80027aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ac:	4a76      	ldr	r2, [pc, #472]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 80027ae:	f023 0301 	bic.w	r3, r3, #1
 80027b2:	6713      	str	r3, [r2, #112]	; 0x70
 80027b4:	4b74      	ldr	r3, [pc, #464]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 80027b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027b8:	4a73      	ldr	r2, [pc, #460]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 80027ba:	f023 0304 	bic.w	r3, r3, #4
 80027be:	6713      	str	r3, [r2, #112]	; 0x70
 80027c0:	e01c      	b.n	80027fc <HAL_RCC_OscConfig+0x5e0>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	689b      	ldr	r3, [r3, #8]
 80027c6:	2b05      	cmp	r3, #5
 80027c8:	d10c      	bne.n	80027e4 <HAL_RCC_OscConfig+0x5c8>
 80027ca:	4b6f      	ldr	r3, [pc, #444]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 80027cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027ce:	4a6e      	ldr	r2, [pc, #440]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 80027d0:	f043 0304 	orr.w	r3, r3, #4
 80027d4:	6713      	str	r3, [r2, #112]	; 0x70
 80027d6:	4b6c      	ldr	r3, [pc, #432]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 80027d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027da:	4a6b      	ldr	r2, [pc, #428]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 80027dc:	f043 0301 	orr.w	r3, r3, #1
 80027e0:	6713      	str	r3, [r2, #112]	; 0x70
 80027e2:	e00b      	b.n	80027fc <HAL_RCC_OscConfig+0x5e0>
 80027e4:	4b68      	ldr	r3, [pc, #416]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 80027e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027e8:	4a67      	ldr	r2, [pc, #412]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 80027ea:	f023 0301 	bic.w	r3, r3, #1
 80027ee:	6713      	str	r3, [r2, #112]	; 0x70
 80027f0:	4b65      	ldr	r3, [pc, #404]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 80027f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80027f4:	4a64      	ldr	r2, [pc, #400]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 80027f6:	f023 0304 	bic.w	r3, r3, #4
 80027fa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	689b      	ldr	r3, [r3, #8]
 8002800:	2b00      	cmp	r3, #0
 8002802:	d015      	beq.n	8002830 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002804:	f7fe fc2a 	bl	800105c <HAL_GetTick>
 8002808:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800280a:	e00a      	b.n	8002822 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800280c:	f7fe fc26 	bl	800105c <HAL_GetTick>
 8002810:	4602      	mov	r2, r0
 8002812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	f241 3288 	movw	r2, #5000	; 0x1388
 800281a:	4293      	cmp	r3, r2
 800281c:	d901      	bls.n	8002822 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800281e:	2303      	movs	r3, #3
 8002820:	e14e      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002822:	4b59      	ldr	r3, [pc, #356]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002824:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002826:	f003 0302 	and.w	r3, r3, #2
 800282a:	2b00      	cmp	r3, #0
 800282c:	d0ee      	beq.n	800280c <HAL_RCC_OscConfig+0x5f0>
 800282e:	e014      	b.n	800285a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002830:	f7fe fc14 	bl	800105c <HAL_GetTick>
 8002834:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002836:	e00a      	b.n	800284e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002838:	f7fe fc10 	bl	800105c <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	; 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e138      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800284e:	4b4e      	ldr	r3, [pc, #312]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1ee      	bne.n	8002838 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800285e:	2b00      	cmp	r3, #0
 8002860:	f000 812d 	beq.w	8002abe <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8002864:	4b48      	ldr	r3, [pc, #288]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800286c:	2b18      	cmp	r3, #24
 800286e:	f000 80bd 	beq.w	80029ec <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002876:	2b02      	cmp	r3, #2
 8002878:	f040 809e 	bne.w	80029b8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800287c:	4b42      	ldr	r3, [pc, #264]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a41      	ldr	r2, [pc, #260]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002882:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002886:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002888:	f7fe fbe8 	bl	800105c <HAL_GetTick>
 800288c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800288e:	e008      	b.n	80028a2 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002890:	f7fe fbe4 	bl	800105c <HAL_GetTick>
 8002894:	4602      	mov	r2, r0
 8002896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002898:	1ad3      	subs	r3, r2, r3
 800289a:	2b02      	cmp	r3, #2
 800289c:	d901      	bls.n	80028a2 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800289e:	2303      	movs	r3, #3
 80028a0:	e10e      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80028a2:	4b39      	ldr	r3, [pc, #228]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d1f0      	bne.n	8002890 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028ae:	4b36      	ldr	r3, [pc, #216]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 80028b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028b2:	4b37      	ldr	r3, [pc, #220]	; (8002990 <HAL_RCC_OscConfig+0x774>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	687a      	ldr	r2, [r7, #4]
 80028b8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80028ba:	687a      	ldr	r2, [r7, #4]
 80028bc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80028be:	0112      	lsls	r2, r2, #4
 80028c0:	430a      	orrs	r2, r1
 80028c2:	4931      	ldr	r1, [pc, #196]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 80028c4:	4313      	orrs	r3, r2
 80028c6:	628b      	str	r3, [r1, #40]	; 0x28
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028cc:	3b01      	subs	r3, #1
 80028ce:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80028d6:	3b01      	subs	r3, #1
 80028d8:	025b      	lsls	r3, r3, #9
 80028da:	b29b      	uxth	r3, r3
 80028dc:	431a      	orrs	r2, r3
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028e2:	3b01      	subs	r3, #1
 80028e4:	041b      	lsls	r3, r3, #16
 80028e6:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80028ea:	431a      	orrs	r2, r3
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028f0:	3b01      	subs	r3, #1
 80028f2:	061b      	lsls	r3, r3, #24
 80028f4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80028f8:	4923      	ldr	r1, [pc, #140]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 80028fa:	4313      	orrs	r3, r2
 80028fc:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 80028fe:	4b22      	ldr	r3, [pc, #136]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002900:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002902:	4a21      	ldr	r2, [pc, #132]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800290a:	4b1f      	ldr	r3, [pc, #124]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 800290c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800290e:	4b21      	ldr	r3, [pc, #132]	; (8002994 <HAL_RCC_OscConfig+0x778>)
 8002910:	4013      	ands	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002916:	00d2      	lsls	r2, r2, #3
 8002918:	491b      	ldr	r1, [pc, #108]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 800291a:	4313      	orrs	r3, r2
 800291c:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800291e:	4b1a      	ldr	r3, [pc, #104]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002920:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002922:	f023 020c 	bic.w	r2, r3, #12
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4917      	ldr	r1, [pc, #92]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 800292c:	4313      	orrs	r3, r2
 800292e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8002930:	4b15      	ldr	r3, [pc, #84]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002932:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002934:	f023 0202 	bic.w	r2, r3, #2
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800293c:	4912      	ldr	r1, [pc, #72]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 800293e:	4313      	orrs	r3, r2
 8002940:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8002942:	4b11      	ldr	r3, [pc, #68]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002944:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002946:	4a10      	ldr	r2, [pc, #64]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002948:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800294c:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800294e:	4b0e      	ldr	r3, [pc, #56]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002950:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002952:	4a0d      	ldr	r2, [pc, #52]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002954:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002958:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800295a:	4b0b      	ldr	r3, [pc, #44]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 800295c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800295e:	4a0a      	ldr	r2, [pc, #40]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002960:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002964:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8002966:	4b08      	ldr	r3, [pc, #32]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296a:	4a07      	ldr	r2, [pc, #28]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002972:	4b05      	ldr	r3, [pc, #20]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4a04      	ldr	r2, [pc, #16]	; (8002988 <HAL_RCC_OscConfig+0x76c>)
 8002978:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800297c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800297e:	f7fe fb6d 	bl	800105c <HAL_GetTick>
 8002982:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002984:	e011      	b.n	80029aa <HAL_RCC_OscConfig+0x78e>
 8002986:	bf00      	nop
 8002988:	58024400 	.word	0x58024400
 800298c:	58024800 	.word	0x58024800
 8002990:	fffffc0c 	.word	0xfffffc0c
 8002994:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002998:	f7fe fb60 	bl	800105c <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e08a      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80029aa:	4b47      	ldr	r3, [pc, #284]	; (8002ac8 <HAL_RCC_OscConfig+0x8ac>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d0f0      	beq.n	8002998 <HAL_RCC_OscConfig+0x77c>
 80029b6:	e082      	b.n	8002abe <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029b8:	4b43      	ldr	r3, [pc, #268]	; (8002ac8 <HAL_RCC_OscConfig+0x8ac>)
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	4a42      	ldr	r2, [pc, #264]	; (8002ac8 <HAL_RCC_OscConfig+0x8ac>)
 80029be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80029c2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c4:	f7fe fb4a 	bl	800105c <HAL_GetTick>
 80029c8:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029ca:	e008      	b.n	80029de <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029cc:	f7fe fb46 	bl	800105c <HAL_GetTick>
 80029d0:	4602      	mov	r2, r0
 80029d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029d4:	1ad3      	subs	r3, r2, r3
 80029d6:	2b02      	cmp	r3, #2
 80029d8:	d901      	bls.n	80029de <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 80029da:	2303      	movs	r3, #3
 80029dc:	e070      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80029de:	4b3a      	ldr	r3, [pc, #232]	; (8002ac8 <HAL_RCC_OscConfig+0x8ac>)
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d1f0      	bne.n	80029cc <HAL_RCC_OscConfig+0x7b0>
 80029ea:	e068      	b.n	8002abe <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 80029ec:	4b36      	ldr	r3, [pc, #216]	; (8002ac8 <HAL_RCC_OscConfig+0x8ac>)
 80029ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029f0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 80029f2:	4b35      	ldr	r3, [pc, #212]	; (8002ac8 <HAL_RCC_OscConfig+0x8ac>)
 80029f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029fc:	2b01      	cmp	r3, #1
 80029fe:	d031      	beq.n	8002a64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	f003 0203 	and.w	r2, r3, #3
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a0a:	429a      	cmp	r2, r3
 8002a0c:	d12a      	bne.n	8002a64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a0e:	693b      	ldr	r3, [r7, #16]
 8002a10:	091b      	lsrs	r3, r3, #4
 8002a12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a1a:	429a      	cmp	r2, r3
 8002a1c:	d122      	bne.n	8002a64 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a28:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d11a      	bne.n	8002a64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	0a5b      	lsrs	r3, r3, #9
 8002a32:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a3a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d111      	bne.n	8002a64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	0c1b      	lsrs	r3, r3, #16
 8002a44:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8002a4e:	429a      	cmp	r2, r3
 8002a50:	d108      	bne.n	8002a64 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	0e1b      	lsrs	r3, r3, #24
 8002a56:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a5e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d001      	beq.n	8002a68 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8002a64:	2301      	movs	r3, #1
 8002a66:	e02b      	b.n	8002ac0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8002a68:	4b17      	ldr	r3, [pc, #92]	; (8002ac8 <HAL_RCC_OscConfig+0x8ac>)
 8002a6a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a6c:	08db      	lsrs	r3, r3, #3
 8002a6e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002a72:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a78:	693a      	ldr	r2, [r7, #16]
 8002a7a:	429a      	cmp	r2, r3
 8002a7c:	d01f      	beq.n	8002abe <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8002a7e:	4b12      	ldr	r3, [pc, #72]	; (8002ac8 <HAL_RCC_OscConfig+0x8ac>)
 8002a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a82:	4a11      	ldr	r2, [pc, #68]	; (8002ac8 <HAL_RCC_OscConfig+0x8ac>)
 8002a84:	f023 0301 	bic.w	r3, r3, #1
 8002a88:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002a8a:	f7fe fae7 	bl	800105c <HAL_GetTick>
 8002a8e:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8002a90:	bf00      	nop
 8002a92:	f7fe fae3 	bl	800105c <HAL_GetTick>
 8002a96:	4602      	mov	r2, r0
 8002a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d0f9      	beq.n	8002a92 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <HAL_RCC_OscConfig+0x8ac>)
 8002aa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002aa2:	4b0a      	ldr	r3, [pc, #40]	; (8002acc <HAL_RCC_OscConfig+0x8b0>)
 8002aa4:	4013      	ands	r3, r2
 8002aa6:	687a      	ldr	r2, [r7, #4]
 8002aa8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002aaa:	00d2      	lsls	r2, r2, #3
 8002aac:	4906      	ldr	r1, [pc, #24]	; (8002ac8 <HAL_RCC_OscConfig+0x8ac>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8002ab2:	4b05      	ldr	r3, [pc, #20]	; (8002ac8 <HAL_RCC_OscConfig+0x8ac>)
 8002ab4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ab6:	4a04      	ldr	r2, [pc, #16]	; (8002ac8 <HAL_RCC_OscConfig+0x8ac>)
 8002ab8:	f043 0301 	orr.w	r3, r3, #1
 8002abc:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8002abe:	2300      	movs	r3, #0
}
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3730      	adds	r7, #48	; 0x30
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	bd80      	pop	{r7, pc}
 8002ac8:	58024400 	.word	0x58024400
 8002acc:	ffff0007 	.word	0xffff0007

08002ad0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d101      	bne.n	8002ae4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e19c      	b.n	8002e1e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ae4:	4b8a      	ldr	r3, [pc, #552]	; (8002d10 <HAL_RCC_ClockConfig+0x240>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	f003 030f 	and.w	r3, r3, #15
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d910      	bls.n	8002b14 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002af2:	4b87      	ldr	r3, [pc, #540]	; (8002d10 <HAL_RCC_ClockConfig+0x240>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f023 020f 	bic.w	r2, r3, #15
 8002afa:	4985      	ldr	r1, [pc, #532]	; (8002d10 <HAL_RCC_ClockConfig+0x240>)
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	4313      	orrs	r3, r2
 8002b00:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b02:	4b83      	ldr	r3, [pc, #524]	; (8002d10 <HAL_RCC_ClockConfig+0x240>)
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f003 030f 	and.w	r3, r3, #15
 8002b0a:	683a      	ldr	r2, [r7, #0]
 8002b0c:	429a      	cmp	r2, r3
 8002b0e:	d001      	beq.n	8002b14 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e184      	b.n	8002e1e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	f003 0304 	and.w	r3, r3, #4
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d010      	beq.n	8002b42 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	4b7b      	ldr	r3, [pc, #492]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002b26:	699b      	ldr	r3, [r3, #24]
 8002b28:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b2c:	429a      	cmp	r2, r3
 8002b2e:	d908      	bls.n	8002b42 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002b30:	4b78      	ldr	r3, [pc, #480]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002b32:	699b      	ldr	r3, [r3, #24]
 8002b34:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	691b      	ldr	r3, [r3, #16]
 8002b3c:	4975      	ldr	r1, [pc, #468]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002b3e:	4313      	orrs	r3, r2
 8002b40:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	f003 0308 	and.w	r3, r3, #8
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d010      	beq.n	8002b70 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695a      	ldr	r2, [r3, #20]
 8002b52:	4b70      	ldr	r3, [pc, #448]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002b54:	69db      	ldr	r3, [r3, #28]
 8002b56:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d908      	bls.n	8002b70 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002b5e:	4b6d      	ldr	r3, [pc, #436]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002b60:	69db      	ldr	r3, [r3, #28]
 8002b62:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	695b      	ldr	r3, [r3, #20]
 8002b6a:	496a      	ldr	r1, [pc, #424]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002b6c:	4313      	orrs	r3, r2
 8002b6e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d010      	beq.n	8002b9e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	699a      	ldr	r2, [r3, #24]
 8002b80:	4b64      	ldr	r3, [pc, #400]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002b82:	69db      	ldr	r3, [r3, #28]
 8002b84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002b88:	429a      	cmp	r2, r3
 8002b8a:	d908      	bls.n	8002b9e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002b8c:	4b61      	ldr	r3, [pc, #388]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	495e      	ldr	r1, [pc, #376]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f003 0320 	and.w	r3, r3, #32
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d010      	beq.n	8002bcc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69da      	ldr	r2, [r3, #28]
 8002bae:	4b59      	ldr	r3, [pc, #356]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002bb0:	6a1b      	ldr	r3, [r3, #32]
 8002bb2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002bb6:	429a      	cmp	r2, r3
 8002bb8:	d908      	bls.n	8002bcc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002bba:	4b56      	ldr	r3, [pc, #344]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	69db      	ldr	r3, [r3, #28]
 8002bc6:	4953      	ldr	r1, [pc, #332]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f003 0302 	and.w	r3, r3, #2
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d010      	beq.n	8002bfa <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68da      	ldr	r2, [r3, #12]
 8002bdc:	4b4d      	ldr	r3, [pc, #308]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f003 030f 	and.w	r3, r3, #15
 8002be4:	429a      	cmp	r2, r3
 8002be6:	d908      	bls.n	8002bfa <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002be8:	4b4a      	ldr	r3, [pc, #296]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	f023 020f 	bic.w	r2, r3, #15
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	68db      	ldr	r3, [r3, #12]
 8002bf4:	4947      	ldr	r1, [pc, #284]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d055      	beq.n	8002cb2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8002c06:	4b43      	ldr	r3, [pc, #268]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002c08:	699b      	ldr	r3, [r3, #24]
 8002c0a:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	4940      	ldr	r1, [pc, #256]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002c14:	4313      	orrs	r3, r2
 8002c16:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b02      	cmp	r3, #2
 8002c1e:	d107      	bne.n	8002c30 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c20:	4b3c      	ldr	r3, [pc, #240]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d121      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c2c:	2301      	movs	r3, #1
 8002c2e:	e0f6      	b.n	8002e1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	685b      	ldr	r3, [r3, #4]
 8002c34:	2b03      	cmp	r3, #3
 8002c36:	d107      	bne.n	8002c48 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c38:	4b36      	ldr	r3, [pc, #216]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d115      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e0ea      	b.n	8002e1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d107      	bne.n	8002c60 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002c50:	4b30      	ldr	r3, [pc, #192]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d109      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c5c:	2301      	movs	r3, #1
 8002c5e:	e0de      	b.n	8002e1e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c60:	4b2c      	ldr	r3, [pc, #176]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f003 0304 	and.w	r3, r3, #4
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d101      	bne.n	8002c70 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	e0d6      	b.n	8002e1e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c70:	4b28      	ldr	r3, [pc, #160]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002c72:	691b      	ldr	r3, [r3, #16]
 8002c74:	f023 0207 	bic.w	r2, r3, #7
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	4925      	ldr	r1, [pc, #148]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002c7e:	4313      	orrs	r3, r2
 8002c80:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c82:	f7fe f9eb 	bl	800105c <HAL_GetTick>
 8002c86:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002c88:	e00a      	b.n	8002ca0 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c8a:	f7fe f9e7 	bl	800105c <HAL_GetTick>
 8002c8e:	4602      	mov	r2, r0
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	1ad3      	subs	r3, r2, r3
 8002c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d901      	bls.n	8002ca0 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8002c9c:	2303      	movs	r3, #3
 8002c9e:	e0be      	b.n	8002e1e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ca0:	4b1c      	ldr	r3, [pc, #112]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002ca2:	691b      	ldr	r3, [r3, #16]
 8002ca4:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	685b      	ldr	r3, [r3, #4]
 8002cac:	00db      	lsls	r3, r3, #3
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d1eb      	bne.n	8002c8a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	f003 0302 	and.w	r3, r3, #2
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d010      	beq.n	8002ce0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	68da      	ldr	r2, [r3, #12]
 8002cc2:	4b14      	ldr	r3, [pc, #80]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002cc4:	699b      	ldr	r3, [r3, #24]
 8002cc6:	f003 030f 	and.w	r3, r3, #15
 8002cca:	429a      	cmp	r2, r3
 8002ccc:	d208      	bcs.n	8002ce0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cce:	4b11      	ldr	r3, [pc, #68]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002cd0:	699b      	ldr	r3, [r3, #24]
 8002cd2:	f023 020f 	bic.w	r2, r3, #15
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	490e      	ldr	r1, [pc, #56]	; (8002d14 <HAL_RCC_ClockConfig+0x244>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002ce0:	4b0b      	ldr	r3, [pc, #44]	; (8002d10 <HAL_RCC_ClockConfig+0x240>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f003 030f 	and.w	r3, r3, #15
 8002ce8:	683a      	ldr	r2, [r7, #0]
 8002cea:	429a      	cmp	r2, r3
 8002cec:	d214      	bcs.n	8002d18 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cee:	4b08      	ldr	r3, [pc, #32]	; (8002d10 <HAL_RCC_ClockConfig+0x240>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f023 020f 	bic.w	r2, r3, #15
 8002cf6:	4906      	ldr	r1, [pc, #24]	; (8002d10 <HAL_RCC_ClockConfig+0x240>)
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	4313      	orrs	r3, r2
 8002cfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cfe:	4b04      	ldr	r3, [pc, #16]	; (8002d10 <HAL_RCC_ClockConfig+0x240>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 030f 	and.w	r3, r3, #15
 8002d06:	683a      	ldr	r2, [r7, #0]
 8002d08:	429a      	cmp	r2, r3
 8002d0a:	d005      	beq.n	8002d18 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8002d0c:	2301      	movs	r3, #1
 8002d0e:	e086      	b.n	8002e1e <HAL_RCC_ClockConfig+0x34e>
 8002d10:	52002000 	.word	0x52002000
 8002d14:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f003 0304 	and.w	r3, r3, #4
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d010      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	691a      	ldr	r2, [r3, #16]
 8002d28:	4b3f      	ldr	r3, [pc, #252]	; (8002e28 <HAL_RCC_ClockConfig+0x358>)
 8002d2a:	699b      	ldr	r3, [r3, #24]
 8002d2c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d30:	429a      	cmp	r2, r3
 8002d32:	d208      	bcs.n	8002d46 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002d34:	4b3c      	ldr	r3, [pc, #240]	; (8002e28 <HAL_RCC_ClockConfig+0x358>)
 8002d36:	699b      	ldr	r3, [r3, #24]
 8002d38:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	691b      	ldr	r3, [r3, #16]
 8002d40:	4939      	ldr	r1, [pc, #228]	; (8002e28 <HAL_RCC_ClockConfig+0x358>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d010      	beq.n	8002d74 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	695a      	ldr	r2, [r3, #20]
 8002d56:	4b34      	ldr	r3, [pc, #208]	; (8002e28 <HAL_RCC_ClockConfig+0x358>)
 8002d58:	69db      	ldr	r3, [r3, #28]
 8002d5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002d5e:	429a      	cmp	r2, r3
 8002d60:	d208      	bcs.n	8002d74 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002d62:	4b31      	ldr	r3, [pc, #196]	; (8002e28 <HAL_RCC_ClockConfig+0x358>)
 8002d64:	69db      	ldr	r3, [r3, #28]
 8002d66:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	492e      	ldr	r1, [pc, #184]	; (8002e28 <HAL_RCC_ClockConfig+0x358>)
 8002d70:	4313      	orrs	r3, r2
 8002d72:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f003 0310 	and.w	r3, r3, #16
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d010      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	699a      	ldr	r2, [r3, #24]
 8002d84:	4b28      	ldr	r3, [pc, #160]	; (8002e28 <HAL_RCC_ClockConfig+0x358>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d208      	bcs.n	8002da2 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002d90:	4b25      	ldr	r3, [pc, #148]	; (8002e28 <HAL_RCC_ClockConfig+0x358>)
 8002d92:	69db      	ldr	r3, [r3, #28]
 8002d94:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	699b      	ldr	r3, [r3, #24]
 8002d9c:	4922      	ldr	r1, [pc, #136]	; (8002e28 <HAL_RCC_ClockConfig+0x358>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f003 0320 	and.w	r3, r3, #32
 8002daa:	2b00      	cmp	r3, #0
 8002dac:	d010      	beq.n	8002dd0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69da      	ldr	r2, [r3, #28]
 8002db2:	4b1d      	ldr	r3, [pc, #116]	; (8002e28 <HAL_RCC_ClockConfig+0x358>)
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d208      	bcs.n	8002dd0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8002dbe:	4b1a      	ldr	r3, [pc, #104]	; (8002e28 <HAL_RCC_ClockConfig+0x358>)
 8002dc0:	6a1b      	ldr	r3, [r3, #32]
 8002dc2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	69db      	ldr	r3, [r3, #28]
 8002dca:	4917      	ldr	r1, [pc, #92]	; (8002e28 <HAL_RCC_ClockConfig+0x358>)
 8002dcc:	4313      	orrs	r3, r2
 8002dce:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8002dd0:	f000 f834 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	4b14      	ldr	r3, [pc, #80]	; (8002e28 <HAL_RCC_ClockConfig+0x358>)
 8002dd8:	699b      	ldr	r3, [r3, #24]
 8002dda:	0a1b      	lsrs	r3, r3, #8
 8002ddc:	f003 030f 	and.w	r3, r3, #15
 8002de0:	4912      	ldr	r1, [pc, #72]	; (8002e2c <HAL_RCC_ClockConfig+0x35c>)
 8002de2:	5ccb      	ldrb	r3, [r1, r3]
 8002de4:	f003 031f 	and.w	r3, r3, #31
 8002de8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dec:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002dee:	4b0e      	ldr	r3, [pc, #56]	; (8002e28 <HAL_RCC_ClockConfig+0x358>)
 8002df0:	699b      	ldr	r3, [r3, #24]
 8002df2:	f003 030f 	and.w	r3, r3, #15
 8002df6:	4a0d      	ldr	r2, [pc, #52]	; (8002e2c <HAL_RCC_ClockConfig+0x35c>)
 8002df8:	5cd3      	ldrb	r3, [r2, r3]
 8002dfa:	f003 031f 	and.w	r3, r3, #31
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	fa22 f303 	lsr.w	r3, r2, r3
 8002e04:	4a0a      	ldr	r2, [pc, #40]	; (8002e30 <HAL_RCC_ClockConfig+0x360>)
 8002e06:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8002e08:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <HAL_RCC_ClockConfig+0x364>)
 8002e0a:	693b      	ldr	r3, [r7, #16]
 8002e0c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8002e0e:	4b0a      	ldr	r3, [pc, #40]	; (8002e38 <HAL_RCC_ClockConfig+0x368>)
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7fe f8d8 	bl	8000fc8 <HAL_InitTick>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8002e1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	bf00      	nop
 8002e28:	58024400 	.word	0x58024400
 8002e2c:	08006678 	.word	0x08006678
 8002e30:	24000004 	.word	0x24000004
 8002e34:	24000000 	.word	0x24000000
 8002e38:	24000008 	.word	0x24000008

08002e3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b089      	sub	sp, #36	; 0x24
 8002e40:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e42:	4bb3      	ldr	r3, [pc, #716]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002e4a:	2b18      	cmp	r3, #24
 8002e4c:	f200 8155 	bhi.w	80030fa <HAL_RCC_GetSysClockFreq+0x2be>
 8002e50:	a201      	add	r2, pc, #4	; (adr r2, 8002e58 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e56:	bf00      	nop
 8002e58:	08002ebd 	.word	0x08002ebd
 8002e5c:	080030fb 	.word	0x080030fb
 8002e60:	080030fb 	.word	0x080030fb
 8002e64:	080030fb 	.word	0x080030fb
 8002e68:	080030fb 	.word	0x080030fb
 8002e6c:	080030fb 	.word	0x080030fb
 8002e70:	080030fb 	.word	0x080030fb
 8002e74:	080030fb 	.word	0x080030fb
 8002e78:	08002ee3 	.word	0x08002ee3
 8002e7c:	080030fb 	.word	0x080030fb
 8002e80:	080030fb 	.word	0x080030fb
 8002e84:	080030fb 	.word	0x080030fb
 8002e88:	080030fb 	.word	0x080030fb
 8002e8c:	080030fb 	.word	0x080030fb
 8002e90:	080030fb 	.word	0x080030fb
 8002e94:	080030fb 	.word	0x080030fb
 8002e98:	08002ee9 	.word	0x08002ee9
 8002e9c:	080030fb 	.word	0x080030fb
 8002ea0:	080030fb 	.word	0x080030fb
 8002ea4:	080030fb 	.word	0x080030fb
 8002ea8:	080030fb 	.word	0x080030fb
 8002eac:	080030fb 	.word	0x080030fb
 8002eb0:	080030fb 	.word	0x080030fb
 8002eb4:	080030fb 	.word	0x080030fb
 8002eb8:	08002eef 	.word	0x08002eef
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002ebc:	4b94      	ldr	r3, [pc, #592]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f003 0320 	and.w	r3, r3, #32
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d009      	beq.n	8002edc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002ec8:	4b91      	ldr	r3, [pc, #580]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	08db      	lsrs	r3, r3, #3
 8002ece:	f003 0303 	and.w	r3, r3, #3
 8002ed2:	4a90      	ldr	r2, [pc, #576]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ed4:	fa22 f303 	lsr.w	r3, r2, r3
 8002ed8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002eda:	e111      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002edc:	4b8d      	ldr	r3, [pc, #564]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002ede:	61bb      	str	r3, [r7, #24]
      break;
 8002ee0:	e10e      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8002ee2:	4b8d      	ldr	r3, [pc, #564]	; (8003118 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002ee4:	61bb      	str	r3, [r7, #24]
      break;
 8002ee6:	e10b      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002ee8:	4b8c      	ldr	r3, [pc, #560]	; (800311c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002eea:	61bb      	str	r3, [r7, #24]
      break;
 8002eec:	e108      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002eee:	4b88      	ldr	r3, [pc, #544]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002ef0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ef2:	f003 0303 	and.w	r3, r3, #3
 8002ef6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002ef8:	4b85      	ldr	r3, [pc, #532]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002efa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002efc:	091b      	lsrs	r3, r3, #4
 8002efe:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f02:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8002f04:	4b82      	ldr	r3, [pc, #520]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f08:	f003 0301 	and.w	r3, r3, #1
 8002f0c:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002f0e:	4b80      	ldr	r3, [pc, #512]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f10:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f12:	08db      	lsrs	r3, r3, #3
 8002f14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	fb02 f303 	mul.w	r3, r2, r3
 8002f1e:	ee07 3a90 	vmov	s15, r3
 8002f22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f26:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8002f2a:	693b      	ldr	r3, [r7, #16]
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 80e1 	beq.w	80030f4 <HAL_RCC_GetSysClockFreq+0x2b8>
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2b02      	cmp	r3, #2
 8002f36:	f000 8083 	beq.w	8003040 <HAL_RCC_GetSysClockFreq+0x204>
 8002f3a:	697b      	ldr	r3, [r7, #20]
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	f200 80a1 	bhi.w	8003084 <HAL_RCC_GetSysClockFreq+0x248>
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d003      	beq.n	8002f50 <HAL_RCC_GetSysClockFreq+0x114>
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d056      	beq.n	8002ffc <HAL_RCC_GetSysClockFreq+0x1c0>
 8002f4e:	e099      	b.n	8003084 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002f50:	4b6f      	ldr	r3, [pc, #444]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f003 0320 	and.w	r3, r3, #32
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d02d      	beq.n	8002fb8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002f5c:	4b6c      	ldr	r3, [pc, #432]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	08db      	lsrs	r3, r3, #3
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	4a6b      	ldr	r2, [pc, #428]	; (8003114 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002f68:	fa22 f303 	lsr.w	r3, r2, r3
 8002f6c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	ee07 3a90 	vmov	s15, r3
 8002f74:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f78:	693b      	ldr	r3, [r7, #16]
 8002f7a:	ee07 3a90 	vmov	s15, r3
 8002f7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002f86:	4b62      	ldr	r3, [pc, #392]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002f8e:	ee07 3a90 	vmov	s15, r3
 8002f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8002f9a:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003120 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fb2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8002fb6:	e087      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	ee07 3a90 	vmov	s15, r3
 8002fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002fc2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003124 <HAL_RCC_GetSysClockFreq+0x2e8>
 8002fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002fca:	4b51      	ldr	r3, [pc, #324]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002fd2:	ee07 3a90 	vmov	s15, r3
 8002fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8002fde:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003120 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002ff6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002ffa:	e065      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002ffc:	693b      	ldr	r3, [r7, #16]
 8002ffe:	ee07 3a90 	vmov	s15, r3
 8003002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003006:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003128 <HAL_RCC_GetSysClockFreq+0x2ec>
 800300a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800300e:	4b40      	ldr	r3, [pc, #256]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003016:	ee07 3a90 	vmov	s15, r3
 800301a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800301e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003022:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003120 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800302a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800302e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800303a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800303e:	e043      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003040:	693b      	ldr	r3, [r7, #16]
 8003042:	ee07 3a90 	vmov	s15, r3
 8003046:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800304a:	eddf 6a38 	vldr	s13, [pc, #224]	; 800312c <HAL_RCC_GetSysClockFreq+0x2f0>
 800304e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003052:	4b2f      	ldr	r3, [pc, #188]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800305a:	ee07 3a90 	vmov	s15, r3
 800305e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003062:	ed97 6a02 	vldr	s12, [r7, #8]
 8003066:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003120 <HAL_RCC_GetSysClockFreq+0x2e4>
 800306a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800306e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003072:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003076:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800307a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800307e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003082:	e021      	b.n	80030c8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	ee07 3a90 	vmov	s15, r3
 800308a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800308e:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003128 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003092:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003096:	4b1e      	ldr	r3, [pc, #120]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800309a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800309e:	ee07 3a90 	vmov	s15, r3
 80030a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80030a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80030aa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003120 <HAL_RCC_GetSysClockFreq+0x2e4>
 80030ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80030b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80030b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80030ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80030be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80030c6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80030c8:	4b11      	ldr	r3, [pc, #68]	; (8003110 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80030ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030cc:	0a5b      	lsrs	r3, r3, #9
 80030ce:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80030d2:	3301      	adds	r3, #1
 80030d4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80030d6:	683b      	ldr	r3, [r7, #0]
 80030d8:	ee07 3a90 	vmov	s15, r3
 80030dc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030e0:	edd7 6a07 	vldr	s13, [r7, #28]
 80030e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030e8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80030ec:	ee17 3a90 	vmov	r3, s15
 80030f0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80030f2:	e005      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	61bb      	str	r3, [r7, #24]
      break;
 80030f8:	e002      	b.n	8003100 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80030fa:	4b07      	ldr	r3, [pc, #28]	; (8003118 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80030fc:	61bb      	str	r3, [r7, #24]
      break;
 80030fe:	bf00      	nop
  }

  return sysclockfreq;
 8003100:	69bb      	ldr	r3, [r7, #24]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3724      	adds	r7, #36	; 0x24
 8003106:	46bd      	mov	sp, r7
 8003108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310c:	4770      	bx	lr
 800310e:	bf00      	nop
 8003110:	58024400 	.word	0x58024400
 8003114:	03d09000 	.word	0x03d09000
 8003118:	003d0900 	.word	0x003d0900
 800311c:	007a1200 	.word	0x007a1200
 8003120:	46000000 	.word	0x46000000
 8003124:	4c742400 	.word	0x4c742400
 8003128:	4a742400 	.word	0x4a742400
 800312c:	4af42400 	.word	0x4af42400

08003130 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003136:	f7ff fe81 	bl	8002e3c <HAL_RCC_GetSysClockFreq>
 800313a:	4602      	mov	r2, r0
 800313c:	4b10      	ldr	r3, [pc, #64]	; (8003180 <HAL_RCC_GetHCLKFreq+0x50>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	0a1b      	lsrs	r3, r3, #8
 8003142:	f003 030f 	and.w	r3, r3, #15
 8003146:	490f      	ldr	r1, [pc, #60]	; (8003184 <HAL_RCC_GetHCLKFreq+0x54>)
 8003148:	5ccb      	ldrb	r3, [r1, r3]
 800314a:	f003 031f 	and.w	r3, r3, #31
 800314e:	fa22 f303 	lsr.w	r3, r2, r3
 8003152:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003154:	4b0a      	ldr	r3, [pc, #40]	; (8003180 <HAL_RCC_GetHCLKFreq+0x50>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f003 030f 	and.w	r3, r3, #15
 800315c:	4a09      	ldr	r2, [pc, #36]	; (8003184 <HAL_RCC_GetHCLKFreq+0x54>)
 800315e:	5cd3      	ldrb	r3, [r2, r3]
 8003160:	f003 031f 	and.w	r3, r3, #31
 8003164:	687a      	ldr	r2, [r7, #4]
 8003166:	fa22 f303 	lsr.w	r3, r2, r3
 800316a:	4a07      	ldr	r2, [pc, #28]	; (8003188 <HAL_RCC_GetHCLKFreq+0x58>)
 800316c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800316e:	4a07      	ldr	r2, [pc, #28]	; (800318c <HAL_RCC_GetHCLKFreq+0x5c>)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003174:	4b04      	ldr	r3, [pc, #16]	; (8003188 <HAL_RCC_GetHCLKFreq+0x58>)
 8003176:	681b      	ldr	r3, [r3, #0]
}
 8003178:	4618      	mov	r0, r3
 800317a:	3708      	adds	r7, #8
 800317c:	46bd      	mov	sp, r7
 800317e:	bd80      	pop	{r7, pc}
 8003180:	58024400 	.word	0x58024400
 8003184:	08006678 	.word	0x08006678
 8003188:	24000004 	.word	0x24000004
 800318c:	24000000 	.word	0x24000000

08003190 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003194:	f7ff ffcc 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8003198:	4602      	mov	r2, r0
 800319a:	4b06      	ldr	r3, [pc, #24]	; (80031b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800319c:	69db      	ldr	r3, [r3, #28]
 800319e:	091b      	lsrs	r3, r3, #4
 80031a0:	f003 0307 	and.w	r3, r3, #7
 80031a4:	4904      	ldr	r1, [pc, #16]	; (80031b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80031a6:	5ccb      	ldrb	r3, [r1, r3]
 80031a8:	f003 031f 	and.w	r3, r3, #31
 80031ac:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	bd80      	pop	{r7, pc}
 80031b4:	58024400 	.word	0x58024400
 80031b8:	08006678 	.word	0x08006678

080031bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80031c0:	f7ff ffb6 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 80031c4:	4602      	mov	r2, r0
 80031c6:	4b06      	ldr	r3, [pc, #24]	; (80031e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80031c8:	69db      	ldr	r3, [r3, #28]
 80031ca:	0a1b      	lsrs	r3, r3, #8
 80031cc:	f003 0307 	and.w	r3, r3, #7
 80031d0:	4904      	ldr	r1, [pc, #16]	; (80031e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80031d2:	5ccb      	ldrb	r3, [r1, r3]
 80031d4:	f003 031f 	and.w	r3, r3, #31
 80031d8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80031dc:	4618      	mov	r0, r3
 80031de:	bd80      	pop	{r7, pc}
 80031e0:	58024400 	.word	0x58024400
 80031e4:	08006678 	.word	0x08006678

080031e8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80031e8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031ec:	b0ca      	sub	sp, #296	; 0x128
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80031f4:	2300      	movs	r3, #0
 80031f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80031fa:	2300      	movs	r3, #0
 80031fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003200:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003208:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 800320c:	2500      	movs	r5, #0
 800320e:	ea54 0305 	orrs.w	r3, r4, r5
 8003212:	d049      	beq.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8003214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003218:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800321a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800321e:	d02f      	beq.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8003220:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003224:	d828      	bhi.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003226:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800322a:	d01a      	beq.n	8003262 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800322c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003230:	d822      	bhi.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8003232:	2b00      	cmp	r3, #0
 8003234:	d003      	beq.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8003236:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800323a:	d007      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800323c:	e01c      	b.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800323e:	4bb8      	ldr	r3, [pc, #736]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003242:	4ab7      	ldr	r2, [pc, #732]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003244:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003248:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800324a:	e01a      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800324c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003250:	3308      	adds	r3, #8
 8003252:	2102      	movs	r1, #2
 8003254:	4618      	mov	r0, r3
 8003256:	f001 fc8f 	bl	8004b78 <RCCEx_PLL2_Config>
 800325a:	4603      	mov	r3, r0
 800325c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003260:	e00f      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003262:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003266:	3328      	adds	r3, #40	; 0x28
 8003268:	2102      	movs	r1, #2
 800326a:	4618      	mov	r0, r3
 800326c:	f001 fd36 	bl	8004cdc <RCCEx_PLL3_Config>
 8003270:	4603      	mov	r3, r0
 8003272:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8003276:	e004      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800327e:	e000      	b.n	8003282 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8003280:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003282:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800328a:	4ba5      	ldr	r3, [pc, #660]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800328c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800328e:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 8003292:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003296:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003298:	4aa1      	ldr	r2, [pc, #644]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800329a:	430b      	orrs	r3, r1
 800329c:	6513      	str	r3, [r2, #80]	; 0x50
 800329e:	e003      	b.n	80032a8 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032a0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80032a4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80032a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b0:	f402 7880 	and.w	r8, r2, #256	; 0x100
 80032b4:	f04f 0900 	mov.w	r9, #0
 80032b8:	ea58 0309 	orrs.w	r3, r8, r9
 80032bc:	d047      	beq.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80032be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032c4:	2b04      	cmp	r3, #4
 80032c6:	d82a      	bhi.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80032c8:	a201      	add	r2, pc, #4	; (adr r2, 80032d0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80032ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032ce:	bf00      	nop
 80032d0:	080032e5 	.word	0x080032e5
 80032d4:	080032f3 	.word	0x080032f3
 80032d8:	08003309 	.word	0x08003309
 80032dc:	08003327 	.word	0x08003327
 80032e0:	08003327 	.word	0x08003327
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80032e4:	4b8e      	ldr	r3, [pc, #568]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032e8:	4a8d      	ldr	r2, [pc, #564]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80032ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80032ee:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80032f0:	e01a      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80032f2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80032f6:	3308      	adds	r3, #8
 80032f8:	2100      	movs	r1, #0
 80032fa:	4618      	mov	r0, r3
 80032fc:	f001 fc3c 	bl	8004b78 <RCCEx_PLL2_Config>
 8003300:	4603      	mov	r3, r0
 8003302:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003306:	e00f      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003308:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800330c:	3328      	adds	r3, #40	; 0x28
 800330e:	2100      	movs	r1, #0
 8003310:	4618      	mov	r0, r3
 8003312:	f001 fce3 	bl	8004cdc <RCCEx_PLL3_Config>
 8003316:	4603      	mov	r3, r0
 8003318:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800331c:	e004      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003324:	e000      	b.n	8003328 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8003326:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003328:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800332c:	2b00      	cmp	r3, #0
 800332e:	d10a      	bne.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003330:	4b7b      	ldr	r3, [pc, #492]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003332:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003334:	f023 0107 	bic.w	r1, r3, #7
 8003338:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800333c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800333e:	4a78      	ldr	r2, [pc, #480]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003340:	430b      	orrs	r3, r1
 8003342:	6513      	str	r3, [r2, #80]	; 0x50
 8003344:	e003      	b.n	800334e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003346:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800334a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800334e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003356:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 800335a:	f04f 0b00 	mov.w	fp, #0
 800335e:	ea5a 030b 	orrs.w	r3, sl, fp
 8003362:	d04c      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8003364:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800336a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800336e:	d030      	beq.n	80033d2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8003370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003374:	d829      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003376:	2bc0      	cmp	r3, #192	; 0xc0
 8003378:	d02d      	beq.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800337a:	2bc0      	cmp	r3, #192	; 0xc0
 800337c:	d825      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800337e:	2b80      	cmp	r3, #128	; 0x80
 8003380:	d018      	beq.n	80033b4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8003382:	2b80      	cmp	r3, #128	; 0x80
 8003384:	d821      	bhi.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8003386:	2b00      	cmp	r3, #0
 8003388:	d002      	beq.n	8003390 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800338a:	2b40      	cmp	r3, #64	; 0x40
 800338c:	d007      	beq.n	800339e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800338e:	e01c      	b.n	80033ca <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003390:	4b63      	ldr	r3, [pc, #396]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003392:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003394:	4a62      	ldr	r2, [pc, #392]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003396:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800339a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800339c:	e01c      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800339e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033a2:	3308      	adds	r3, #8
 80033a4:	2100      	movs	r1, #0
 80033a6:	4618      	mov	r0, r3
 80033a8:	f001 fbe6 	bl	8004b78 <RCCEx_PLL2_Config>
 80033ac:	4603      	mov	r3, r0
 80033ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033b2:	e011      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80033b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033b8:	3328      	adds	r3, #40	; 0x28
 80033ba:	2100      	movs	r1, #0
 80033bc:	4618      	mov	r0, r3
 80033be:	f001 fc8d 	bl	8004cdc <RCCEx_PLL3_Config>
 80033c2:	4603      	mov	r3, r0
 80033c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80033c8:	e006      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80033ca:	2301      	movs	r3, #1
 80033cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80033d0:	e002      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033d2:	bf00      	nop
 80033d4:	e000      	b.n	80033d8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80033d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80033d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10a      	bne.n	80033f6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80033e0:	4b4f      	ldr	r3, [pc, #316]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e4:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 80033e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	4a4c      	ldr	r2, [pc, #304]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80033f0:	430b      	orrs	r3, r1
 80033f2:	6513      	str	r3, [r2, #80]	; 0x50
 80033f4:	e003      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033f6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80033fa:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80033fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003406:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 800340a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800340e:	2300      	movs	r3, #0
 8003410:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8003414:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8003418:	460b      	mov	r3, r1
 800341a:	4313      	orrs	r3, r2
 800341c:	d053      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800341e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003422:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8003426:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800342a:	d035      	beq.n	8003498 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800342c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003430:	d82e      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8003432:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8003436:	d031      	beq.n	800349c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8003438:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 800343c:	d828      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800343e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003442:	d01a      	beq.n	800347a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8003444:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003448:	d822      	bhi.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800344e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003452:	d007      	beq.n	8003464 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8003454:	e01c      	b.n	8003490 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003456:	4b32      	ldr	r3, [pc, #200]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	4a31      	ldr	r2, [pc, #196]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800345c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003460:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003462:	e01c      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003464:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003468:	3308      	adds	r3, #8
 800346a:	2100      	movs	r1, #0
 800346c:	4618      	mov	r0, r3
 800346e:	f001 fb83 	bl	8004b78 <RCCEx_PLL2_Config>
 8003472:	4603      	mov	r3, r0
 8003474:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003478:	e011      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800347a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800347e:	3328      	adds	r3, #40	; 0x28
 8003480:	2100      	movs	r1, #0
 8003482:	4618      	mov	r0, r3
 8003484:	f001 fc2a 	bl	8004cdc <RCCEx_PLL3_Config>
 8003488:	4603      	mov	r3, r0
 800348a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800348e:	e006      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8003490:	2301      	movs	r3, #1
 8003492:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003496:	e002      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8003498:	bf00      	nop
 800349a:	e000      	b.n	800349e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800349c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800349e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d10b      	bne.n	80034be <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80034a6:	4b1e      	ldr	r3, [pc, #120]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80034aa:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 80034ae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80034b6:	4a1a      	ldr	r2, [pc, #104]	; (8003520 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80034b8:	430b      	orrs	r3, r1
 80034ba:	6593      	str	r3, [r2, #88]	; 0x58
 80034bc:	e003      	b.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80034be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80034c2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80034c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ce:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 80034d2:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80034d6:	2300      	movs	r3, #0
 80034d8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80034dc:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 80034e0:	460b      	mov	r3, r1
 80034e2:	4313      	orrs	r3, r2
 80034e4:	d056      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80034e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80034ea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 80034ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034f2:	d038      	beq.n	8003566 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80034f4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80034f8:	d831      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80034fa:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80034fe:	d034      	beq.n	800356a <HAL_RCCEx_PeriphCLKConfig+0x382>
 8003500:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003504:	d82b      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003506:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800350a:	d01d      	beq.n	8003548 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800350c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003510:	d825      	bhi.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8003512:	2b00      	cmp	r3, #0
 8003514:	d006      	beq.n	8003524 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8003516:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800351a:	d00a      	beq.n	8003532 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800351c:	e01f      	b.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800351e:	bf00      	nop
 8003520:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003524:	4ba2      	ldr	r3, [pc, #648]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003528:	4aa1      	ldr	r2, [pc, #644]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800352a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800352e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8003530:	e01c      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003532:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003536:	3308      	adds	r3, #8
 8003538:	2100      	movs	r1, #0
 800353a:	4618      	mov	r0, r3
 800353c:	f001 fb1c 	bl	8004b78 <RCCEx_PLL2_Config>
 8003540:	4603      	mov	r3, r0
 8003542:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8003546:	e011      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8003548:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800354c:	3328      	adds	r3, #40	; 0x28
 800354e:	2100      	movs	r1, #0
 8003550:	4618      	mov	r0, r3
 8003552:	f001 fbc3 	bl	8004cdc <RCCEx_PLL3_Config>
 8003556:	4603      	mov	r3, r0
 8003558:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800355c:	e006      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003564:	e002      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8003566:	bf00      	nop
 8003568:	e000      	b.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800356a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800356c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003570:	2b00      	cmp	r3, #0
 8003572:	d10b      	bne.n	800358c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8003574:	4b8e      	ldr	r3, [pc, #568]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003576:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003578:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 800357c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003580:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8003584:	4a8a      	ldr	r2, [pc, #552]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003586:	430b      	orrs	r3, r1
 8003588:	6593      	str	r3, [r2, #88]	; 0x58
 800358a:	e003      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800358c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003590:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8003594:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800359c:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 80035a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80035a4:	2300      	movs	r3, #0
 80035a6:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80035aa:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80035ae:	460b      	mov	r3, r1
 80035b0:	4313      	orrs	r3, r2
 80035b2:	d03a      	beq.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80035b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ba:	2b30      	cmp	r3, #48	; 0x30
 80035bc:	d01f      	beq.n	80035fe <HAL_RCCEx_PeriphCLKConfig+0x416>
 80035be:	2b30      	cmp	r3, #48	; 0x30
 80035c0:	d819      	bhi.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035c2:	2b20      	cmp	r3, #32
 80035c4:	d00c      	beq.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80035c6:	2b20      	cmp	r3, #32
 80035c8:	d815      	bhi.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d019      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80035ce:	2b10      	cmp	r3, #16
 80035d0:	d111      	bne.n	80035f6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80035d2:	4b77      	ldr	r3, [pc, #476]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035d6:	4a76      	ldr	r2, [pc, #472]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80035d8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80035dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80035de:	e011      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80035e0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80035e4:	3308      	adds	r3, #8
 80035e6:	2102      	movs	r1, #2
 80035e8:	4618      	mov	r0, r3
 80035ea:	f001 fac5 	bl	8004b78 <RCCEx_PLL2_Config>
 80035ee:	4603      	mov	r3, r0
 80035f0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80035f4:	e006      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80035fc:	e002      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80035fe:	bf00      	nop
 8003600:	e000      	b.n	8003604 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8003602:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003604:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003608:	2b00      	cmp	r3, #0
 800360a:	d10a      	bne.n	8003622 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800360c:	4b68      	ldr	r3, [pc, #416]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800360e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003610:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8003614:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800361a:	4a65      	ldr	r2, [pc, #404]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800361c:	430b      	orrs	r3, r1
 800361e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003620:	e003      	b.n	800362a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003622:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003626:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800362a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800362e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003632:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 8003636:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 800363a:	2300      	movs	r3, #0
 800363c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8003640:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8003644:	460b      	mov	r3, r1
 8003646:	4313      	orrs	r3, r2
 8003648:	d051      	beq.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800364a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800364e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003650:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003654:	d035      	beq.n	80036c2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8003656:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800365a:	d82e      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800365c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003660:	d031      	beq.n	80036c6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8003662:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003666:	d828      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800366c:	d01a      	beq.n	80036a4 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800366e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003672:	d822      	bhi.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8003678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800367c:	d007      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800367e:	e01c      	b.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003680:	4b4b      	ldr	r3, [pc, #300]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	4a4a      	ldr	r2, [pc, #296]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8003686:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800368a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800368c:	e01c      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800368e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003692:	3308      	adds	r3, #8
 8003694:	2100      	movs	r1, #0
 8003696:	4618      	mov	r0, r3
 8003698:	f001 fa6e 	bl	8004b78 <RCCEx_PLL2_Config>
 800369c:	4603      	mov	r3, r0
 800369e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036a2:	e011      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80036a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036a8:	3328      	adds	r3, #40	; 0x28
 80036aa:	2100      	movs	r1, #0
 80036ac:	4618      	mov	r0, r3
 80036ae:	f001 fb15 	bl	8004cdc <RCCEx_PLL3_Config>
 80036b2:	4603      	mov	r3, r0
 80036b4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 80036b8:	e006      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80036ba:	2301      	movs	r3, #1
 80036bc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80036c0:	e002      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036c2:	bf00      	nop
 80036c4:	e000      	b.n	80036c8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 80036c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036c8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80036d0:	4b37      	ldr	r3, [pc, #220]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036d4:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 80036d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036de:	4a34      	ldr	r2, [pc, #208]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80036e0:	430b      	orrs	r3, r1
 80036e2:	6513      	str	r3, [r2, #80]	; 0x50
 80036e4:	e003      	b.n	80036ee <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036e6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80036ea:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80036ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80036f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036f6:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 80036fa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80036fe:	2300      	movs	r3, #0
 8003700:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003704:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8003708:	460b      	mov	r3, r1
 800370a:	4313      	orrs	r3, r2
 800370c:	d056      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800370e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003712:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003714:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003718:	d033      	beq.n	8003782 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800371a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800371e:	d82c      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003720:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003724:	d02f      	beq.n	8003786 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8003726:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800372a:	d826      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x592>
 800372c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003730:	d02b      	beq.n	800378a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8003732:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003736:	d820      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003738:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800373c:	d012      	beq.n	8003764 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800373e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003742:	d81a      	bhi.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8003744:	2b00      	cmp	r3, #0
 8003746:	d022      	beq.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8003748:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800374c:	d115      	bne.n	800377a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800374e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003752:	3308      	adds	r3, #8
 8003754:	2101      	movs	r1, #1
 8003756:	4618      	mov	r0, r3
 8003758:	f001 fa0e 	bl	8004b78 <RCCEx_PLL2_Config>
 800375c:	4603      	mov	r3, r0
 800375e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003762:	e015      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003764:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003768:	3328      	adds	r3, #40	; 0x28
 800376a:	2101      	movs	r1, #1
 800376c:	4618      	mov	r0, r3
 800376e:	f001 fab5 	bl	8004cdc <RCCEx_PLL3_Config>
 8003772:	4603      	mov	r3, r0
 8003774:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8003778:	e00a      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003780:	e006      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003782:	bf00      	nop
 8003784:	e004      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8003786:	bf00      	nop
 8003788:	e002      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800378a:	bf00      	nop
 800378c:	e000      	b.n	8003790 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800378e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003790:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003794:	2b00      	cmp	r3, #0
 8003796:	d10d      	bne.n	80037b4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8003798:	4b05      	ldr	r3, [pc, #20]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800379a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800379c:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 80037a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037a4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80037a6:	4a02      	ldr	r2, [pc, #8]	; (80037b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80037a8:	430b      	orrs	r3, r1
 80037aa:	6513      	str	r3, [r2, #80]	; 0x50
 80037ac:	e006      	b.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 80037ae:	bf00      	nop
 80037b0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80037b4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80037b8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 80037bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037c4:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 80037c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80037cc:	2300      	movs	r3, #0
 80037ce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80037d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4313      	orrs	r3, r2
 80037da:	d055      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 80037dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80037e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80037e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037e8:	d033      	beq.n	8003852 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 80037ea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037ee:	d82c      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80037f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037f4:	d02f      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 80037f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80037fa:	d826      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x662>
 80037fc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003800:	d02b      	beq.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8003802:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003806:	d820      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003808:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800380c:	d012      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800380e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003812:	d81a      	bhi.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8003814:	2b00      	cmp	r3, #0
 8003816:	d022      	beq.n	800385e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8003818:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800381c:	d115      	bne.n	800384a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800381e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003822:	3308      	adds	r3, #8
 8003824:	2101      	movs	r1, #1
 8003826:	4618      	mov	r0, r3
 8003828:	f001 f9a6 	bl	8004b78 <RCCEx_PLL2_Config>
 800382c:	4603      	mov	r3, r0
 800382e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003832:	e015      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003834:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003838:	3328      	adds	r3, #40	; 0x28
 800383a:	2101      	movs	r1, #1
 800383c:	4618      	mov	r0, r3
 800383e:	f001 fa4d 	bl	8004cdc <RCCEx_PLL3_Config>
 8003842:	4603      	mov	r3, r0
 8003844:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8003848:	e00a      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800384a:	2301      	movs	r3, #1
 800384c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003850:	e006      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003852:	bf00      	nop
 8003854:	e004      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8003856:	bf00      	nop
 8003858:	e002      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800385a:	bf00      	nop
 800385c:	e000      	b.n	8003860 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800385e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003860:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003864:	2b00      	cmp	r3, #0
 8003866:	d10b      	bne.n	8003880 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8003868:	4ba3      	ldr	r3, [pc, #652]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800386a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386c:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003870:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003874:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8003878:	4a9f      	ldr	r2, [pc, #636]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800387a:	430b      	orrs	r3, r1
 800387c:	6593      	str	r3, [r2, #88]	; 0x58
 800387e:	e003      	b.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003880:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003884:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003888:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800388c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003890:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8003894:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003898:	2300      	movs	r3, #0
 800389a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800389e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80038a2:	460b      	mov	r3, r1
 80038a4:	4313      	orrs	r3, r2
 80038a6:	d037      	beq.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 80038a8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ae:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b2:	d00e      	beq.n	80038d2 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 80038b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038b8:	d816      	bhi.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d018      	beq.n	80038f0 <HAL_RCCEx_PeriphCLKConfig+0x708>
 80038be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80038c2:	d111      	bne.n	80038e8 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c4:	4b8c      	ldr	r3, [pc, #560]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038c8:	4a8b      	ldr	r2, [pc, #556]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038d0:	e00f      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80038d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80038d6:	3308      	adds	r3, #8
 80038d8:	2101      	movs	r1, #1
 80038da:	4618      	mov	r0, r3
 80038dc:	f001 f94c 	bl	8004b78 <RCCEx_PLL2_Config>
 80038e0:	4603      	mov	r3, r0
 80038e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80038e6:	e004      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80038e8:	2301      	movs	r3, #1
 80038ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80038ee:	e000      	b.n	80038f2 <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 80038f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80038f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d10a      	bne.n	8003910 <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80038fa:	4b7f      	ldr	r3, [pc, #508]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 80038fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038fe:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8003902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003906:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003908:	4a7b      	ldr	r2, [pc, #492]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800390a:	430b      	orrs	r3, r1
 800390c:	6513      	str	r3, [r2, #80]	; 0x50
 800390e:	e003      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003910:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003914:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8003918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800391c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003920:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8003924:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003928:	2300      	movs	r3, #0
 800392a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800392e:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8003932:	460b      	mov	r3, r1
 8003934:	4313      	orrs	r3, r2
 8003936:	d039      	beq.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8003938:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800393c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800393e:	2b03      	cmp	r3, #3
 8003940:	d81c      	bhi.n	800397c <HAL_RCCEx_PeriphCLKConfig+0x794>
 8003942:	a201      	add	r2, pc, #4	; (adr r2, 8003948 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	08003985 	.word	0x08003985
 800394c:	08003959 	.word	0x08003959
 8003950:	08003967 	.word	0x08003967
 8003954:	08003985 	.word	0x08003985
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003958:	4b67      	ldr	r3, [pc, #412]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800395a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800395c:	4a66      	ldr	r2, [pc, #408]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800395e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003962:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8003964:	e00f      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003966:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800396a:	3308      	adds	r3, #8
 800396c:	2102      	movs	r1, #2
 800396e:	4618      	mov	r0, r3
 8003970:	f001 f902 	bl	8004b78 <RCCEx_PLL2_Config>
 8003974:	4603      	mov	r3, r0
 8003976:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 800397a:	e004      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800397c:	2301      	movs	r3, #1
 800397e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003982:	e000      	b.n	8003986 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 8003984:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003986:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800398a:	2b00      	cmp	r3, #0
 800398c:	d10a      	bne.n	80039a4 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800398e:	4b5a      	ldr	r3, [pc, #360]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003992:	f023 0103 	bic.w	r1, r3, #3
 8003996:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800399a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800399c:	4a56      	ldr	r2, [pc, #344]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 800399e:	430b      	orrs	r3, r1
 80039a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039a2:	e003      	b.n	80039ac <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039a4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80039a8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80039ac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80039b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039b4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80039b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80039bc:	2300      	movs	r3, #0
 80039be:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80039c2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80039c6:	460b      	mov	r3, r1
 80039c8:	4313      	orrs	r3, r2
 80039ca:	f000 809f 	beq.w	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80039ce:	4b4b      	ldr	r3, [pc, #300]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	4a4a      	ldr	r2, [pc, #296]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80039da:	f7fd fb3f 	bl	800105c <HAL_GetTick>
 80039de:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039e2:	e00b      	b.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80039e4:	f7fd fb3a 	bl	800105c <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b64      	cmp	r3, #100	; 0x64
 80039f2:	d903      	bls.n	80039fc <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80039fa:	e005      	b.n	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80039fc:	4b3f      	ldr	r3, [pc, #252]	; (8003afc <HAL_RCCEx_PeriphCLKConfig+0x914>)
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d0ed      	beq.n	80039e4 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8003a08:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d179      	bne.n	8003b04 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8003a10:	4b39      	ldr	r3, [pc, #228]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a12:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003a14:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a18:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a1c:	4053      	eors	r3, r2
 8003a1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d015      	beq.n	8003a52 <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a26:	4b34      	ldr	r3, [pc, #208]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a2e:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003a32:	4b31      	ldr	r3, [pc, #196]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a36:	4a30      	ldr	r2, [pc, #192]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a3c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003a3e:	4b2e      	ldr	r3, [pc, #184]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a42:	4a2d      	ldr	r2, [pc, #180]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a44:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a48:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8003a4a:	4a2b      	ldr	r2, [pc, #172]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8003a50:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8003a52:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a56:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003a5a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003a5e:	d118      	bne.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a60:	f7fd fafc 	bl	800105c <HAL_GetTick>
 8003a64:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a68:	e00d      	b.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003a6a:	f7fd faf7 	bl	800105c <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8003a74:	1ad2      	subs	r2, r2, r3
 8003a76:	f241 3388 	movw	r3, #5000	; 0x1388
 8003a7a:	429a      	cmp	r2, r3
 8003a7c:	d903      	bls.n	8003a86 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 8003a84:	e005      	b.n	8003a92 <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003a86:	4b1c      	ldr	r3, [pc, #112]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003a88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003a8a:	f003 0302 	and.w	r3, r3, #2
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d0eb      	beq.n	8003a6a <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 8003a92:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d129      	bne.n	8003aee <HAL_RCCEx_PeriphCLKConfig+0x906>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003a9e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003aa2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003aa6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aaa:	d10e      	bne.n	8003aca <HAL_RCCEx_PeriphCLKConfig+0x8e2>
 8003aac:	4b12      	ldr	r3, [pc, #72]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8003ab4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ab8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003abc:	091a      	lsrs	r2, r3, #4
 8003abe:	4b10      	ldr	r3, [pc, #64]	; (8003b00 <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8003ac0:	4013      	ands	r3, r2
 8003ac2:	4a0d      	ldr	r2, [pc, #52]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ac4:	430b      	orrs	r3, r1
 8003ac6:	6113      	str	r3, [r2, #16]
 8003ac8:	e005      	b.n	8003ad6 <HAL_RCCEx_PeriphCLKConfig+0x8ee>
 8003aca:	4b0b      	ldr	r3, [pc, #44]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003acc:	691b      	ldr	r3, [r3, #16]
 8003ace:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad0:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003ad4:	6113      	str	r3, [r2, #16]
 8003ad6:	4b08      	ldr	r3, [pc, #32]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ad8:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8003ada:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ade:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8003ae2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003ae6:	4a04      	ldr	r2, [pc, #16]	; (8003af8 <HAL_RCCEx_PeriphCLKConfig+0x910>)
 8003ae8:	430b      	orrs	r3, r1
 8003aea:	6713      	str	r3, [r2, #112]	; 0x70
 8003aec:	e00e      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003aee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003af2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8003af6:	e009      	b.n	8003b0c <HAL_RCCEx_PeriphCLKConfig+0x924>
 8003af8:	58024400 	.word	0x58024400
 8003afc:	58024800 	.word	0x58024800
 8003b00:	00ffffcf 	.word	0x00ffffcf
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003b04:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003b08:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8003b0c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b14:	f002 0301 	and.w	r3, r2, #1
 8003b18:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003b1c:	2300      	movs	r3, #0
 8003b1e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003b22:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003b26:	460b      	mov	r3, r1
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	f000 8089 	beq.w	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8003b2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003b32:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003b34:	2b28      	cmp	r3, #40	; 0x28
 8003b36:	d86b      	bhi.n	8003c10 <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8003b38:	a201      	add	r2, pc, #4	; (adr r2, 8003b40 <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8003b3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3e:	bf00      	nop
 8003b40:	08003c19 	.word	0x08003c19
 8003b44:	08003c11 	.word	0x08003c11
 8003b48:	08003c11 	.word	0x08003c11
 8003b4c:	08003c11 	.word	0x08003c11
 8003b50:	08003c11 	.word	0x08003c11
 8003b54:	08003c11 	.word	0x08003c11
 8003b58:	08003c11 	.word	0x08003c11
 8003b5c:	08003c11 	.word	0x08003c11
 8003b60:	08003be5 	.word	0x08003be5
 8003b64:	08003c11 	.word	0x08003c11
 8003b68:	08003c11 	.word	0x08003c11
 8003b6c:	08003c11 	.word	0x08003c11
 8003b70:	08003c11 	.word	0x08003c11
 8003b74:	08003c11 	.word	0x08003c11
 8003b78:	08003c11 	.word	0x08003c11
 8003b7c:	08003c11 	.word	0x08003c11
 8003b80:	08003bfb 	.word	0x08003bfb
 8003b84:	08003c11 	.word	0x08003c11
 8003b88:	08003c11 	.word	0x08003c11
 8003b8c:	08003c11 	.word	0x08003c11
 8003b90:	08003c11 	.word	0x08003c11
 8003b94:	08003c11 	.word	0x08003c11
 8003b98:	08003c11 	.word	0x08003c11
 8003b9c:	08003c11 	.word	0x08003c11
 8003ba0:	08003c19 	.word	0x08003c19
 8003ba4:	08003c11 	.word	0x08003c11
 8003ba8:	08003c11 	.word	0x08003c11
 8003bac:	08003c11 	.word	0x08003c11
 8003bb0:	08003c11 	.word	0x08003c11
 8003bb4:	08003c11 	.word	0x08003c11
 8003bb8:	08003c11 	.word	0x08003c11
 8003bbc:	08003c11 	.word	0x08003c11
 8003bc0:	08003c19 	.word	0x08003c19
 8003bc4:	08003c11 	.word	0x08003c11
 8003bc8:	08003c11 	.word	0x08003c11
 8003bcc:	08003c11 	.word	0x08003c11
 8003bd0:	08003c11 	.word	0x08003c11
 8003bd4:	08003c11 	.word	0x08003c11
 8003bd8:	08003c11 	.word	0x08003c11
 8003bdc:	08003c11 	.word	0x08003c11
 8003be0:	08003c19 	.word	0x08003c19
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003be4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003be8:	3308      	adds	r3, #8
 8003bea:	2101      	movs	r1, #1
 8003bec:	4618      	mov	r0, r3
 8003bee:	f000 ffc3 	bl	8004b78 <RCCEx_PLL2_Config>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003bf8:	e00f      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003bfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003bfe:	3328      	adds	r3, #40	; 0x28
 8003c00:	2101      	movs	r1, #1
 8003c02:	4618      	mov	r0, r3
 8003c04:	f001 f86a 	bl	8004cdc <RCCEx_PLL3_Config>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003c0e:	e004      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003c16:	e000      	b.n	8003c1a <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8003c18:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003c1a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10a      	bne.n	8003c38 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8003c22:	4bbf      	ldr	r3, [pc, #764]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c26:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8003c2a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003c30:	4abb      	ldr	r2, [pc, #748]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003c32:	430b      	orrs	r3, r1
 8003c34:	6553      	str	r3, [r2, #84]	; 0x54
 8003c36:	e003      	b.n	8003c40 <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003c38:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003c3c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8003c40:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c48:	f002 0302 	and.w	r3, r2, #2
 8003c4c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003c50:	2300      	movs	r3, #0
 8003c52:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003c56:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8003c5a:	460b      	mov	r3, r1
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	d041      	beq.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8003c60:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c64:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c66:	2b05      	cmp	r3, #5
 8003c68:	d824      	bhi.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8003c6a:	a201      	add	r2, pc, #4	; (adr r2, 8003c70 <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8003c6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c70:	08003cbd 	.word	0x08003cbd
 8003c74:	08003c89 	.word	0x08003c89
 8003c78:	08003c9f 	.word	0x08003c9f
 8003c7c:	08003cbd 	.word	0x08003cbd
 8003c80:	08003cbd 	.word	0x08003cbd
 8003c84:	08003cbd 	.word	0x08003cbd
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003c88:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003c8c:	3308      	adds	r3, #8
 8003c8e:	2101      	movs	r1, #1
 8003c90:	4618      	mov	r0, r3
 8003c92:	f000 ff71 	bl	8004b78 <RCCEx_PLL2_Config>
 8003c96:	4603      	mov	r3, r0
 8003c98:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003c9c:	e00f      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003c9e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ca2:	3328      	adds	r3, #40	; 0x28
 8003ca4:	2101      	movs	r1, #1
 8003ca6:	4618      	mov	r0, r3
 8003ca8:	f001 f818 	bl	8004cdc <RCCEx_PLL3_Config>
 8003cac:	4603      	mov	r3, r0
 8003cae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003cb2:	e004      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003cba:	e000      	b.n	8003cbe <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8003cbc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003cbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d10a      	bne.n	8003cdc <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003cc6:	4b96      	ldr	r3, [pc, #600]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cc8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cca:	f023 0107 	bic.w	r1, r3, #7
 8003cce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003cd2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003cd4:	4a92      	ldr	r2, [pc, #584]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003cd6:	430b      	orrs	r3, r1
 8003cd8:	6553      	str	r3, [r2, #84]	; 0x54
 8003cda:	e003      	b.n	8003ce4 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cdc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ce0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003ce4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ce8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cec:	f002 0304 	and.w	r3, r2, #4
 8003cf0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003cfa:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4313      	orrs	r3, r2
 8003d02:	d044      	beq.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003d04:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d08:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d0c:	2b05      	cmp	r3, #5
 8003d0e:	d825      	bhi.n	8003d5c <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8003d10:	a201      	add	r2, pc, #4	; (adr r2, 8003d18 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8003d12:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d16:	bf00      	nop
 8003d18:	08003d65 	.word	0x08003d65
 8003d1c:	08003d31 	.word	0x08003d31
 8003d20:	08003d47 	.word	0x08003d47
 8003d24:	08003d65 	.word	0x08003d65
 8003d28:	08003d65 	.word	0x08003d65
 8003d2c:	08003d65 	.word	0x08003d65
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003d30:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d34:	3308      	adds	r3, #8
 8003d36:	2101      	movs	r1, #1
 8003d38:	4618      	mov	r0, r3
 8003d3a:	f000 ff1d 	bl	8004b78 <RCCEx_PLL2_Config>
 8003d3e:	4603      	mov	r3, r0
 8003d40:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d44:	e00f      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003d46:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d4a:	3328      	adds	r3, #40	; 0x28
 8003d4c:	2101      	movs	r1, #1
 8003d4e:	4618      	mov	r0, r3
 8003d50:	f000 ffc4 	bl	8004cdc <RCCEx_PLL3_Config>
 8003d54:	4603      	mov	r3, r0
 8003d56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8003d5a:	e004      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003d62:	e000      	b.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8003d64:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003d66:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d10b      	bne.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d6e:	4b6c      	ldr	r3, [pc, #432]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d72:	f023 0107 	bic.w	r1, r3, #7
 8003d76:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003d7e:	4a68      	ldr	r2, [pc, #416]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003d80:	430b      	orrs	r3, r1
 8003d82:	6593      	str	r3, [r2, #88]	; 0x58
 8003d84:	e003      	b.n	8003d8e <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003d86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003d8a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8003d8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003d92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d96:	f002 0320 	and.w	r3, r2, #32
 8003d9a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003d9e:	2300      	movs	r3, #0
 8003da0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003da4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003da8:	460b      	mov	r3, r1
 8003daa:	4313      	orrs	r3, r2
 8003dac:	d055      	beq.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8003dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003db6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dba:	d033      	beq.n	8003e24 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8003dbc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003dc0:	d82c      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dc6:	d02f      	beq.n	8003e28 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8003dc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003dcc:	d826      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dce:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003dd2:	d02b      	beq.n	8003e2c <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8003dd4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8003dd8:	d820      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003dda:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003dde:	d012      	beq.n	8003e06 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8003de0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003de4:	d81a      	bhi.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d022      	beq.n	8003e30 <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8003dea:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003dee:	d115      	bne.n	8003e1c <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003df0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003df4:	3308      	adds	r3, #8
 8003df6:	2100      	movs	r1, #0
 8003df8:	4618      	mov	r0, r3
 8003dfa:	f000 febd 	bl	8004b78 <RCCEx_PLL2_Config>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e04:	e015      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003e06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e0a:	3328      	adds	r3, #40	; 0x28
 8003e0c:	2102      	movs	r1, #2
 8003e0e:	4618      	mov	r0, r3
 8003e10:	f000 ff64 	bl	8004cdc <RCCEx_PLL3_Config>
 8003e14:	4603      	mov	r3, r0
 8003e16:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003e1a:	e00a      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003e22:	e006      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e24:	bf00      	nop
 8003e26:	e004      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e28:	bf00      	nop
 8003e2a:	e002      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e2c:	bf00      	nop
 8003e2e:	e000      	b.n	8003e32 <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8003e30:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003e32:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	d10b      	bne.n	8003e52 <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003e3a:	4b39      	ldr	r3, [pc, #228]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e3e:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8003e42:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	4a35      	ldr	r2, [pc, #212]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003e4c:	430b      	orrs	r3, r1
 8003e4e:	6553      	str	r3, [r2, #84]	; 0x54
 8003e50:	e003      	b.n	8003e5a <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003e52:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003e56:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8003e5a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e62:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8003e66:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003e70:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4313      	orrs	r3, r2
 8003e78:	d058      	beq.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8003e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003e82:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e86:	d033      	beq.n	8003ef0 <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8003e88:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8003e8c:	d82c      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e92:	d02f      	beq.n	8003ef4 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8003e94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003e98:	d826      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003e9a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003e9e:	d02b      	beq.n	8003ef8 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8003ea0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003ea4:	d820      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003ea6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eaa:	d012      	beq.n	8003ed2 <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8003eac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003eb0:	d81a      	bhi.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d022      	beq.n	8003efc <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8003eb6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003eba:	d115      	bne.n	8003ee8 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003ebc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ec0:	3308      	adds	r3, #8
 8003ec2:	2100      	movs	r1, #0
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	f000 fe57 	bl	8004b78 <RCCEx_PLL2_Config>
 8003eca:	4603      	mov	r3, r0
 8003ecc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ed0:	e015      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003ed2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ed6:	3328      	adds	r3, #40	; 0x28
 8003ed8:	2102      	movs	r1, #2
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fefe 	bl	8004cdc <RCCEx_PLL3_Config>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003ee6:	e00a      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003eee:	e006      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ef0:	bf00      	nop
 8003ef2:	e004      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ef4:	bf00      	nop
 8003ef6:	e002      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003ef8:	bf00      	nop
 8003efa:	e000      	b.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8003efc:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003efe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d10e      	bne.n	8003f24 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003f06:	4b06      	ldr	r3, [pc, #24]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0a:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8003f0e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f12:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003f16:	4a02      	ldr	r2, [pc, #8]	; (8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8003f18:	430b      	orrs	r3, r1
 8003f1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003f1c:	e006      	b.n	8003f2c <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8003f1e:	bf00      	nop
 8003f20:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f24:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003f28:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8003f2c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f34:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8003f38:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003f42:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8003f46:	460b      	mov	r3, r1
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	d055      	beq.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8003f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003f54:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f58:	d033      	beq.n	8003fc2 <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8003f5a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8003f5e:	d82c      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f60:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f64:	d02f      	beq.n	8003fc6 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8003f66:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f6a:	d826      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f6c:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f70:	d02b      	beq.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8003f72:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8003f76:	d820      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f78:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f7c:	d012      	beq.n	8003fa4 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8003f7e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f82:	d81a      	bhi.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d022      	beq.n	8003fce <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8003f88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f8c:	d115      	bne.n	8003fba <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003f8e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003f92:	3308      	adds	r3, #8
 8003f94:	2100      	movs	r1, #0
 8003f96:	4618      	mov	r0, r3
 8003f98:	f000 fdee 	bl	8004b78 <RCCEx_PLL2_Config>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fa2:	e015      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003fa4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fa8:	3328      	adds	r3, #40	; 0x28
 8003faa:	2102      	movs	r1, #2
 8003fac:	4618      	mov	r0, r3
 8003fae:	f000 fe95 	bl	8004cdc <RCCEx_PLL3_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003fb8:	e00a      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8003fc0:	e006      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fc2:	bf00      	nop
 8003fc4:	e004      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fc6:	bf00      	nop
 8003fc8:	e002      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fca:	bf00      	nop
 8003fcc:	e000      	b.n	8003fd0 <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8003fce:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003fd0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d10b      	bne.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003fd8:	4ba1      	ldr	r3, [pc, #644]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fdc:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8003fe0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003fe4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8003fe8:	4a9d      	ldr	r2, [pc, #628]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8003fea:	430b      	orrs	r3, r1
 8003fec:	6593      	str	r3, [r2, #88]	; 0x58
 8003fee:	e003      	b.n	8003ff8 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003ff0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8003ff4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003ff8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	f002 0308 	and.w	r3, r2, #8
 8004004:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004008:	2300      	movs	r3, #0
 800400a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800400e:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8004012:	460b      	mov	r3, r1
 8004014:	4313      	orrs	r3, r2
 8004016:	d01e      	beq.n	8004056 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8004018:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800401c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004020:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004024:	d10c      	bne.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004026:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800402a:	3328      	adds	r3, #40	; 0x28
 800402c:	2102      	movs	r1, #2
 800402e:	4618      	mov	r0, r3
 8004030:	f000 fe54 	bl	8004cdc <RCCEx_PLL3_Config>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 800403a:	2301      	movs	r3, #1
 800403c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004040:	4b87      	ldr	r3, [pc, #540]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004042:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004044:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004048:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800404c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004050:	4a83      	ldr	r2, [pc, #524]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004052:	430b      	orrs	r3, r1
 8004054:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004056:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800405a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405e:	f002 0310 	and.w	r3, r2, #16
 8004062:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004066:	2300      	movs	r3, #0
 8004068:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800406c:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8004070:	460b      	mov	r3, r1
 8004072:	4313      	orrs	r3, r2
 8004074:	d01e      	beq.n	80040b4 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8004076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800407a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800407e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004082:	d10c      	bne.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004084:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004088:	3328      	adds	r3, #40	; 0x28
 800408a:	2102      	movs	r1, #2
 800408c:	4618      	mov	r0, r3
 800408e:	f000 fe25 	bl	8004cdc <RCCEx_PLL3_Config>
 8004092:	4603      	mov	r3, r0
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8004098:	2301      	movs	r3, #1
 800409a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800409e:	4b70      	ldr	r3, [pc, #448]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040a2:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80040a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040aa:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040ae:	4a6c      	ldr	r2, [pc, #432]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80040b0:	430b      	orrs	r3, r1
 80040b2:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80040b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040bc:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80040c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80040c4:	2300      	movs	r3, #0
 80040c6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80040ca:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80040ce:	460b      	mov	r3, r1
 80040d0:	4313      	orrs	r3, r2
 80040d2:	d03e      	beq.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80040d4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 80040dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040e0:	d022      	beq.n	8004128 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 80040e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80040e6:	d81b      	bhi.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xf38>
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	d003      	beq.n	80040f4 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 80040ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040f0:	d00b      	beq.n	800410a <HAL_RCCEx_PeriphCLKConfig+0xf22>
 80040f2:	e015      	b.n	8004120 <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80040f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80040f8:	3308      	adds	r3, #8
 80040fa:	2100      	movs	r1, #0
 80040fc:	4618      	mov	r0, r3
 80040fe:	f000 fd3b 	bl	8004b78 <RCCEx_PLL2_Config>
 8004102:	4603      	mov	r3, r0
 8004104:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8004108:	e00f      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800410a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800410e:	3328      	adds	r3, #40	; 0x28
 8004110:	2102      	movs	r1, #2
 8004112:	4618      	mov	r0, r3
 8004114:	f000 fde2 	bl	8004cdc <RCCEx_PLL3_Config>
 8004118:	4603      	mov	r3, r0
 800411a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 800411e:	e004      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004120:	2301      	movs	r3, #1
 8004122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8004126:	e000      	b.n	800412a <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8004128:	bf00      	nop
    }

    if (ret == HAL_OK)
 800412a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800412e:	2b00      	cmp	r3, #0
 8004130:	d10b      	bne.n	800414a <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004132:	4b4b      	ldr	r3, [pc, #300]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004134:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004136:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 800413a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800413e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004142:	4a47      	ldr	r2, [pc, #284]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004144:	430b      	orrs	r3, r1
 8004146:	6593      	str	r3, [r2, #88]	; 0x58
 8004148:	e003      	b.n	8004152 <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800414a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800414e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004156:	e9d3 2300 	ldrd	r2, r3, [r3]
 800415a:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 800415e:	67bb      	str	r3, [r7, #120]	; 0x78
 8004160:	2300      	movs	r3, #0
 8004162:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004164:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8004168:	460b      	mov	r3, r1
 800416a:	4313      	orrs	r3, r2
 800416c:	d03b      	beq.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800416e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004172:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004176:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800417a:	d01f      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 800417c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004180:	d818      	bhi.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 8004182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004186:	d003      	beq.n	8004190 <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 8004188:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800418c:	d007      	beq.n	800419e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800418e:	e011      	b.n	80041b4 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004190:	4b33      	ldr	r3, [pc, #204]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004194:	4a32      	ldr	r2, [pc, #200]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004196:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800419a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800419c:	e00f      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800419e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041a2:	3328      	adds	r3, #40	; 0x28
 80041a4:	2101      	movs	r1, #1
 80041a6:	4618      	mov	r0, r3
 80041a8:	f000 fd98 	bl	8004cdc <RCCEx_PLL3_Config>
 80041ac:	4603      	mov	r3, r0
 80041ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 80041b2:	e004      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041b4:	2301      	movs	r3, #1
 80041b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80041ba:	e000      	b.n	80041be <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 80041bc:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041be:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d10b      	bne.n	80041de <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041c6:	4b26      	ldr	r3, [pc, #152]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041ca:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80041ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041d6:	4a22      	ldr	r2, [pc, #136]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 80041d8:	430b      	orrs	r3, r1
 80041da:	6553      	str	r3, [r2, #84]	; 0x54
 80041dc:	e003      	b.n	80041e6 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041de:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80041e2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80041e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80041ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ee:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80041f2:	673b      	str	r3, [r7, #112]	; 0x70
 80041f4:	2300      	movs	r3, #0
 80041f6:	677b      	str	r3, [r7, #116]	; 0x74
 80041f8:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80041fc:	460b      	mov	r3, r1
 80041fe:	4313      	orrs	r3, r2
 8004200:	d034      	beq.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8004202:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004206:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004208:	2b00      	cmp	r3, #0
 800420a:	d003      	beq.n	8004214 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 800420c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004210:	d007      	beq.n	8004222 <HAL_RCCEx_PeriphCLKConfig+0x103a>
 8004212:	e011      	b.n	8004238 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004214:	4b12      	ldr	r3, [pc, #72]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004218:	4a11      	ldr	r2, [pc, #68]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800421a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800421e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004220:	e00e      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004222:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004226:	3308      	adds	r3, #8
 8004228:	2102      	movs	r1, #2
 800422a:	4618      	mov	r0, r3
 800422c:	f000 fca4 	bl	8004b78 <RCCEx_PLL2_Config>
 8004230:	4603      	mov	r3, r0
 8004232:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8004236:	e003      	b.n	8004240 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 8004238:	2301      	movs	r3, #1
 800423a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 800423e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004240:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004244:	2b00      	cmp	r3, #0
 8004246:	d10d      	bne.n	8004264 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004248:	4b05      	ldr	r3, [pc, #20]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 800424a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800424c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004250:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004256:	4a02      	ldr	r2, [pc, #8]	; (8004260 <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8004258:	430b      	orrs	r3, r1
 800425a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800425c:	e006      	b.n	800426c <HAL_RCCEx_PeriphCLKConfig+0x1084>
 800425e:	bf00      	nop
 8004260:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004264:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004268:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800426c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004274:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 8004278:	66bb      	str	r3, [r7, #104]	; 0x68
 800427a:	2300      	movs	r3, #0
 800427c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800427e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8004282:	460b      	mov	r3, r1
 8004284:	4313      	orrs	r3, r2
 8004286:	d00c      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8004288:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800428c:	3328      	adds	r3, #40	; 0x28
 800428e:	2102      	movs	r1, #2
 8004290:	4618      	mov	r0, r3
 8004292:	f000 fd23 	bl	8004cdc <RCCEx_PLL3_Config>
 8004296:	4603      	mov	r3, r0
 8004298:	2b00      	cmp	r3, #0
 800429a:	d002      	beq.n	80042a2 <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 800429c:	2301      	movs	r3, #1
 800429e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 80042a2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042aa:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80042ae:	663b      	str	r3, [r7, #96]	; 0x60
 80042b0:	2300      	movs	r3, #0
 80042b2:	667b      	str	r3, [r7, #100]	; 0x64
 80042b4:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80042b8:	460b      	mov	r3, r1
 80042ba:	4313      	orrs	r3, r2
 80042bc:	d038      	beq.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 80042be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80042c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80042c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042ca:	d018      	beq.n	80042fe <HAL_RCCEx_PeriphCLKConfig+0x1116>
 80042cc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80042d0:	d811      	bhi.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80042d2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042d6:	d014      	beq.n	8004302 <HAL_RCCEx_PeriphCLKConfig+0x111a>
 80042d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80042dc:	d80b      	bhi.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d011      	beq.n	8004306 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 80042e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e6:	d106      	bne.n	80042f6 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80042e8:	4bc3      	ldr	r3, [pc, #780]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042ec:	4ac2      	ldr	r2, [pc, #776]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80042ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80042f2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80042f4:	e008      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 80042fc:	e004      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 80042fe:	bf00      	nop
 8004300:	e002      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004302:	bf00      	nop
 8004304:	e000      	b.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8004306:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004308:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10b      	bne.n	8004328 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004310:	4bb9      	ldr	r3, [pc, #740]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004312:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004314:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004318:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800431c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004320:	4ab5      	ldr	r2, [pc, #724]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004322:	430b      	orrs	r3, r1
 8004324:	6553      	str	r3, [r2, #84]	; 0x54
 8004326:	e003      	b.n	8004330 <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004328:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800432c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004330:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004338:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 800433c:	65bb      	str	r3, [r7, #88]	; 0x58
 800433e:	2300      	movs	r3, #0
 8004340:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004342:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 8004346:	460b      	mov	r3, r1
 8004348:	4313      	orrs	r3, r2
 800434a:	d009      	beq.n	8004360 <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800434c:	4baa      	ldr	r3, [pc, #680]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800434e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004350:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004358:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800435a:	4aa7      	ldr	r2, [pc, #668]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800435c:	430b      	orrs	r3, r1
 800435e:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004360:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004368:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 800436c:	653b      	str	r3, [r7, #80]	; 0x50
 800436e:	2300      	movs	r3, #0
 8004370:	657b      	str	r3, [r7, #84]	; 0x54
 8004372:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 8004376:	460b      	mov	r3, r1
 8004378:	4313      	orrs	r3, r2
 800437a:	d00a      	beq.n	8004392 <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800437c:	4b9e      	ldr	r3, [pc, #632]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800437e:	691b      	ldr	r3, [r3, #16]
 8004380:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 8004384:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004388:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 800438c:	4a9a      	ldr	r2, [pc, #616]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800438e:	430b      	orrs	r3, r1
 8004390:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004392:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004396:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439a:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 800439e:	64bb      	str	r3, [r7, #72]	; 0x48
 80043a0:	2300      	movs	r3, #0
 80043a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043a4:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80043a8:	460b      	mov	r3, r1
 80043aa:	4313      	orrs	r3, r2
 80043ac:	d009      	beq.n	80043c2 <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80043ae:	4b92      	ldr	r3, [pc, #584]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b2:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80043b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043ba:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80043bc:	4a8e      	ldr	r2, [pc, #568]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043be:	430b      	orrs	r3, r1
 80043c0:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80043c2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ca:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80043ce:	643b      	str	r3, [r7, #64]	; 0x40
 80043d0:	2300      	movs	r3, #0
 80043d2:	647b      	str	r3, [r7, #68]	; 0x44
 80043d4:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80043d8:	460b      	mov	r3, r1
 80043da:	4313      	orrs	r3, r2
 80043dc:	d00e      	beq.n	80043fc <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80043de:	4b86      	ldr	r3, [pc, #536]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	4a85      	ldr	r2, [pc, #532]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043e4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80043e8:	6113      	str	r3, [r2, #16]
 80043ea:	4b83      	ldr	r3, [pc, #524]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043ec:	6919      	ldr	r1, [r3, #16]
 80043ee:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80043f2:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 80043f6:	4a80      	ldr	r2, [pc, #512]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 80043f8:	430b      	orrs	r3, r1
 80043fa:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80043fc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004400:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004404:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8004408:	63bb      	str	r3, [r7, #56]	; 0x38
 800440a:	2300      	movs	r3, #0
 800440c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800440e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 8004412:	460b      	mov	r3, r1
 8004414:	4313      	orrs	r3, r2
 8004416:	d009      	beq.n	800442c <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004418:	4b77      	ldr	r3, [pc, #476]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800441a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800441c:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8004420:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004424:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004426:	4a74      	ldr	r2, [pc, #464]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8004428:	430b      	orrs	r3, r1
 800442a:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800442c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004434:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8004438:	633b      	str	r3, [r7, #48]	; 0x30
 800443a:	2300      	movs	r3, #0
 800443c:	637b      	str	r3, [r7, #52]	; 0x34
 800443e:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 8004442:	460b      	mov	r3, r1
 8004444:	4313      	orrs	r3, r2
 8004446:	d00a      	beq.n	800445e <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004448:	4b6b      	ldr	r3, [pc, #428]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800444a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444c:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8004450:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004454:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004458:	4a67      	ldr	r2, [pc, #412]	; (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 800445a:	430b      	orrs	r3, r1
 800445c:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800445e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	2100      	movs	r1, #0
 8004468:	62b9      	str	r1, [r7, #40]	; 0x28
 800446a:	f003 0301 	and.w	r3, r3, #1
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004470:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 8004474:	460b      	mov	r3, r1
 8004476:	4313      	orrs	r3, r2
 8004478:	d011      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800447a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800447e:	3308      	adds	r3, #8
 8004480:	2100      	movs	r1, #0
 8004482:	4618      	mov	r0, r3
 8004484:	f000 fb78 	bl	8004b78 <RCCEx_PLL2_Config>
 8004488:	4603      	mov	r3, r0
 800448a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800448e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004492:	2b00      	cmp	r3, #0
 8004494:	d003      	beq.n	800449e <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004496:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800449a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800449e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a6:	2100      	movs	r1, #0
 80044a8:	6239      	str	r1, [r7, #32]
 80044aa:	f003 0302 	and.w	r3, r3, #2
 80044ae:	627b      	str	r3, [r7, #36]	; 0x24
 80044b0:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80044b4:	460b      	mov	r3, r1
 80044b6:	4313      	orrs	r3, r2
 80044b8:	d011      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80044ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044be:	3308      	adds	r3, #8
 80044c0:	2101      	movs	r1, #1
 80044c2:	4618      	mov	r0, r3
 80044c4:	f000 fb58 	bl	8004b78 <RCCEx_PLL2_Config>
 80044c8:	4603      	mov	r3, r0
 80044ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80044ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d003      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80044da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80044de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044e6:	2100      	movs	r1, #0
 80044e8:	61b9      	str	r1, [r7, #24]
 80044ea:	f003 0304 	and.w	r3, r3, #4
 80044ee:	61fb      	str	r3, [r7, #28]
 80044f0:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80044f4:	460b      	mov	r3, r1
 80044f6:	4313      	orrs	r3, r2
 80044f8:	d011      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80044fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80044fe:	3308      	adds	r3, #8
 8004500:	2102      	movs	r1, #2
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fb38 	bl	8004b78 <RCCEx_PLL2_Config>
 8004508:	4603      	mov	r3, r0
 800450a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800450e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004512:	2b00      	cmp	r3, #0
 8004514:	d003      	beq.n	800451e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004516:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800451a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800451e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004526:	2100      	movs	r1, #0
 8004528:	6139      	str	r1, [r7, #16]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	617b      	str	r3, [r7, #20]
 8004530:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8004534:	460b      	mov	r3, r1
 8004536:	4313      	orrs	r3, r2
 8004538:	d011      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800453a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800453e:	3328      	adds	r3, #40	; 0x28
 8004540:	2100      	movs	r1, #0
 8004542:	4618      	mov	r0, r3
 8004544:	f000 fbca 	bl	8004cdc <RCCEx_PLL3_Config>
 8004548:	4603      	mov	r3, r0
 800454a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 800454e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004556:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800455a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800455e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8004562:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004566:	2100      	movs	r1, #0
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	f003 0310 	and.w	r3, r3, #16
 800456e:	60fb      	str	r3, [r7, #12]
 8004570:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8004574:	460b      	mov	r3, r1
 8004576:	4313      	orrs	r3, r2
 8004578:	d011      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800457a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800457e:	3328      	adds	r3, #40	; 0x28
 8004580:	2101      	movs	r1, #1
 8004582:	4618      	mov	r0, r3
 8004584:	f000 fbaa 	bl	8004cdc <RCCEx_PLL3_Config>
 8004588:	4603      	mov	r3, r0
 800458a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 800458e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8004592:	2b00      	cmp	r3, #0
 8004594:	d003      	beq.n	800459e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004596:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 800459a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800459e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a6:	2100      	movs	r1, #0
 80045a8:	6039      	str	r1, [r7, #0]
 80045aa:	f003 0320 	and.w	r3, r3, #32
 80045ae:	607b      	str	r3, [r7, #4]
 80045b0:	e9d7 1200 	ldrd	r1, r2, [r7]
 80045b4:	460b      	mov	r3, r1
 80045b6:	4313      	orrs	r3, r2
 80045b8:	d011      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80045ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80045be:	3328      	adds	r3, #40	; 0x28
 80045c0:	2102      	movs	r1, #2
 80045c2:	4618      	mov	r0, r3
 80045c4:	f000 fb8a 	bl	8004cdc <RCCEx_PLL3_Config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 80045ce:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d003      	beq.n	80045de <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80045d6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 80045da:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 80045de:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d101      	bne.n	80045ea <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 80045e6:	2300      	movs	r3, #0
 80045e8:	e000      	b.n	80045ec <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
}
 80045ec:	4618      	mov	r0, r3
 80045ee:	f507 7794 	add.w	r7, r7, #296	; 0x128
 80045f2:	46bd      	mov	sp, r7
 80045f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80045f8:	58024400 	.word	0x58024400

080045fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80045fc:	b580      	push	{r7, lr}
 80045fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004600:	f7fe fd96 	bl	8003130 <HAL_RCC_GetHCLKFreq>
 8004604:	4602      	mov	r2, r0
 8004606:	4b06      	ldr	r3, [pc, #24]	; (8004620 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	091b      	lsrs	r3, r3, #4
 800460c:	f003 0307 	and.w	r3, r3, #7
 8004610:	4904      	ldr	r1, [pc, #16]	; (8004624 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004612:	5ccb      	ldrb	r3, [r1, r3]
 8004614:	f003 031f 	and.w	r3, r3, #31
 8004618:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800461c:	4618      	mov	r0, r3
 800461e:	bd80      	pop	{r7, pc}
 8004620:	58024400 	.word	0x58024400
 8004624:	08006678 	.word	0x08006678

08004628 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8004628:	b480      	push	{r7}
 800462a:	b089      	sub	sp, #36	; 0x24
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004630:	4ba1      	ldr	r3, [pc, #644]	; (80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004632:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004634:	f003 0303 	and.w	r3, r3, #3
 8004638:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800463a:	4b9f      	ldr	r3, [pc, #636]	; (80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800463c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800463e:	0b1b      	lsrs	r3, r3, #12
 8004640:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004644:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004646:	4b9c      	ldr	r3, [pc, #624]	; (80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004648:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800464a:	091b      	lsrs	r3, r3, #4
 800464c:	f003 0301 	and.w	r3, r3, #1
 8004650:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8004652:	4b99      	ldr	r3, [pc, #612]	; (80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004656:	08db      	lsrs	r3, r3, #3
 8004658:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800465c:	693a      	ldr	r2, [r7, #16]
 800465e:	fb02 f303 	mul.w	r3, r2, r3
 8004662:	ee07 3a90 	vmov	s15, r3
 8004666:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800466a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	2b00      	cmp	r3, #0
 8004672:	f000 8111 	beq.w	8004898 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004676:	69bb      	ldr	r3, [r7, #24]
 8004678:	2b02      	cmp	r3, #2
 800467a:	f000 8083 	beq.w	8004784 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800467e:	69bb      	ldr	r3, [r7, #24]
 8004680:	2b02      	cmp	r3, #2
 8004682:	f200 80a1 	bhi.w	80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004686:	69bb      	ldr	r3, [r7, #24]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d003      	beq.n	8004694 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800468c:	69bb      	ldr	r3, [r7, #24]
 800468e:	2b01      	cmp	r3, #1
 8004690:	d056      	beq.n	8004740 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004692:	e099      	b.n	80047c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004694:	4b88      	ldr	r3, [pc, #544]	; (80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	f003 0320 	and.w	r3, r3, #32
 800469c:	2b00      	cmp	r3, #0
 800469e:	d02d      	beq.n	80046fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80046a0:	4b85      	ldr	r3, [pc, #532]	; (80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	08db      	lsrs	r3, r3, #3
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	4a84      	ldr	r2, [pc, #528]	; (80048bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80046ac:	fa22 f303 	lsr.w	r3, r2, r3
 80046b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	ee07 3a90 	vmov	s15, r3
 80046b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	ee07 3a90 	vmov	s15, r3
 80046c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80046c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80046ca:	4b7b      	ldr	r3, [pc, #492]	; (80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80046cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046d2:	ee07 3a90 	vmov	s15, r3
 80046d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80046da:	ed97 6a03 	vldr	s12, [r7, #12]
 80046de:	eddf 5a78 	vldr	s11, [pc, #480]	; 80048c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80046e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80046e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80046ea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80046ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80046f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80046f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80046fa:	e087      	b.n	800480c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80046fc:	697b      	ldr	r3, [r7, #20]
 80046fe:	ee07 3a90 	vmov	s15, r3
 8004702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004706:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80048c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800470a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800470e:	4b6a      	ldr	r3, [pc, #424]	; (80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004710:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004712:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004716:	ee07 3a90 	vmov	s15, r3
 800471a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800471e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004722:	eddf 5a67 	vldr	s11, [pc, #412]	; 80048c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004726:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800472a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800472e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004732:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004736:	ee67 7a27 	vmul.f32	s15, s14, s15
 800473a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800473e:	e065      	b.n	800480c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	ee07 3a90 	vmov	s15, r3
 8004746:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800474a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80048c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800474e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004752:	4b59      	ldr	r3, [pc, #356]	; (80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004754:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004756:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800475a:	ee07 3a90 	vmov	s15, r3
 800475e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004762:	ed97 6a03 	vldr	s12, [r7, #12]
 8004766:	eddf 5a56 	vldr	s11, [pc, #344]	; 80048c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800476a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800476e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004772:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004776:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800477a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800477e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004782:	e043      	b.n	800480c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8004784:	697b      	ldr	r3, [r7, #20]
 8004786:	ee07 3a90 	vmov	s15, r3
 800478a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800478e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80048cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004792:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004796:	4b48      	ldr	r3, [pc, #288]	; (80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004798:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800479a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800479e:	ee07 3a90 	vmov	s15, r3
 80047a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047a6:	ed97 6a03 	vldr	s12, [r7, #12]
 80047aa:	eddf 5a45 	vldr	s11, [pc, #276]	; 80048c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80047be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80047c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80047c6:	e021      	b.n	800480c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80047c8:	697b      	ldr	r3, [r7, #20]
 80047ca:	ee07 3a90 	vmov	s15, r3
 80047ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80047d2:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80048c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80047d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80047da:	4b37      	ldr	r3, [pc, #220]	; (80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80047dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047e2:	ee07 3a90 	vmov	s15, r3
 80047e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80047ea:	ed97 6a03 	vldr	s12, [r7, #12]
 80047ee:	eddf 5a34 	vldr	s11, [pc, #208]	; 80048c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80047f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80047f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80047fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80047fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004802:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004806:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800480a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800480c:	4b2a      	ldr	r3, [pc, #168]	; (80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800480e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004810:	0a5b      	lsrs	r3, r3, #9
 8004812:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004816:	ee07 3a90 	vmov	s15, r3
 800481a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800481e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004822:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004826:	edd7 6a07 	vldr	s13, [r7, #28]
 800482a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800482e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004832:	ee17 2a90 	vmov	r2, s15
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800483a:	4b1f      	ldr	r3, [pc, #124]	; (80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800483c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483e:	0c1b      	lsrs	r3, r3, #16
 8004840:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004844:	ee07 3a90 	vmov	s15, r3
 8004848:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800484c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004850:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004854:	edd7 6a07 	vldr	s13, [r7, #28]
 8004858:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800485c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004860:	ee17 2a90 	vmov	r2, s15
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8004868:	4b13      	ldr	r3, [pc, #76]	; (80048b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	0e1b      	lsrs	r3, r3, #24
 800486e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004872:	ee07 3a90 	vmov	s15, r3
 8004876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800487a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800487e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004882:	edd7 6a07 	vldr	s13, [r7, #28]
 8004886:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800488a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800488e:	ee17 2a90 	vmov	r2, s15
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004896:	e008      	b.n	80048aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2200      	movs	r2, #0
 800489c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2200      	movs	r2, #0
 80048a8:	609a      	str	r2, [r3, #8]
}
 80048aa:	bf00      	nop
 80048ac:	3724      	adds	r7, #36	; 0x24
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	58024400 	.word	0x58024400
 80048bc:	03d09000 	.word	0x03d09000
 80048c0:	46000000 	.word	0x46000000
 80048c4:	4c742400 	.word	0x4c742400
 80048c8:	4a742400 	.word	0x4a742400
 80048cc:	4af42400 	.word	0x4af42400

080048d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80048d0:	b480      	push	{r7}
 80048d2:	b089      	sub	sp, #36	; 0x24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80048d8:	4ba1      	ldr	r3, [pc, #644]	; (8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048dc:	f003 0303 	and.w	r3, r3, #3
 80048e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80048e2:	4b9f      	ldr	r3, [pc, #636]	; (8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048e6:	0d1b      	lsrs	r3, r3, #20
 80048e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80048ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80048ee:	4b9c      	ldr	r3, [pc, #624]	; (8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048f2:	0a1b      	lsrs	r3, r3, #8
 80048f4:	f003 0301 	and.w	r3, r3, #1
 80048f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80048fa:	4b99      	ldr	r3, [pc, #612]	; (8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80048fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fe:	08db      	lsrs	r3, r3, #3
 8004900:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004904:	693a      	ldr	r2, [r7, #16]
 8004906:	fb02 f303 	mul.w	r3, r2, r3
 800490a:	ee07 3a90 	vmov	s15, r3
 800490e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004912:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8004916:	697b      	ldr	r3, [r7, #20]
 8004918:	2b00      	cmp	r3, #0
 800491a:	f000 8111 	beq.w	8004b40 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800491e:	69bb      	ldr	r3, [r7, #24]
 8004920:	2b02      	cmp	r3, #2
 8004922:	f000 8083 	beq.w	8004a2c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8004926:	69bb      	ldr	r3, [r7, #24]
 8004928:	2b02      	cmp	r3, #2
 800492a:	f200 80a1 	bhi.w	8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800492e:	69bb      	ldr	r3, [r7, #24]
 8004930:	2b00      	cmp	r3, #0
 8004932:	d003      	beq.n	800493c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8004934:	69bb      	ldr	r3, [r7, #24]
 8004936:	2b01      	cmp	r3, #1
 8004938:	d056      	beq.n	80049e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800493a:	e099      	b.n	8004a70 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800493c:	4b88      	ldr	r3, [pc, #544]	; (8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f003 0320 	and.w	r3, r3, #32
 8004944:	2b00      	cmp	r3, #0
 8004946:	d02d      	beq.n	80049a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8004948:	4b85      	ldr	r3, [pc, #532]	; (8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	08db      	lsrs	r3, r3, #3
 800494e:	f003 0303 	and.w	r3, r3, #3
 8004952:	4a84      	ldr	r2, [pc, #528]	; (8004b64 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8004954:	fa22 f303 	lsr.w	r3, r2, r3
 8004958:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	ee07 3a90 	vmov	s15, r3
 8004960:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004964:	697b      	ldr	r3, [r7, #20]
 8004966:	ee07 3a90 	vmov	s15, r3
 800496a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800496e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004972:	4b7b      	ldr	r3, [pc, #492]	; (8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004976:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800497a:	ee07 3a90 	vmov	s15, r3
 800497e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004982:	ed97 6a03 	vldr	s12, [r7, #12]
 8004986:	eddf 5a78 	vldr	s11, [pc, #480]	; 8004b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800498a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800498e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004992:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004996:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800499a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800499e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80049a2:	e087      	b.n	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	ee07 3a90 	vmov	s15, r3
 80049aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049ae:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8004b6c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80049b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049b6:	4b6a      	ldr	r3, [pc, #424]	; (8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049be:	ee07 3a90 	vmov	s15, r3
 80049c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80049c6:	ed97 6a03 	vldr	s12, [r7, #12]
 80049ca:	eddf 5a67 	vldr	s11, [pc, #412]	; 8004b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80049ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80049d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80049d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80049da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80049de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80049e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80049e6:	e065      	b.n	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80049e8:	697b      	ldr	r3, [r7, #20]
 80049ea:	ee07 3a90 	vmov	s15, r3
 80049ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80049f2:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8004b70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80049f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80049fa:	4b59      	ldr	r3, [pc, #356]	; (8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a02:	ee07 3a90 	vmov	s15, r3
 8004a06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a0a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a0e:	eddf 5a56 	vldr	s11, [pc, #344]	; 8004b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a2a:	e043      	b.n	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	ee07 3a90 	vmov	s15, r3
 8004a32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a36:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8004b74 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8004a3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a3e:	4b48      	ldr	r3, [pc, #288]	; (8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a46:	ee07 3a90 	vmov	s15, r3
 8004a4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a4e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a52:	eddf 5a45 	vldr	s11, [pc, #276]	; 8004b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004a5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004a62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004a6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004a6e:	e021      	b.n	8004ab4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8004a70:	697b      	ldr	r3, [r7, #20]
 8004a72:	ee07 3a90 	vmov	s15, r3
 8004a76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8004b70 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8004a7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004a82:	4b37      	ldr	r3, [pc, #220]	; (8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004a8a:	ee07 3a90 	vmov	s15, r3
 8004a8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004a92:	ed97 6a03 	vldr	s12, [r7, #12]
 8004a96:	eddf 5a34 	vldr	s11, [pc, #208]	; 8004b68 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8004a9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004a9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004aa2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004aa6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004aaa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004aae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8004ab2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8004ab4:	4b2a      	ldr	r3, [pc, #168]	; (8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ab6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ab8:	0a5b      	lsrs	r3, r3, #9
 8004aba:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004abe:	ee07 3a90 	vmov	s15, r3
 8004ac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ac6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aca:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004ace:	edd7 6a07 	vldr	s13, [r7, #28]
 8004ad2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004ad6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ada:	ee17 2a90 	vmov	r2, s15
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8004ae2:	4b1f      	ldr	r3, [pc, #124]	; (8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ae6:	0c1b      	lsrs	r3, r3, #16
 8004ae8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004aec:	ee07 3a90 	vmov	s15, r3
 8004af0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004af4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004af8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004afc:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b04:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b08:	ee17 2a90 	vmov	r2, s15
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8004b10:	4b13      	ldr	r3, [pc, #76]	; (8004b60 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8004b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b14:	0e1b      	lsrs	r3, r3, #24
 8004b16:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b1a:	ee07 3a90 	vmov	s15, r3
 8004b1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004b22:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004b26:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004b2a:	edd7 6a07 	vldr	s13, [r7, #28]
 8004b2e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004b32:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b36:	ee17 2a90 	vmov	r2, s15
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8004b3e:	e008      	b.n	8004b52 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	609a      	str	r2, [r3, #8]
}
 8004b52:	bf00      	nop
 8004b54:	3724      	adds	r7, #36	; 0x24
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	58024400 	.word	0x58024400
 8004b64:	03d09000 	.word	0x03d09000
 8004b68:	46000000 	.word	0x46000000
 8004b6c:	4c742400 	.word	0x4c742400
 8004b70:	4a742400 	.word	0x4a742400
 8004b74:	4af42400 	.word	0x4af42400

08004b78 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8004b78:	b580      	push	{r7, lr}
 8004b7a:	b084      	sub	sp, #16
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	6078      	str	r0, [r7, #4]
 8004b80:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004b82:	2300      	movs	r3, #0
 8004b84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004b86:	4b53      	ldr	r3, [pc, #332]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004b88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b8a:	f003 0303 	and.w	r3, r3, #3
 8004b8e:	2b03      	cmp	r3, #3
 8004b90:	d101      	bne.n	8004b96 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e099      	b.n	8004cca <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004b96:	4b4f      	ldr	r3, [pc, #316]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a4e      	ldr	r2, [pc, #312]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004b9c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ba2:	f7fc fa5b 	bl	800105c <HAL_GetTick>
 8004ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004ba8:	e008      	b.n	8004bbc <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004baa:	f7fc fa57 	bl	800105c <HAL_GetTick>
 8004bae:	4602      	mov	r2, r0
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	1ad3      	subs	r3, r2, r3
 8004bb4:	2b02      	cmp	r3, #2
 8004bb6:	d901      	bls.n	8004bbc <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004bb8:	2303      	movs	r3, #3
 8004bba:	e086      	b.n	8004cca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004bbc:	4b45      	ldr	r3, [pc, #276]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d1f0      	bne.n	8004baa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004bc8:	4b42      	ldr	r3, [pc, #264]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004bcc:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	031b      	lsls	r3, r3, #12
 8004bd6:	493f      	ldr	r1, [pc, #252]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	628b      	str	r3, [r1, #40]	; 0x28
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	3b01      	subs	r3, #1
 8004be2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	3b01      	subs	r3, #1
 8004bec:	025b      	lsls	r3, r3, #9
 8004bee:	b29b      	uxth	r3, r3
 8004bf0:	431a      	orrs	r2, r3
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	68db      	ldr	r3, [r3, #12]
 8004bf6:	3b01      	subs	r3, #1
 8004bf8:	041b      	lsls	r3, r3, #16
 8004bfa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004bfe:	431a      	orrs	r2, r3
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	691b      	ldr	r3, [r3, #16]
 8004c04:	3b01      	subs	r3, #1
 8004c06:	061b      	lsls	r3, r3, #24
 8004c08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004c0c:	4931      	ldr	r1, [pc, #196]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c0e:	4313      	orrs	r3, r2
 8004c10:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004c12:	4b30      	ldr	r3, [pc, #192]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c16:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	695b      	ldr	r3, [r3, #20]
 8004c1e:	492d      	ldr	r1, [pc, #180]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004c24:	4b2b      	ldr	r3, [pc, #172]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	f023 0220 	bic.w	r2, r3, #32
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	699b      	ldr	r3, [r3, #24]
 8004c30:	4928      	ldr	r1, [pc, #160]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c32:	4313      	orrs	r3, r2
 8004c34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8004c36:	4b27      	ldr	r3, [pc, #156]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3a:	4a26      	ldr	r2, [pc, #152]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c3c:	f023 0310 	bic.w	r3, r3, #16
 8004c40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8004c42:	4b24      	ldr	r3, [pc, #144]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c46:	4b24      	ldr	r3, [pc, #144]	; (8004cd8 <RCCEx_PLL2_Config+0x160>)
 8004c48:	4013      	ands	r3, r2
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	69d2      	ldr	r2, [r2, #28]
 8004c4e:	00d2      	lsls	r2, r2, #3
 8004c50:	4920      	ldr	r1, [pc, #128]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c52:	4313      	orrs	r3, r2
 8004c54:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8004c56:	4b1f      	ldr	r3, [pc, #124]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	4a1e      	ldr	r2, [pc, #120]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c5c:	f043 0310 	orr.w	r3, r3, #16
 8004c60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004c62:	683b      	ldr	r3, [r7, #0]
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d106      	bne.n	8004c76 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8004c68:	4b1a      	ldr	r3, [pc, #104]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c6c:	4a19      	ldr	r2, [pc, #100]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c74:	e00f      	b.n	8004c96 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d106      	bne.n	8004c8a <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8004c7c:	4b15      	ldr	r3, [pc, #84]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c80:	4a14      	ldr	r2, [pc, #80]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c82:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004c86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004c88:	e005      	b.n	8004c96 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8004c8a:	4b12      	ldr	r3, [pc, #72]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c8e:	4a11      	ldr	r2, [pc, #68]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004c94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004c96:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	4a0e      	ldr	r2, [pc, #56]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004c9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8004ca0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ca2:	f7fc f9db 	bl	800105c <HAL_GetTick>
 8004ca6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004ca8:	e008      	b.n	8004cbc <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8004caa:	f7fc f9d7 	bl	800105c <HAL_GetTick>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	1ad3      	subs	r3, r2, r3
 8004cb4:	2b02      	cmp	r3, #2
 8004cb6:	d901      	bls.n	8004cbc <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004cb8:	2303      	movs	r3, #3
 8004cba:	e006      	b.n	8004cca <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004cbc:	4b05      	ldr	r3, [pc, #20]	; (8004cd4 <RCCEx_PLL2_Config+0x15c>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004cc4:	2b00      	cmp	r3, #0
 8004cc6:	d0f0      	beq.n	8004caa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004cc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	58024400 	.word	0x58024400
 8004cd8:	ffff0007 	.word	0xffff0007

08004cdc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b084      	sub	sp, #16
 8004ce0:	af00      	add	r7, sp, #0
 8004ce2:	6078      	str	r0, [r7, #4]
 8004ce4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8004cea:	4b53      	ldr	r3, [pc, #332]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004cec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cee:	f003 0303 	and.w	r3, r3, #3
 8004cf2:	2b03      	cmp	r3, #3
 8004cf4:	d101      	bne.n	8004cfa <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	e099      	b.n	8004e2e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8004cfa:	4b4f      	ldr	r3, [pc, #316]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4a4e      	ldr	r2, [pc, #312]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004d00:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004d04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004d06:	f7fc f9a9 	bl	800105c <HAL_GetTick>
 8004d0a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d0c:	e008      	b.n	8004d20 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004d0e:	f7fc f9a5 	bl	800105c <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d901      	bls.n	8004d20 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e086      	b.n	8004e2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004d20:	4b45      	ldr	r3, [pc, #276]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d1f0      	bne.n	8004d0e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8004d2c:	4b42      	ldr	r3, [pc, #264]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004d2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d30:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	051b      	lsls	r3, r3, #20
 8004d3a:	493f      	ldr	r1, [pc, #252]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004d3c:	4313      	orrs	r3, r2
 8004d3e:	628b      	str	r3, [r1, #40]	; 0x28
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	3b01      	subs	r3, #1
 8004d46:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	025b      	lsls	r3, r3, #9
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	431a      	orrs	r2, r3
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	68db      	ldr	r3, [r3, #12]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	041b      	lsls	r3, r3, #16
 8004d5e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8004d62:	431a      	orrs	r2, r3
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	061b      	lsls	r3, r3, #24
 8004d6c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8004d70:	4931      	ldr	r1, [pc, #196]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8004d76:	4b30      	ldr	r3, [pc, #192]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	695b      	ldr	r3, [r3, #20]
 8004d82:	492d      	ldr	r1, [pc, #180]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004d84:	4313      	orrs	r3, r2
 8004d86:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8004d88:	4b2b      	ldr	r3, [pc, #172]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	699b      	ldr	r3, [r3, #24]
 8004d94:	4928      	ldr	r1, [pc, #160]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004d96:	4313      	orrs	r3, r2
 8004d98:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8004d9a:	4b27      	ldr	r3, [pc, #156]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	4a26      	ldr	r2, [pc, #152]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004da0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004da4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004da6:	4b24      	ldr	r3, [pc, #144]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004da8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004daa:	4b24      	ldr	r3, [pc, #144]	; (8004e3c <RCCEx_PLL3_Config+0x160>)
 8004dac:	4013      	ands	r3, r2
 8004dae:	687a      	ldr	r2, [r7, #4]
 8004db0:	69d2      	ldr	r2, [r2, #28]
 8004db2:	00d2      	lsls	r2, r2, #3
 8004db4:	4920      	ldr	r1, [pc, #128]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004db6:	4313      	orrs	r3, r2
 8004db8:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8004dba:	4b1f      	ldr	r3, [pc, #124]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004dbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dbe:	4a1e      	ldr	r2, [pc, #120]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004dc0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dc4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d106      	bne.n	8004dda <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8004dcc:	4b1a      	ldr	r3, [pc, #104]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dd0:	4a19      	ldr	r2, [pc, #100]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004dd2:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004dd6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004dd8:	e00f      	b.n	8004dfa <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8004dda:	683b      	ldr	r3, [r7, #0]
 8004ddc:	2b01      	cmp	r3, #1
 8004dde:	d106      	bne.n	8004dee <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004de0:	4b15      	ldr	r3, [pc, #84]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de4:	4a14      	ldr	r2, [pc, #80]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004de6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004dea:	62d3      	str	r3, [r2, #44]	; 0x2c
 8004dec:	e005      	b.n	8004dfa <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8004dee:	4b12      	ldr	r3, [pc, #72]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004df0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004df2:	4a11      	ldr	r2, [pc, #68]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004df4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004df8:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8004dfa:	4b0f      	ldr	r3, [pc, #60]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a0e      	ldr	r2, [pc, #56]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004e00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e04:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004e06:	f7fc f929 	bl	800105c <HAL_GetTick>
 8004e0a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e0c:	e008      	b.n	8004e20 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8004e0e:	f7fc f925 	bl	800105c <HAL_GetTick>
 8004e12:	4602      	mov	r2, r0
 8004e14:	68bb      	ldr	r3, [r7, #8]
 8004e16:	1ad3      	subs	r3, r2, r3
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d901      	bls.n	8004e20 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004e1c:	2303      	movs	r3, #3
 8004e1e:	e006      	b.n	8004e2e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004e20:	4b05      	ldr	r3, [pc, #20]	; (8004e38 <RCCEx_PLL3_Config+0x15c>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d0f0      	beq.n	8004e0e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e2e:	4618      	mov	r0, r3
 8004e30:	3710      	adds	r7, #16
 8004e32:	46bd      	mov	sp, r7
 8004e34:	bd80      	pop	{r7, pc}
 8004e36:	bf00      	nop
 8004e38:	58024400 	.word	0x58024400
 8004e3c:	ffff0007 	.word	0xffff0007

08004e40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b082      	sub	sp, #8
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d101      	bne.n	8004e52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004e4e:	2301      	movs	r3, #1
 8004e50:	e042      	b.n	8004ed8 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d106      	bne.n	8004e6a <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f7fb ff39 	bl	8000cdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2224      	movs	r2, #36	; 0x24
 8004e6e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	681a      	ldr	r2, [r3, #0]
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	f022 0201 	bic.w	r2, r2, #1
 8004e80:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d002      	beq.n	8004e90 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 fd90 	bl	80059b0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004e90:	6878      	ldr	r0, [r7, #4]
 8004e92:	f000 f825 	bl	8004ee0 <UART_SetConfig>
 8004e96:	4603      	mov	r3, r0
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d101      	bne.n	8004ea0 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	e01b      	b.n	8004ed8 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	685a      	ldr	r2, [r3, #4]
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004eae:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	689a      	ldr	r2, [r3, #8]
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ebe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f042 0201 	orr.w	r2, r2, #1
 8004ece:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004ed0:	6878      	ldr	r0, [r7, #4]
 8004ed2:	f000 fe0f 	bl	8005af4 <UART_CheckIdleState>
 8004ed6:	4603      	mov	r3, r0
}
 8004ed8:	4618      	mov	r0, r3
 8004eda:	3708      	adds	r7, #8
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004ee0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004ee4:	b092      	sub	sp, #72	; 0x48
 8004ee6:	af00      	add	r7, sp, #0
 8004ee8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004eea:	2300      	movs	r3, #0
 8004eec:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004ef0:	697b      	ldr	r3, [r7, #20]
 8004ef2:	689a      	ldr	r2, [r3, #8]
 8004ef4:	697b      	ldr	r3, [r7, #20]
 8004ef6:	691b      	ldr	r3, [r3, #16]
 8004ef8:	431a      	orrs	r2, r3
 8004efa:	697b      	ldr	r3, [r7, #20]
 8004efc:	695b      	ldr	r3, [r3, #20]
 8004efe:	431a      	orrs	r2, r3
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	69db      	ldr	r3, [r3, #28]
 8004f04:	4313      	orrs	r3, r2
 8004f06:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	681a      	ldr	r2, [r3, #0]
 8004f0e:	4bbe      	ldr	r3, [pc, #760]	; (8005208 <UART_SetConfig+0x328>)
 8004f10:	4013      	ands	r3, r2
 8004f12:	697a      	ldr	r2, [r7, #20]
 8004f14:	6812      	ldr	r2, [r2, #0]
 8004f16:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f18:	430b      	orrs	r3, r1
 8004f1a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	697b      	ldr	r3, [r7, #20]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	430a      	orrs	r2, r1
 8004f30:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	699b      	ldr	r3, [r3, #24]
 8004f36:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004f38:	697b      	ldr	r3, [r7, #20]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4ab3      	ldr	r2, [pc, #716]	; (800520c <UART_SetConfig+0x32c>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d004      	beq.n	8004f4c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004f42:	697b      	ldr	r3, [r7, #20]
 8004f44:	6a1b      	ldr	r3, [r3, #32]
 8004f46:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004f48:	4313      	orrs	r3, r2
 8004f4a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004f4c:	697b      	ldr	r3, [r7, #20]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	689a      	ldr	r2, [r3, #8]
 8004f52:	4baf      	ldr	r3, [pc, #700]	; (8005210 <UART_SetConfig+0x330>)
 8004f54:	4013      	ands	r3, r2
 8004f56:	697a      	ldr	r2, [r7, #20]
 8004f58:	6812      	ldr	r2, [r2, #0]
 8004f5a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f66:	f023 010f 	bic.w	r1, r3, #15
 8004f6a:	697b      	ldr	r3, [r7, #20]
 8004f6c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4aa6      	ldr	r2, [pc, #664]	; (8005214 <UART_SetConfig+0x334>)
 8004f7c:	4293      	cmp	r3, r2
 8004f7e:	d177      	bne.n	8005070 <UART_SetConfig+0x190>
 8004f80:	4ba5      	ldr	r3, [pc, #660]	; (8005218 <UART_SetConfig+0x338>)
 8004f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f84:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004f88:	2b28      	cmp	r3, #40	; 0x28
 8004f8a:	d86d      	bhi.n	8005068 <UART_SetConfig+0x188>
 8004f8c:	a201      	add	r2, pc, #4	; (adr r2, 8004f94 <UART_SetConfig+0xb4>)
 8004f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f92:	bf00      	nop
 8004f94:	08005039 	.word	0x08005039
 8004f98:	08005069 	.word	0x08005069
 8004f9c:	08005069 	.word	0x08005069
 8004fa0:	08005069 	.word	0x08005069
 8004fa4:	08005069 	.word	0x08005069
 8004fa8:	08005069 	.word	0x08005069
 8004fac:	08005069 	.word	0x08005069
 8004fb0:	08005069 	.word	0x08005069
 8004fb4:	08005041 	.word	0x08005041
 8004fb8:	08005069 	.word	0x08005069
 8004fbc:	08005069 	.word	0x08005069
 8004fc0:	08005069 	.word	0x08005069
 8004fc4:	08005069 	.word	0x08005069
 8004fc8:	08005069 	.word	0x08005069
 8004fcc:	08005069 	.word	0x08005069
 8004fd0:	08005069 	.word	0x08005069
 8004fd4:	08005049 	.word	0x08005049
 8004fd8:	08005069 	.word	0x08005069
 8004fdc:	08005069 	.word	0x08005069
 8004fe0:	08005069 	.word	0x08005069
 8004fe4:	08005069 	.word	0x08005069
 8004fe8:	08005069 	.word	0x08005069
 8004fec:	08005069 	.word	0x08005069
 8004ff0:	08005069 	.word	0x08005069
 8004ff4:	08005051 	.word	0x08005051
 8004ff8:	08005069 	.word	0x08005069
 8004ffc:	08005069 	.word	0x08005069
 8005000:	08005069 	.word	0x08005069
 8005004:	08005069 	.word	0x08005069
 8005008:	08005069 	.word	0x08005069
 800500c:	08005069 	.word	0x08005069
 8005010:	08005069 	.word	0x08005069
 8005014:	08005059 	.word	0x08005059
 8005018:	08005069 	.word	0x08005069
 800501c:	08005069 	.word	0x08005069
 8005020:	08005069 	.word	0x08005069
 8005024:	08005069 	.word	0x08005069
 8005028:	08005069 	.word	0x08005069
 800502c:	08005069 	.word	0x08005069
 8005030:	08005069 	.word	0x08005069
 8005034:	08005061 	.word	0x08005061
 8005038:	2301      	movs	r3, #1
 800503a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800503e:	e222      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005040:	2304      	movs	r3, #4
 8005042:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005046:	e21e      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005048:	2308      	movs	r3, #8
 800504a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800504e:	e21a      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005050:	2310      	movs	r3, #16
 8005052:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005056:	e216      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005058:	2320      	movs	r3, #32
 800505a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800505e:	e212      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005060:	2340      	movs	r3, #64	; 0x40
 8005062:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005066:	e20e      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005068:	2380      	movs	r3, #128	; 0x80
 800506a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800506e:	e20a      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a69      	ldr	r2, [pc, #420]	; (800521c <UART_SetConfig+0x33c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d130      	bne.n	80050dc <UART_SetConfig+0x1fc>
 800507a:	4b67      	ldr	r3, [pc, #412]	; (8005218 <UART_SetConfig+0x338>)
 800507c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800507e:	f003 0307 	and.w	r3, r3, #7
 8005082:	2b05      	cmp	r3, #5
 8005084:	d826      	bhi.n	80050d4 <UART_SetConfig+0x1f4>
 8005086:	a201      	add	r2, pc, #4	; (adr r2, 800508c <UART_SetConfig+0x1ac>)
 8005088:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800508c:	080050a5 	.word	0x080050a5
 8005090:	080050ad 	.word	0x080050ad
 8005094:	080050b5 	.word	0x080050b5
 8005098:	080050bd 	.word	0x080050bd
 800509c:	080050c5 	.word	0x080050c5
 80050a0:	080050cd 	.word	0x080050cd
 80050a4:	2300      	movs	r3, #0
 80050a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050aa:	e1ec      	b.n	8005486 <UART_SetConfig+0x5a6>
 80050ac:	2304      	movs	r3, #4
 80050ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050b2:	e1e8      	b.n	8005486 <UART_SetConfig+0x5a6>
 80050b4:	2308      	movs	r3, #8
 80050b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ba:	e1e4      	b.n	8005486 <UART_SetConfig+0x5a6>
 80050bc:	2310      	movs	r3, #16
 80050be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050c2:	e1e0      	b.n	8005486 <UART_SetConfig+0x5a6>
 80050c4:	2320      	movs	r3, #32
 80050c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050ca:	e1dc      	b.n	8005486 <UART_SetConfig+0x5a6>
 80050cc:	2340      	movs	r3, #64	; 0x40
 80050ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050d2:	e1d8      	b.n	8005486 <UART_SetConfig+0x5a6>
 80050d4:	2380      	movs	r3, #128	; 0x80
 80050d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80050da:	e1d4      	b.n	8005486 <UART_SetConfig+0x5a6>
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	4a4f      	ldr	r2, [pc, #316]	; (8005220 <UART_SetConfig+0x340>)
 80050e2:	4293      	cmp	r3, r2
 80050e4:	d130      	bne.n	8005148 <UART_SetConfig+0x268>
 80050e6:	4b4c      	ldr	r3, [pc, #304]	; (8005218 <UART_SetConfig+0x338>)
 80050e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80050ea:	f003 0307 	and.w	r3, r3, #7
 80050ee:	2b05      	cmp	r3, #5
 80050f0:	d826      	bhi.n	8005140 <UART_SetConfig+0x260>
 80050f2:	a201      	add	r2, pc, #4	; (adr r2, 80050f8 <UART_SetConfig+0x218>)
 80050f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050f8:	08005111 	.word	0x08005111
 80050fc:	08005119 	.word	0x08005119
 8005100:	08005121 	.word	0x08005121
 8005104:	08005129 	.word	0x08005129
 8005108:	08005131 	.word	0x08005131
 800510c:	08005139 	.word	0x08005139
 8005110:	2300      	movs	r3, #0
 8005112:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005116:	e1b6      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005118:	2304      	movs	r3, #4
 800511a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800511e:	e1b2      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005120:	2308      	movs	r3, #8
 8005122:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005126:	e1ae      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005128:	2310      	movs	r3, #16
 800512a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800512e:	e1aa      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005130:	2320      	movs	r3, #32
 8005132:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005136:	e1a6      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005138:	2340      	movs	r3, #64	; 0x40
 800513a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800513e:	e1a2      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005140:	2380      	movs	r3, #128	; 0x80
 8005142:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005146:	e19e      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005148:	697b      	ldr	r3, [r7, #20]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a35      	ldr	r2, [pc, #212]	; (8005224 <UART_SetConfig+0x344>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d130      	bne.n	80051b4 <UART_SetConfig+0x2d4>
 8005152:	4b31      	ldr	r3, [pc, #196]	; (8005218 <UART_SetConfig+0x338>)
 8005154:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005156:	f003 0307 	and.w	r3, r3, #7
 800515a:	2b05      	cmp	r3, #5
 800515c:	d826      	bhi.n	80051ac <UART_SetConfig+0x2cc>
 800515e:	a201      	add	r2, pc, #4	; (adr r2, 8005164 <UART_SetConfig+0x284>)
 8005160:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005164:	0800517d 	.word	0x0800517d
 8005168:	08005185 	.word	0x08005185
 800516c:	0800518d 	.word	0x0800518d
 8005170:	08005195 	.word	0x08005195
 8005174:	0800519d 	.word	0x0800519d
 8005178:	080051a5 	.word	0x080051a5
 800517c:	2300      	movs	r3, #0
 800517e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005182:	e180      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005184:	2304      	movs	r3, #4
 8005186:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800518a:	e17c      	b.n	8005486 <UART_SetConfig+0x5a6>
 800518c:	2308      	movs	r3, #8
 800518e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005192:	e178      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005194:	2310      	movs	r3, #16
 8005196:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800519a:	e174      	b.n	8005486 <UART_SetConfig+0x5a6>
 800519c:	2320      	movs	r3, #32
 800519e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051a2:	e170      	b.n	8005486 <UART_SetConfig+0x5a6>
 80051a4:	2340      	movs	r3, #64	; 0x40
 80051a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051aa:	e16c      	b.n	8005486 <UART_SetConfig+0x5a6>
 80051ac:	2380      	movs	r3, #128	; 0x80
 80051ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051b2:	e168      	b.n	8005486 <UART_SetConfig+0x5a6>
 80051b4:	697b      	ldr	r3, [r7, #20]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4a1b      	ldr	r2, [pc, #108]	; (8005228 <UART_SetConfig+0x348>)
 80051ba:	4293      	cmp	r3, r2
 80051bc:	d142      	bne.n	8005244 <UART_SetConfig+0x364>
 80051be:	4b16      	ldr	r3, [pc, #88]	; (8005218 <UART_SetConfig+0x338>)
 80051c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c2:	f003 0307 	and.w	r3, r3, #7
 80051c6:	2b05      	cmp	r3, #5
 80051c8:	d838      	bhi.n	800523c <UART_SetConfig+0x35c>
 80051ca:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <UART_SetConfig+0x2f0>)
 80051cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051d0:	080051e9 	.word	0x080051e9
 80051d4:	080051f1 	.word	0x080051f1
 80051d8:	080051f9 	.word	0x080051f9
 80051dc:	08005201 	.word	0x08005201
 80051e0:	0800522d 	.word	0x0800522d
 80051e4:	08005235 	.word	0x08005235
 80051e8:	2300      	movs	r3, #0
 80051ea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051ee:	e14a      	b.n	8005486 <UART_SetConfig+0x5a6>
 80051f0:	2304      	movs	r3, #4
 80051f2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051f6:	e146      	b.n	8005486 <UART_SetConfig+0x5a6>
 80051f8:	2308      	movs	r3, #8
 80051fa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80051fe:	e142      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005200:	2310      	movs	r3, #16
 8005202:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005206:	e13e      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005208:	cfff69f3 	.word	0xcfff69f3
 800520c:	58000c00 	.word	0x58000c00
 8005210:	11fff4ff 	.word	0x11fff4ff
 8005214:	40011000 	.word	0x40011000
 8005218:	58024400 	.word	0x58024400
 800521c:	40004400 	.word	0x40004400
 8005220:	40004800 	.word	0x40004800
 8005224:	40004c00 	.word	0x40004c00
 8005228:	40005000 	.word	0x40005000
 800522c:	2320      	movs	r3, #32
 800522e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005232:	e128      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005234:	2340      	movs	r3, #64	; 0x40
 8005236:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800523a:	e124      	b.n	8005486 <UART_SetConfig+0x5a6>
 800523c:	2380      	movs	r3, #128	; 0x80
 800523e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005242:	e120      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4acb      	ldr	r2, [pc, #812]	; (8005578 <UART_SetConfig+0x698>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d176      	bne.n	800533c <UART_SetConfig+0x45c>
 800524e:	4bcb      	ldr	r3, [pc, #812]	; (800557c <UART_SetConfig+0x69c>)
 8005250:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005252:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005256:	2b28      	cmp	r3, #40	; 0x28
 8005258:	d86c      	bhi.n	8005334 <UART_SetConfig+0x454>
 800525a:	a201      	add	r2, pc, #4	; (adr r2, 8005260 <UART_SetConfig+0x380>)
 800525c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005260:	08005305 	.word	0x08005305
 8005264:	08005335 	.word	0x08005335
 8005268:	08005335 	.word	0x08005335
 800526c:	08005335 	.word	0x08005335
 8005270:	08005335 	.word	0x08005335
 8005274:	08005335 	.word	0x08005335
 8005278:	08005335 	.word	0x08005335
 800527c:	08005335 	.word	0x08005335
 8005280:	0800530d 	.word	0x0800530d
 8005284:	08005335 	.word	0x08005335
 8005288:	08005335 	.word	0x08005335
 800528c:	08005335 	.word	0x08005335
 8005290:	08005335 	.word	0x08005335
 8005294:	08005335 	.word	0x08005335
 8005298:	08005335 	.word	0x08005335
 800529c:	08005335 	.word	0x08005335
 80052a0:	08005315 	.word	0x08005315
 80052a4:	08005335 	.word	0x08005335
 80052a8:	08005335 	.word	0x08005335
 80052ac:	08005335 	.word	0x08005335
 80052b0:	08005335 	.word	0x08005335
 80052b4:	08005335 	.word	0x08005335
 80052b8:	08005335 	.word	0x08005335
 80052bc:	08005335 	.word	0x08005335
 80052c0:	0800531d 	.word	0x0800531d
 80052c4:	08005335 	.word	0x08005335
 80052c8:	08005335 	.word	0x08005335
 80052cc:	08005335 	.word	0x08005335
 80052d0:	08005335 	.word	0x08005335
 80052d4:	08005335 	.word	0x08005335
 80052d8:	08005335 	.word	0x08005335
 80052dc:	08005335 	.word	0x08005335
 80052e0:	08005325 	.word	0x08005325
 80052e4:	08005335 	.word	0x08005335
 80052e8:	08005335 	.word	0x08005335
 80052ec:	08005335 	.word	0x08005335
 80052f0:	08005335 	.word	0x08005335
 80052f4:	08005335 	.word	0x08005335
 80052f8:	08005335 	.word	0x08005335
 80052fc:	08005335 	.word	0x08005335
 8005300:	0800532d 	.word	0x0800532d
 8005304:	2301      	movs	r3, #1
 8005306:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800530a:	e0bc      	b.n	8005486 <UART_SetConfig+0x5a6>
 800530c:	2304      	movs	r3, #4
 800530e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005312:	e0b8      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005314:	2308      	movs	r3, #8
 8005316:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800531a:	e0b4      	b.n	8005486 <UART_SetConfig+0x5a6>
 800531c:	2310      	movs	r3, #16
 800531e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005322:	e0b0      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005324:	2320      	movs	r3, #32
 8005326:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800532a:	e0ac      	b.n	8005486 <UART_SetConfig+0x5a6>
 800532c:	2340      	movs	r3, #64	; 0x40
 800532e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005332:	e0a8      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005334:	2380      	movs	r3, #128	; 0x80
 8005336:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800533a:	e0a4      	b.n	8005486 <UART_SetConfig+0x5a6>
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	4a8f      	ldr	r2, [pc, #572]	; (8005580 <UART_SetConfig+0x6a0>)
 8005342:	4293      	cmp	r3, r2
 8005344:	d130      	bne.n	80053a8 <UART_SetConfig+0x4c8>
 8005346:	4b8d      	ldr	r3, [pc, #564]	; (800557c <UART_SetConfig+0x69c>)
 8005348:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800534a:	f003 0307 	and.w	r3, r3, #7
 800534e:	2b05      	cmp	r3, #5
 8005350:	d826      	bhi.n	80053a0 <UART_SetConfig+0x4c0>
 8005352:	a201      	add	r2, pc, #4	; (adr r2, 8005358 <UART_SetConfig+0x478>)
 8005354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005358:	08005371 	.word	0x08005371
 800535c:	08005379 	.word	0x08005379
 8005360:	08005381 	.word	0x08005381
 8005364:	08005389 	.word	0x08005389
 8005368:	08005391 	.word	0x08005391
 800536c:	08005399 	.word	0x08005399
 8005370:	2300      	movs	r3, #0
 8005372:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005376:	e086      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005378:	2304      	movs	r3, #4
 800537a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800537e:	e082      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005380:	2308      	movs	r3, #8
 8005382:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005386:	e07e      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005388:	2310      	movs	r3, #16
 800538a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800538e:	e07a      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005390:	2320      	movs	r3, #32
 8005392:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005396:	e076      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005398:	2340      	movs	r3, #64	; 0x40
 800539a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800539e:	e072      	b.n	8005486 <UART_SetConfig+0x5a6>
 80053a0:	2380      	movs	r3, #128	; 0x80
 80053a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053a6:	e06e      	b.n	8005486 <UART_SetConfig+0x5a6>
 80053a8:	697b      	ldr	r3, [r7, #20]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a75      	ldr	r2, [pc, #468]	; (8005584 <UART_SetConfig+0x6a4>)
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d130      	bne.n	8005414 <UART_SetConfig+0x534>
 80053b2:	4b72      	ldr	r3, [pc, #456]	; (800557c <UART_SetConfig+0x69c>)
 80053b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b6:	f003 0307 	and.w	r3, r3, #7
 80053ba:	2b05      	cmp	r3, #5
 80053bc:	d826      	bhi.n	800540c <UART_SetConfig+0x52c>
 80053be:	a201      	add	r2, pc, #4	; (adr r2, 80053c4 <UART_SetConfig+0x4e4>)
 80053c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053c4:	080053dd 	.word	0x080053dd
 80053c8:	080053e5 	.word	0x080053e5
 80053cc:	080053ed 	.word	0x080053ed
 80053d0:	080053f5 	.word	0x080053f5
 80053d4:	080053fd 	.word	0x080053fd
 80053d8:	08005405 	.word	0x08005405
 80053dc:	2300      	movs	r3, #0
 80053de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053e2:	e050      	b.n	8005486 <UART_SetConfig+0x5a6>
 80053e4:	2304      	movs	r3, #4
 80053e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053ea:	e04c      	b.n	8005486 <UART_SetConfig+0x5a6>
 80053ec:	2308      	movs	r3, #8
 80053ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053f2:	e048      	b.n	8005486 <UART_SetConfig+0x5a6>
 80053f4:	2310      	movs	r3, #16
 80053f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80053fa:	e044      	b.n	8005486 <UART_SetConfig+0x5a6>
 80053fc:	2320      	movs	r3, #32
 80053fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005402:	e040      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005404:	2340      	movs	r3, #64	; 0x40
 8005406:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800540a:	e03c      	b.n	8005486 <UART_SetConfig+0x5a6>
 800540c:	2380      	movs	r3, #128	; 0x80
 800540e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005412:	e038      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a5b      	ldr	r2, [pc, #364]	; (8005588 <UART_SetConfig+0x6a8>)
 800541a:	4293      	cmp	r3, r2
 800541c:	d130      	bne.n	8005480 <UART_SetConfig+0x5a0>
 800541e:	4b57      	ldr	r3, [pc, #348]	; (800557c <UART_SetConfig+0x69c>)
 8005420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005422:	f003 0307 	and.w	r3, r3, #7
 8005426:	2b05      	cmp	r3, #5
 8005428:	d826      	bhi.n	8005478 <UART_SetConfig+0x598>
 800542a:	a201      	add	r2, pc, #4	; (adr r2, 8005430 <UART_SetConfig+0x550>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005449 	.word	0x08005449
 8005434:	08005451 	.word	0x08005451
 8005438:	08005459 	.word	0x08005459
 800543c:	08005461 	.word	0x08005461
 8005440:	08005469 	.word	0x08005469
 8005444:	08005471 	.word	0x08005471
 8005448:	2302      	movs	r3, #2
 800544a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800544e:	e01a      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005450:	2304      	movs	r3, #4
 8005452:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005456:	e016      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005458:	2308      	movs	r3, #8
 800545a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800545e:	e012      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005460:	2310      	movs	r3, #16
 8005462:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005466:	e00e      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005468:	2320      	movs	r3, #32
 800546a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800546e:	e00a      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005470:	2340      	movs	r3, #64	; 0x40
 8005472:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8005476:	e006      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005478:	2380      	movs	r3, #128	; 0x80
 800547a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800547e:	e002      	b.n	8005486 <UART_SetConfig+0x5a6>
 8005480:	2380      	movs	r3, #128	; 0x80
 8005482:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	4a3f      	ldr	r2, [pc, #252]	; (8005588 <UART_SetConfig+0x6a8>)
 800548c:	4293      	cmp	r3, r2
 800548e:	f040 80f8 	bne.w	8005682 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8005492:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005496:	2b20      	cmp	r3, #32
 8005498:	dc46      	bgt.n	8005528 <UART_SetConfig+0x648>
 800549a:	2b02      	cmp	r3, #2
 800549c:	f2c0 8082 	blt.w	80055a4 <UART_SetConfig+0x6c4>
 80054a0:	3b02      	subs	r3, #2
 80054a2:	2b1e      	cmp	r3, #30
 80054a4:	d87e      	bhi.n	80055a4 <UART_SetConfig+0x6c4>
 80054a6:	a201      	add	r2, pc, #4	; (adr r2, 80054ac <UART_SetConfig+0x5cc>)
 80054a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054ac:	0800552f 	.word	0x0800552f
 80054b0:	080055a5 	.word	0x080055a5
 80054b4:	08005537 	.word	0x08005537
 80054b8:	080055a5 	.word	0x080055a5
 80054bc:	080055a5 	.word	0x080055a5
 80054c0:	080055a5 	.word	0x080055a5
 80054c4:	08005547 	.word	0x08005547
 80054c8:	080055a5 	.word	0x080055a5
 80054cc:	080055a5 	.word	0x080055a5
 80054d0:	080055a5 	.word	0x080055a5
 80054d4:	080055a5 	.word	0x080055a5
 80054d8:	080055a5 	.word	0x080055a5
 80054dc:	080055a5 	.word	0x080055a5
 80054e0:	080055a5 	.word	0x080055a5
 80054e4:	08005557 	.word	0x08005557
 80054e8:	080055a5 	.word	0x080055a5
 80054ec:	080055a5 	.word	0x080055a5
 80054f0:	080055a5 	.word	0x080055a5
 80054f4:	080055a5 	.word	0x080055a5
 80054f8:	080055a5 	.word	0x080055a5
 80054fc:	080055a5 	.word	0x080055a5
 8005500:	080055a5 	.word	0x080055a5
 8005504:	080055a5 	.word	0x080055a5
 8005508:	080055a5 	.word	0x080055a5
 800550c:	080055a5 	.word	0x080055a5
 8005510:	080055a5 	.word	0x080055a5
 8005514:	080055a5 	.word	0x080055a5
 8005518:	080055a5 	.word	0x080055a5
 800551c:	080055a5 	.word	0x080055a5
 8005520:	080055a5 	.word	0x080055a5
 8005524:	08005597 	.word	0x08005597
 8005528:	2b40      	cmp	r3, #64	; 0x40
 800552a:	d037      	beq.n	800559c <UART_SetConfig+0x6bc>
 800552c:	e03a      	b.n	80055a4 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800552e:	f7ff f865 	bl	80045fc <HAL_RCCEx_GetD3PCLK1Freq>
 8005532:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005534:	e03c      	b.n	80055b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005536:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800553a:	4618      	mov	r0, r3
 800553c:	f7ff f874 	bl	8004628 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005540:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005542:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005544:	e034      	b.n	80055b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005546:	f107 0318 	add.w	r3, r7, #24
 800554a:	4618      	mov	r0, r3
 800554c:	f7ff f9c0 	bl	80048d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005550:	69fb      	ldr	r3, [r7, #28]
 8005552:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005554:	e02c      	b.n	80055b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8005556:	4b09      	ldr	r3, [pc, #36]	; (800557c <UART_SetConfig+0x69c>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b00      	cmp	r3, #0
 8005560:	d016      	beq.n	8005590 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8005562:	4b06      	ldr	r3, [pc, #24]	; (800557c <UART_SetConfig+0x69c>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	08db      	lsrs	r3, r3, #3
 8005568:	f003 0303 	and.w	r3, r3, #3
 800556c:	4a07      	ldr	r2, [pc, #28]	; (800558c <UART_SetConfig+0x6ac>)
 800556e:	fa22 f303 	lsr.w	r3, r2, r3
 8005572:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005574:	e01c      	b.n	80055b0 <UART_SetConfig+0x6d0>
 8005576:	bf00      	nop
 8005578:	40011400 	.word	0x40011400
 800557c:	58024400 	.word	0x58024400
 8005580:	40007800 	.word	0x40007800
 8005584:	40007c00 	.word	0x40007c00
 8005588:	58000c00 	.word	0x58000c00
 800558c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8005590:	4b9d      	ldr	r3, [pc, #628]	; (8005808 <UART_SetConfig+0x928>)
 8005592:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005594:	e00c      	b.n	80055b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005596:	4b9d      	ldr	r3, [pc, #628]	; (800580c <UART_SetConfig+0x92c>)
 8005598:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800559a:	e009      	b.n	80055b0 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800559c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80055a0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80055a2:	e005      	b.n	80055b0 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 80055a4:	2300      	movs	r3, #0
 80055a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80055ae:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80055b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	f000 81de 	beq.w	8005974 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80055b8:	697b      	ldr	r3, [r7, #20]
 80055ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055bc:	4a94      	ldr	r2, [pc, #592]	; (8005810 <UART_SetConfig+0x930>)
 80055be:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80055c2:	461a      	mov	r2, r3
 80055c4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055c6:	fbb3 f3f2 	udiv	r3, r3, r2
 80055ca:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055cc:	697b      	ldr	r3, [r7, #20]
 80055ce:	685a      	ldr	r2, [r3, #4]
 80055d0:	4613      	mov	r3, r2
 80055d2:	005b      	lsls	r3, r3, #1
 80055d4:	4413      	add	r3, r2
 80055d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055d8:	429a      	cmp	r2, r3
 80055da:	d305      	bcc.n	80055e8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80055e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d903      	bls.n	80055f0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80055e8:	2301      	movs	r3, #1
 80055ea:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80055ee:	e1c1      	b.n	8005974 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80055f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80055f2:	2200      	movs	r2, #0
 80055f4:	60bb      	str	r3, [r7, #8]
 80055f6:	60fa      	str	r2, [r7, #12]
 80055f8:	697b      	ldr	r3, [r7, #20]
 80055fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055fc:	4a84      	ldr	r2, [pc, #528]	; (8005810 <UART_SetConfig+0x930>)
 80055fe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005602:	b29b      	uxth	r3, r3
 8005604:	2200      	movs	r2, #0
 8005606:	603b      	str	r3, [r7, #0]
 8005608:	607a      	str	r2, [r7, #4]
 800560a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800560e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005612:	f7fa fe61 	bl	80002d8 <__aeabi_uldivmod>
 8005616:	4602      	mov	r2, r0
 8005618:	460b      	mov	r3, r1
 800561a:	4610      	mov	r0, r2
 800561c:	4619      	mov	r1, r3
 800561e:	f04f 0200 	mov.w	r2, #0
 8005622:	f04f 0300 	mov.w	r3, #0
 8005626:	020b      	lsls	r3, r1, #8
 8005628:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800562c:	0202      	lsls	r2, r0, #8
 800562e:	6979      	ldr	r1, [r7, #20]
 8005630:	6849      	ldr	r1, [r1, #4]
 8005632:	0849      	lsrs	r1, r1, #1
 8005634:	2000      	movs	r0, #0
 8005636:	460c      	mov	r4, r1
 8005638:	4605      	mov	r5, r0
 800563a:	eb12 0804 	adds.w	r8, r2, r4
 800563e:	eb43 0905 	adc.w	r9, r3, r5
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	685b      	ldr	r3, [r3, #4]
 8005646:	2200      	movs	r2, #0
 8005648:	469a      	mov	sl, r3
 800564a:	4693      	mov	fp, r2
 800564c:	4652      	mov	r2, sl
 800564e:	465b      	mov	r3, fp
 8005650:	4640      	mov	r0, r8
 8005652:	4649      	mov	r1, r9
 8005654:	f7fa fe40 	bl	80002d8 <__aeabi_uldivmod>
 8005658:	4602      	mov	r2, r0
 800565a:	460b      	mov	r3, r1
 800565c:	4613      	mov	r3, r2
 800565e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8005660:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005662:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005666:	d308      	bcc.n	800567a <UART_SetConfig+0x79a>
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800566e:	d204      	bcs.n	800567a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8005670:	697b      	ldr	r3, [r7, #20]
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005676:	60da      	str	r2, [r3, #12]
 8005678:	e17c      	b.n	8005974 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 800567a:	2301      	movs	r3, #1
 800567c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005680:	e178      	b.n	8005974 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	69db      	ldr	r3, [r3, #28]
 8005686:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800568a:	f040 80c5 	bne.w	8005818 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 800568e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8005692:	2b20      	cmp	r3, #32
 8005694:	dc48      	bgt.n	8005728 <UART_SetConfig+0x848>
 8005696:	2b00      	cmp	r3, #0
 8005698:	db7b      	blt.n	8005792 <UART_SetConfig+0x8b2>
 800569a:	2b20      	cmp	r3, #32
 800569c:	d879      	bhi.n	8005792 <UART_SetConfig+0x8b2>
 800569e:	a201      	add	r2, pc, #4	; (adr r2, 80056a4 <UART_SetConfig+0x7c4>)
 80056a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80056a4:	0800572f 	.word	0x0800572f
 80056a8:	08005737 	.word	0x08005737
 80056ac:	08005793 	.word	0x08005793
 80056b0:	08005793 	.word	0x08005793
 80056b4:	0800573f 	.word	0x0800573f
 80056b8:	08005793 	.word	0x08005793
 80056bc:	08005793 	.word	0x08005793
 80056c0:	08005793 	.word	0x08005793
 80056c4:	0800574f 	.word	0x0800574f
 80056c8:	08005793 	.word	0x08005793
 80056cc:	08005793 	.word	0x08005793
 80056d0:	08005793 	.word	0x08005793
 80056d4:	08005793 	.word	0x08005793
 80056d8:	08005793 	.word	0x08005793
 80056dc:	08005793 	.word	0x08005793
 80056e0:	08005793 	.word	0x08005793
 80056e4:	0800575f 	.word	0x0800575f
 80056e8:	08005793 	.word	0x08005793
 80056ec:	08005793 	.word	0x08005793
 80056f0:	08005793 	.word	0x08005793
 80056f4:	08005793 	.word	0x08005793
 80056f8:	08005793 	.word	0x08005793
 80056fc:	08005793 	.word	0x08005793
 8005700:	08005793 	.word	0x08005793
 8005704:	08005793 	.word	0x08005793
 8005708:	08005793 	.word	0x08005793
 800570c:	08005793 	.word	0x08005793
 8005710:	08005793 	.word	0x08005793
 8005714:	08005793 	.word	0x08005793
 8005718:	08005793 	.word	0x08005793
 800571c:	08005793 	.word	0x08005793
 8005720:	08005793 	.word	0x08005793
 8005724:	08005785 	.word	0x08005785
 8005728:	2b40      	cmp	r3, #64	; 0x40
 800572a:	d02e      	beq.n	800578a <UART_SetConfig+0x8aa>
 800572c:	e031      	b.n	8005792 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800572e:	f7fd fd2f 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 8005732:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005734:	e033      	b.n	800579e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8005736:	f7fd fd41 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 800573a:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 800573c:	e02f      	b.n	800579e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800573e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005742:	4618      	mov	r0, r3
 8005744:	f7fe ff70 	bl	8004628 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8005748:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800574a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800574c:	e027      	b.n	800579e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800574e:	f107 0318 	add.w	r3, r7, #24
 8005752:	4618      	mov	r0, r3
 8005754:	f7ff f8bc 	bl	80048d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8005758:	69fb      	ldr	r3, [r7, #28]
 800575a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800575c:	e01f      	b.n	800579e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800575e:	4b2d      	ldr	r3, [pc, #180]	; (8005814 <UART_SetConfig+0x934>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f003 0320 	and.w	r3, r3, #32
 8005766:	2b00      	cmp	r3, #0
 8005768:	d009      	beq.n	800577e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800576a:	4b2a      	ldr	r3, [pc, #168]	; (8005814 <UART_SetConfig+0x934>)
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	08db      	lsrs	r3, r3, #3
 8005770:	f003 0303 	and.w	r3, r3, #3
 8005774:	4a24      	ldr	r2, [pc, #144]	; (8005808 <UART_SetConfig+0x928>)
 8005776:	fa22 f303 	lsr.w	r3, r2, r3
 800577a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800577c:	e00f      	b.n	800579e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 800577e:	4b22      	ldr	r3, [pc, #136]	; (8005808 <UART_SetConfig+0x928>)
 8005780:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005782:	e00c      	b.n	800579e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005784:	4b21      	ldr	r3, [pc, #132]	; (800580c <UART_SetConfig+0x92c>)
 8005786:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005788:	e009      	b.n	800579e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800578a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800578e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005790:	e005      	b.n	800579e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8005792:	2300      	movs	r3, #0
 8005794:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005796:	2301      	movs	r3, #1
 8005798:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 800579c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800579e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	f000 80e7 	beq.w	8005974 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80057a6:	697b      	ldr	r3, [r7, #20]
 80057a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057aa:	4a19      	ldr	r2, [pc, #100]	; (8005810 <UART_SetConfig+0x930>)
 80057ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80057b0:	461a      	mov	r2, r3
 80057b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057b4:	fbb3 f3f2 	udiv	r3, r3, r2
 80057b8:	005a      	lsls	r2, r3, #1
 80057ba:	697b      	ldr	r3, [r7, #20]
 80057bc:	685b      	ldr	r3, [r3, #4]
 80057be:	085b      	lsrs	r3, r3, #1
 80057c0:	441a      	add	r2, r3
 80057c2:	697b      	ldr	r3, [r7, #20]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ca:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80057cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057ce:	2b0f      	cmp	r3, #15
 80057d0:	d916      	bls.n	8005800 <UART_SetConfig+0x920>
 80057d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057d8:	d212      	bcs.n	8005800 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80057da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057dc:	b29b      	uxth	r3, r3
 80057de:	f023 030f 	bic.w	r3, r3, #15
 80057e2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80057e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057e6:	085b      	lsrs	r3, r3, #1
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	f003 0307 	and.w	r3, r3, #7
 80057ee:	b29a      	uxth	r2, r3
 80057f0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80057f2:	4313      	orrs	r3, r2
 80057f4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80057f6:	697b      	ldr	r3, [r7, #20]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80057fc:	60da      	str	r2, [r3, #12]
 80057fe:	e0b9      	b.n	8005974 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8005800:	2301      	movs	r3, #1
 8005802:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8005806:	e0b5      	b.n	8005974 <UART_SetConfig+0xa94>
 8005808:	03d09000 	.word	0x03d09000
 800580c:	003d0900 	.word	0x003d0900
 8005810:	08006688 	.word	0x08006688
 8005814:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8005818:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800581c:	2b20      	cmp	r3, #32
 800581e:	dc49      	bgt.n	80058b4 <UART_SetConfig+0x9d4>
 8005820:	2b00      	cmp	r3, #0
 8005822:	db7c      	blt.n	800591e <UART_SetConfig+0xa3e>
 8005824:	2b20      	cmp	r3, #32
 8005826:	d87a      	bhi.n	800591e <UART_SetConfig+0xa3e>
 8005828:	a201      	add	r2, pc, #4	; (adr r2, 8005830 <UART_SetConfig+0x950>)
 800582a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800582e:	bf00      	nop
 8005830:	080058bb 	.word	0x080058bb
 8005834:	080058c3 	.word	0x080058c3
 8005838:	0800591f 	.word	0x0800591f
 800583c:	0800591f 	.word	0x0800591f
 8005840:	080058cb 	.word	0x080058cb
 8005844:	0800591f 	.word	0x0800591f
 8005848:	0800591f 	.word	0x0800591f
 800584c:	0800591f 	.word	0x0800591f
 8005850:	080058db 	.word	0x080058db
 8005854:	0800591f 	.word	0x0800591f
 8005858:	0800591f 	.word	0x0800591f
 800585c:	0800591f 	.word	0x0800591f
 8005860:	0800591f 	.word	0x0800591f
 8005864:	0800591f 	.word	0x0800591f
 8005868:	0800591f 	.word	0x0800591f
 800586c:	0800591f 	.word	0x0800591f
 8005870:	080058eb 	.word	0x080058eb
 8005874:	0800591f 	.word	0x0800591f
 8005878:	0800591f 	.word	0x0800591f
 800587c:	0800591f 	.word	0x0800591f
 8005880:	0800591f 	.word	0x0800591f
 8005884:	0800591f 	.word	0x0800591f
 8005888:	0800591f 	.word	0x0800591f
 800588c:	0800591f 	.word	0x0800591f
 8005890:	0800591f 	.word	0x0800591f
 8005894:	0800591f 	.word	0x0800591f
 8005898:	0800591f 	.word	0x0800591f
 800589c:	0800591f 	.word	0x0800591f
 80058a0:	0800591f 	.word	0x0800591f
 80058a4:	0800591f 	.word	0x0800591f
 80058a8:	0800591f 	.word	0x0800591f
 80058ac:	0800591f 	.word	0x0800591f
 80058b0:	08005911 	.word	0x08005911
 80058b4:	2b40      	cmp	r3, #64	; 0x40
 80058b6:	d02e      	beq.n	8005916 <UART_SetConfig+0xa36>
 80058b8:	e031      	b.n	800591e <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80058ba:	f7fd fc69 	bl	8003190 <HAL_RCC_GetPCLK1Freq>
 80058be:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058c0:	e033      	b.n	800592a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80058c2:	f7fd fc7b 	bl	80031bc <HAL_RCC_GetPCLK2Freq>
 80058c6:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80058c8:	e02f      	b.n	800592a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80058ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7fe feaa 	bl	8004628 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80058d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058d6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058d8:	e027      	b.n	800592a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80058da:	f107 0318 	add.w	r3, r7, #24
 80058de:	4618      	mov	r0, r3
 80058e0:	f7fe fff6 	bl	80048d0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80058e8:	e01f      	b.n	800592a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80058ea:	4b2d      	ldr	r3, [pc, #180]	; (80059a0 <UART_SetConfig+0xac0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	f003 0320 	and.w	r3, r3, #32
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d009      	beq.n	800590a <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80058f6:	4b2a      	ldr	r3, [pc, #168]	; (80059a0 <UART_SetConfig+0xac0>)
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	08db      	lsrs	r3, r3, #3
 80058fc:	f003 0303 	and.w	r3, r3, #3
 8005900:	4a28      	ldr	r2, [pc, #160]	; (80059a4 <UART_SetConfig+0xac4>)
 8005902:	fa22 f303 	lsr.w	r3, r2, r3
 8005906:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8005908:	e00f      	b.n	800592a <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 800590a:	4b26      	ldr	r3, [pc, #152]	; (80059a4 <UART_SetConfig+0xac4>)
 800590c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800590e:	e00c      	b.n	800592a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8005910:	4b25      	ldr	r3, [pc, #148]	; (80059a8 <UART_SetConfig+0xac8>)
 8005912:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005914:	e009      	b.n	800592a <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005916:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800591c:	e005      	b.n	800592a <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 800591e:	2300      	movs	r3, #0
 8005920:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8005922:	2301      	movs	r3, #1
 8005924:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8005928:	bf00      	nop
    }

    if (pclk != 0U)
 800592a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800592c:	2b00      	cmp	r3, #0
 800592e:	d021      	beq.n	8005974 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005930:	697b      	ldr	r3, [r7, #20]
 8005932:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005934:	4a1d      	ldr	r2, [pc, #116]	; (80059ac <UART_SetConfig+0xacc>)
 8005936:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800593a:	461a      	mov	r2, r3
 800593c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800593e:	fbb3 f2f2 	udiv	r2, r3, r2
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	085b      	lsrs	r3, r3, #1
 8005948:	441a      	add	r2, r3
 800594a:	697b      	ldr	r3, [r7, #20]
 800594c:	685b      	ldr	r3, [r3, #4]
 800594e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005952:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005956:	2b0f      	cmp	r3, #15
 8005958:	d909      	bls.n	800596e <UART_SetConfig+0xa8e>
 800595a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800595c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005960:	d205      	bcs.n	800596e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005964:	b29a      	uxth	r2, r3
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	60da      	str	r2, [r3, #12]
 800596c:	e002      	b.n	8005974 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 800596e:	2301      	movs	r3, #1
 8005970:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	2201      	movs	r2, #1
 8005978:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800597c:	697b      	ldr	r3, [r7, #20]
 800597e:	2201      	movs	r2, #1
 8005980:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	2200      	movs	r2, #0
 8005988:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	2200      	movs	r2, #0
 800598e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8005990:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8005994:	4618      	mov	r0, r3
 8005996:	3748      	adds	r7, #72	; 0x48
 8005998:	46bd      	mov	sp, r7
 800599a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800599e:	bf00      	nop
 80059a0:	58024400 	.word	0x58024400
 80059a4:	03d09000 	.word	0x03d09000
 80059a8:	003d0900 	.word	0x003d0900
 80059ac:	08006688 	.word	0x08006688

080059b0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059bc:	f003 0308 	and.w	r3, r3, #8
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d00a      	beq.n	80059da <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	685b      	ldr	r3, [r3, #4]
 80059ca:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	430a      	orrs	r2, r1
 80059d8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059de:	f003 0301 	and.w	r3, r3, #1
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d00a      	beq.n	80059fc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	430a      	orrs	r2, r1
 80059fa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a00:	f003 0302 	and.w	r3, r3, #2
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d00a      	beq.n	8005a1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	685b      	ldr	r3, [r3, #4]
 8005a0e:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	430a      	orrs	r2, r1
 8005a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d00a      	beq.n	8005a40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	430a      	orrs	r2, r1
 8005a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a44:	f003 0310 	and.w	r3, r3, #16
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d00a      	beq.n	8005a62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	430a      	orrs	r2, r1
 8005a60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a66:	f003 0320 	and.w	r3, r3, #32
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d00a      	beq.n	8005a84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	689b      	ldr	r3, [r3, #8]
 8005a74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	430a      	orrs	r2, r1
 8005a82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d01a      	beq.n	8005ac6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	430a      	orrs	r2, r1
 8005aa4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005aaa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005aae:	d10a      	bne.n	8005ac6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	430a      	orrs	r2, r1
 8005ac4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005aca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d00a      	beq.n	8005ae8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	430a      	orrs	r2, r1
 8005ae6:	605a      	str	r2, [r3, #4]
  }
}
 8005ae8:	bf00      	nop
 8005aea:	370c      	adds	r7, #12
 8005aec:	46bd      	mov	sp, r7
 8005aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af2:	4770      	bx	lr

08005af4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b098      	sub	sp, #96	; 0x60
 8005af8:	af02      	add	r7, sp, #8
 8005afa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2200      	movs	r2, #0
 8005b00:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005b04:	f7fb faaa 	bl	800105c <HAL_GetTick>
 8005b08:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f003 0308 	and.w	r3, r3, #8
 8005b14:	2b08      	cmp	r3, #8
 8005b16:	d12f      	bne.n	8005b78 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b1c:	9300      	str	r3, [sp, #0]
 8005b1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b20:	2200      	movs	r2, #0
 8005b22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f88e 	bl	8005c48 <UART_WaitOnFlagUntilTimeout>
 8005b2c:	4603      	mov	r3, r0
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d022      	beq.n	8005b78 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b3a:	e853 3f00 	ldrex	r3, [r3]
 8005b3e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b42:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005b46:	653b      	str	r3, [r7, #80]	; 0x50
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	461a      	mov	r2, r3
 8005b4e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005b50:	647b      	str	r3, [r7, #68]	; 0x44
 8005b52:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b54:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005b56:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005b58:	e841 2300 	strex	r3, r2, [r1]
 8005b5c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b5e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d1e6      	bne.n	8005b32 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2220      	movs	r2, #32
 8005b68:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005b74:	2303      	movs	r3, #3
 8005b76:	e063      	b.n	8005c40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	f003 0304 	and.w	r3, r3, #4
 8005b82:	2b04      	cmp	r3, #4
 8005b84:	d149      	bne.n	8005c1a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005b86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005b8a:	9300      	str	r3, [sp, #0]
 8005b8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b8e:	2200      	movs	r2, #0
 8005b90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f857 	bl	8005c48 <UART_WaitOnFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d03c      	beq.n	8005c1a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ba6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba8:	e853 3f00 	ldrex	r3, [r3]
 8005bac:	623b      	str	r3, [r7, #32]
   return(result);
 8005bae:	6a3b      	ldr	r3, [r7, #32]
 8005bb0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005bb4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	461a      	mov	r2, r3
 8005bbc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005bbe:	633b      	str	r3, [r7, #48]	; 0x30
 8005bc0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005bc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005bc6:	e841 2300 	strex	r3, r2, [r1]
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005bcc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d1e6      	bne.n	8005ba0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	3308      	adds	r3, #8
 8005bd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bda:	693b      	ldr	r3, [r7, #16]
 8005bdc:	e853 3f00 	ldrex	r3, [r3]
 8005be0:	60fb      	str	r3, [r7, #12]
   return(result);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f023 0301 	bic.w	r3, r3, #1
 8005be8:	64bb      	str	r3, [r7, #72]	; 0x48
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005bf2:	61fa      	str	r2, [r7, #28]
 8005bf4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bf6:	69b9      	ldr	r1, [r7, #24]
 8005bf8:	69fa      	ldr	r2, [r7, #28]
 8005bfa:	e841 2300 	strex	r3, r2, [r1]
 8005bfe:	617b      	str	r3, [r7, #20]
   return(result);
 8005c00:	697b      	ldr	r3, [r7, #20]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d1e5      	bne.n	8005bd2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	2220      	movs	r2, #32
 8005c0a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2200      	movs	r2, #0
 8005c12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005c16:	2303      	movs	r3, #3
 8005c18:	e012      	b.n	8005c40 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	2220      	movs	r2, #32
 8005c1e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2220      	movs	r2, #32
 8005c26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	2200      	movs	r2, #0
 8005c2e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005c3e:	2300      	movs	r3, #0
}
 8005c40:	4618      	mov	r0, r3
 8005c42:	3758      	adds	r7, #88	; 0x58
 8005c44:	46bd      	mov	sp, r7
 8005c46:	bd80      	pop	{r7, pc}

08005c48 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8005c48:	b580      	push	{r7, lr}
 8005c4a:	b084      	sub	sp, #16
 8005c4c:	af00      	add	r7, sp, #0
 8005c4e:	60f8      	str	r0, [r7, #12]
 8005c50:	60b9      	str	r1, [r7, #8]
 8005c52:	603b      	str	r3, [r7, #0]
 8005c54:	4613      	mov	r3, r2
 8005c56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c58:	e04f      	b.n	8005cfa <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c60:	d04b      	beq.n	8005cfa <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005c62:	f7fb f9fb 	bl	800105c <HAL_GetTick>
 8005c66:	4602      	mov	r2, r0
 8005c68:	683b      	ldr	r3, [r7, #0]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	69ba      	ldr	r2, [r7, #24]
 8005c6e:	429a      	cmp	r2, r3
 8005c70:	d302      	bcc.n	8005c78 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c72:	69bb      	ldr	r3, [r7, #24]
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d101      	bne.n	8005c7c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005c78:	2303      	movs	r3, #3
 8005c7a:	e04e      	b.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0304 	and.w	r3, r3, #4
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d037      	beq.n	8005cfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c8a:	68bb      	ldr	r3, [r7, #8]
 8005c8c:	2b80      	cmp	r3, #128	; 0x80
 8005c8e:	d034      	beq.n	8005cfa <UART_WaitOnFlagUntilTimeout+0xb2>
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	2b40      	cmp	r3, #64	; 0x40
 8005c94:	d031      	beq.n	8005cfa <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005c96:	68fb      	ldr	r3, [r7, #12]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	69db      	ldr	r3, [r3, #28]
 8005c9c:	f003 0308 	and.w	r3, r3, #8
 8005ca0:	2b08      	cmp	r3, #8
 8005ca2:	d110      	bne.n	8005cc6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	2208      	movs	r2, #8
 8005caa:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005cac:	68f8      	ldr	r0, [r7, #12]
 8005cae:	f000 f839 	bl	8005d24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2208      	movs	r2, #8
 8005cb6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	2200      	movs	r2, #0
 8005cbe:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8005cc2:	2301      	movs	r3, #1
 8005cc4:	e029      	b.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69db      	ldr	r3, [r3, #28]
 8005ccc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cd0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cd4:	d111      	bne.n	8005cfa <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005cde:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ce0:	68f8      	ldr	r0, [r7, #12]
 8005ce2:	f000 f81f 	bl	8005d24 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	e00f      	b.n	8005d1a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	69da      	ldr	r2, [r3, #28]
 8005d00:	68bb      	ldr	r3, [r7, #8]
 8005d02:	4013      	ands	r3, r2
 8005d04:	68ba      	ldr	r2, [r7, #8]
 8005d06:	429a      	cmp	r2, r3
 8005d08:	bf0c      	ite	eq
 8005d0a:	2301      	moveq	r3, #1
 8005d0c:	2300      	movne	r3, #0
 8005d0e:	b2db      	uxtb	r3, r3
 8005d10:	461a      	mov	r2, r3
 8005d12:	79fb      	ldrb	r3, [r7, #7]
 8005d14:	429a      	cmp	r2, r3
 8005d16:	d0a0      	beq.n	8005c5a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005d18:	2300      	movs	r3, #0
}
 8005d1a:	4618      	mov	r0, r3
 8005d1c:	3710      	adds	r7, #16
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	bd80      	pop	{r7, pc}
	...

08005d24 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d24:	b480      	push	{r7}
 8005d26:	b095      	sub	sp, #84	; 0x54
 8005d28:	af00      	add	r7, sp, #0
 8005d2a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d34:	e853 3f00 	ldrex	r3, [r3]
 8005d38:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d3c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d40:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	461a      	mov	r2, r3
 8005d48:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005d4a:	643b      	str	r3, [r7, #64]	; 0x40
 8005d4c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d4e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005d50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d52:	e841 2300 	strex	r3, r2, [r1]
 8005d56:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005d58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d1e6      	bne.n	8005d2c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	3308      	adds	r3, #8
 8005d64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d66:	6a3b      	ldr	r3, [r7, #32]
 8005d68:	e853 3f00 	ldrex	r3, [r3]
 8005d6c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d6e:	69fa      	ldr	r2, [r7, #28]
 8005d70:	4b1e      	ldr	r3, [pc, #120]	; (8005dec <UART_EndRxTransfer+0xc8>)
 8005d72:	4013      	ands	r3, r2
 8005d74:	64bb      	str	r3, [r7, #72]	; 0x48
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	3308      	adds	r3, #8
 8005d7c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005d7e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005d80:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005d84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d86:	e841 2300 	strex	r3, r2, [r1]
 8005d8a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005d8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d8e:	2b00      	cmp	r3, #0
 8005d90:	d1e5      	bne.n	8005d5e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005d96:	2b01      	cmp	r3, #1
 8005d98:	d118      	bne.n	8005dcc <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	e853 3f00 	ldrex	r3, [r3]
 8005da6:	60bb      	str	r3, [r7, #8]
   return(result);
 8005da8:	68bb      	ldr	r3, [r7, #8]
 8005daa:	f023 0310 	bic.w	r3, r3, #16
 8005dae:	647b      	str	r3, [r7, #68]	; 0x44
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	461a      	mov	r2, r3
 8005db6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005db8:	61bb      	str	r3, [r7, #24]
 8005dba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dbc:	6979      	ldr	r1, [r7, #20]
 8005dbe:	69ba      	ldr	r2, [r7, #24]
 8005dc0:	e841 2300 	strex	r3, r2, [r1]
 8005dc4:	613b      	str	r3, [r7, #16]
   return(result);
 8005dc6:	693b      	ldr	r3, [r7, #16]
 8005dc8:	2b00      	cmp	r3, #0
 8005dca:	d1e6      	bne.n	8005d9a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2220      	movs	r2, #32
 8005dd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	675a      	str	r2, [r3, #116]	; 0x74
}
 8005de0:	bf00      	nop
 8005de2:	3754      	adds	r7, #84	; 0x54
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr
 8005dec:	effffffe 	.word	0xeffffffe

08005df0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005df0:	b480      	push	{r7}
 8005df2:	b085      	sub	sp, #20
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d101      	bne.n	8005e06 <HAL_UARTEx_DisableFifoMode+0x16>
 8005e02:	2302      	movs	r3, #2
 8005e04:	e027      	b.n	8005e56 <HAL_UARTEx_DisableFifoMode+0x66>
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2201      	movs	r2, #1
 8005e0a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	2224      	movs	r2, #36	; 0x24
 8005e12:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0201 	bic.w	r2, r2, #1
 8005e2c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005e34:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	68fa      	ldr	r2, [r7, #12]
 8005e42:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2220      	movs	r2, #32
 8005e48:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005e54:	2300      	movs	r3, #0
}
 8005e56:	4618      	mov	r0, r3
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr

08005e62 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005e62:	b580      	push	{r7, lr}
 8005e64:	b084      	sub	sp, #16
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
 8005e6a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d101      	bne.n	8005e7a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005e76:	2302      	movs	r3, #2
 8005e78:	e02d      	b.n	8005ed6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2224      	movs	r2, #36	; 0x24
 8005e86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681a      	ldr	r2, [r3, #0]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	f022 0201 	bic.w	r2, r2, #1
 8005ea0:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	689b      	ldr	r3, [r3, #8]
 8005ea8:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	683a      	ldr	r2, [r7, #0]
 8005eb2:	430a      	orrs	r2, r1
 8005eb4:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005eb6:	6878      	ldr	r0, [r7, #4]
 8005eb8:	f000 f850 	bl	8005f5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68fa      	ldr	r2, [r7, #12]
 8005ec2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	2220      	movs	r2, #32
 8005ec8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005ed4:	2300      	movs	r3, #0
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}

08005ede <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005ede:	b580      	push	{r7, lr}
 8005ee0:	b084      	sub	sp, #16
 8005ee2:	af00      	add	r7, sp, #0
 8005ee4:	6078      	str	r0, [r7, #4]
 8005ee6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8005eee:	2b01      	cmp	r3, #1
 8005ef0:	d101      	bne.n	8005ef6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005ef2:	2302      	movs	r3, #2
 8005ef4:	e02d      	b.n	8005f52 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	2201      	movs	r2, #1
 8005efa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2224      	movs	r2, #36	; 0x24
 8005f02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681b      	ldr	r3, [r3, #0]
 8005f12:	681a      	ldr	r2, [r3, #0]
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	f022 0201 	bic.w	r2, r2, #1
 8005f1c:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	689b      	ldr	r3, [r3, #8]
 8005f24:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	683a      	ldr	r2, [r7, #0]
 8005f2e:	430a      	orrs	r2, r1
 8005f30:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005f32:	6878      	ldr	r0, [r7, #4]
 8005f34:	f000 f812 	bl	8005f5c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	68fa      	ldr	r2, [r7, #12]
 8005f3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2220      	movs	r2, #32
 8005f44:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8005f50:	2300      	movs	r3, #0
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
	...

08005f5c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d108      	bne.n	8005f7e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005f7c:	e031      	b.n	8005fe2 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8005f7e:	2310      	movs	r3, #16
 8005f80:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005f82:	2310      	movs	r3, #16
 8005f84:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	681b      	ldr	r3, [r3, #0]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	0e5b      	lsrs	r3, r3, #25
 8005f8e:	b2db      	uxtb	r3, r3
 8005f90:	f003 0307 	and.w	r3, r3, #7
 8005f94:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	0f5b      	lsrs	r3, r3, #29
 8005f9e:	b2db      	uxtb	r3, r3
 8005fa0:	f003 0307 	and.w	r3, r3, #7
 8005fa4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fa6:	7bbb      	ldrb	r3, [r7, #14]
 8005fa8:	7b3a      	ldrb	r2, [r7, #12]
 8005faa:	4911      	ldr	r1, [pc, #68]	; (8005ff0 <UARTEx_SetNbDataToProcess+0x94>)
 8005fac:	5c8a      	ldrb	r2, [r1, r2]
 8005fae:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8005fb2:	7b3a      	ldrb	r2, [r7, #12]
 8005fb4:	490f      	ldr	r1, [pc, #60]	; (8005ff4 <UARTEx_SetNbDataToProcess+0x98>)
 8005fb6:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005fb8:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fbc:	b29a      	uxth	r2, r3
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fc4:	7bfb      	ldrb	r3, [r7, #15]
 8005fc6:	7b7a      	ldrb	r2, [r7, #13]
 8005fc8:	4909      	ldr	r1, [pc, #36]	; (8005ff0 <UARTEx_SetNbDataToProcess+0x94>)
 8005fca:	5c8a      	ldrb	r2, [r1, r2]
 8005fcc:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8005fd0:	7b7a      	ldrb	r2, [r7, #13]
 8005fd2:	4908      	ldr	r1, [pc, #32]	; (8005ff4 <UARTEx_SetNbDataToProcess+0x98>)
 8005fd4:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005fd6:	fb93 f3f2 	sdiv	r3, r3, r2
 8005fda:	b29a      	uxth	r2, r3
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8005fe2:	bf00      	nop
 8005fe4:	3714      	adds	r7, #20
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr
 8005fee:	bf00      	nop
 8005ff0:	080066a0 	.word	0x080066a0
 8005ff4:	080066a8 	.word	0x080066a8

08005ff8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ff8:	b084      	sub	sp, #16
 8005ffa:	b580      	push	{r7, lr}
 8005ffc:	b084      	sub	sp, #16
 8005ffe:	af00      	add	r7, sp, #0
 8006000:	6078      	str	r0, [r7, #4]
 8006002:	f107 001c 	add.w	r0, r7, #28
 8006006:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800600a:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 800600e:	2b01      	cmp	r3, #1
 8006010:	d121      	bne.n	8006056 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006016:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	68da      	ldr	r2, [r3, #12]
 8006022:	4b2c      	ldr	r3, [pc, #176]	; (80060d4 <USB_CoreInit+0xdc>)
 8006024:	4013      	ands	r3, r2
 8006026:	687a      	ldr	r2, [r7, #4]
 8006028:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	68db      	ldr	r3, [r3, #12]
 800602e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8006036:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800603a:	2b01      	cmp	r3, #1
 800603c:	d105      	bne.n	800604a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	68db      	ldr	r3, [r3, #12]
 8006042:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 faaa 	bl	80065a4 <USB_CoreReset>
 8006050:	4603      	mov	r3, r0
 8006052:	73fb      	strb	r3, [r7, #15]
 8006054:	e01b      	b.n	800608e <USB_CoreInit+0x96>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	68db      	ldr	r3, [r3, #12]
 800605a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fa9e 	bl	80065a4 <USB_CoreReset>
 8006068:	4603      	mov	r3, r0
 800606a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800606c:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8006070:	2b00      	cmp	r3, #0
 8006072:	d106      	bne.n	8006082 <USB_CoreInit+0x8a>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006078:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	639a      	str	r2, [r3, #56]	; 0x38
 8006080:	e005      	b.n	800608e <USB_CoreInit+0x96>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006086:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800608e:	7fbb      	ldrb	r3, [r7, #30]
 8006090:	2b01      	cmp	r3, #1
 8006092:	d116      	bne.n	80060c2 <USB_CoreInit+0xca>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006098:	b29a      	uxth	r2, r3
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80060a2:	4b0d      	ldr	r3, [pc, #52]	; (80060d8 <USB_CoreInit+0xe0>)
 80060a4:	4313      	orrs	r3, r2
 80060a6:	687a      	ldr	r2, [r7, #4]
 80060a8:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	689b      	ldr	r3, [r3, #8]
 80060ae:	f043 0206 	orr.w	r2, r3, #6
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f043 0220 	orr.w	r2, r3, #32
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80060c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3710      	adds	r7, #16
 80060c8:	46bd      	mov	sp, r7
 80060ca:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060ce:	b004      	add	sp, #16
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	ffbdffbf 	.word	0xffbdffbf
 80060d8:	03ee0000 	.word	0x03ee0000

080060dc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80060dc:	b480      	push	{r7}
 80060de:	b083      	sub	sp, #12
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	689b      	ldr	r3, [r3, #8]
 80060e8:	f023 0201 	bic.w	r2, r3, #1
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80060f0:	2300      	movs	r3, #0
}
 80060f2:	4618      	mov	r0, r3
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b084      	sub	sp, #16
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
 8006106:	460b      	mov	r3, r1
 8006108:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	68db      	ldr	r3, [r3, #12]
 8006112:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800611a:	78fb      	ldrb	r3, [r7, #3]
 800611c:	2b01      	cmp	r3, #1
 800611e:	d115      	bne.n	800614c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68db      	ldr	r3, [r3, #12]
 8006124:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800612c:	200a      	movs	r0, #10
 800612e:	f7fa ffa1 	bl	8001074 <HAL_Delay>
      ms += 10U;
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	330a      	adds	r3, #10
 8006136:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8006138:	6878      	ldr	r0, [r7, #4]
 800613a:	f000 fa25 	bl	8006588 <USB_GetMode>
 800613e:	4603      	mov	r3, r0
 8006140:	2b01      	cmp	r3, #1
 8006142:	d01e      	beq.n	8006182 <USB_SetCurrentMode+0x84>
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	2bc7      	cmp	r3, #199	; 0xc7
 8006148:	d9f0      	bls.n	800612c <USB_SetCurrentMode+0x2e>
 800614a:	e01a      	b.n	8006182 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800614c:	78fb      	ldrb	r3, [r7, #3]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d115      	bne.n	800617e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800615e:	200a      	movs	r0, #10
 8006160:	f7fa ff88 	bl	8001074 <HAL_Delay>
      ms += 10U;
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	330a      	adds	r3, #10
 8006168:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 fa0c 	bl	8006588 <USB_GetMode>
 8006170:	4603      	mov	r3, r0
 8006172:	2b00      	cmp	r3, #0
 8006174:	d005      	beq.n	8006182 <USB_SetCurrentMode+0x84>
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	2bc7      	cmp	r3, #199	; 0xc7
 800617a:	d9f0      	bls.n	800615e <USB_SetCurrentMode+0x60>
 800617c:	e001      	b.n	8006182 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e005      	b.n	800618e <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2bc8      	cmp	r3, #200	; 0xc8
 8006186:	d101      	bne.n	800618c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8006188:	2301      	movs	r3, #1
 800618a:	e000      	b.n	800618e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3710      	adds	r7, #16
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
	...

08006198 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006198:	b084      	sub	sp, #16
 800619a:	b580      	push	{r7, lr}
 800619c:	b086      	sub	sp, #24
 800619e:	af00      	add	r7, sp, #0
 80061a0:	6078      	str	r0, [r7, #4]
 80061a2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80061a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80061aa:	2300      	movs	r3, #0
 80061ac:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80061b2:	2300      	movs	r3, #0
 80061b4:	613b      	str	r3, [r7, #16]
 80061b6:	e009      	b.n	80061cc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80061b8:	687a      	ldr	r2, [r7, #4]
 80061ba:	693b      	ldr	r3, [r7, #16]
 80061bc:	3340      	adds	r3, #64	; 0x40
 80061be:	009b      	lsls	r3, r3, #2
 80061c0:	4413      	add	r3, r2
 80061c2:	2200      	movs	r2, #0
 80061c4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80061c6:	693b      	ldr	r3, [r7, #16]
 80061c8:	3301      	adds	r3, #1
 80061ca:	613b      	str	r3, [r7, #16]
 80061cc:	693b      	ldr	r3, [r7, #16]
 80061ce:	2b0e      	cmp	r3, #14
 80061d0:	d9f2      	bls.n	80061b8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80061d2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d11c      	bne.n	8006214 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061e0:	685b      	ldr	r3, [r3, #4]
 80061e2:	68fa      	ldr	r2, [r7, #12]
 80061e4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80061e8:	f043 0302 	orr.w	r3, r3, #2
 80061ec:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061f2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	601a      	str	r2, [r3, #0]
 8006212:	e005      	b.n	8006220 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006218:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006226:	461a      	mov	r2, r3
 8006228:	2300      	movs	r3, #0
 800622a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800622c:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006230:	2b01      	cmp	r3, #1
 8006232:	d10d      	bne.n	8006250 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8006234:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006238:	2b00      	cmp	r3, #0
 800623a:	d104      	bne.n	8006246 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800623c:	2100      	movs	r1, #0
 800623e:	6878      	ldr	r0, [r7, #4]
 8006240:	f000 f968 	bl	8006514 <USB_SetDevSpeed>
 8006244:	e008      	b.n	8006258 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8006246:	2101      	movs	r1, #1
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 f963 	bl	8006514 <USB_SetDevSpeed>
 800624e:	e003      	b.n	8006258 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8006250:	2103      	movs	r1, #3
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 f95e 	bl	8006514 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006258:	2110      	movs	r1, #16
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 f8fa 	bl	8006454 <USB_FlushTxFifo>
 8006260:	4603      	mov	r3, r0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d001      	beq.n	800626a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8006266:	2301      	movs	r3, #1
 8006268:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800626a:	6878      	ldr	r0, [r7, #4]
 800626c:	f000 f924 	bl	80064b8 <USB_FlushRxFifo>
 8006270:	4603      	mov	r3, r0
 8006272:	2b00      	cmp	r3, #0
 8006274:	d001      	beq.n	800627a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8006276:	2301      	movs	r3, #1
 8006278:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006280:	461a      	mov	r2, r3
 8006282:	2300      	movs	r3, #0
 8006284:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800628c:	461a      	mov	r2, r3
 800628e:	2300      	movs	r3, #0
 8006290:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006298:	461a      	mov	r2, r3
 800629a:	2300      	movs	r3, #0
 800629c:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800629e:	2300      	movs	r3, #0
 80062a0:	613b      	str	r3, [r7, #16]
 80062a2:	e043      	b.n	800632c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80062a4:	693b      	ldr	r3, [r7, #16]
 80062a6:	015a      	lsls	r2, r3, #5
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	4413      	add	r3, r2
 80062ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80062b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80062ba:	d118      	bne.n	80062ee <USB_DevInit+0x156>
    {
      if (i == 0U)
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	015a      	lsls	r2, r3, #5
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4413      	add	r3, r2
 80062ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062ce:	461a      	mov	r2, r3
 80062d0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80062d4:	6013      	str	r3, [r2, #0]
 80062d6:	e013      	b.n	8006300 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	015a      	lsls	r2, r3, #5
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	4413      	add	r3, r2
 80062e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062e4:	461a      	mov	r2, r3
 80062e6:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	e008      	b.n	8006300 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	015a      	lsls	r2, r3, #5
 80062f2:	68fb      	ldr	r3, [r7, #12]
 80062f4:	4413      	add	r3, r2
 80062f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80062fa:	461a      	mov	r2, r3
 80062fc:	2300      	movs	r3, #0
 80062fe:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	015a      	lsls	r2, r3, #5
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	4413      	add	r3, r2
 8006308:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800630c:	461a      	mov	r2, r3
 800630e:	2300      	movs	r3, #0
 8006310:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	015a      	lsls	r2, r3, #5
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	4413      	add	r3, r2
 800631a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800631e:	461a      	mov	r2, r3
 8006320:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8006324:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006326:	693b      	ldr	r3, [r7, #16]
 8006328:	3301      	adds	r3, #1
 800632a:	613b      	str	r3, [r7, #16]
 800632c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8006330:	461a      	mov	r2, r3
 8006332:	693b      	ldr	r3, [r7, #16]
 8006334:	4293      	cmp	r3, r2
 8006336:	d3b5      	bcc.n	80062a4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8006338:	2300      	movs	r3, #0
 800633a:	613b      	str	r3, [r7, #16]
 800633c:	e043      	b.n	80063c6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800633e:	693b      	ldr	r3, [r7, #16]
 8006340:	015a      	lsls	r2, r3, #5
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	4413      	add	r3, r2
 8006346:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8006350:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8006354:	d118      	bne.n	8006388 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	2b00      	cmp	r3, #0
 800635a:	d10a      	bne.n	8006372 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800635c:	693b      	ldr	r3, [r7, #16]
 800635e:	015a      	lsls	r2, r3, #5
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4413      	add	r3, r2
 8006364:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006368:	461a      	mov	r2, r3
 800636a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800636e:	6013      	str	r3, [r2, #0]
 8006370:	e013      	b.n	800639a <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8006372:	693b      	ldr	r3, [r7, #16]
 8006374:	015a      	lsls	r2, r3, #5
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	4413      	add	r3, r2
 800637a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800637e:	461a      	mov	r2, r3
 8006380:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8006384:	6013      	str	r3, [r2, #0]
 8006386:	e008      	b.n	800639a <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8006388:	693b      	ldr	r3, [r7, #16]
 800638a:	015a      	lsls	r2, r3, #5
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	4413      	add	r3, r2
 8006390:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006394:	461a      	mov	r2, r3
 8006396:	2300      	movs	r3, #0
 8006398:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800639a:	693b      	ldr	r3, [r7, #16]
 800639c:	015a      	lsls	r2, r3, #5
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	4413      	add	r3, r2
 80063a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063a6:	461a      	mov	r2, r3
 80063a8:	2300      	movs	r3, #0
 80063aa:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	015a      	lsls	r2, r3, #5
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	4413      	add	r3, r2
 80063b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80063b8:	461a      	mov	r2, r3
 80063ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80063be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80063c0:	693b      	ldr	r3, [r7, #16]
 80063c2:	3301      	adds	r3, #1
 80063c4:	613b      	str	r3, [r7, #16]
 80063c6:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 80063ca:	461a      	mov	r2, r3
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d3b5      	bcc.n	800633e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80063d8:	691b      	ldr	r3, [r3, #16]
 80063da:	68fa      	ldr	r2, [r7, #12]
 80063dc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80063e0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80063e4:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2200      	movs	r2, #0
 80063ea:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80063f2:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80063f4:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d105      	bne.n	8006408 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	f043 0210 	orr.w	r2, r3, #16
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	699a      	ldr	r2, [r3, #24]
 800640c:	4b0f      	ldr	r3, [pc, #60]	; (800644c <USB_DevInit+0x2b4>)
 800640e:	4313      	orrs	r3, r2
 8006410:	687a      	ldr	r2, [r7, #4]
 8006412:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8006414:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
 8006418:	2b00      	cmp	r3, #0
 800641a:	d005      	beq.n	8006428 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	f043 0208 	orr.w	r2, r3, #8
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8006428:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800642c:	2b01      	cmp	r3, #1
 800642e:	d105      	bne.n	800643c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	699a      	ldr	r2, [r3, #24]
 8006434:	4b06      	ldr	r3, [pc, #24]	; (8006450 <USB_DevInit+0x2b8>)
 8006436:	4313      	orrs	r3, r2
 8006438:	687a      	ldr	r2, [r7, #4]
 800643a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800643c:	7dfb      	ldrb	r3, [r7, #23]
}
 800643e:	4618      	mov	r0, r3
 8006440:	3718      	adds	r7, #24
 8006442:	46bd      	mov	sp, r7
 8006444:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006448:	b004      	add	sp, #16
 800644a:	4770      	bx	lr
 800644c:	803c3800 	.word	0x803c3800
 8006450:	40000004 	.word	0x40000004

08006454 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8006454:	b480      	push	{r7}
 8006456:	b085      	sub	sp, #20
 8006458:	af00      	add	r7, sp, #0
 800645a:	6078      	str	r0, [r7, #4]
 800645c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800645e:	2300      	movs	r3, #0
 8006460:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	3301      	adds	r3, #1
 8006466:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 800646e:	d901      	bls.n	8006474 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8006470:	2303      	movs	r3, #3
 8006472:	e01b      	b.n	80064ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	691b      	ldr	r3, [r3, #16]
 8006478:	2b00      	cmp	r3, #0
 800647a:	daf2      	bge.n	8006462 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800647c:	2300      	movs	r3, #0
 800647e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8006480:	683b      	ldr	r3, [r7, #0]
 8006482:	019b      	lsls	r3, r3, #6
 8006484:	f043 0220 	orr.w	r2, r3, #32
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	3301      	adds	r3, #1
 8006490:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 8006498:	d901      	bls.n	800649e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800649a:	2303      	movs	r3, #3
 800649c:	e006      	b.n	80064ac <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	691b      	ldr	r3, [r3, #16]
 80064a2:	f003 0320 	and.w	r3, r3, #32
 80064a6:	2b20      	cmp	r3, #32
 80064a8:	d0f0      	beq.n	800648c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80064aa:	2300      	movs	r3, #0
}
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b6:	4770      	bx	lr

080064b8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80064b8:	b480      	push	{r7}
 80064ba:	b085      	sub	sp, #20
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064c0:	2300      	movs	r3, #0
 80064c2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	3301      	adds	r3, #1
 80064c8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80064d0:	d901      	bls.n	80064d6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80064d2:	2303      	movs	r3, #3
 80064d4:	e018      	b.n	8006508 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	691b      	ldr	r3, [r3, #16]
 80064da:	2b00      	cmp	r3, #0
 80064dc:	daf2      	bge.n	80064c4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2210      	movs	r2, #16
 80064e6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	3301      	adds	r3, #1
 80064ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80064f4:	d901      	bls.n	80064fa <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80064f6:	2303      	movs	r3, #3
 80064f8:	e006      	b.n	8006508 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	691b      	ldr	r3, [r3, #16]
 80064fe:	f003 0310 	and.w	r3, r3, #16
 8006502:	2b10      	cmp	r3, #16
 8006504:	d0f0      	beq.n	80064e8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006506:	2300      	movs	r3, #0
}
 8006508:	4618      	mov	r0, r3
 800650a:	3714      	adds	r7, #20
 800650c:	46bd      	mov	sp, r7
 800650e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006512:	4770      	bx	lr

08006514 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8006514:	b480      	push	{r7}
 8006516:	b085      	sub	sp, #20
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
 800651c:	460b      	mov	r3, r1
 800651e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006520:	687b      	ldr	r3, [r7, #4]
 8006522:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800652a:	681a      	ldr	r2, [r3, #0]
 800652c:	78fb      	ldrb	r3, [r7, #3]
 800652e:	68f9      	ldr	r1, [r7, #12]
 8006530:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006534:	4313      	orrs	r3, r2
 8006536:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006538:	2300      	movs	r3, #0
}
 800653a:	4618      	mov	r0, r3
 800653c:	3714      	adds	r7, #20
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr

08006546 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8006546:	b480      	push	{r7}
 8006548:	b085      	sub	sp, #20
 800654a:	af00      	add	r7, sp, #0
 800654c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	68fa      	ldr	r2, [r7, #12]
 800655c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006560:	f023 0303 	bic.w	r3, r3, #3
 8006564:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800656c:	685b      	ldr	r3, [r3, #4]
 800656e:	68fa      	ldr	r2, [r7, #12]
 8006570:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006574:	f043 0302 	orr.w	r3, r3, #2
 8006578:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800657a:	2300      	movs	r3, #0
}
 800657c:	4618      	mov	r0, r3
 800657e:	3714      	adds	r7, #20
 8006580:	46bd      	mov	sp, r7
 8006582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006586:	4770      	bx	lr

08006588 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8006588:	b480      	push	{r7}
 800658a:	b083      	sub	sp, #12
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	695b      	ldr	r3, [r3, #20]
 8006594:	f003 0301 	and.w	r3, r3, #1
}
 8006598:	4618      	mov	r0, r3
 800659a:	370c      	adds	r7, #12
 800659c:	46bd      	mov	sp, r7
 800659e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a2:	4770      	bx	lr

080065a4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80065a4:	b480      	push	{r7}
 80065a6:	b085      	sub	sp, #20
 80065a8:	af00      	add	r7, sp, #0
 80065aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065ac:	2300      	movs	r3, #0
 80065ae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	3301      	adds	r3, #1
 80065b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80065bc:	d901      	bls.n	80065c2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80065be:	2303      	movs	r3, #3
 80065c0:	e01b      	b.n	80065fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	daf2      	bge.n	80065b0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80065ca:	2300      	movs	r3, #0
 80065cc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	691b      	ldr	r3, [r3, #16]
 80065d2:	f043 0201 	orr.w	r2, r3, #1
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	3301      	adds	r3, #1
 80065de:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	f1b3 6f70 	cmp.w	r3, #251658240	; 0xf000000
 80065e6:	d901      	bls.n	80065ec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80065e8:	2303      	movs	r3, #3
 80065ea:	e006      	b.n	80065fa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	691b      	ldr	r3, [r3, #16]
 80065f0:	f003 0301 	and.w	r3, r3, #1
 80065f4:	2b01      	cmp	r3, #1
 80065f6:	d0f0      	beq.n	80065da <USB_CoreReset+0x36>

  return HAL_OK;
 80065f8:	2300      	movs	r3, #0
}
 80065fa:	4618      	mov	r0, r3
 80065fc:	3714      	adds	r7, #20
 80065fe:	46bd      	mov	sp, r7
 8006600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006604:	4770      	bx	lr

08006606 <memset>:
 8006606:	4402      	add	r2, r0
 8006608:	4603      	mov	r3, r0
 800660a:	4293      	cmp	r3, r2
 800660c:	d100      	bne.n	8006610 <memset+0xa>
 800660e:	4770      	bx	lr
 8006610:	f803 1b01 	strb.w	r1, [r3], #1
 8006614:	e7f9      	b.n	800660a <memset+0x4>
	...

08006618 <__libc_init_array>:
 8006618:	b570      	push	{r4, r5, r6, lr}
 800661a:	4d0d      	ldr	r5, [pc, #52]	; (8006650 <__libc_init_array+0x38>)
 800661c:	4c0d      	ldr	r4, [pc, #52]	; (8006654 <__libc_init_array+0x3c>)
 800661e:	1b64      	subs	r4, r4, r5
 8006620:	10a4      	asrs	r4, r4, #2
 8006622:	2600      	movs	r6, #0
 8006624:	42a6      	cmp	r6, r4
 8006626:	d109      	bne.n	800663c <__libc_init_array+0x24>
 8006628:	4d0b      	ldr	r5, [pc, #44]	; (8006658 <__libc_init_array+0x40>)
 800662a:	4c0c      	ldr	r4, [pc, #48]	; (800665c <__libc_init_array+0x44>)
 800662c:	f000 f818 	bl	8006660 <_init>
 8006630:	1b64      	subs	r4, r4, r5
 8006632:	10a4      	asrs	r4, r4, #2
 8006634:	2600      	movs	r6, #0
 8006636:	42a6      	cmp	r6, r4
 8006638:	d105      	bne.n	8006646 <__libc_init_array+0x2e>
 800663a:	bd70      	pop	{r4, r5, r6, pc}
 800663c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006640:	4798      	blx	r3
 8006642:	3601      	adds	r6, #1
 8006644:	e7ee      	b.n	8006624 <__libc_init_array+0xc>
 8006646:	f855 3b04 	ldr.w	r3, [r5], #4
 800664a:	4798      	blx	r3
 800664c:	3601      	adds	r6, #1
 800664e:	e7f2      	b.n	8006636 <__libc_init_array+0x1e>
 8006650:	080066b8 	.word	0x080066b8
 8006654:	080066b8 	.word	0x080066b8
 8006658:	080066b8 	.word	0x080066b8
 800665c:	080066bc 	.word	0x080066bc

08006660 <_init>:
 8006660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006662:	bf00      	nop
 8006664:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006666:	bc08      	pop	{r3}
 8006668:	469e      	mov	lr, r3
 800666a:	4770      	bx	lr

0800666c <_fini>:
 800666c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800666e:	bf00      	nop
 8006670:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006672:	bc08      	pop	{r3}
 8006674:	469e      	mov	lr, r3
 8006676:	4770      	bx	lr
