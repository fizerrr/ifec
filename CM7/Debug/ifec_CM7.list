
ifec_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d00  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002fc0  08002fc0  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  08002fc0  08002fc0  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002fc0  08002fc0  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002fc0  08002fc0  00012fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002fc4  08002fc4  00012fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  08002fc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  24000014  08002fdc  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000040  08002fdc  00020040  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020042  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a81d  00000000  00000000  00020085  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bab  00000000  00000000  0002a8a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000009b8  00000000  00000000  0002c450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000072c  00000000  00000000  0002ce08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0003c13c  00000000  00000000  0002d534  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a9ef  00000000  00000000  00069670  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0018a015  00000000  00000000  0007405f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002660  00000000  00000000  001fe074  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  002006d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000014 	.word	0x24000014
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002f80 	.word	0x08002f80

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000018 	.word	0x24000018
 80002d4:	08002f80 	.word	0x08002f80

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <Control_Loop>:
// control.c
#include "control.h"
extern int test;

void Control_Loop(void)
{
 8000404:	b480      	push	{r7}
 8000406:	af00      	add	r7, sp, #0

	test++;
 8000408:	4b04      	ldr	r3, [pc, #16]	; (800041c <Control_Loop+0x18>)
 800040a:	681b      	ldr	r3, [r3, #0]
 800040c:	3301      	adds	r3, #1
 800040e:	4a03      	ldr	r2, [pc, #12]	; (800041c <Control_Loop+0x18>)
 8000410:	6013      	str	r3, [r2, #0]

}
 8000412:	bf00      	nop
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	24000030 	.word	0x24000030

08000420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000420:	b480      	push	{r7}
 8000422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000424:	4b04      	ldr	r3, [pc, #16]	; (8000438 <__NVIC_GetPriorityGrouping+0x18>)
 8000426:	68db      	ldr	r3, [r3, #12]
 8000428:	0a1b      	lsrs	r3, r3, #8
 800042a:	f003 0307 	and.w	r3, r3, #7
}
 800042e:	4618      	mov	r0, r3
 8000430:	46bd      	mov	sp, r7
 8000432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000436:	4770      	bx	lr
 8000438:	e000ed00 	.word	0xe000ed00

0800043c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800043c:	b480      	push	{r7}
 800043e:	b083      	sub	sp, #12
 8000440:	af00      	add	r7, sp, #0
 8000442:	4603      	mov	r3, r0
 8000444:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000446:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800044a:	2b00      	cmp	r3, #0
 800044c:	db0b      	blt.n	8000466 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800044e:	88fb      	ldrh	r3, [r7, #6]
 8000450:	f003 021f 	and.w	r2, r3, #31
 8000454:	4907      	ldr	r1, [pc, #28]	; (8000474 <__NVIC_EnableIRQ+0x38>)
 8000456:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800045a:	095b      	lsrs	r3, r3, #5
 800045c:	2001      	movs	r0, #1
 800045e:	fa00 f202 	lsl.w	r2, r0, r2
 8000462:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000466:	bf00      	nop
 8000468:	370c      	adds	r7, #12
 800046a:	46bd      	mov	sp, r7
 800046c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000470:	4770      	bx	lr
 8000472:	bf00      	nop
 8000474:	e000e100 	.word	0xe000e100

08000478 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000478:	b480      	push	{r7}
 800047a:	b083      	sub	sp, #12
 800047c:	af00      	add	r7, sp, #0
 800047e:	4603      	mov	r3, r0
 8000480:	6039      	str	r1, [r7, #0]
 8000482:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000484:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000488:	2b00      	cmp	r3, #0
 800048a:	db0a      	blt.n	80004a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	b2da      	uxtb	r2, r3
 8000490:	490c      	ldr	r1, [pc, #48]	; (80004c4 <__NVIC_SetPriority+0x4c>)
 8000492:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000496:	0112      	lsls	r2, r2, #4
 8000498:	b2d2      	uxtb	r2, r2
 800049a:	440b      	add	r3, r1
 800049c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004a0:	e00a      	b.n	80004b8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004a2:	683b      	ldr	r3, [r7, #0]
 80004a4:	b2da      	uxtb	r2, r3
 80004a6:	4908      	ldr	r1, [pc, #32]	; (80004c8 <__NVIC_SetPriority+0x50>)
 80004a8:	88fb      	ldrh	r3, [r7, #6]
 80004aa:	f003 030f 	and.w	r3, r3, #15
 80004ae:	3b04      	subs	r3, #4
 80004b0:	0112      	lsls	r2, r2, #4
 80004b2:	b2d2      	uxtb	r2, r2
 80004b4:	440b      	add	r3, r1
 80004b6:	761a      	strb	r2, [r3, #24]
}
 80004b8:	bf00      	nop
 80004ba:	370c      	adds	r7, #12
 80004bc:	46bd      	mov	sp, r7
 80004be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c2:	4770      	bx	lr
 80004c4:	e000e100 	.word	0xe000e100
 80004c8:	e000ed00 	.word	0xe000ed00

080004cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004cc:	b480      	push	{r7}
 80004ce:	b089      	sub	sp, #36	; 0x24
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	60f8      	str	r0, [r7, #12]
 80004d4:	60b9      	str	r1, [r7, #8]
 80004d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80004d8:	68fb      	ldr	r3, [r7, #12]
 80004da:	f003 0307 	and.w	r3, r3, #7
 80004de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80004e0:	69fb      	ldr	r3, [r7, #28]
 80004e2:	f1c3 0307 	rsb	r3, r3, #7
 80004e6:	2b04      	cmp	r3, #4
 80004e8:	bf28      	it	cs
 80004ea:	2304      	movcs	r3, #4
 80004ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80004ee:	69fb      	ldr	r3, [r7, #28]
 80004f0:	3304      	adds	r3, #4
 80004f2:	2b06      	cmp	r3, #6
 80004f4:	d902      	bls.n	80004fc <NVIC_EncodePriority+0x30>
 80004f6:	69fb      	ldr	r3, [r7, #28]
 80004f8:	3b03      	subs	r3, #3
 80004fa:	e000      	b.n	80004fe <NVIC_EncodePriority+0x32>
 80004fc:	2300      	movs	r3, #0
 80004fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000500:	f04f 32ff 	mov.w	r2, #4294967295
 8000504:	69bb      	ldr	r3, [r7, #24]
 8000506:	fa02 f303 	lsl.w	r3, r2, r3
 800050a:	43da      	mvns	r2, r3
 800050c:	68bb      	ldr	r3, [r7, #8]
 800050e:	401a      	ands	r2, r3
 8000510:	697b      	ldr	r3, [r7, #20]
 8000512:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000514:	f04f 31ff 	mov.w	r1, #4294967295
 8000518:	697b      	ldr	r3, [r7, #20]
 800051a:	fa01 f303 	lsl.w	r3, r1, r3
 800051e:	43d9      	mvns	r1, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000524:	4313      	orrs	r3, r2
         );
}
 8000526:	4618      	mov	r0, r3
 8000528:	3724      	adds	r7, #36	; 0x24
 800052a:	46bd      	mov	sp, r7
 800052c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000530:	4770      	bx	lr

08000532 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8000532:	b480      	push	{r7}
 8000534:	b083      	sub	sp, #12
 8000536:	af00      	add	r7, sp, #0
 8000538:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f043 0201 	orr.w	r2, r3, #1
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	601a      	str	r2, [r3, #0]
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr

08000552 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000552:	b480      	push	{r7}
 8000554:	b083      	sub	sp, #12
 8000556:	af00      	add	r7, sp, #0
 8000558:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	681b      	ldr	r3, [r3, #0]
 800055e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	601a      	str	r2, [r3, #0]
}
 8000566:	bf00      	nop
 8000568:	370c      	adds	r7, #12
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr

08000572 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
 800057a:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800057c:	687b      	ldr	r3, [r7, #4]
 800057e:	6a1a      	ldr	r2, [r3, #32]
 8000580:	683b      	ldr	r3, [r7, #0]
 8000582:	431a      	orrs	r2, r3
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	621a      	str	r2, [r3, #32]
}
 8000588:	bf00      	nop
 800058a:	370c      	adds	r7, #12
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr

08000594 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000594:	b480      	push	{r7}
 8000596:	b085      	sub	sp, #20
 8000598:	af00      	add	r7, sp, #0
 800059a:	6078      	str	r0, [r7, #4]
 800059c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800059e:	683b      	ldr	r3, [r7, #0]
 80005a0:	2b01      	cmp	r3, #1
 80005a2:	d028      	beq.n	80005f6 <LL_TIM_OC_DisableFast+0x62>
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	2b04      	cmp	r3, #4
 80005a8:	d023      	beq.n	80005f2 <LL_TIM_OC_DisableFast+0x5e>
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	2b10      	cmp	r3, #16
 80005ae:	d01e      	beq.n	80005ee <LL_TIM_OC_DisableFast+0x5a>
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	2b40      	cmp	r3, #64	; 0x40
 80005b4:	d019      	beq.n	80005ea <LL_TIM_OC_DisableFast+0x56>
 80005b6:	683b      	ldr	r3, [r7, #0]
 80005b8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80005bc:	d013      	beq.n	80005e6 <LL_TIM_OC_DisableFast+0x52>
 80005be:	683b      	ldr	r3, [r7, #0]
 80005c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005c4:	d00d      	beq.n	80005e2 <LL_TIM_OC_DisableFast+0x4e>
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80005cc:	d007      	beq.n	80005de <LL_TIM_OC_DisableFast+0x4a>
 80005ce:	683b      	ldr	r3, [r7, #0]
 80005d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80005d4:	d101      	bne.n	80005da <LL_TIM_OC_DisableFast+0x46>
 80005d6:	2307      	movs	r3, #7
 80005d8:	e00e      	b.n	80005f8 <LL_TIM_OC_DisableFast+0x64>
 80005da:	2308      	movs	r3, #8
 80005dc:	e00c      	b.n	80005f8 <LL_TIM_OC_DisableFast+0x64>
 80005de:	2306      	movs	r3, #6
 80005e0:	e00a      	b.n	80005f8 <LL_TIM_OC_DisableFast+0x64>
 80005e2:	2305      	movs	r3, #5
 80005e4:	e008      	b.n	80005f8 <LL_TIM_OC_DisableFast+0x64>
 80005e6:	2304      	movs	r3, #4
 80005e8:	e006      	b.n	80005f8 <LL_TIM_OC_DisableFast+0x64>
 80005ea:	2303      	movs	r3, #3
 80005ec:	e004      	b.n	80005f8 <LL_TIM_OC_DisableFast+0x64>
 80005ee:	2302      	movs	r3, #2
 80005f0:	e002      	b.n	80005f8 <LL_TIM_OC_DisableFast+0x64>
 80005f2:	2301      	movs	r3, #1
 80005f4:	e000      	b.n	80005f8 <LL_TIM_OC_DisableFast+0x64>
 80005f6:	2300      	movs	r3, #0
 80005f8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	3318      	adds	r3, #24
 80005fe:	4619      	mov	r1, r3
 8000600:	7bfb      	ldrb	r3, [r7, #15]
 8000602:	4a0b      	ldr	r2, [pc, #44]	; (8000630 <LL_TIM_OC_DisableFast+0x9c>)
 8000604:	5cd3      	ldrb	r3, [r2, r3]
 8000606:	440b      	add	r3, r1
 8000608:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800060a:	68bb      	ldr	r3, [r7, #8]
 800060c:	681a      	ldr	r2, [r3, #0]
 800060e:	7bfb      	ldrb	r3, [r7, #15]
 8000610:	4908      	ldr	r1, [pc, #32]	; (8000634 <LL_TIM_OC_DisableFast+0xa0>)
 8000612:	5ccb      	ldrb	r3, [r1, r3]
 8000614:	4619      	mov	r1, r3
 8000616:	2304      	movs	r3, #4
 8000618:	408b      	lsls	r3, r1
 800061a:	43db      	mvns	r3, r3
 800061c:	401a      	ands	r2, r3
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	601a      	str	r2, [r3, #0]

}
 8000622:	bf00      	nop
 8000624:	3714      	adds	r7, #20
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	08002fa8 	.word	0x08002fa8
 8000634:	08002fb4 	.word	0x08002fb4

08000638 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8000638:	b480      	push	{r7}
 800063a:	b085      	sub	sp, #20
 800063c:	af00      	add	r7, sp, #0
 800063e:	6078      	str	r0, [r7, #4]
 8000640:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8000642:	683b      	ldr	r3, [r7, #0]
 8000644:	2b01      	cmp	r3, #1
 8000646:	d028      	beq.n	800069a <LL_TIM_OC_EnablePreload+0x62>
 8000648:	683b      	ldr	r3, [r7, #0]
 800064a:	2b04      	cmp	r3, #4
 800064c:	d023      	beq.n	8000696 <LL_TIM_OC_EnablePreload+0x5e>
 800064e:	683b      	ldr	r3, [r7, #0]
 8000650:	2b10      	cmp	r3, #16
 8000652:	d01e      	beq.n	8000692 <LL_TIM_OC_EnablePreload+0x5a>
 8000654:	683b      	ldr	r3, [r7, #0]
 8000656:	2b40      	cmp	r3, #64	; 0x40
 8000658:	d019      	beq.n	800068e <LL_TIM_OC_EnablePreload+0x56>
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000660:	d013      	beq.n	800068a <LL_TIM_OC_EnablePreload+0x52>
 8000662:	683b      	ldr	r3, [r7, #0]
 8000664:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000668:	d00d      	beq.n	8000686 <LL_TIM_OC_EnablePreload+0x4e>
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000670:	d007      	beq.n	8000682 <LL_TIM_OC_EnablePreload+0x4a>
 8000672:	683b      	ldr	r3, [r7, #0]
 8000674:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000678:	d101      	bne.n	800067e <LL_TIM_OC_EnablePreload+0x46>
 800067a:	2307      	movs	r3, #7
 800067c:	e00e      	b.n	800069c <LL_TIM_OC_EnablePreload+0x64>
 800067e:	2308      	movs	r3, #8
 8000680:	e00c      	b.n	800069c <LL_TIM_OC_EnablePreload+0x64>
 8000682:	2306      	movs	r3, #6
 8000684:	e00a      	b.n	800069c <LL_TIM_OC_EnablePreload+0x64>
 8000686:	2305      	movs	r3, #5
 8000688:	e008      	b.n	800069c <LL_TIM_OC_EnablePreload+0x64>
 800068a:	2304      	movs	r3, #4
 800068c:	e006      	b.n	800069c <LL_TIM_OC_EnablePreload+0x64>
 800068e:	2303      	movs	r3, #3
 8000690:	e004      	b.n	800069c <LL_TIM_OC_EnablePreload+0x64>
 8000692:	2302      	movs	r3, #2
 8000694:	e002      	b.n	800069c <LL_TIM_OC_EnablePreload+0x64>
 8000696:	2301      	movs	r3, #1
 8000698:	e000      	b.n	800069c <LL_TIM_OC_EnablePreload+0x64>
 800069a:	2300      	movs	r3, #0
 800069c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	3318      	adds	r3, #24
 80006a2:	4619      	mov	r1, r3
 80006a4:	7bfb      	ldrb	r3, [r7, #15]
 80006a6:	4a0a      	ldr	r2, [pc, #40]	; (80006d0 <LL_TIM_OC_EnablePreload+0x98>)
 80006a8:	5cd3      	ldrb	r3, [r2, r3]
 80006aa:	440b      	add	r3, r1
 80006ac:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80006ae:	68bb      	ldr	r3, [r7, #8]
 80006b0:	681a      	ldr	r2, [r3, #0]
 80006b2:	7bfb      	ldrb	r3, [r7, #15]
 80006b4:	4907      	ldr	r1, [pc, #28]	; (80006d4 <LL_TIM_OC_EnablePreload+0x9c>)
 80006b6:	5ccb      	ldrb	r3, [r1, r3]
 80006b8:	4619      	mov	r1, r3
 80006ba:	2308      	movs	r3, #8
 80006bc:	408b      	lsls	r3, r1
 80006be:	431a      	orrs	r2, r3
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	601a      	str	r2, [r3, #0]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	08002fa8 	.word	0x08002fa8
 80006d4:	08002fb4 	.word	0x08002fb4

080006d8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	689a      	ldr	r2, [r3, #8]
 80006e6:	4b06      	ldr	r3, [pc, #24]	; (8000700 <LL_TIM_SetClockSource+0x28>)
 80006e8:	4013      	ands	r3, r2
 80006ea:	683a      	ldr	r2, [r7, #0]
 80006ec:	431a      	orrs	r2, r3
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	609a      	str	r2, [r3, #8]
}
 80006f2:	bf00      	nop
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
 80006fe:	bf00      	nop
 8000700:	fffebff8 	.word	0xfffebff8

08000704 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000704:	b480      	push	{r7}
 8000706:	b083      	sub	sp, #12
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
 800070c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	685b      	ldr	r3, [r3, #4]
 8000712:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	431a      	orrs	r2, r3
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	605a      	str	r2, [r3, #4]
}
 800071e:	bf00      	nop
 8000720:	370c      	adds	r7, #12
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr

0800072a <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 800072a:	b480      	push	{r7}
 800072c:	b083      	sub	sp, #12
 800072e:	af00      	add	r7, sp, #0
 8000730:	6078      	str	r0, [r7, #4]
 8000732:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	685b      	ldr	r3, [r3, #4]
 8000738:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800073c:	683b      	ldr	r3, [r7, #0]
 800073e:	431a      	orrs	r2, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	605a      	str	r2, [r3, #4]
}
 8000744:	bf00      	nop
 8000746:	370c      	adds	r7, #12
 8000748:	46bd      	mov	sp, r7
 800074a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074e:	4770      	bx	lr

08000750 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000750:	b480      	push	{r7}
 8000752:	b083      	sub	sp, #12
 8000754:	af00      	add	r7, sp, #0
 8000756:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000758:	687b      	ldr	r3, [r7, #4]
 800075a:	689b      	ldr	r3, [r3, #8]
 800075c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	609a      	str	r2, [r3, #8]
}
 8000764:	bf00      	nop
 8000766:	370c      	adds	r7, #12
 8000768:	46bd      	mov	sp, r7
 800076a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800076e:	4770      	bx	lr

08000770 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8000770:	b480      	push	{r7}
 8000772:	b083      	sub	sp, #12
 8000774:	af00      	add	r7, sp, #0
 8000776:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	645a      	str	r2, [r3, #68]	; 0x44
}
 8000784:	bf00      	nop
 8000786:	370c      	adds	r7, #12
 8000788:	46bd      	mov	sp, r7
 800078a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078e:	4770      	bx	lr

08000790 <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	68db      	ldr	r3, [r3, #12]
 800079c:	f043 0201 	orr.w	r2, r3, #1
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	60da      	str	r2, [r3, #12]
}
 80007a4:	bf00      	nop
 80007a6:	370c      	adds	r7, #12
 80007a8:	46bd      	mov	sp, r7
 80007aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ae:	4770      	bx	lr

080007b0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80007b0:	b480      	push	{r7}
 80007b2:	b083      	sub	sp, #12
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	695b      	ldr	r3, [r3, #20]
 80007bc:	f043 0201 	orr.w	r2, r3, #1
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	615a      	str	r2, [r3, #20]
}
 80007c4:	bf00      	nop
 80007c6:	370c      	adds	r7, #12
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr

080007d0 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 80007d0:	b480      	push	{r7}
 80007d2:	b085      	sub	sp, #20
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 80007d8:	4b0a      	ldr	r3, [pc, #40]	; (8000804 <LL_AHB4_GRP1_EnableClock+0x34>)
 80007da:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007de:	4909      	ldr	r1, [pc, #36]	; (8000804 <LL_AHB4_GRP1_EnableClock+0x34>)
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	4313      	orrs	r3, r2
 80007e4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80007e8:	4b06      	ldr	r3, [pc, #24]	; (8000804 <LL_AHB4_GRP1_EnableClock+0x34>)
 80007ea:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	4013      	ands	r3, r2
 80007f2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007f4:	68fb      	ldr	r3, [r7, #12]
}
 80007f6:	bf00      	nop
 80007f8:	3714      	adds	r7, #20
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	58024400 	.word	0x58024400

08000808 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000808:	b480      	push	{r7}
 800080a:	b085      	sub	sp, #20
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 8000810:	4b0a      	ldr	r3, [pc, #40]	; (800083c <LL_APB1_GRP1_EnableClock+0x34>)
 8000812:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000816:	4909      	ldr	r1, [pc, #36]	; (800083c <LL_APB1_GRP1_EnableClock+0x34>)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	4313      	orrs	r3, r2
 800081c:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <LL_APB1_GRP1_EnableClock+0x34>)
 8000822:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	4013      	ands	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800082c:	68fb      	ldr	r3, [r7, #12]
}
 800082e:	bf00      	nop
 8000830:	3714      	adds	r7, #20
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr
 800083a:	bf00      	nop
 800083c:	58024400 	.word	0x58024400

08000840 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000840:	b480      	push	{r7}
 8000842:	b085      	sub	sp, #20
 8000844:	af00      	add	r7, sp, #0
 8000846:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000848:	4b0a      	ldr	r3, [pc, #40]	; (8000874 <LL_APB2_GRP1_EnableClock+0x34>)
 800084a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800084e:	4909      	ldr	r1, [pc, #36]	; (8000874 <LL_APB2_GRP1_EnableClock+0x34>)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4313      	orrs	r3, r2
 8000854:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000858:	4b06      	ldr	r3, [pc, #24]	; (8000874 <LL_APB2_GRP1_EnableClock+0x34>)
 800085a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	4013      	ands	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000864:	68fb      	ldr	r3, [r7, #12]
}
 8000866:	bf00      	nop
 8000868:	3714      	adds	r7, #20
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
 8000872:	bf00      	nop
 8000874:	58024400 	.word	0x58024400

08000878 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 800087e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000882:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000884:	bf00      	nop
 8000886:	4b32      	ldr	r3, [pc, #200]	; (8000950 <main+0xd8>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800088e:	2b00      	cmp	r3, #0
 8000890:	d004      	beq.n	800089c <main+0x24>
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	1e5a      	subs	r2, r3, #1
 8000896:	607a      	str	r2, [r7, #4]
 8000898:	2b00      	cmp	r3, #0
 800089a:	dcf4      	bgt.n	8000886 <main+0xe>
  if ( timeout < 0 )
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	da01      	bge.n	80008a6 <main+0x2e>
  {
  Error_Handler();
 80008a2:	f000 fa0f 	bl	8000cc4 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008a6:	f000 fb73 	bl	8000f90 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80008aa:	f000 f857 	bl	800095c <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 80008ae:	4b28      	ldr	r3, [pc, #160]	; (8000950 <main+0xd8>)
 80008b0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008b4:	4a26      	ldr	r2, [pc, #152]	; (8000950 <main+0xd8>)
 80008b6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80008ba:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008be:	4b24      	ldr	r3, [pc, #144]	; (8000950 <main+0xd8>)
 80008c0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80008c8:	603b      	str	r3, [r7, #0]
 80008ca:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 80008cc:	2000      	movs	r0, #0
 80008ce:	f000 fce1 	bl	8001294 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 80008d2:	2100      	movs	r1, #0
 80008d4:	2000      	movs	r0, #0
 80008d6:	f000 fcf7 	bl	80012c8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 80008da:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80008de:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80008e0:	bf00      	nop
 80008e2:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <main+0xd8>)
 80008e4:	681b      	ldr	r3, [r3, #0]
 80008e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d104      	bne.n	80008f8 <main+0x80>
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	1e5a      	subs	r2, r3, #1
 80008f2:	607a      	str	r2, [r7, #4]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	dcf4      	bgt.n	80008e2 <main+0x6a>
if ( timeout < 0 )
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	da01      	bge.n	8000902 <main+0x8a>
{
Error_Handler();
 80008fe:	f000 f9e1 	bl	8000cc4 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000902:	f000 f9c5 	bl	8000c90 <MX_GPIO_Init>
  MX_TIM1_Init();
 8000906:	f000 f8d9 	bl	8000abc <MX_TIM1_Init>
  MX_TIM2_Init();
 800090a:	f000 f97f 	bl	8000c0c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  PWM_Init();                    // Pobierz raz częstotliwość zegara
 800090e:	f000 fa1d 	bl	8000d4c <PWM_Init>
  PWM_SetDutyCycle(0.4f);        // 40% wypełnienia
 8000912:	ed9f 0a10 	vldr	s0, [pc, #64]	; 8000954 <main+0xdc>
 8000916:	f000 fa77 	bl	8000e08 <PWM_SetDutyCycle>
//  PWM_SetDeadTime_ns(100);       // 100 ns deadtime

  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 800091a:	2101      	movs	r1, #1
 800091c:	480e      	ldr	r0, [pc, #56]	; (8000958 <main+0xe0>)
 800091e:	f7ff fe28 	bl	8000572 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
 8000922:	2104      	movs	r1, #4
 8000924:	480c      	ldr	r0, [pc, #48]	; (8000958 <main+0xe0>)
 8000926:	f7ff fe24 	bl	8000572 <LL_TIM_CC_EnableChannel>
  LL_TIM_EnableAllOutputs(TIM1);
 800092a:	480b      	ldr	r0, [pc, #44]	; (8000958 <main+0xe0>)
 800092c:	f7ff ff20 	bl	8000770 <LL_TIM_EnableAllOutputs>
  LL_TIM_EnableCounter(TIM1);
 8000930:	4809      	ldr	r0, [pc, #36]	; (8000958 <main+0xe0>)
 8000932:	f7ff fdfe 	bl	8000532 <LL_TIM_EnableCounter>


  LL_TIM_EnableCounter(TIM2);            // start licznika
 8000936:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800093a:	f7ff fdfa 	bl	8000532 <LL_TIM_EnableCounter>
  LL_TIM_EnableIT_UPDATE(TIM2);          // włącz przerwanie UPDATE (overflow)
 800093e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000942:	f7ff ff25 	bl	8000790 <LL_TIM_EnableIT_UPDATE>
  LL_TIM_GenerateEvent_UPDATE(TIM2);     // wymuś natychmiastowe zdarzenie (opcjonalne)
 8000946:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800094a:	f7ff ff31 	bl	80007b0 <LL_TIM_GenerateEvent_UPDATE>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800094e:	e7fe      	b.n	800094e <main+0xd6>
 8000950:	58024400 	.word	0x58024400
 8000954:	3ecccccd 	.word	0x3ecccccd
 8000958:	40010000 	.word	0x40010000

0800095c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800095c:	b580      	push	{r7, lr}
 800095e:	b09e      	sub	sp, #120	; 0x78
 8000960:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000962:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000966:	224c      	movs	r2, #76	; 0x4c
 8000968:	2100      	movs	r1, #0
 800096a:	4618      	mov	r0, r3
 800096c:	f002 fadc 	bl	8002f28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000970:	f107 030c 	add.w	r3, r7, #12
 8000974:	2220      	movs	r2, #32
 8000976:	2100      	movs	r1, #0
 8000978:	4618      	mov	r0, r3
 800097a:	f002 fad5 	bl	8002f28 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_LDO_SUPPLY);
 800097e:	2002      	movs	r0, #2
 8000980:	f000 fcb6 	bl	80012f0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000984:	2300      	movs	r3, #0
 8000986:	60bb      	str	r3, [r7, #8]
 8000988:	4b49      	ldr	r3, [pc, #292]	; (8000ab0 <SystemClock_Config+0x154>)
 800098a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800098c:	4a48      	ldr	r2, [pc, #288]	; (8000ab0 <SystemClock_Config+0x154>)
 800098e:	f023 0301 	bic.w	r3, r3, #1
 8000992:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000994:	4b46      	ldr	r3, [pc, #280]	; (8000ab0 <SystemClock_Config+0x154>)
 8000996:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000998:	f003 0301 	and.w	r3, r3, #1
 800099c:	60bb      	str	r3, [r7, #8]
 800099e:	4b45      	ldr	r3, [pc, #276]	; (8000ab4 <SystemClock_Config+0x158>)
 80009a0:	699b      	ldr	r3, [r3, #24]
 80009a2:	4a44      	ldr	r2, [pc, #272]	; (8000ab4 <SystemClock_Config+0x158>)
 80009a4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009a8:	6193      	str	r3, [r2, #24]
 80009aa:	4b42      	ldr	r3, [pc, #264]	; (8000ab4 <SystemClock_Config+0x158>)
 80009ac:	699b      	ldr	r3, [r3, #24]
 80009ae:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009b2:	60bb      	str	r3, [r7, #8]
 80009b4:	68bb      	ldr	r3, [r7, #8]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 80009b6:	bf00      	nop
 80009b8:	4b3e      	ldr	r3, [pc, #248]	; (8000ab4 <SystemClock_Config+0x158>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80009c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80009c4:	d1f8      	bne.n	80009b8 <SystemClock_Config+0x5c>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	4b3c      	ldr	r3, [pc, #240]	; (8000ab8 <SystemClock_Config+0x15c>)
 80009c8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009cc:	4a3a      	ldr	r2, [pc, #232]	; (8000ab8 <SystemClock_Config+0x15c>)
 80009ce:	f043 0302 	orr.w	r3, r3, #2
 80009d2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80009d6:	4b38      	ldr	r3, [pc, #224]	; (8000ab8 <SystemClock_Config+0x15c>)
 80009d8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80009dc:	f003 0302 	and.w	r3, r3, #2
 80009e0:	607b      	str	r3, [r7, #4]
 80009e2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE0);
 80009e4:	2300      	movs	r3, #0
 80009e6:	603b      	str	r3, [r7, #0]
 80009e8:	4b32      	ldr	r3, [pc, #200]	; (8000ab4 <SystemClock_Config+0x158>)
 80009ea:	699b      	ldr	r3, [r3, #24]
 80009ec:	4a31      	ldr	r2, [pc, #196]	; (8000ab4 <SystemClock_Config+0x158>)
 80009ee:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80009f2:	6193      	str	r3, [r2, #24]
 80009f4:	4b2f      	ldr	r3, [pc, #188]	; (8000ab4 <SystemClock_Config+0x158>)
 80009f6:	699b      	ldr	r3, [r3, #24]
 80009f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009fc:	603b      	str	r3, [r7, #0]
 80009fe:	4b2c      	ldr	r3, [pc, #176]	; (8000ab0 <SystemClock_Config+0x154>)
 8000a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a02:	4a2b      	ldr	r2, [pc, #172]	; (8000ab0 <SystemClock_Config+0x154>)
 8000a04:	f043 0301 	orr.w	r3, r3, #1
 8000a08:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000a0a:	4b29      	ldr	r3, [pc, #164]	; (8000ab0 <SystemClock_Config+0x154>)
 8000a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a0e:	f003 0301 	and.w	r3, r3, #1
 8000a12:	603b      	str	r3, [r7, #0]
 8000a14:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a16:	bf00      	nop
 8000a18:	4b26      	ldr	r3, [pc, #152]	; (8000ab4 <SystemClock_Config+0x158>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000a20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000a24:	d1f8      	bne.n	8000a18 <SystemClock_Config+0xbc>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a26:	2302      	movs	r3, #2
 8000a28:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a2e:	2340      	movs	r3, #64	; 0x40
 8000a30:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a32:	2302      	movs	r3, #2
 8000a34:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000a36:	2300      	movs	r3, #0
 8000a38:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000a3a:	2304      	movs	r3, #4
 8000a3c:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000a3e:	233c      	movs	r3, #60	; 0x3c
 8000a40:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000a42:	2302      	movs	r3, #2
 8000a44:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000a46:	2304      	movs	r3, #4
 8000a48:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000a4e:	230c      	movs	r3, #12
 8000a50:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a52:	2300      	movs	r3, #0
 8000a54:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a56:	2300      	movs	r3, #0
 8000a58:	677b      	str	r3, [r7, #116]	; 0x74
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a5a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fca0 	bl	80013a4 <HAL_RCC_OscConfig>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d001      	beq.n	8000a6e <SystemClock_Config+0x112>
  {
    Error_Handler();
 8000a6a:	f000 f92b 	bl	8000cc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a6e:	233f      	movs	r3, #63	; 0x3f
 8000a70:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a72:	2303      	movs	r3, #3
 8000a74:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000a76:	2300      	movs	r3, #0
 8000a78:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a7a:	2308      	movs	r3, #8
 8000a7c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a7e:	2340      	movs	r3, #64	; 0x40
 8000a80:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a82:	2340      	movs	r3, #64	; 0x40
 8000a84:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a86:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a8a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a8c:	2340      	movs	r3, #64	; 0x40
 8000a8e:	62bb      	str	r3, [r7, #40]	; 0x28

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000a90:	f107 030c 	add.w	r3, r7, #12
 8000a94:	2104      	movs	r1, #4
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 f8de 	bl	8001c58 <HAL_RCC_ClockConfig>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d001      	beq.n	8000aa6 <SystemClock_Config+0x14a>
  {
    Error_Handler();
 8000aa2:	f000 f90f 	bl	8000cc4 <Error_Handler>
  }
}
 8000aa6:	bf00      	nop
 8000aa8:	3778      	adds	r7, #120	; 0x78
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	58000400 	.word	0x58000400
 8000ab4:	58024800 	.word	0x58024800
 8000ab8:	58024400 	.word	0x58024400

08000abc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b09e      	sub	sp, #120	; 0x78
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000ac2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8000ad2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000ad6:	2220      	movs	r2, #32
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f002 fa24 	bl	8002f28 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8000ae0:	f107 031c 	add.w	r3, r7, #28
 8000ae4:	2228      	movs	r2, #40	; 0x28
 8000ae6:	2100      	movs	r1, #0
 8000ae8:	4618      	mov	r0, r3
 8000aea:	f002 fa1d 	bl	8002f28 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000aee:	1d3b      	adds	r3, r7, #4
 8000af0:	2200      	movs	r2, #0
 8000af2:	601a      	str	r2, [r3, #0]
 8000af4:	605a      	str	r2, [r3, #4]
 8000af6:	609a      	str	r2, [r3, #8]
 8000af8:	60da      	str	r2, [r3, #12]
 8000afa:	611a      	str	r2, [r3, #16]
 8000afc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000afe:	2001      	movs	r0, #1
 8000b00:	f7ff fe9e 	bl	8000840 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000b04:	2300      	movs	r3, #0
 8000b06:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = 1199;
 8000b0e:	f240 43af 	movw	r3, #1199	; 0x4af
 8000b12:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000b14:	2300      	movs	r3, #0
 8000b16:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	677b      	str	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000b1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b20:	4619      	mov	r1, r3
 8000b22:	4838      	ldr	r0, [pc, #224]	; (8000c04 <MX_TIM1_Init+0x148>)
 8000b24:	f001 fde6 	bl	80026f4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000b28:	4836      	ldr	r0, [pc, #216]	; (8000c04 <MX_TIM1_Init+0x148>)
 8000b2a:	f7ff fd12 	bl	8000552 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4834      	ldr	r0, [pc, #208]	; (8000c04 <MX_TIM1_Init+0x148>)
 8000b32:	f7ff fdd1 	bl	80006d8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8000b36:	2101      	movs	r1, #1
 8000b38:	4832      	ldr	r0, [pc, #200]	; (8000c04 <MX_TIM1_Init+0x148>)
 8000b3a:	f7ff fd7d 	bl	8000638 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8000b3e:	2360      	movs	r3, #96	; 0x60
 8000b40:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8000b42:	2300      	movs	r3, #0
 8000b44:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8000b46:	2300      	movs	r3, #0
 8000b48:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 600;
 8000b4a:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000b4e:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000b50:	2300      	movs	r3, #0
 8000b52:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8000b54:	2300      	movs	r3, #0
 8000b56:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8000b60:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8000b64:	461a      	mov	r2, r3
 8000b66:	2101      	movs	r1, #1
 8000b68:	4826      	ldr	r0, [pc, #152]	; (8000c04 <MX_TIM1_Init+0x148>)
 8000b6a:	f001 fe57 	bl	800281c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8000b6e:	2101      	movs	r1, #1
 8000b70:	4824      	ldr	r0, [pc, #144]	; (8000c04 <MX_TIM1_Init+0x148>)
 8000b72:	f7ff fd0f 	bl	8000594 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000b76:	2100      	movs	r1, #0
 8000b78:	4822      	ldr	r0, [pc, #136]	; (8000c04 <MX_TIM1_Init+0x148>)
 8000b7a:	f7ff fdc3 	bl	8000704 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8000b7e:	2100      	movs	r1, #0
 8000b80:	4820      	ldr	r0, [pc, #128]	; (8000c04 <MX_TIM1_Init+0x148>)
 8000b82:	f7ff fdd2 	bl	800072a <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000b86:	481f      	ldr	r0, [pc, #124]	; (8000c04 <MX_TIM1_Init+0x148>)
 8000b88:	f7ff fde2 	bl	8000750 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_ENABLE;
 8000b8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000b90:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_ENABLE;
 8000b92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b96:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 100;
 8000b9c:	2364      	movs	r3, #100	; 0x64
 8000b9e:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8000ba6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000baa:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8000bac:	2300      	movs	r3, #0
 8000bae:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8000bb4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000bb8:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_ENABLE;
 8000bbe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000bc2:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8000bc4:	f107 031c 	add.w	r3, r7, #28
 8000bc8:	4619      	mov	r1, r3
 8000bca:	480e      	ldr	r0, [pc, #56]	; (8000c04 <MX_TIM1_Init+0x148>)
 8000bcc:	f001 fe86 	bl	80028dc <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 8000bd0:	2010      	movs	r0, #16
 8000bd2:	f7ff fdfd 	bl	80007d0 <LL_AHB4_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PE8   ------> TIM1_CH1N
  PE9   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8000bd6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000bda:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000bdc:	2302      	movs	r3, #2
 8000bde:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000be0:	2300      	movs	r3, #0
 8000be2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000be4:	2300      	movs	r3, #0
 8000be6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000be8:	2300      	movs	r3, #0
 8000bea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8000bec:	2301      	movs	r3, #1
 8000bee:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000bf0:	1d3b      	adds	r3, r7, #4
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4804      	ldr	r0, [pc, #16]	; (8000c08 <MX_TIM1_Init+0x14c>)
 8000bf6:	f001 fc7f 	bl	80024f8 <LL_GPIO_Init>

}
 8000bfa:	bf00      	nop
 8000bfc:	3778      	adds	r7, #120	; 0x78
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	40010000 	.word	0x40010000
 8000c08:	58021000 	.word	0x58021000

08000c0c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b086      	sub	sp, #24
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f7ff fdf1 	bl	8000808 <LL_APB1_GRP1_EnableClock>

  /* TIM2 interrupt Init */
  NVIC_SetPriority(TIM2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000c26:	f7ff fbfb 	bl	8000420 <__NVIC_GetPriorityGrouping>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	2100      	movs	r1, #0
 8000c30:	4618      	mov	r0, r3
 8000c32:	f7ff fc4b 	bl	80004cc <NVIC_EncodePriority>
 8000c36:	4603      	mov	r3, r0
 8000c38:	4619      	mov	r1, r3
 8000c3a:	201c      	movs	r0, #28
 8000c3c:	f7ff fc1c 	bl	8000478 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM2_IRQn);
 8000c40:	201c      	movs	r0, #28
 8000c42:	f7ff fbfb 	bl	800043c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8000c46:	2300      	movs	r3, #0
 8000c48:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 239;
 8000c4e:	23ef      	movs	r3, #239	; 0xef
 8000c50:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 8000c56:	1d3b      	adds	r3, r7, #4
 8000c58:	4619      	mov	r1, r3
 8000c5a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c5e:	f001 fd49 	bl	80026f4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 8000c62:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c66:	f7ff fc74 	bl	8000552 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c70:	f7ff fd32 	bl	80006d8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 8000c74:	2100      	movs	r1, #0
 8000c76:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c7a:	f7ff fd43 	bl	8000704 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 8000c7e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000c82:	f7ff fd65 	bl	8000750 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000c86:	bf00      	nop
 8000c88:	3718      	adds	r7, #24
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
	...

08000c90 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c90:	b480      	push	{r7}
 8000c92:	b083      	sub	sp, #12
 8000c94:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000c96:	4b0a      	ldr	r3, [pc, #40]	; (8000cc0 <MX_GPIO_Init+0x30>)
 8000c98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c9c:	4a08      	ldr	r2, [pc, #32]	; (8000cc0 <MX_GPIO_Init+0x30>)
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <MX_GPIO_Init+0x30>)
 8000ca8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000cac:	f003 0310 	and.w	r3, r3, #16
 8000cb0:	607b      	str	r3, [r7, #4]
 8000cb2:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cb4:	bf00      	nop
 8000cb6:	370c      	adds	r7, #12
 8000cb8:	46bd      	mov	sp, r7
 8000cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cbe:	4770      	bx	lr
 8000cc0:	58024400 	.word	0x58024400

08000cc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cc8:	b672      	cpsid	i
}
 8000cca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  test = 2;
 8000ccc:	4b01      	ldr	r3, [pc, #4]	; (8000cd4 <Error_Handler+0x10>)
 8000cce:	2202      	movs	r2, #2
 8000cd0:	601a      	str	r2, [r3, #0]
 8000cd2:	e7fb      	b.n	8000ccc <Error_Handler+0x8>
 8000cd4:	24000030 	.word	0x24000030

08000cd8 <LL_RCC_GetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_4
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB2Prescaler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
#if defined(RCC_D2CFGR_D2PPRE2)
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8000cdc:	4b04      	ldr	r3, [pc, #16]	; (8000cf0 <LL_RCC_GetAPB2Prescaler+0x18>)
 8000cde:	69db      	ldr	r3, [r3, #28]
 8000ce0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
#else
  return (uint32_t)(READ_BIT(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2));
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	58024400 	.word	0x58024400

08000cf4 <LL_TIM_SetAutoReload>:
{
 8000cf4:	b480      	push	{r7}
 8000cf6:	b083      	sub	sp, #12
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
 8000cfc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	683a      	ldr	r2, [r7, #0]
 8000d02:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8000d04:	bf00      	nop
 8000d06:	370c      	adds	r7, #12
 8000d08:	46bd      	mov	sp, r7
 8000d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0e:	4770      	bx	lr

08000d10 <LL_TIM_OC_SetCompareCH1>:
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	683a      	ldr	r2, [r7, #0]
 8000d1e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d20:	bf00      	nop
 8000d22:	370c      	adds	r7, #12
 8000d24:	46bd      	mov	sp, r7
 8000d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2a:	4770      	bx	lr

08000d2c <LL_TIM_GenerateEvent_UPDATE>:
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b083      	sub	sp, #12
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	695b      	ldr	r3, [r3, #20]
 8000d38:	f043 0201 	orr.w	r2, r3, #1
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	615a      	str	r2, [r3, #20]
}
 8000d40:	bf00      	nop
 8000d42:	370c      	adds	r7, #12
 8000d44:	46bd      	mov	sp, r7
 8000d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4a:	4770      	bx	lr

08000d4c <PWM_Init>:
TIM_TypeDef *PWM_TIMER = TIM1;
static uint32_t timer_clock_hz = 0;
static uint32_t pwm_arr = 0;

void PWM_Init(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
    if (timer_clock_hz == 0)
 8000d52:	4b1c      	ldr	r3, [pc, #112]	; (8000dc4 <PWM_Init+0x78>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d12f      	bne.n	8000dba <PWM_Init+0x6e>
    {
        uint32_t pclk = HAL_RCC_GetPCLK2Freq();
 8000d5a:	f001 fadd 	bl	8002318 <HAL_RCC_GetPCLK2Freq>
 8000d5e:	6078      	str	r0, [r7, #4]
        if (LL_RCC_GetAPB2Prescaler() != LL_RCC_APB2_DIV_1)
 8000d60:	f7ff ffba 	bl	8000cd8 <LL_RCC_GetAPB2Prescaler>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d004      	beq.n	8000d74 <PWM_Init+0x28>
            timer_clock_hz = pclk * 2;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <PWM_Init+0x78>)
 8000d70:	6013      	str	r3, [r2, #0]
 8000d72:	e002      	b.n	8000d7a <PWM_Init+0x2e>
        else
            timer_clock_hz = pclk;
 8000d74:	4a13      	ldr	r2, [pc, #76]	; (8000dc4 <PWM_Init+0x78>)
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	6013      	str	r3, [r2, #0]

        // Ustal ARR dla danej częstotliwości np. 100 kHz
        uint32_t target_freq = 200000; // Możesz to też przekazać jako parametr
 8000d7a:	4b13      	ldr	r3, [pc, #76]	; (8000dc8 <PWM_Init+0x7c>)
 8000d7c:	603b      	str	r3, [r7, #0]
        pwm_arr = (timer_clock_hz / target_freq) - 1;
 8000d7e:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <PWM_Init+0x78>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d88:	3b01      	subs	r3, #1
 8000d8a:	4a10      	ldr	r2, [pc, #64]	; (8000dcc <PWM_Init+0x80>)
 8000d8c:	6013      	str	r3, [r2, #0]
        LL_TIM_SetAutoReload(PWM_TIMER, pwm_arr);
 8000d8e:	4b10      	ldr	r3, [pc, #64]	; (8000dd0 <PWM_Init+0x84>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	4a0e      	ldr	r2, [pc, #56]	; (8000dcc <PWM_Init+0x80>)
 8000d94:	6812      	ldr	r2, [r2, #0]
 8000d96:	4611      	mov	r1, r2
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff ffab 	bl	8000cf4 <LL_TIM_SetAutoReload>
        LL_TIM_OC_SetCompareCH1(PWM_TIMER, pwm_arr / 2); // domyślne 50%
 8000d9e:	4b0c      	ldr	r3, [pc, #48]	; (8000dd0 <PWM_Init+0x84>)
 8000da0:	681a      	ldr	r2, [r3, #0]
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <PWM_Init+0x80>)
 8000da4:	681b      	ldr	r3, [r3, #0]
 8000da6:	085b      	lsrs	r3, r3, #1
 8000da8:	4619      	mov	r1, r3
 8000daa:	4610      	mov	r0, r2
 8000dac:	f7ff ffb0 	bl	8000d10 <LL_TIM_OC_SetCompareCH1>
        LL_TIM_GenerateEvent_UPDATE(PWM_TIMER);
 8000db0:	4b07      	ldr	r3, [pc, #28]	; (8000dd0 <PWM_Init+0x84>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	4618      	mov	r0, r3
 8000db6:	f7ff ffb9 	bl	8000d2c <LL_TIM_GenerateEvent_UPDATE>
    }
}
 8000dba:	bf00      	nop
 8000dbc:	3708      	adds	r7, #8
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	24000034 	.word	0x24000034
 8000dc8:	00030d40 	.word	0x00030d40
 8000dcc:	24000038 	.word	0x24000038
 8000dd0:	24000008 	.word	0x24000008

08000dd4 <PWM_GetARR>:
{
    return timer_clock_hz;
}

uint32_t PWM_GetARR(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
    return pwm_arr;
 8000dd8:	4b03      	ldr	r3, [pc, #12]	; (8000de8 <PWM_GetARR+0x14>)
 8000dda:	681b      	ldr	r3, [r3, #0]
}
 8000ddc:	4618      	mov	r0, r3
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr
 8000de6:	bf00      	nop
 8000de8:	24000038 	.word	0x24000038

08000dec <LL_TIM_OC_SetCompareCH1>:
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	683a      	ldr	r2, [r7, #0]
 8000dfa:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000dfc:	bf00      	nop
 8000dfe:	370c      	adds	r7, #12
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <PWM_SetDutyCycle>:
#include "pwm_control.h"
#include "pwm_config.h"
#include "stm32h7xx_ll_tim.h"

void PWM_SetDutyCycle(float duty)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b084      	sub	sp, #16
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	ed87 0a01 	vstr	s0, [r7, #4]
    uint32_t arr = PWM_GetARR();
 8000e12:	f7ff ffdf 	bl	8000dd4 <PWM_GetARR>
 8000e16:	60f8      	str	r0, [r7, #12]
    uint32_t ccr = (uint32_t)(duty * (arr + 1));
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	3301      	adds	r3, #1
 8000e1c:	ee07 3a90 	vmov	s15, r3
 8000e20:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e24:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e28:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000e2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e30:	ee17 3a90 	vmov	r3, s15
 8000e34:	60bb      	str	r3, [r7, #8]
    LL_TIM_OC_SetCompareCH1(PWM_TIMER, ccr);
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <PWM_SetDutyCycle+0x44>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	68b9      	ldr	r1, [r7, #8]
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ffd5 	bl	8000dec <LL_TIM_OC_SetCompareCH1>
}
 8000e42:	bf00      	nop
 8000e44:	3710      	adds	r7, #16
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	24000008 	.word	0x24000008

08000e50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	b083      	sub	sp, #12
 8000e54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e56:	4b0a      	ldr	r3, [pc, #40]	; (8000e80 <HAL_MspInit+0x30>)
 8000e58:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e5c:	4a08      	ldr	r2, [pc, #32]	; (8000e80 <HAL_MspInit+0x30>)
 8000e5e:	f043 0302 	orr.w	r3, r3, #2
 8000e62:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000e66:	4b06      	ldr	r3, [pc, #24]	; (8000e80 <HAL_MspInit+0x30>)
 8000e68:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000e6c:	f003 0302 	and.w	r3, r3, #2
 8000e70:	607b      	str	r3, [r7, #4]
 8000e72:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e74:	bf00      	nop
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	58024400 	.word	0x58024400

08000e84 <LL_TIM_ClearFlag_UPDATE>:
{
 8000e84:	b480      	push	{r7}
 8000e86:	b083      	sub	sp, #12
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	f06f 0201 	mvn.w	r2, #1
 8000e92:	611a      	str	r2, [r3, #16]
}
 8000e94:	bf00      	nop
 8000e96:	370c      	adds	r7, #12
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b083      	sub	sp, #12
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	691b      	ldr	r3, [r3, #16]
 8000eac:	f003 0301 	and.w	r3, r3, #1
 8000eb0:	2b01      	cmp	r3, #1
 8000eb2:	d101      	bne.n	8000eb8 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	e000      	b.n	8000eba <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8000eb8:	2300      	movs	r3, #0
}
 8000eba:	4618      	mov	r0, r3
 8000ebc:	370c      	adds	r7, #12
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ec4:	4770      	bx	lr

08000ec6 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec6:	b480      	push	{r7}
 8000ec8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000eca:	e7fe      	b.n	8000eca <NMI_Handler+0x4>

08000ecc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed0:	e7fe      	b.n	8000ed0 <HardFault_Handler+0x4>

08000ed2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed6:	e7fe      	b.n	8000ed6 <MemManage_Handler+0x4>

08000ed8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000edc:	e7fe      	b.n	8000edc <BusFault_Handler+0x4>

08000ede <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee2:	e7fe      	b.n	8000ee2 <UsageFault_Handler+0x4>

08000ee4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f0e:	b580      	push	{r7, lr}
 8000f10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f12:	f000 f8af 	bl	8001074 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}

08000f1a <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000f1a:	b580      	push	{r7, lr}
 8000f1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	  if (LL_TIM_IsActiveFlag_UPDATE(TIM2))
 8000f1e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f22:	f7ff ffbd 	bl	8000ea0 <LL_TIM_IsActiveFlag_UPDATE>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d005      	beq.n	8000f38 <TIM2_IRQHandler+0x1e>
	  {
	    LL_TIM_ClearFlag_UPDATE(TIM2);
 8000f2c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000f30:	f7ff ffa8 	bl	8000e84 <LL_TIM_ClearFlag_UPDATE>

	    // ⬇️ Twoja pętla regulacji:
	    Control_Loop();
 8000f34:	f7ff fa66 	bl	8000404 <Control_Loop>
	  }
  /* USER CODE END TIM2_IRQn 0 */
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	bd80      	pop	{r7, pc}

08000f3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000f3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f74 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000f40:	f7ff f9ca 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f44:	480c      	ldr	r0, [pc, #48]	; (8000f78 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f46:	490d      	ldr	r1, [pc, #52]	; (8000f7c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f48:	4a0d      	ldr	r2, [pc, #52]	; (8000f80 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f4a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f4c:	e002      	b.n	8000f54 <LoopCopyDataInit>

08000f4e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f4e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f50:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f52:	3304      	adds	r3, #4

08000f54 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f54:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f56:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f58:	d3f9      	bcc.n	8000f4e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f5a:	4a0a      	ldr	r2, [pc, #40]	; (8000f84 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f5c:	4c0a      	ldr	r4, [pc, #40]	; (8000f88 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f5e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f60:	e001      	b.n	8000f66 <LoopFillZerobss>

08000f62 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f62:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f64:	3204      	adds	r2, #4

08000f66 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f66:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f68:	d3fb      	bcc.n	8000f62 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f6a:	f001 ffe5 	bl	8002f38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f6e:	f7ff fc83 	bl	8000878 <main>
  bx  lr
 8000f72:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000f78:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000f7c:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8000f80:	08002fc8 	.word	0x08002fc8
  ldr r2, =_sbss
 8000f84:	24000014 	.word	0x24000014
  ldr r4, =_ebss
 8000f88:	24000040 	.word	0x24000040

08000f8c <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f8c:	e7fe      	b.n	8000f8c <ADC3_IRQHandler>
	...

08000f90 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f96:	2003      	movs	r0, #3
 8000f98:	f000 f94a 	bl	8001230 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000f9c:	f001 f812 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8000fa0:	4602      	mov	r2, r0
 8000fa2:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <HAL_Init+0x68>)
 8000fa4:	699b      	ldr	r3, [r3, #24]
 8000fa6:	0a1b      	lsrs	r3, r3, #8
 8000fa8:	f003 030f 	and.w	r3, r3, #15
 8000fac:	4913      	ldr	r1, [pc, #76]	; (8000ffc <HAL_Init+0x6c>)
 8000fae:	5ccb      	ldrb	r3, [r1, r3]
 8000fb0:	f003 031f 	and.w	r3, r3, #31
 8000fb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000fb8:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000fba:	4b0f      	ldr	r3, [pc, #60]	; (8000ff8 <HAL_Init+0x68>)
 8000fbc:	699b      	ldr	r3, [r3, #24]
 8000fbe:	f003 030f 	and.w	r3, r3, #15
 8000fc2:	4a0e      	ldr	r2, [pc, #56]	; (8000ffc <HAL_Init+0x6c>)
 8000fc4:	5cd3      	ldrb	r3, [r2, r3]
 8000fc6:	f003 031f 	and.w	r3, r3, #31
 8000fca:	687a      	ldr	r2, [r7, #4]
 8000fcc:	fa22 f303 	lsr.w	r3, r2, r3
 8000fd0:	4a0b      	ldr	r2, [pc, #44]	; (8001000 <HAL_Init+0x70>)
 8000fd2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000fd4:	4a0b      	ldr	r2, [pc, #44]	; (8001004 <HAL_Init+0x74>)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000fda:	2000      	movs	r0, #0
 8000fdc:	f000 f814 	bl	8001008 <HAL_InitTick>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d001      	beq.n	8000fea <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000fe6:	2301      	movs	r3, #1
 8000fe8:	e002      	b.n	8000ff0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000fea:	f7ff ff31 	bl	8000e50 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000fee:	2300      	movs	r3, #0
}
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	3708      	adds	r7, #8
 8000ff4:	46bd      	mov	sp, r7
 8000ff6:	bd80      	pop	{r7, pc}
 8000ff8:	58024400 	.word	0x58024400
 8000ffc:	08002f98 	.word	0x08002f98
 8001000:	24000004 	.word	0x24000004
 8001004:	24000000 	.word	0x24000000

08001008 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b082      	sub	sp, #8
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <HAL_InitTick+0x60>)
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d101      	bne.n	800101c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001018:	2301      	movs	r3, #1
 800101a:	e021      	b.n	8001060 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 800101c:	4b13      	ldr	r3, [pc, #76]	; (800106c <HAL_InitTick+0x64>)
 800101e:	681a      	ldr	r2, [r3, #0]
 8001020:	4b11      	ldr	r3, [pc, #68]	; (8001068 <HAL_InitTick+0x60>)
 8001022:	781b      	ldrb	r3, [r3, #0]
 8001024:	4619      	mov	r1, r3
 8001026:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800102a:	fbb3 f3f1 	udiv	r3, r3, r1
 800102e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001032:	4618      	mov	r0, r3
 8001034:	f000 f921 	bl	800127a <HAL_SYSTICK_Config>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e00e      	b.n	8001060 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	2b0f      	cmp	r3, #15
 8001046:	d80a      	bhi.n	800105e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001048:	2200      	movs	r2, #0
 800104a:	6879      	ldr	r1, [r7, #4]
 800104c:	f04f 30ff 	mov.w	r0, #4294967295
 8001050:	f000 f8f9 	bl	8001246 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001054:	4a06      	ldr	r2, [pc, #24]	; (8001070 <HAL_InitTick+0x68>)
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800105a:	2300      	movs	r3, #0
 800105c:	e000      	b.n	8001060 <HAL_InitTick+0x58>
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
}
 8001060:	4618      	mov	r0, r3
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	24000010 	.word	0x24000010
 800106c:	24000000 	.word	0x24000000
 8001070:	2400000c 	.word	0x2400000c

08001074 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001078:	4b06      	ldr	r3, [pc, #24]	; (8001094 <HAL_IncTick+0x20>)
 800107a:	781b      	ldrb	r3, [r3, #0]
 800107c:	461a      	mov	r2, r3
 800107e:	4b06      	ldr	r3, [pc, #24]	; (8001098 <HAL_IncTick+0x24>)
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	4413      	add	r3, r2
 8001084:	4a04      	ldr	r2, [pc, #16]	; (8001098 <HAL_IncTick+0x24>)
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	24000010 	.word	0x24000010
 8001098:	2400003c 	.word	0x2400003c

0800109c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  return uwTick;
 80010a0:	4b03      	ldr	r3, [pc, #12]	; (80010b0 <HAL_GetTick+0x14>)
 80010a2:	681b      	ldr	r3, [r3, #0]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	46bd      	mov	sp, r7
 80010a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ac:	4770      	bx	lr
 80010ae:	bf00      	nop
 80010b0:	2400003c 	.word	0x2400003c

080010b4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80010b4:	b480      	push	{r7}
 80010b6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80010b8:	4b03      	ldr	r3, [pc, #12]	; (80010c8 <HAL_GetREVID+0x14>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0c1b      	lsrs	r3, r3, #16
}
 80010be:	4618      	mov	r0, r3
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	5c001000 	.word	0x5c001000

080010cc <__NVIC_SetPriorityGrouping>:
{
 80010cc:	b480      	push	{r7}
 80010ce:	b085      	sub	sp, #20
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010dc:	4b0b      	ldr	r3, [pc, #44]	; (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010e2:	68ba      	ldr	r2, [r7, #8]
 80010e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010e8:	4013      	ands	r3, r2
 80010ea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010f4:	4b06      	ldr	r3, [pc, #24]	; (8001110 <__NVIC_SetPriorityGrouping+0x44>)
 80010f6:	4313      	orrs	r3, r2
 80010f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010fa:	4a04      	ldr	r2, [pc, #16]	; (800110c <__NVIC_SetPriorityGrouping+0x40>)
 80010fc:	68bb      	ldr	r3, [r7, #8]
 80010fe:	60d3      	str	r3, [r2, #12]
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	e000ed00 	.word	0xe000ed00
 8001110:	05fa0000 	.word	0x05fa0000

08001114 <__NVIC_GetPriorityGrouping>:
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001118:	4b04      	ldr	r3, [pc, #16]	; (800112c <__NVIC_GetPriorityGrouping+0x18>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	0a1b      	lsrs	r3, r3, #8
 800111e:	f003 0307 	and.w	r3, r3, #7
}
 8001122:	4618      	mov	r0, r3
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr
 800112c:	e000ed00 	.word	0xe000ed00

08001130 <__NVIC_SetPriority>:
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	4603      	mov	r3, r0
 8001138:	6039      	str	r1, [r7, #0]
 800113a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800113c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001140:	2b00      	cmp	r3, #0
 8001142:	db0a      	blt.n	800115a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001144:	683b      	ldr	r3, [r7, #0]
 8001146:	b2da      	uxtb	r2, r3
 8001148:	490c      	ldr	r1, [pc, #48]	; (800117c <__NVIC_SetPriority+0x4c>)
 800114a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800114e:	0112      	lsls	r2, r2, #4
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	440b      	add	r3, r1
 8001154:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001158:	e00a      	b.n	8001170 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	b2da      	uxtb	r2, r3
 800115e:	4908      	ldr	r1, [pc, #32]	; (8001180 <__NVIC_SetPriority+0x50>)
 8001160:	88fb      	ldrh	r3, [r7, #6]
 8001162:	f003 030f 	and.w	r3, r3, #15
 8001166:	3b04      	subs	r3, #4
 8001168:	0112      	lsls	r2, r2, #4
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	440b      	add	r3, r1
 800116e:	761a      	strb	r2, [r3, #24]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	e000e100 	.word	0xe000e100
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <NVIC_EncodePriority>:
{
 8001184:	b480      	push	{r7}
 8001186:	b089      	sub	sp, #36	; 0x24
 8001188:	af00      	add	r7, sp, #0
 800118a:	60f8      	str	r0, [r7, #12]
 800118c:	60b9      	str	r1, [r7, #8]
 800118e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	f1c3 0307 	rsb	r3, r3, #7
 800119e:	2b04      	cmp	r3, #4
 80011a0:	bf28      	it	cs
 80011a2:	2304      	movcs	r3, #4
 80011a4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3304      	adds	r3, #4
 80011aa:	2b06      	cmp	r3, #6
 80011ac:	d902      	bls.n	80011b4 <NVIC_EncodePriority+0x30>
 80011ae:	69fb      	ldr	r3, [r7, #28]
 80011b0:	3b03      	subs	r3, #3
 80011b2:	e000      	b.n	80011b6 <NVIC_EncodePriority+0x32>
 80011b4:	2300      	movs	r3, #0
 80011b6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b8:	f04f 32ff 	mov.w	r2, #4294967295
 80011bc:	69bb      	ldr	r3, [r7, #24]
 80011be:	fa02 f303 	lsl.w	r3, r2, r3
 80011c2:	43da      	mvns	r2, r3
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	401a      	ands	r2, r3
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011cc:	f04f 31ff 	mov.w	r1, #4294967295
 80011d0:	697b      	ldr	r3, [r7, #20]
 80011d2:	fa01 f303 	lsl.w	r3, r1, r3
 80011d6:	43d9      	mvns	r1, r3
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011dc:	4313      	orrs	r3, r2
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3724      	adds	r7, #36	; 0x24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
	...

080011ec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	3b01      	subs	r3, #1
 80011f8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80011fc:	d301      	bcc.n	8001202 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011fe:	2301      	movs	r3, #1
 8001200:	e00f      	b.n	8001222 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001202:	4a0a      	ldr	r2, [pc, #40]	; (800122c <SysTick_Config+0x40>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	3b01      	subs	r3, #1
 8001208:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800120a:	210f      	movs	r1, #15
 800120c:	f04f 30ff 	mov.w	r0, #4294967295
 8001210:	f7ff ff8e 	bl	8001130 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001214:	4b05      	ldr	r3, [pc, #20]	; (800122c <SysTick_Config+0x40>)
 8001216:	2200      	movs	r2, #0
 8001218:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800121a:	4b04      	ldr	r3, [pc, #16]	; (800122c <SysTick_Config+0x40>)
 800121c:	2207      	movs	r2, #7
 800121e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001220:	2300      	movs	r3, #0
}
 8001222:	4618      	mov	r0, r3
 8001224:	3708      	adds	r7, #8
 8001226:	46bd      	mov	sp, r7
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	e000e010 	.word	0xe000e010

08001230 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f7ff ff47 	bl	80010cc <__NVIC_SetPriorityGrouping>
}
 800123e:	bf00      	nop
 8001240:	3708      	adds	r7, #8
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}

08001246 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001246:	b580      	push	{r7, lr}
 8001248:	b086      	sub	sp, #24
 800124a:	af00      	add	r7, sp, #0
 800124c:	4603      	mov	r3, r0
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
 8001252:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001254:	f7ff ff5e 	bl	8001114 <__NVIC_GetPriorityGrouping>
 8001258:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800125a:	687a      	ldr	r2, [r7, #4]
 800125c:	68b9      	ldr	r1, [r7, #8]
 800125e:	6978      	ldr	r0, [r7, #20]
 8001260:	f7ff ff90 	bl	8001184 <NVIC_EncodePriority>
 8001264:	4602      	mov	r2, r0
 8001266:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800126a:	4611      	mov	r1, r2
 800126c:	4618      	mov	r0, r3
 800126e:	f7ff ff5f 	bl	8001130 <__NVIC_SetPriority>
}
 8001272:	bf00      	nop
 8001274:	3718      	adds	r7, #24
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}

0800127a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800127a:	b580      	push	{r7, lr}
 800127c:	b082      	sub	sp, #8
 800127e:	af00      	add	r7, sp, #0
 8001280:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001282:	6878      	ldr	r0, [r7, #4]
 8001284:	f7ff ffb2 	bl	80011ec <SysTick_Config>
 8001288:	4603      	mov	r3, r0
}
 800128a:	4618      	mov	r0, r3
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800129c:	4a08      	ldr	r2, [pc, #32]	; (80012c0 <HAL_HSEM_FastTake+0x2c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	3320      	adds	r3, #32
 80012a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012a6:	4a07      	ldr	r2, [pc, #28]	; (80012c4 <HAL_HSEM_FastTake+0x30>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d101      	bne.n	80012b0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80012ac:	2300      	movs	r3, #0
 80012ae:	e000      	b.n	80012b2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
}
 80012b2:	4618      	mov	r0, r3
 80012b4:	370c      	adds	r7, #12
 80012b6:	46bd      	mov	sp, r7
 80012b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012bc:	4770      	bx	lr
 80012be:	bf00      	nop
 80012c0:	58026400 	.word	0x58026400
 80012c4:	80000300 	.word	0x80000300

080012c8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80012d2:	4906      	ldr	r1, [pc, #24]	; (80012ec <HAL_HSEM_Release+0x24>)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80012e0:	bf00      	nop
 80012e2:	370c      	adds	r7, #12
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	58026400 	.word	0x58026400

080012f0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b084      	sub	sp, #16
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80012f8:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <HAL_PWREx_ConfigSupply+0xb0>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	f003 0307 	and.w	r3, r3, #7
 8001300:	2b06      	cmp	r3, #6
 8001302:	d00a      	beq.n	800131a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8001304:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	429a      	cmp	r2, r3
 8001310:	d001      	beq.n	8001316 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8001312:	2301      	movs	r3, #1
 8001314:	e040      	b.n	8001398 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8001316:	2300      	movs	r3, #0
 8001318:	e03e      	b.n	8001398 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800131a:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800131c:	68db      	ldr	r3, [r3, #12]
 800131e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001322:	491f      	ldr	r1, [pc, #124]	; (80013a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	4313      	orrs	r3, r2
 8001328:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800132a:	f7ff feb7 	bl	800109c <HAL_GetTick>
 800132e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001330:	e009      	b.n	8001346 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001332:	f7ff feb3 	bl	800109c <HAL_GetTick>
 8001336:	4602      	mov	r2, r0
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001340:	d901      	bls.n	8001346 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e028      	b.n	8001398 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8001346:	4b16      	ldr	r3, [pc, #88]	; (80013a0 <HAL_PWREx_ConfigSupply+0xb0>)
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800134e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001352:	d1ee      	bne.n	8001332 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2b1e      	cmp	r3, #30
 8001358:	d008      	beq.n	800136c <HAL_PWREx_ConfigSupply+0x7c>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2b2e      	cmp	r3, #46	; 0x2e
 800135e:	d005      	beq.n	800136c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b1d      	cmp	r3, #29
 8001364:	d002      	beq.n	800136c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2b2d      	cmp	r3, #45	; 0x2d
 800136a:	d114      	bne.n	8001396 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800136c:	f7ff fe96 	bl	800109c <HAL_GetTick>
 8001370:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001372:	e009      	b.n	8001388 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8001374:	f7ff fe92 	bl	800109c <HAL_GetTick>
 8001378:	4602      	mov	r2, r0
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001382:	d901      	bls.n	8001388 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8001384:	2301      	movs	r3, #1
 8001386:	e007      	b.n	8001398 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8001388:	4b05      	ldr	r3, [pc, #20]	; (80013a0 <HAL_PWREx_ConfigSupply+0xb0>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001394:	d1ee      	bne.n	8001374 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8001396:	2300      	movs	r3, #0
}
 8001398:	4618      	mov	r0, r3
 800139a:	3710      	adds	r7, #16
 800139c:	46bd      	mov	sp, r7
 800139e:	bd80      	pop	{r7, pc}
 80013a0:	58024800 	.word	0x58024800

080013a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0
 80013aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d102      	bne.n	80013b8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	f000 bc48 	b.w	8001c48 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0301 	and.w	r3, r3, #1
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	f000 8088 	beq.w	80014d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80013c6:	4b99      	ldr	r3, [pc, #612]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80013c8:	691b      	ldr	r3, [r3, #16]
 80013ca:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80013ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80013d0:	4b96      	ldr	r3, [pc, #600]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80013d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013d4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80013d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013d8:	2b10      	cmp	r3, #16
 80013da:	d007      	beq.n	80013ec <HAL_RCC_OscConfig+0x48>
 80013dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80013de:	2b18      	cmp	r3, #24
 80013e0:	d111      	bne.n	8001406 <HAL_RCC_OscConfig+0x62>
 80013e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80013e4:	f003 0303 	and.w	r3, r3, #3
 80013e8:	2b02      	cmp	r3, #2
 80013ea:	d10c      	bne.n	8001406 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013ec:	4b8f      	ldr	r3, [pc, #572]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d06d      	beq.n	80014d4 <HAL_RCC_OscConfig+0x130>
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d169      	bne.n	80014d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	f000 bc21 	b.w	8001c48 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800140e:	d106      	bne.n	800141e <HAL_RCC_OscConfig+0x7a>
 8001410:	4b86      	ldr	r3, [pc, #536]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	4a85      	ldr	r2, [pc, #532]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001416:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800141a:	6013      	str	r3, [r2, #0]
 800141c:	e02e      	b.n	800147c <HAL_RCC_OscConfig+0xd8>
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	2b00      	cmp	r3, #0
 8001424:	d10c      	bne.n	8001440 <HAL_RCC_OscConfig+0x9c>
 8001426:	4b81      	ldr	r3, [pc, #516]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4a80      	ldr	r2, [pc, #512]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800142c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001430:	6013      	str	r3, [r2, #0]
 8001432:	4b7e      	ldr	r3, [pc, #504]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4a7d      	ldr	r2, [pc, #500]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001438:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800143c:	6013      	str	r3, [r2, #0]
 800143e:	e01d      	b.n	800147c <HAL_RCC_OscConfig+0xd8>
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	685b      	ldr	r3, [r3, #4]
 8001444:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001448:	d10c      	bne.n	8001464 <HAL_RCC_OscConfig+0xc0>
 800144a:	4b78      	ldr	r3, [pc, #480]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4a77      	ldr	r2, [pc, #476]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001450:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001454:	6013      	str	r3, [r2, #0]
 8001456:	4b75      	ldr	r3, [pc, #468]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	4a74      	ldr	r2, [pc, #464]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800145c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001460:	6013      	str	r3, [r2, #0]
 8001462:	e00b      	b.n	800147c <HAL_RCC_OscConfig+0xd8>
 8001464:	4b71      	ldr	r3, [pc, #452]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a70      	ldr	r2, [pc, #448]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800146a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800146e:	6013      	str	r3, [r2, #0]
 8001470:	4b6e      	ldr	r3, [pc, #440]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a6d      	ldr	r2, [pc, #436]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001476:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b00      	cmp	r3, #0
 8001482:	d013      	beq.n	80014ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001484:	f7ff fe0a 	bl	800109c <HAL_GetTick>
 8001488:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800148a:	e008      	b.n	800149e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800148c:	f7ff fe06 	bl	800109c <HAL_GetTick>
 8001490:	4602      	mov	r2, r0
 8001492:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001494:	1ad3      	subs	r3, r2, r3
 8001496:	2b64      	cmp	r3, #100	; 0x64
 8001498:	d901      	bls.n	800149e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800149a:	2303      	movs	r3, #3
 800149c:	e3d4      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800149e:	4b63      	ldr	r3, [pc, #396]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d0f0      	beq.n	800148c <HAL_RCC_OscConfig+0xe8>
 80014aa:	e014      	b.n	80014d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ac:	f7ff fdf6 	bl	800109c <HAL_GetTick>
 80014b0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014b2:	e008      	b.n	80014c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014b4:	f7ff fdf2 	bl	800109c <HAL_GetTick>
 80014b8:	4602      	mov	r2, r0
 80014ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80014bc:	1ad3      	subs	r3, r2, r3
 80014be:	2b64      	cmp	r3, #100	; 0x64
 80014c0:	d901      	bls.n	80014c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80014c2:	2303      	movs	r3, #3
 80014c4:	e3c0      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80014c6:	4b59      	ldr	r3, [pc, #356]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d1f0      	bne.n	80014b4 <HAL_RCC_OscConfig+0x110>
 80014d2:	e000      	b.n	80014d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	2b00      	cmp	r3, #0
 80014e0:	f000 80ca 	beq.w	8001678 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80014e4:	4b51      	ldr	r3, [pc, #324]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80014e6:	691b      	ldr	r3, [r3, #16]
 80014e8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80014ec:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80014ee:	4b4f      	ldr	r3, [pc, #316]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80014f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014f2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80014f4:	6a3b      	ldr	r3, [r7, #32]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d007      	beq.n	800150a <HAL_RCC_OscConfig+0x166>
 80014fa:	6a3b      	ldr	r3, [r7, #32]
 80014fc:	2b18      	cmp	r3, #24
 80014fe:	d156      	bne.n	80015ae <HAL_RCC_OscConfig+0x20a>
 8001500:	69fb      	ldr	r3, [r7, #28]
 8001502:	f003 0303 	and.w	r3, r3, #3
 8001506:	2b00      	cmp	r3, #0
 8001508:	d151      	bne.n	80015ae <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800150a:	4b48      	ldr	r3, [pc, #288]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0304 	and.w	r3, r3, #4
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x17e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e392      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8001522:	4b42      	ldr	r3, [pc, #264]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 0219 	bic.w	r2, r3, #25
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	68db      	ldr	r3, [r3, #12]
 800152e:	493f      	ldr	r1, [pc, #252]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001530:	4313      	orrs	r3, r2
 8001532:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff fdb2 	bl	800109c <HAL_GetTick>
 8001538:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800153c:	f7ff fdae 	bl	800109c <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b02      	cmp	r3, #2
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e37c      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800154e:	4b37      	ldr	r3, [pc, #220]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f003 0304 	and.w	r3, r3, #4
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800155a:	f7ff fdab 	bl	80010b4 <HAL_GetREVID>
 800155e:	4603      	mov	r3, r0
 8001560:	f241 0203 	movw	r2, #4099	; 0x1003
 8001564:	4293      	cmp	r3, r2
 8001566:	d817      	bhi.n	8001598 <HAL_RCC_OscConfig+0x1f4>
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	691b      	ldr	r3, [r3, #16]
 800156c:	2b40      	cmp	r3, #64	; 0x40
 800156e:	d108      	bne.n	8001582 <HAL_RCC_OscConfig+0x1de>
 8001570:	4b2e      	ldr	r3, [pc, #184]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8001578:	4a2c      	ldr	r2, [pc, #176]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800157a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800157e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001580:	e07a      	b.n	8001678 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001582:	4b2a      	ldr	r3, [pc, #168]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	691b      	ldr	r3, [r3, #16]
 800158e:	031b      	lsls	r3, r3, #12
 8001590:	4926      	ldr	r1, [pc, #152]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001592:	4313      	orrs	r3, r2
 8001594:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001596:	e06f      	b.n	8001678 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001598:	4b24      	ldr	r3, [pc, #144]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800159a:	685b      	ldr	r3, [r3, #4]
 800159c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	691b      	ldr	r3, [r3, #16]
 80015a4:	061b      	lsls	r3, r3, #24
 80015a6:	4921      	ldr	r1, [pc, #132]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80015a8:	4313      	orrs	r3, r2
 80015aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ac:	e064      	b.n	8001678 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d047      	beq.n	8001646 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80015b6:	4b1d      	ldr	r3, [pc, #116]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f023 0219 	bic.w	r2, r3, #25
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	68db      	ldr	r3, [r3, #12]
 80015c2:	491a      	ldr	r1, [pc, #104]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80015c4:	4313      	orrs	r3, r2
 80015c6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015c8:	f7ff fd68 	bl	800109c <HAL_GetTick>
 80015cc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015d0:	f7ff fd64 	bl	800109c <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e332      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015e2:	4b12      	ldr	r3, [pc, #72]	; (800162c <HAL_RCC_OscConfig+0x288>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	f003 0304 	and.w	r3, r3, #4
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015ee:	f7ff fd61 	bl	80010b4 <HAL_GetREVID>
 80015f2:	4603      	mov	r3, r0
 80015f4:	f241 0203 	movw	r2, #4099	; 0x1003
 80015f8:	4293      	cmp	r3, r2
 80015fa:	d819      	bhi.n	8001630 <HAL_RCC_OscConfig+0x28c>
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	691b      	ldr	r3, [r3, #16]
 8001600:	2b40      	cmp	r3, #64	; 0x40
 8001602:	d108      	bne.n	8001616 <HAL_RCC_OscConfig+0x272>
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800160c:	4a07      	ldr	r2, [pc, #28]	; (800162c <HAL_RCC_OscConfig+0x288>)
 800160e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001612:	6053      	str	r3, [r2, #4]
 8001614:	e030      	b.n	8001678 <HAL_RCC_OscConfig+0x2d4>
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001618:	685b      	ldr	r3, [r3, #4]
 800161a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	691b      	ldr	r3, [r3, #16]
 8001622:	031b      	lsls	r3, r3, #12
 8001624:	4901      	ldr	r1, [pc, #4]	; (800162c <HAL_RCC_OscConfig+0x288>)
 8001626:	4313      	orrs	r3, r2
 8001628:	604b      	str	r3, [r1, #4]
 800162a:	e025      	b.n	8001678 <HAL_RCC_OscConfig+0x2d4>
 800162c:	58024400 	.word	0x58024400
 8001630:	4b9a      	ldr	r3, [pc, #616]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001632:	685b      	ldr	r3, [r3, #4]
 8001634:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	691b      	ldr	r3, [r3, #16]
 800163c:	061b      	lsls	r3, r3, #24
 800163e:	4997      	ldr	r1, [pc, #604]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001640:	4313      	orrs	r3, r2
 8001642:	604b      	str	r3, [r1, #4]
 8001644:	e018      	b.n	8001678 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001646:	4b95      	ldr	r3, [pc, #596]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a94      	ldr	r2, [pc, #592]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 800164c:	f023 0301 	bic.w	r3, r3, #1
 8001650:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001652:	f7ff fd23 	bl	800109c <HAL_GetTick>
 8001656:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800165a:	f7ff fd1f 	bl	800109c <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e2ed      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800166c:	4b8b      	ldr	r3, [pc, #556]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 0304 	and.w	r3, r3, #4
 8001674:	2b00      	cmp	r3, #0
 8001676:	d1f0      	bne.n	800165a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f003 0310 	and.w	r3, r3, #16
 8001680:	2b00      	cmp	r3, #0
 8001682:	f000 80a9 	beq.w	80017d8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001686:	4b85      	ldr	r3, [pc, #532]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001688:	691b      	ldr	r3, [r3, #16]
 800168a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800168e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001690:	4b82      	ldr	r3, [pc, #520]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001692:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001694:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8001696:	69bb      	ldr	r3, [r7, #24]
 8001698:	2b08      	cmp	r3, #8
 800169a:	d007      	beq.n	80016ac <HAL_RCC_OscConfig+0x308>
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	2b18      	cmp	r3, #24
 80016a0:	d13a      	bne.n	8001718 <HAL_RCC_OscConfig+0x374>
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	f003 0303 	and.w	r3, r3, #3
 80016a8:	2b01      	cmp	r3, #1
 80016aa:	d135      	bne.n	8001718 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016ac:	4b7b      	ldr	r3, [pc, #492]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d005      	beq.n	80016c4 <HAL_RCC_OscConfig+0x320>
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	2b80      	cmp	r3, #128	; 0x80
 80016be:	d001      	beq.n	80016c4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80016c0:	2301      	movs	r3, #1
 80016c2:	e2c1      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016c4:	f7ff fcf6 	bl	80010b4 <HAL_GetREVID>
 80016c8:	4603      	mov	r3, r0
 80016ca:	f241 0203 	movw	r2, #4099	; 0x1003
 80016ce:	4293      	cmp	r3, r2
 80016d0:	d817      	bhi.n	8001702 <HAL_RCC_OscConfig+0x35e>
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	2b20      	cmp	r3, #32
 80016d8:	d108      	bne.n	80016ec <HAL_RCC_OscConfig+0x348>
 80016da:	4b70      	ldr	r3, [pc, #448]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80016e2:	4a6e      	ldr	r2, [pc, #440]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80016e4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80016e8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80016ea:	e075      	b.n	80017d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80016ec:	4b6b      	ldr	r3, [pc, #428]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80016ee:	685b      	ldr	r3, [r3, #4]
 80016f0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6a1b      	ldr	r3, [r3, #32]
 80016f8:	069b      	lsls	r3, r3, #26
 80016fa:	4968      	ldr	r1, [pc, #416]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80016fc:	4313      	orrs	r3, r2
 80016fe:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001700:	e06a      	b.n	80017d8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001702:	4b66      	ldr	r3, [pc, #408]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	061b      	lsls	r3, r3, #24
 8001710:	4962      	ldr	r1, [pc, #392]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001712:	4313      	orrs	r3, r2
 8001714:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001716:	e05f      	b.n	80017d8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	69db      	ldr	r3, [r3, #28]
 800171c:	2b00      	cmp	r3, #0
 800171e:	d042      	beq.n	80017a6 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001720:	4b5e      	ldr	r3, [pc, #376]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a5d      	ldr	r2, [pc, #372]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001726:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800172a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800172c:	f7ff fcb6 	bl	800109c <HAL_GetTick>
 8001730:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001734:	f7ff fcb2 	bl	800109c <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e280      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001746:	4b55      	ldr	r3, [pc, #340]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001752:	f7ff fcaf 	bl	80010b4 <HAL_GetREVID>
 8001756:	4603      	mov	r3, r0
 8001758:	f241 0203 	movw	r2, #4099	; 0x1003
 800175c:	4293      	cmp	r3, r2
 800175e:	d817      	bhi.n	8001790 <HAL_RCC_OscConfig+0x3ec>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	6a1b      	ldr	r3, [r3, #32]
 8001764:	2b20      	cmp	r3, #32
 8001766:	d108      	bne.n	800177a <HAL_RCC_OscConfig+0x3d6>
 8001768:	4b4c      	ldr	r3, [pc, #304]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 800176a:	685b      	ldr	r3, [r3, #4]
 800176c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8001770:	4a4a      	ldr	r2, [pc, #296]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001772:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8001776:	6053      	str	r3, [r2, #4]
 8001778:	e02e      	b.n	80017d8 <HAL_RCC_OscConfig+0x434>
 800177a:	4b48      	ldr	r3, [pc, #288]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 800177c:	685b      	ldr	r3, [r3, #4]
 800177e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	6a1b      	ldr	r3, [r3, #32]
 8001786:	069b      	lsls	r3, r3, #26
 8001788:	4944      	ldr	r1, [pc, #272]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 800178a:	4313      	orrs	r3, r2
 800178c:	604b      	str	r3, [r1, #4]
 800178e:	e023      	b.n	80017d8 <HAL_RCC_OscConfig+0x434>
 8001790:	4b42      	ldr	r3, [pc, #264]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1b      	ldr	r3, [r3, #32]
 800179c:	061b      	lsls	r3, r3, #24
 800179e:	493f      	ldr	r1, [pc, #252]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80017a0:	4313      	orrs	r3, r2
 80017a2:	60cb      	str	r3, [r1, #12]
 80017a4:	e018      	b.n	80017d8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 80017a6:	4b3d      	ldr	r3, [pc, #244]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	4a3c      	ldr	r2, [pc, #240]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80017ac:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80017b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017b2:	f7ff fc73 	bl	800109c <HAL_GetTick>
 80017b6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017b8:	e008      	b.n	80017cc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80017ba:	f7ff fc6f 	bl	800109c <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	2b02      	cmp	r3, #2
 80017c6:	d901      	bls.n	80017cc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80017c8:	2303      	movs	r3, #3
 80017ca:	e23d      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80017cc:	4b33      	ldr	r3, [pc, #204]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d1f0      	bne.n	80017ba <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f003 0308 	and.w	r3, r3, #8
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d036      	beq.n	8001852 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	695b      	ldr	r3, [r3, #20]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d019      	beq.n	8001820 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ec:	4b2b      	ldr	r3, [pc, #172]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80017ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80017f0:	4a2a      	ldr	r2, [pc, #168]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 80017f2:	f043 0301 	orr.w	r3, r3, #1
 80017f6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f8:	f7ff fc50 	bl	800109c <HAL_GetTick>
 80017fc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80017fe:	e008      	b.n	8001812 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001800:	f7ff fc4c 	bl	800109c <HAL_GetTick>
 8001804:	4602      	mov	r2, r0
 8001806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001808:	1ad3      	subs	r3, r2, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d901      	bls.n	8001812 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800180e:	2303      	movs	r3, #3
 8001810:	e21a      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001812:	4b22      	ldr	r3, [pc, #136]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001816:	f003 0302 	and.w	r3, r3, #2
 800181a:	2b00      	cmp	r3, #0
 800181c:	d0f0      	beq.n	8001800 <HAL_RCC_OscConfig+0x45c>
 800181e:	e018      	b.n	8001852 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001820:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001822:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001824:	4a1d      	ldr	r2, [pc, #116]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001826:	f023 0301 	bic.w	r3, r3, #1
 800182a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800182c:	f7ff fc36 	bl	800109c <HAL_GetTick>
 8001830:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001832:	e008      	b.n	8001846 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001834:	f7ff fc32 	bl	800109c <HAL_GetTick>
 8001838:	4602      	mov	r2, r0
 800183a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800183c:	1ad3      	subs	r3, r2, r3
 800183e:	2b02      	cmp	r3, #2
 8001840:	d901      	bls.n	8001846 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001842:	2303      	movs	r3, #3
 8001844:	e200      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001846:	4b15      	ldr	r3, [pc, #84]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001848:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800184a:	f003 0302 	and.w	r3, r3, #2
 800184e:	2b00      	cmp	r3, #0
 8001850:	d1f0      	bne.n	8001834 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	2b00      	cmp	r3, #0
 800185c:	d039      	beq.n	80018d2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	699b      	ldr	r3, [r3, #24]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d01c      	beq.n	80018a0 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001866:	4b0d      	ldr	r3, [pc, #52]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4a0c      	ldr	r2, [pc, #48]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 800186c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001870:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001872:	f7ff fc13 	bl	800109c <HAL_GetTick>
 8001876:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800187a:	f7ff fc0f 	bl	800109c <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e1dd      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800188c:	4b03      	ldr	r3, [pc, #12]	; (800189c <HAL_RCC_OscConfig+0x4f8>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x4d6>
 8001898:	e01b      	b.n	80018d2 <HAL_RCC_OscConfig+0x52e>
 800189a:	bf00      	nop
 800189c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80018a0:	4b9b      	ldr	r3, [pc, #620]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a9a      	ldr	r2, [pc, #616]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 80018a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80018aa:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 80018ac:	f7ff fbf6 	bl	800109c <HAL_GetTick>
 80018b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018b2:	e008      	b.n	80018c6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018b4:	f7ff fbf2 	bl	800109c <HAL_GetTick>
 80018b8:	4602      	mov	r2, r0
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	1ad3      	subs	r3, r2, r3
 80018be:	2b02      	cmp	r3, #2
 80018c0:	d901      	bls.n	80018c6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80018c2:	2303      	movs	r3, #3
 80018c4:	e1c0      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80018c6:	4b92      	ldr	r3, [pc, #584]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d1f0      	bne.n	80018b4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0304 	and.w	r3, r3, #4
 80018da:	2b00      	cmp	r3, #0
 80018dc:	f000 8081 	beq.w	80019e2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80018e0:	4b8c      	ldr	r3, [pc, #560]	; (8001b14 <HAL_RCC_OscConfig+0x770>)
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	4a8b      	ldr	r2, [pc, #556]	; (8001b14 <HAL_RCC_OscConfig+0x770>)
 80018e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80018ec:	f7ff fbd6 	bl	800109c <HAL_GetTick>
 80018f0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80018f2:	e008      	b.n	8001906 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018f4:	f7ff fbd2 	bl	800109c <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fc:	1ad3      	subs	r3, r2, r3
 80018fe:	2b64      	cmp	r3, #100	; 0x64
 8001900:	d901      	bls.n	8001906 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e1a0      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001906:	4b83      	ldr	r3, [pc, #524]	; (8001b14 <HAL_RCC_OscConfig+0x770>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800190e:	2b00      	cmp	r3, #0
 8001910:	d0f0      	beq.n	80018f4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	2b01      	cmp	r3, #1
 8001918:	d106      	bne.n	8001928 <HAL_RCC_OscConfig+0x584>
 800191a:	4b7d      	ldr	r3, [pc, #500]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 800191c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800191e:	4a7c      	ldr	r2, [pc, #496]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001920:	f043 0301 	orr.w	r3, r3, #1
 8001924:	6713      	str	r3, [r2, #112]	; 0x70
 8001926:	e02d      	b.n	8001984 <HAL_RCC_OscConfig+0x5e0>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d10c      	bne.n	800194a <HAL_RCC_OscConfig+0x5a6>
 8001930:	4b77      	ldr	r3, [pc, #476]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001932:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001934:	4a76      	ldr	r2, [pc, #472]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001936:	f023 0301 	bic.w	r3, r3, #1
 800193a:	6713      	str	r3, [r2, #112]	; 0x70
 800193c:	4b74      	ldr	r3, [pc, #464]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 800193e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001940:	4a73      	ldr	r2, [pc, #460]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001942:	f023 0304 	bic.w	r3, r3, #4
 8001946:	6713      	str	r3, [r2, #112]	; 0x70
 8001948:	e01c      	b.n	8001984 <HAL_RCC_OscConfig+0x5e0>
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	689b      	ldr	r3, [r3, #8]
 800194e:	2b05      	cmp	r3, #5
 8001950:	d10c      	bne.n	800196c <HAL_RCC_OscConfig+0x5c8>
 8001952:	4b6f      	ldr	r3, [pc, #444]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001954:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001956:	4a6e      	ldr	r2, [pc, #440]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001958:	f043 0304 	orr.w	r3, r3, #4
 800195c:	6713      	str	r3, [r2, #112]	; 0x70
 800195e:	4b6c      	ldr	r3, [pc, #432]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001960:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001962:	4a6b      	ldr	r2, [pc, #428]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001964:	f043 0301 	orr.w	r3, r3, #1
 8001968:	6713      	str	r3, [r2, #112]	; 0x70
 800196a:	e00b      	b.n	8001984 <HAL_RCC_OscConfig+0x5e0>
 800196c:	4b68      	ldr	r3, [pc, #416]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 800196e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001970:	4a67      	ldr	r2, [pc, #412]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001972:	f023 0301 	bic.w	r3, r3, #1
 8001976:	6713      	str	r3, [r2, #112]	; 0x70
 8001978:	4b65      	ldr	r3, [pc, #404]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197c:	4a64      	ldr	r2, [pc, #400]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 800197e:	f023 0304 	bic.w	r3, r3, #4
 8001982:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	689b      	ldr	r3, [r3, #8]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d015      	beq.n	80019b8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800198c:	f7ff fb86 	bl	800109c <HAL_GetTick>
 8001990:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001992:	e00a      	b.n	80019aa <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001994:	f7ff fb82 	bl	800109c <HAL_GetTick>
 8001998:	4602      	mov	r2, r0
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	1ad3      	subs	r3, r2, r3
 800199e:	f241 3288 	movw	r2, #5000	; 0x1388
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e14e      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80019aa:	4b59      	ldr	r3, [pc, #356]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 80019ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d0ee      	beq.n	8001994 <HAL_RCC_OscConfig+0x5f0>
 80019b6:	e014      	b.n	80019e2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b8:	f7ff fb70 	bl	800109c <HAL_GetTick>
 80019bc:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019be:	e00a      	b.n	80019d6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019c0:	f7ff fb6c 	bl	800109c <HAL_GetTick>
 80019c4:	4602      	mov	r2, r0
 80019c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c8:	1ad3      	subs	r3, r2, r3
 80019ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d901      	bls.n	80019d6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80019d2:	2303      	movs	r3, #3
 80019d4:	e138      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80019d6:	4b4e      	ldr	r3, [pc, #312]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 80019d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019da:	f003 0302 	and.w	r3, r3, #2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d1ee      	bne.n	80019c0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 812d 	beq.w	8001c46 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80019ec:	4b48      	ldr	r3, [pc, #288]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 80019ee:	691b      	ldr	r3, [r3, #16]
 80019f0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80019f4:	2b18      	cmp	r3, #24
 80019f6:	f000 80bd 	beq.w	8001b74 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	f040 809e 	bne.w	8001b40 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a04:	4b42      	ldr	r3, [pc, #264]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a41      	ldr	r2, [pc, #260]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a10:	f7ff fb44 	bl	800109c <HAL_GetTick>
 8001a14:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a16:	e008      	b.n	8001a2a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a18:	f7ff fb40 	bl	800109c <HAL_GetTick>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a20:	1ad3      	subs	r3, r2, r3
 8001a22:	2b02      	cmp	r3, #2
 8001a24:	d901      	bls.n	8001a2a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001a26:	2303      	movs	r3, #3
 8001a28:	e10e      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001a2a:	4b39      	ldr	r3, [pc, #228]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d1f0      	bne.n	8001a18 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a36:	4b36      	ldr	r3, [pc, #216]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a38:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001a3a:	4b37      	ldr	r3, [pc, #220]	; (8001b18 <HAL_RCC_OscConfig+0x774>)
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	687a      	ldr	r2, [r7, #4]
 8001a40:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001a42:	687a      	ldr	r2, [r7, #4]
 8001a44:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8001a46:	0112      	lsls	r2, r2, #4
 8001a48:	430a      	orrs	r2, r1
 8001a4a:	4931      	ldr	r1, [pc, #196]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a4c:	4313      	orrs	r3, r2
 8001a4e:	628b      	str	r3, [r1, #40]	; 0x28
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a54:	3b01      	subs	r3, #1
 8001a56:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	025b      	lsls	r3, r3, #9
 8001a62:	b29b      	uxth	r3, r3
 8001a64:	431a      	orrs	r2, r3
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	041b      	lsls	r3, r3, #16
 8001a6e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8001a72:	431a      	orrs	r2, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a78:	3b01      	subs	r3, #1
 8001a7a:	061b      	lsls	r3, r3, #24
 8001a7c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8001a80:	4923      	ldr	r1, [pc, #140]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a82:	4313      	orrs	r3, r2
 8001a84:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001a86:	4b22      	ldr	r3, [pc, #136]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a8a:	4a21      	ldr	r2, [pc, #132]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a8c:	f023 0301 	bic.w	r3, r3, #1
 8001a90:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001a92:	4b1f      	ldr	r3, [pc, #124]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001a94:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001a96:	4b21      	ldr	r3, [pc, #132]	; (8001b1c <HAL_RCC_OscConfig+0x778>)
 8001a98:	4013      	ands	r3, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001a9e:	00d2      	lsls	r2, r2, #3
 8001aa0:	491b      	ldr	r1, [pc, #108]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aaa:	f023 020c 	bic.w	r2, r3, #12
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ab2:	4917      	ldr	r1, [pc, #92]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001ab8:	4b15      	ldr	r3, [pc, #84]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001abc:	f023 0202 	bic.w	r2, r3, #2
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ac4:	4912      	ldr	r1, [pc, #72]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001aca:	4b11      	ldr	r3, [pc, #68]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001acc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ace:	4a10      	ldr	r2, [pc, #64]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001ad0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ad4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001ad6:	4b0e      	ldr	r3, [pc, #56]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ada:	4a0d      	ldr	r2, [pc, #52]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001adc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ae0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001ae2:	4b0b      	ldr	r3, [pc, #44]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001ae4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ae6:	4a0a      	ldr	r2, [pc, #40]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001ae8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001aec:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001aee:	4b08      	ldr	r3, [pc, #32]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001af0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001af2:	4a07      	ldr	r2, [pc, #28]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001af4:	f043 0301 	orr.w	r3, r3, #1
 8001af8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001afa:	4b05      	ldr	r3, [pc, #20]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a04      	ldr	r2, [pc, #16]	; (8001b10 <HAL_RCC_OscConfig+0x76c>)
 8001b00:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001b04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b06:	f7ff fac9 	bl	800109c <HAL_GetTick>
 8001b0a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b0c:	e011      	b.n	8001b32 <HAL_RCC_OscConfig+0x78e>
 8001b0e:	bf00      	nop
 8001b10:	58024400 	.word	0x58024400
 8001b14:	58024800 	.word	0x58024800
 8001b18:	fffffc0c 	.word	0xfffffc0c
 8001b1c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b20:	f7ff fabc 	bl	800109c <HAL_GetTick>
 8001b24:	4602      	mov	r2, r0
 8001b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d901      	bls.n	8001b32 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001b2e:	2303      	movs	r3, #3
 8001b30:	e08a      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001b32:	4b47      	ldr	r3, [pc, #284]	; (8001c50 <HAL_RCC_OscConfig+0x8ac>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d0f0      	beq.n	8001b20 <HAL_RCC_OscConfig+0x77c>
 8001b3e:	e082      	b.n	8001c46 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b40:	4b43      	ldr	r3, [pc, #268]	; (8001c50 <HAL_RCC_OscConfig+0x8ac>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a42      	ldr	r2, [pc, #264]	; (8001c50 <HAL_RCC_OscConfig+0x8ac>)
 8001b46:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b4a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b4c:	f7ff faa6 	bl	800109c <HAL_GetTick>
 8001b50:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b52:	e008      	b.n	8001b66 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b54:	f7ff faa2 	bl	800109c <HAL_GetTick>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b5c:	1ad3      	subs	r3, r2, r3
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e070      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001b66:	4b3a      	ldr	r3, [pc, #232]	; (8001c50 <HAL_RCC_OscConfig+0x8ac>)
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d1f0      	bne.n	8001b54 <HAL_RCC_OscConfig+0x7b0>
 8001b72:	e068      	b.n	8001c46 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001b74:	4b36      	ldr	r3, [pc, #216]	; (8001c50 <HAL_RCC_OscConfig+0x8ac>)
 8001b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b78:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001b7a:	4b35      	ldr	r3, [pc, #212]	; (8001c50 <HAL_RCC_OscConfig+0x8ac>)
 8001b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b7e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b84:	2b01      	cmp	r3, #1
 8001b86:	d031      	beq.n	8001bec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b88:	693b      	ldr	r3, [r7, #16]
 8001b8a:	f003 0203 	and.w	r2, r3, #3
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d12a      	bne.n	8001bec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	091b      	lsrs	r3, r3, #4
 8001b9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	d122      	bne.n	8001bec <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	d11a      	bne.n	8001bec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	0a5b      	lsrs	r3, r3, #9
 8001bba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bc2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001bc4:	429a      	cmp	r2, r3
 8001bc6:	d111      	bne.n	8001bec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	0c1b      	lsrs	r3, r3, #16
 8001bcc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d108      	bne.n	8001bec <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	0e1b      	lsrs	r3, r3, #24
 8001bde:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001be6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001be8:	429a      	cmp	r2, r3
 8001bea:	d001      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001bec:	2301      	movs	r3, #1
 8001bee:	e02b      	b.n	8001c48 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001bf0:	4b17      	ldr	r3, [pc, #92]	; (8001c50 <HAL_RCC_OscConfig+0x8ac>)
 8001bf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bf4:	08db      	lsrs	r3, r3, #3
 8001bf6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001bfa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c00:	693a      	ldr	r2, [r7, #16]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d01f      	beq.n	8001c46 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001c06:	4b12      	ldr	r3, [pc, #72]	; (8001c50 <HAL_RCC_OscConfig+0x8ac>)
 8001c08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c0a:	4a11      	ldr	r2, [pc, #68]	; (8001c50 <HAL_RCC_OscConfig+0x8ac>)
 8001c0c:	f023 0301 	bic.w	r3, r3, #1
 8001c10:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001c12:	f7ff fa43 	bl	800109c <HAL_GetTick>
 8001c16:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001c18:	bf00      	nop
 8001c1a:	f7ff fa3f 	bl	800109c <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d0f9      	beq.n	8001c1a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001c26:	4b0a      	ldr	r3, [pc, #40]	; (8001c50 <HAL_RCC_OscConfig+0x8ac>)
 8001c28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001c2a:	4b0a      	ldr	r3, [pc, #40]	; (8001c54 <HAL_RCC_OscConfig+0x8b0>)
 8001c2c:	4013      	ands	r3, r2
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001c32:	00d2      	lsls	r2, r2, #3
 8001c34:	4906      	ldr	r1, [pc, #24]	; (8001c50 <HAL_RCC_OscConfig+0x8ac>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001c3a:	4b05      	ldr	r3, [pc, #20]	; (8001c50 <HAL_RCC_OscConfig+0x8ac>)
 8001c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c3e:	4a04      	ldr	r2, [pc, #16]	; (8001c50 <HAL_RCC_OscConfig+0x8ac>)
 8001c40:	f043 0301 	orr.w	r3, r3, #1
 8001c44:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3730      	adds	r7, #48	; 0x30
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	58024400 	.word	0x58024400
 8001c54:	ffff0007 	.word	0xffff0007

08001c58 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d101      	bne.n	8001c6c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e19c      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001c6c:	4b8a      	ldr	r3, [pc, #552]	; (8001e98 <HAL_RCC_ClockConfig+0x240>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 030f 	and.w	r3, r3, #15
 8001c74:	683a      	ldr	r2, [r7, #0]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d910      	bls.n	8001c9c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c7a:	4b87      	ldr	r3, [pc, #540]	; (8001e98 <HAL_RCC_ClockConfig+0x240>)
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f023 020f 	bic.w	r2, r3, #15
 8001c82:	4985      	ldr	r1, [pc, #532]	; (8001e98 <HAL_RCC_ClockConfig+0x240>)
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	4313      	orrs	r3, r2
 8001c88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c8a:	4b83      	ldr	r3, [pc, #524]	; (8001e98 <HAL_RCC_ClockConfig+0x240>)
 8001c8c:	681b      	ldr	r3, [r3, #0]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	683a      	ldr	r2, [r7, #0]
 8001c94:	429a      	cmp	r2, r3
 8001c96:	d001      	beq.n	8001c9c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001c98:	2301      	movs	r3, #1
 8001c9a:	e184      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	f003 0304 	and.w	r3, r3, #4
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d010      	beq.n	8001cca <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	691a      	ldr	r2, [r3, #16]
 8001cac:	4b7b      	ldr	r3, [pc, #492]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001cae:	699b      	ldr	r3, [r3, #24]
 8001cb0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d908      	bls.n	8001cca <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001cb8:	4b78      	ldr	r3, [pc, #480]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001cba:	699b      	ldr	r3, [r3, #24]
 8001cbc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	691b      	ldr	r3, [r3, #16]
 8001cc4:	4975      	ldr	r1, [pc, #468]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f003 0308 	and.w	r3, r3, #8
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d010      	beq.n	8001cf8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	695a      	ldr	r2, [r3, #20]
 8001cda:	4b70      	ldr	r3, [pc, #448]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001cdc:	69db      	ldr	r3, [r3, #28]
 8001cde:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d908      	bls.n	8001cf8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001ce6:	4b6d      	ldr	r3, [pc, #436]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001ce8:	69db      	ldr	r3, [r3, #28]
 8001cea:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	695b      	ldr	r3, [r3, #20]
 8001cf2:	496a      	ldr	r1, [pc, #424]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0310 	and.w	r3, r3, #16
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d010      	beq.n	8001d26 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	699a      	ldr	r2, [r3, #24]
 8001d08:	4b64      	ldr	r3, [pc, #400]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001d0a:	69db      	ldr	r3, [r3, #28]
 8001d0c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001d10:	429a      	cmp	r2, r3
 8001d12:	d908      	bls.n	8001d26 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001d14:	4b61      	ldr	r3, [pc, #388]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001d16:	69db      	ldr	r3, [r3, #28]
 8001d18:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	495e      	ldr	r1, [pc, #376]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0320 	and.w	r3, r3, #32
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d010      	beq.n	8001d54 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	69da      	ldr	r2, [r3, #28]
 8001d36:	4b59      	ldr	r3, [pc, #356]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001d38:	6a1b      	ldr	r3, [r3, #32]
 8001d3a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d908      	bls.n	8001d54 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001d42:	4b56      	ldr	r3, [pc, #344]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001d44:	6a1b      	ldr	r3, [r3, #32]
 8001d46:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	69db      	ldr	r3, [r3, #28]
 8001d4e:	4953      	ldr	r1, [pc, #332]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0302 	and.w	r3, r3, #2
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d010      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	4b4d      	ldr	r3, [pc, #308]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001d66:	699b      	ldr	r3, [r3, #24]
 8001d68:	f003 030f 	and.w	r3, r3, #15
 8001d6c:	429a      	cmp	r2, r3
 8001d6e:	d908      	bls.n	8001d82 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d70:	4b4a      	ldr	r3, [pc, #296]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001d72:	699b      	ldr	r3, [r3, #24]
 8001d74:	f023 020f 	bic.w	r2, r3, #15
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	68db      	ldr	r3, [r3, #12]
 8001d7c:	4947      	ldr	r1, [pc, #284]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001d7e:	4313      	orrs	r3, r2
 8001d80:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d055      	beq.n	8001e3a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001d8e:	4b43      	ldr	r3, [pc, #268]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001d90:	699b      	ldr	r3, [r3, #24]
 8001d92:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	689b      	ldr	r3, [r3, #8]
 8001d9a:	4940      	ldr	r1, [pc, #256]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	2b02      	cmp	r3, #2
 8001da6:	d107      	bne.n	8001db8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001da8:	4b3c      	ldr	r3, [pc, #240]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d121      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001db4:	2301      	movs	r3, #1
 8001db6:	e0f6      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	2b03      	cmp	r3, #3
 8001dbe:	d107      	bne.n	8001dd0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001dc0:	4b36      	ldr	r3, [pc, #216]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d115      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0ea      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	2b01      	cmp	r3, #1
 8001dd6:	d107      	bne.n	8001de8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8001dd8:	4b30      	ldr	r3, [pc, #192]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d109      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e0de      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001de8:	4b2c      	ldr	r3, [pc, #176]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8001df4:	2301      	movs	r3, #1
 8001df6:	e0d6      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001df8:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	f023 0207 	bic.w	r2, r3, #7
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	4925      	ldr	r1, [pc, #148]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001e06:	4313      	orrs	r3, r2
 8001e08:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e0a:	f7ff f947 	bl	800109c <HAL_GetTick>
 8001e0e:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e10:	e00a      	b.n	8001e28 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e12:	f7ff f943 	bl	800109c <HAL_GetTick>
 8001e16:	4602      	mov	r2, r0
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	1ad3      	subs	r3, r2, r3
 8001e1c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e20:	4293      	cmp	r3, r2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e0be      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e28:	4b1c      	ldr	r3, [pc, #112]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001e2a:	691b      	ldr	r3, [r3, #16]
 8001e2c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	00db      	lsls	r3, r3, #3
 8001e36:	429a      	cmp	r2, r3
 8001e38:	d1eb      	bne.n	8001e12 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 0302 	and.w	r3, r3, #2
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d010      	beq.n	8001e68 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	68da      	ldr	r2, [r3, #12]
 8001e4a:	4b14      	ldr	r3, [pc, #80]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	f003 030f 	and.w	r3, r3, #15
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d208      	bcs.n	8001e68 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e56:	4b11      	ldr	r3, [pc, #68]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001e58:	699b      	ldr	r3, [r3, #24]
 8001e5a:	f023 020f 	bic.w	r2, r3, #15
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	490e      	ldr	r1, [pc, #56]	; (8001e9c <HAL_RCC_ClockConfig+0x244>)
 8001e64:	4313      	orrs	r3, r2
 8001e66:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e68:	4b0b      	ldr	r3, [pc, #44]	; (8001e98 <HAL_RCC_ClockConfig+0x240>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	f003 030f 	and.w	r3, r3, #15
 8001e70:	683a      	ldr	r2, [r7, #0]
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d214      	bcs.n	8001ea0 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e76:	4b08      	ldr	r3, [pc, #32]	; (8001e98 <HAL_RCC_ClockConfig+0x240>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f023 020f 	bic.w	r2, r3, #15
 8001e7e:	4906      	ldr	r1, [pc, #24]	; (8001e98 <HAL_RCC_ClockConfig+0x240>)
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e86:	4b04      	ldr	r3, [pc, #16]	; (8001e98 <HAL_RCC_ClockConfig+0x240>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 030f 	and.w	r3, r3, #15
 8001e8e:	683a      	ldr	r2, [r7, #0]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d005      	beq.n	8001ea0 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8001e94:	2301      	movs	r3, #1
 8001e96:	e086      	b.n	8001fa6 <HAL_RCC_ClockConfig+0x34e>
 8001e98:	52002000 	.word	0x52002000
 8001e9c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0304 	and.w	r3, r3, #4
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d010      	beq.n	8001ece <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	4b3f      	ldr	r3, [pc, #252]	; (8001fb0 <HAL_RCC_ClockConfig+0x358>)
 8001eb2:	699b      	ldr	r3, [r3, #24]
 8001eb4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	d208      	bcs.n	8001ece <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001ebc:	4b3c      	ldr	r3, [pc, #240]	; (8001fb0 <HAL_RCC_ClockConfig+0x358>)
 8001ebe:	699b      	ldr	r3, [r3, #24]
 8001ec0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	4939      	ldr	r1, [pc, #228]	; (8001fb0 <HAL_RCC_ClockConfig+0x358>)
 8001eca:	4313      	orrs	r3, r2
 8001ecc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 0308 	and.w	r3, r3, #8
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d010      	beq.n	8001efc <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	695a      	ldr	r2, [r3, #20]
 8001ede:	4b34      	ldr	r3, [pc, #208]	; (8001fb0 <HAL_RCC_ClockConfig+0x358>)
 8001ee0:	69db      	ldr	r3, [r3, #28]
 8001ee2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001ee6:	429a      	cmp	r2, r3
 8001ee8:	d208      	bcs.n	8001efc <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001eea:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <HAL_RCC_ClockConfig+0x358>)
 8001eec:	69db      	ldr	r3, [r3, #28]
 8001eee:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	695b      	ldr	r3, [r3, #20]
 8001ef6:	492e      	ldr	r1, [pc, #184]	; (8001fb0 <HAL_RCC_ClockConfig+0x358>)
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 0310 	and.w	r3, r3, #16
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d010      	beq.n	8001f2a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	699a      	ldr	r2, [r3, #24]
 8001f0c:	4b28      	ldr	r3, [pc, #160]	; (8001fb0 <HAL_RCC_ClockConfig+0x358>)
 8001f0e:	69db      	ldr	r3, [r3, #28]
 8001f10:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001f14:	429a      	cmp	r2, r3
 8001f16:	d208      	bcs.n	8001f2a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f18:	4b25      	ldr	r3, [pc, #148]	; (8001fb0 <HAL_RCC_ClockConfig+0x358>)
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4922      	ldr	r1, [pc, #136]	; (8001fb0 <HAL_RCC_ClockConfig+0x358>)
 8001f26:	4313      	orrs	r3, r2
 8001f28:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f003 0320 	and.w	r3, r3, #32
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d010      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	69da      	ldr	r2, [r3, #28]
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_RCC_ClockConfig+0x358>)
 8001f3c:	6a1b      	ldr	r3, [r3, #32]
 8001f3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8001f42:	429a      	cmp	r2, r3
 8001f44:	d208      	bcs.n	8001f58 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001f46:	4b1a      	ldr	r3, [pc, #104]	; (8001fb0 <HAL_RCC_ClockConfig+0x358>)
 8001f48:	6a1b      	ldr	r3, [r3, #32]
 8001f4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	4917      	ldr	r1, [pc, #92]	; (8001fb0 <HAL_RCC_ClockConfig+0x358>)
 8001f54:	4313      	orrs	r3, r2
 8001f56:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8001f58:	f000 f834 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 8001f5c:	4602      	mov	r2, r0
 8001f5e:	4b14      	ldr	r3, [pc, #80]	; (8001fb0 <HAL_RCC_ClockConfig+0x358>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	0a1b      	lsrs	r3, r3, #8
 8001f64:	f003 030f 	and.w	r3, r3, #15
 8001f68:	4912      	ldr	r1, [pc, #72]	; (8001fb4 <HAL_RCC_ClockConfig+0x35c>)
 8001f6a:	5ccb      	ldrb	r3, [r1, r3]
 8001f6c:	f003 031f 	and.w	r3, r3, #31
 8001f70:	fa22 f303 	lsr.w	r3, r2, r3
 8001f74:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8001f76:	4b0e      	ldr	r3, [pc, #56]	; (8001fb0 <HAL_RCC_ClockConfig+0x358>)
 8001f78:	699b      	ldr	r3, [r3, #24]
 8001f7a:	f003 030f 	and.w	r3, r3, #15
 8001f7e:	4a0d      	ldr	r2, [pc, #52]	; (8001fb4 <HAL_RCC_ClockConfig+0x35c>)
 8001f80:	5cd3      	ldrb	r3, [r2, r3]
 8001f82:	f003 031f 	and.w	r3, r3, #31
 8001f86:	693a      	ldr	r2, [r7, #16]
 8001f88:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8c:	4a0a      	ldr	r2, [pc, #40]	; (8001fb8 <HAL_RCC_ClockConfig+0x360>)
 8001f8e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8001f90:	4a0a      	ldr	r2, [pc, #40]	; (8001fbc <HAL_RCC_ClockConfig+0x364>)
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8001f96:	4b0a      	ldr	r3, [pc, #40]	; (8001fc0 <HAL_RCC_ClockConfig+0x368>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7ff f834 	bl	8001008 <HAL_InitTick>
 8001fa0:	4603      	mov	r3, r0
 8001fa2:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	3718      	adds	r7, #24
 8001faa:	46bd      	mov	sp, r7
 8001fac:	bd80      	pop	{r7, pc}
 8001fae:	bf00      	nop
 8001fb0:	58024400 	.word	0x58024400
 8001fb4:	08002f98 	.word	0x08002f98
 8001fb8:	24000004 	.word	0x24000004
 8001fbc:	24000000 	.word	0x24000000
 8001fc0:	2400000c 	.word	0x2400000c

08001fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b089      	sub	sp, #36	; 0x24
 8001fc8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fca:	4bb3      	ldr	r3, [pc, #716]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8001fcc:	691b      	ldr	r3, [r3, #16]
 8001fce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001fd2:	2b18      	cmp	r3, #24
 8001fd4:	f200 8155 	bhi.w	8002282 <HAL_RCC_GetSysClockFreq+0x2be>
 8001fd8:	a201      	add	r2, pc, #4	; (adr r2, 8001fe0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8001fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fde:	bf00      	nop
 8001fe0:	08002045 	.word	0x08002045
 8001fe4:	08002283 	.word	0x08002283
 8001fe8:	08002283 	.word	0x08002283
 8001fec:	08002283 	.word	0x08002283
 8001ff0:	08002283 	.word	0x08002283
 8001ff4:	08002283 	.word	0x08002283
 8001ff8:	08002283 	.word	0x08002283
 8001ffc:	08002283 	.word	0x08002283
 8002000:	0800206b 	.word	0x0800206b
 8002004:	08002283 	.word	0x08002283
 8002008:	08002283 	.word	0x08002283
 800200c:	08002283 	.word	0x08002283
 8002010:	08002283 	.word	0x08002283
 8002014:	08002283 	.word	0x08002283
 8002018:	08002283 	.word	0x08002283
 800201c:	08002283 	.word	0x08002283
 8002020:	08002071 	.word	0x08002071
 8002024:	08002283 	.word	0x08002283
 8002028:	08002283 	.word	0x08002283
 800202c:	08002283 	.word	0x08002283
 8002030:	08002283 	.word	0x08002283
 8002034:	08002283 	.word	0x08002283
 8002038:	08002283 	.word	0x08002283
 800203c:	08002283 	.word	0x08002283
 8002040:	08002077 	.word	0x08002077
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002044:	4b94      	ldr	r3, [pc, #592]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0320 	and.w	r3, r3, #32
 800204c:	2b00      	cmp	r3, #0
 800204e:	d009      	beq.n	8002064 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8002050:	4b91      	ldr	r3, [pc, #580]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	08db      	lsrs	r3, r3, #3
 8002056:	f003 0303 	and.w	r3, r3, #3
 800205a:	4a90      	ldr	r2, [pc, #576]	; (800229c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800205c:	fa22 f303 	lsr.w	r3, r2, r3
 8002060:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8002062:	e111      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8002064:	4b8d      	ldr	r3, [pc, #564]	; (800229c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002066:	61bb      	str	r3, [r7, #24]
      break;
 8002068:	e10e      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800206a:	4b8d      	ldr	r3, [pc, #564]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800206c:	61bb      	str	r3, [r7, #24]
      break;
 800206e:	e10b      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8002070:	4b8c      	ldr	r3, [pc, #560]	; (80022a4 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8002072:	61bb      	str	r3, [r7, #24]
      break;
 8002074:	e108      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8002076:	4b88      	ldr	r3, [pc, #544]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002078:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800207a:	f003 0303 	and.w	r3, r3, #3
 800207e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8002080:	4b85      	ldr	r3, [pc, #532]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002084:	091b      	lsrs	r3, r3, #4
 8002086:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800208a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800208c:	4b82      	ldr	r3, [pc, #520]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800208e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002090:	f003 0301 	and.w	r3, r3, #1
 8002094:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8002096:	4b80      	ldr	r3, [pc, #512]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002098:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800209a:	08db      	lsrs	r3, r3, #3
 800209c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80020a0:	68fa      	ldr	r2, [r7, #12]
 80020a2:	fb02 f303 	mul.w	r3, r2, r3
 80020a6:	ee07 3a90 	vmov	s15, r3
 80020aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ae:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	f000 80e1 	beq.w	800227c <HAL_RCC_GetSysClockFreq+0x2b8>
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	2b02      	cmp	r3, #2
 80020be:	f000 8083 	beq.w	80021c8 <HAL_RCC_GetSysClockFreq+0x204>
 80020c2:	697b      	ldr	r3, [r7, #20]
 80020c4:	2b02      	cmp	r3, #2
 80020c6:	f200 80a1 	bhi.w	800220c <HAL_RCC_GetSysClockFreq+0x248>
 80020ca:	697b      	ldr	r3, [r7, #20]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d003      	beq.n	80020d8 <HAL_RCC_GetSysClockFreq+0x114>
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	2b01      	cmp	r3, #1
 80020d4:	d056      	beq.n	8002184 <HAL_RCC_GetSysClockFreq+0x1c0>
 80020d6:	e099      	b.n	800220c <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80020d8:	4b6f      	ldr	r3, [pc, #444]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f003 0320 	and.w	r3, r3, #32
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d02d      	beq.n	8002140 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80020e4:	4b6c      	ldr	r3, [pc, #432]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	08db      	lsrs	r3, r3, #3
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	4a6b      	ldr	r2, [pc, #428]	; (800229c <HAL_RCC_GetSysClockFreq+0x2d8>)
 80020f0:	fa22 f303 	lsr.w	r3, r2, r3
 80020f4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	ee07 3a90 	vmov	s15, r3
 80020fc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	ee07 3a90 	vmov	s15, r3
 8002106:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800210a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800210e:	4b62      	ldr	r3, [pc, #392]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002116:	ee07 3a90 	vmov	s15, r3
 800211a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800211e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002122:	eddf 5a61 	vldr	s11, [pc, #388]	; 80022a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002126:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800212a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800212e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002132:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800213a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800213e:	e087      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	ee07 3a90 	vmov	s15, r3
 8002146:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800214a:	eddf 6a58 	vldr	s13, [pc, #352]	; 80022ac <HAL_RCC_GetSysClockFreq+0x2e8>
 800214e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002152:	4b51      	ldr	r3, [pc, #324]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215a:	ee07 3a90 	vmov	s15, r3
 800215e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002162:	ed97 6a02 	vldr	s12, [r7, #8]
 8002166:	eddf 5a50 	vldr	s11, [pc, #320]	; 80022a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 800216a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800216e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002172:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002176:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800217a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800217e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002182:	e065      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002184:	693b      	ldr	r3, [r7, #16]
 8002186:	ee07 3a90 	vmov	s15, r3
 800218a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800218e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80022b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002192:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002196:	4b40      	ldr	r3, [pc, #256]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800219a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800219e:	ee07 3a90 	vmov	s15, r3
 80021a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021a6:	ed97 6a02 	vldr	s12, [r7, #8]
 80021aa:	eddf 5a3f 	vldr	s11, [pc, #252]	; 80022a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021b6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80021be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021c2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80021c6:	e043      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	ee07 3a90 	vmov	s15, r3
 80021ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80021d2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80022b4 <HAL_RCC_GetSysClockFreq+0x2f0>
 80021d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80021da:	4b2f      	ldr	r3, [pc, #188]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80021dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021e2:	ee07 3a90 	vmov	s15, r3
 80021e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80021ea:	ed97 6a02 	vldr	s12, [r7, #8]
 80021ee:	eddf 5a2e 	vldr	s11, [pc, #184]	; 80022a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 80021f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80021f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80021fa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80021fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002202:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002206:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800220a:	e021      	b.n	8002250 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800220c:	693b      	ldr	r3, [r7, #16]
 800220e:	ee07 3a90 	vmov	s15, r3
 8002212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002216:	eddf 6a26 	vldr	s13, [pc, #152]	; 80022b0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800221a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002226:	ee07 3a90 	vmov	s15, r3
 800222a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800222e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002232:	eddf 5a1d 	vldr	s11, [pc, #116]	; 80022a8 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002236:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800223a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800223e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002242:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800224a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800224e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8002250:	4b11      	ldr	r3, [pc, #68]	; (8002298 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	0a5b      	lsrs	r3, r3, #9
 8002256:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800225a:	3301      	adds	r3, #1
 800225c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	ee07 3a90 	vmov	s15, r3
 8002264:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002268:	edd7 6a07 	vldr	s13, [r7, #28]
 800226c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002270:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002274:	ee17 3a90 	vmov	r3, s15
 8002278:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800227a:	e005      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800227c:	2300      	movs	r3, #0
 800227e:	61bb      	str	r3, [r7, #24]
      break;
 8002280:	e002      	b.n	8002288 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8002282:	4b07      	ldr	r3, [pc, #28]	; (80022a0 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8002284:	61bb      	str	r3, [r7, #24]
      break;
 8002286:	bf00      	nop
  }

  return sysclockfreq;
 8002288:	69bb      	ldr	r3, [r7, #24]
}
 800228a:	4618      	mov	r0, r3
 800228c:	3724      	adds	r7, #36	; 0x24
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	58024400 	.word	0x58024400
 800229c:	03d09000 	.word	0x03d09000
 80022a0:	003d0900 	.word	0x003d0900
 80022a4:	007a1200 	.word	0x007a1200
 80022a8:	46000000 	.word	0x46000000
 80022ac:	4c742400 	.word	0x4c742400
 80022b0:	4a742400 	.word	0x4a742400
 80022b4:	4af42400 	.word	0x4af42400

080022b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80022be:	f7ff fe81 	bl	8001fc4 <HAL_RCC_GetSysClockFreq>
 80022c2:	4602      	mov	r2, r0
 80022c4:	4b10      	ldr	r3, [pc, #64]	; (8002308 <HAL_RCC_GetHCLKFreq+0x50>)
 80022c6:	699b      	ldr	r3, [r3, #24]
 80022c8:	0a1b      	lsrs	r3, r3, #8
 80022ca:	f003 030f 	and.w	r3, r3, #15
 80022ce:	490f      	ldr	r1, [pc, #60]	; (800230c <HAL_RCC_GetHCLKFreq+0x54>)
 80022d0:	5ccb      	ldrb	r3, [r1, r3]
 80022d2:	f003 031f 	and.w	r3, r3, #31
 80022d6:	fa22 f303 	lsr.w	r3, r2, r3
 80022da:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80022dc:	4b0a      	ldr	r3, [pc, #40]	; (8002308 <HAL_RCC_GetHCLKFreq+0x50>)
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f003 030f 	and.w	r3, r3, #15
 80022e4:	4a09      	ldr	r2, [pc, #36]	; (800230c <HAL_RCC_GetHCLKFreq+0x54>)
 80022e6:	5cd3      	ldrb	r3, [r2, r3]
 80022e8:	f003 031f 	and.w	r3, r3, #31
 80022ec:	687a      	ldr	r2, [r7, #4]
 80022ee:	fa22 f303 	lsr.w	r3, r2, r3
 80022f2:	4a07      	ldr	r2, [pc, #28]	; (8002310 <HAL_RCC_GetHCLKFreq+0x58>)
 80022f4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80022f6:	4a07      	ldr	r2, [pc, #28]	; (8002314 <HAL_RCC_GetHCLKFreq+0x5c>)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_RCC_GetHCLKFreq+0x58>)
 80022fe:	681b      	ldr	r3, [r3, #0]
}
 8002300:	4618      	mov	r0, r3
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	58024400 	.word	0x58024400
 800230c:	08002f98 	.word	0x08002f98
 8002310:	24000004 	.word	0x24000004
 8002314:	24000000 	.word	0x24000000

08002318 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800231c:	f7ff ffcc 	bl	80022b8 <HAL_RCC_GetHCLKFreq>
 8002320:	4602      	mov	r2, r0
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002324:	69db      	ldr	r3, [r3, #28]
 8002326:	0a1b      	lsrs	r3, r3, #8
 8002328:	f003 0307 	and.w	r3, r3, #7
 800232c:	4904      	ldr	r1, [pc, #16]	; (8002340 <HAL_RCC_GetPCLK2Freq+0x28>)
 800232e:	5ccb      	ldrb	r3, [r1, r3]
 8002330:	f003 031f 	and.w	r3, r3, #31
 8002334:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8002338:	4618      	mov	r0, r3
 800233a:	bd80      	pop	{r7, pc}
 800233c:	58024400 	.word	0x58024400
 8002340:	08002f98 	.word	0x08002f98

08002344 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002344:	b480      	push	{r7}
 8002346:	b085      	sub	sp, #20
 8002348:	af00      	add	r7, sp, #0
 800234a:	60f8      	str	r0, [r7, #12]
 800234c:	60b9      	str	r1, [r7, #8]
 800234e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	6819      	ldr	r1, [r3, #0]
 8002354:	68bb      	ldr	r3, [r7, #8]
 8002356:	fb03 f203 	mul.w	r2, r3, r3
 800235a:	4613      	mov	r3, r2
 800235c:	005b      	lsls	r3, r3, #1
 800235e:	4413      	add	r3, r2
 8002360:	43db      	mvns	r3, r3
 8002362:	ea01 0203 	and.w	r2, r1, r3
 8002366:	68bb      	ldr	r3, [r7, #8]
 8002368:	fb03 f303 	mul.w	r3, r3, r3
 800236c:	6879      	ldr	r1, [r7, #4]
 800236e:	fb01 f303 	mul.w	r3, r1, r3
 8002372:	431a      	orrs	r2, r3
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	601a      	str	r2, [r3, #0]
}
 8002378:	bf00      	nop
 800237a:	3714      	adds	r7, #20
 800237c:	46bd      	mov	sp, r7
 800237e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002382:	4770      	bx	lr

08002384 <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8002384:	b480      	push	{r7}
 8002386:	b085      	sub	sp, #20
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	685a      	ldr	r2, [r3, #4]
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	43db      	mvns	r3, r3
 8002398:	401a      	ands	r2, r3
 800239a:	68bb      	ldr	r3, [r7, #8]
 800239c:	6879      	ldr	r1, [r7, #4]
 800239e:	fb01 f303 	mul.w	r3, r1, r3
 80023a2:	431a      	orrs	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	605a      	str	r2, [r3, #4]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	60f8      	str	r0, [r7, #12]
 80023bc:	60b9      	str	r1, [r7, #8]
 80023be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	6899      	ldr	r1, [r3, #8]
 80023c4:	68bb      	ldr	r3, [r7, #8]
 80023c6:	fb03 f203 	mul.w	r2, r3, r3
 80023ca:	4613      	mov	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4413      	add	r3, r2
 80023d0:	43db      	mvns	r3, r3
 80023d2:	ea01 0203 	and.w	r2, r1, r3
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	fb03 f303 	mul.w	r3, r3, r3
 80023dc:	6879      	ldr	r1, [r7, #4]
 80023de:	fb01 f303 	mul.w	r3, r1, r3
 80023e2:	431a      	orrs	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	609a      	str	r2, [r3, #8]
}
 80023e8:	bf00      	nop
 80023ea:	3714      	adds	r7, #20
 80023ec:	46bd      	mov	sp, r7
 80023ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f2:	4770      	bx	lr

080023f4 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	60f8      	str	r0, [r7, #12]
 80023fc:	60b9      	str	r1, [r7, #8]
 80023fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	68d9      	ldr	r1, [r3, #12]
 8002404:	68bb      	ldr	r3, [r7, #8]
 8002406:	fb03 f203 	mul.w	r2, r3, r3
 800240a:	4613      	mov	r3, r2
 800240c:	005b      	lsls	r3, r3, #1
 800240e:	4413      	add	r3, r2
 8002410:	43db      	mvns	r3, r3
 8002412:	ea01 0203 	and.w	r2, r1, r3
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	fb03 f303 	mul.w	r3, r3, r3
 800241c:	6879      	ldr	r1, [r7, #4]
 800241e:	fb01 f303 	mul.w	r3, r1, r3
 8002422:	431a      	orrs	r2, r3
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	60da      	str	r2, [r3, #12]
}
 8002428:	bf00      	nop
 800242a:	3714      	adds	r7, #20
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	60f8      	str	r0, [r7, #12]
 800243c:	60b9      	str	r1, [r7, #8]
 800243e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	6a19      	ldr	r1, [r3, #32]
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	fb03 f303 	mul.w	r3, r3, r3
 800244a:	68ba      	ldr	r2, [r7, #8]
 800244c:	fb02 f303 	mul.w	r3, r2, r3
 8002450:	68ba      	ldr	r2, [r7, #8]
 8002452:	fb03 f202 	mul.w	r2, r3, r2
 8002456:	4613      	mov	r3, r2
 8002458:	011b      	lsls	r3, r3, #4
 800245a:	1a9b      	subs	r3, r3, r2
 800245c:	43db      	mvns	r3, r3
 800245e:	ea01 0203 	and.w	r2, r1, r3
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	fb03 f303 	mul.w	r3, r3, r3
 8002468:	68b9      	ldr	r1, [r7, #8]
 800246a:	fb01 f303 	mul.w	r3, r1, r3
 800246e:	68b9      	ldr	r1, [r7, #8]
 8002470:	fb01 f303 	mul.w	r3, r1, r3
 8002474:	6879      	ldr	r1, [r7, #4]
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	431a      	orrs	r2, r3
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8002480:	bf00      	nop
 8002482:	3714      	adds	r7, #20
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr

0800248c <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	60f8      	str	r0, [r7, #12]
 8002494:	60b9      	str	r1, [r7, #8]
 8002496:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	0a1b      	lsrs	r3, r3, #8
 80024a0:	68ba      	ldr	r2, [r7, #8]
 80024a2:	0a12      	lsrs	r2, r2, #8
 80024a4:	fb02 f303 	mul.w	r3, r2, r3
 80024a8:	68ba      	ldr	r2, [r7, #8]
 80024aa:	0a12      	lsrs	r2, r2, #8
 80024ac:	fb02 f303 	mul.w	r3, r2, r3
 80024b0:	68ba      	ldr	r2, [r7, #8]
 80024b2:	0a12      	lsrs	r2, r2, #8
 80024b4:	fb03 f202 	mul.w	r2, r3, r2
 80024b8:	4613      	mov	r3, r2
 80024ba:	011b      	lsls	r3, r3, #4
 80024bc:	1a9b      	subs	r3, r3, r2
 80024be:	43db      	mvns	r3, r3
 80024c0:	ea01 0203 	and.w	r2, r1, r3
 80024c4:	68bb      	ldr	r3, [r7, #8]
 80024c6:	0a1b      	lsrs	r3, r3, #8
 80024c8:	68b9      	ldr	r1, [r7, #8]
 80024ca:	0a09      	lsrs	r1, r1, #8
 80024cc:	fb01 f303 	mul.w	r3, r1, r3
 80024d0:	68b9      	ldr	r1, [r7, #8]
 80024d2:	0a09      	lsrs	r1, r1, #8
 80024d4:	fb01 f303 	mul.w	r3, r1, r3
 80024d8:	68b9      	ldr	r1, [r7, #8]
 80024da:	0a09      	lsrs	r1, r1, #8
 80024dc:	fb01 f303 	mul.w	r3, r1, r3
 80024e0:	6879      	ldr	r1, [r7, #4]
 80024e2:	fb01 f303 	mul.w	r3, r1, r3
 80024e6:	431a      	orrs	r2, r3
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 80024ec:	bf00      	nop
 80024ee:	3714      	adds	r7, #20
 80024f0:	46bd      	mov	sp, r7
 80024f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f6:	4770      	bx	lr

080024f8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80024f8:	b580      	push	{r7, lr}
 80024fa:	b088      	sub	sp, #32
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
 8002500:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002508:	693b      	ldr	r3, [r7, #16]
 800250a:	fa93 f3a3 	rbit	r3, r3
 800250e:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002514:	697b      	ldr	r3, [r7, #20]
 8002516:	2b00      	cmp	r3, #0
 8002518:	d101      	bne.n	800251e <LL_GPIO_Init+0x26>
  {
    return 32U;
 800251a:	2320      	movs	r3, #32
 800251c:	e003      	b.n	8002526 <LL_GPIO_Init+0x2e>
  }
  return __builtin_clz(value);
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	fab3 f383 	clz	r3, r3
 8002524:	b2db      	uxtb	r3, r3
 8002526:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002528:	e048      	b.n	80025bc <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	681a      	ldr	r2, [r3, #0]
 800252e:	2101      	movs	r1, #1
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	fa01 f303 	lsl.w	r3, r1, r3
 8002536:	4013      	ands	r3, r2
 8002538:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d03a      	beq.n	80025b6 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	685b      	ldr	r3, [r3, #4]
 8002544:	2b01      	cmp	r3, #1
 8002546:	d003      	beq.n	8002550 <LL_GPIO_Init+0x58>
 8002548:	683b      	ldr	r3, [r7, #0]
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	2b02      	cmp	r3, #2
 800254e:	d10e      	bne.n	800256e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	689b      	ldr	r3, [r3, #8]
 8002554:	461a      	mov	r2, r3
 8002556:	69b9      	ldr	r1, [r7, #24]
 8002558:	6878      	ldr	r0, [r7, #4]
 800255a:	f7ff ff2b 	bl	80023b4 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	6819      	ldr	r1, [r3, #0]
 8002562:	683b      	ldr	r3, [r7, #0]
 8002564:	68db      	ldr	r3, [r3, #12]
 8002566:	461a      	mov	r2, r3
 8002568:	6878      	ldr	r0, [r7, #4]
 800256a:	f7ff ff0b 	bl	8002384 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	691b      	ldr	r3, [r3, #16]
 8002572:	461a      	mov	r2, r3
 8002574:	69b9      	ldr	r1, [r7, #24]
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f7ff ff3c 	bl	80023f4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b02      	cmp	r3, #2
 8002582:	d111      	bne.n	80025a8 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002584:	69bb      	ldr	r3, [r7, #24]
 8002586:	2bff      	cmp	r3, #255	; 0xff
 8002588:	d807      	bhi.n	800259a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800258a:	683b      	ldr	r3, [r7, #0]
 800258c:	695b      	ldr	r3, [r3, #20]
 800258e:	461a      	mov	r2, r3
 8002590:	69b9      	ldr	r1, [r7, #24]
 8002592:	6878      	ldr	r0, [r7, #4]
 8002594:	f7ff ff4e 	bl	8002434 <LL_GPIO_SetAFPin_0_7>
 8002598:	e006      	b.n	80025a8 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800259a:	683b      	ldr	r3, [r7, #0]
 800259c:	695b      	ldr	r3, [r3, #20]
 800259e:	461a      	mov	r2, r3
 80025a0:	69b9      	ldr	r1, [r7, #24]
 80025a2:	6878      	ldr	r0, [r7, #4]
 80025a4:	f7ff ff72 	bl	800248c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	461a      	mov	r2, r3
 80025ae:	69b9      	ldr	r1, [r7, #24]
 80025b0:	6878      	ldr	r0, [r7, #4]
 80025b2:	f7ff fec7 	bl	8002344 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80025b6:	69fb      	ldr	r3, [r7, #28]
 80025b8:	3301      	adds	r3, #1
 80025ba:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	69fb      	ldr	r3, [r7, #28]
 80025c2:	fa22 f303 	lsr.w	r3, r2, r3
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d1af      	bne.n	800252a <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80025ca:	2300      	movs	r3, #0
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	3720      	adds	r7, #32
 80025d0:	46bd      	mov	sp, r7
 80025d2:	bd80      	pop	{r7, pc}

080025d4 <LL_TIM_SetPrescaler>:
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	6078      	str	r0, [r7, #4]
 80025dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	683a      	ldr	r2, [r7, #0]
 80025e2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr

080025f0 <LL_TIM_SetAutoReload>:
{
 80025f0:	b480      	push	{r7}
 80025f2:	b083      	sub	sp, #12
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	683a      	ldr	r2, [r7, #0]
 80025fe:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr

0800260c <LL_TIM_SetRepetitionCounter>:
{
 800260c:	b480      	push	{r7}
 800260e:	b083      	sub	sp, #12
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
 8002614:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	683a      	ldr	r2, [r7, #0]
 800261a:	631a      	str	r2, [r3, #48]	; 0x30
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_TIM_OC_SetCompareCH1>:
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	683a      	ldr	r2, [r7, #0]
 8002636:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002638:	bf00      	nop
 800263a:	370c      	adds	r7, #12
 800263c:	46bd      	mov	sp, r7
 800263e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002642:	4770      	bx	lr

08002644 <LL_TIM_OC_SetCompareCH2>:
{
 8002644:	b480      	push	{r7}
 8002646:	b083      	sub	sp, #12
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
 800264c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	683a      	ldr	r2, [r7, #0]
 8002652:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002654:	bf00      	nop
 8002656:	370c      	adds	r7, #12
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <LL_TIM_OC_SetCompareCH3>:
{
 8002660:	b480      	push	{r7}
 8002662:	b083      	sub	sp, #12
 8002664:	af00      	add	r7, sp, #0
 8002666:	6078      	str	r0, [r7, #4]
 8002668:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	683a      	ldr	r2, [r7, #0]
 800266e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002670:	bf00      	nop
 8002672:	370c      	adds	r7, #12
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <LL_TIM_OC_SetCompareCH4>:
{
 800267c:	b480      	push	{r7}
 800267e:	b083      	sub	sp, #12
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
 8002684:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	683a      	ldr	r2, [r7, #0]
 800268a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800268c:	bf00      	nop
 800268e:	370c      	adds	r7, #12
 8002690:	46bd      	mov	sp, r7
 8002692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002696:	4770      	bx	lr

08002698 <LL_TIM_OC_SetCompareCH5>:
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	683a      	ldr	r2, [r7, #0]
 80026aa:	659a      	str	r2, [r3, #88]	; 0x58
}
 80026ac:	bf00      	nop
 80026ae:	370c      	adds	r7, #12
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr

080026b8 <LL_TIM_OC_SetCompareCH6>:
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	683a      	ldr	r2, [r7, #0]
 80026c6:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80026c8:	bf00      	nop
 80026ca:	370c      	adds	r7, #12
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr

080026d4 <LL_TIM_GenerateEvent_UPDATE>:
{
 80026d4:	b480      	push	{r7}
 80026d6:	b083      	sub	sp, #12
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	695b      	ldr	r3, [r3, #20]
 80026e0:	f043 0201 	orr.w	r2, r3, #1
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	615a      	str	r2, [r3, #20]
}
 80026e8:	bf00      	nop
 80026ea:	370c      	adds	r7, #12
 80026ec:	46bd      	mov	sp, r7
 80026ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f2:	4770      	bx	lr

080026f4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	4a3d      	ldr	r2, [pc, #244]	; (80027fc <LL_TIM_Init+0x108>)
 8002708:	4293      	cmp	r3, r2
 800270a:	d013      	beq.n	8002734 <LL_TIM_Init+0x40>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002712:	d00f      	beq.n	8002734 <LL_TIM_Init+0x40>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a3a      	ldr	r2, [pc, #232]	; (8002800 <LL_TIM_Init+0x10c>)
 8002718:	4293      	cmp	r3, r2
 800271a:	d00b      	beq.n	8002734 <LL_TIM_Init+0x40>
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a39      	ldr	r2, [pc, #228]	; (8002804 <LL_TIM_Init+0x110>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d007      	beq.n	8002734 <LL_TIM_Init+0x40>
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a38      	ldr	r2, [pc, #224]	; (8002808 <LL_TIM_Init+0x114>)
 8002728:	4293      	cmp	r3, r2
 800272a:	d003      	beq.n	8002734 <LL_TIM_Init+0x40>
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	4a37      	ldr	r2, [pc, #220]	; (800280c <LL_TIM_Init+0x118>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d106      	bne.n	8002742 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4a2d      	ldr	r2, [pc, #180]	; (80027fc <LL_TIM_Init+0x108>)
 8002746:	4293      	cmp	r3, r2
 8002748:	d01f      	beq.n	800278a <LL_TIM_Init+0x96>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002750:	d01b      	beq.n	800278a <LL_TIM_Init+0x96>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a2a      	ldr	r2, [pc, #168]	; (8002800 <LL_TIM_Init+0x10c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d017      	beq.n	800278a <LL_TIM_Init+0x96>
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	4a29      	ldr	r2, [pc, #164]	; (8002804 <LL_TIM_Init+0x110>)
 800275e:	4293      	cmp	r3, r2
 8002760:	d013      	beq.n	800278a <LL_TIM_Init+0x96>
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4a28      	ldr	r2, [pc, #160]	; (8002808 <LL_TIM_Init+0x114>)
 8002766:	4293      	cmp	r3, r2
 8002768:	d00f      	beq.n	800278a <LL_TIM_Init+0x96>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	4a27      	ldr	r2, [pc, #156]	; (800280c <LL_TIM_Init+0x118>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d00b      	beq.n	800278a <LL_TIM_Init+0x96>
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	4a26      	ldr	r2, [pc, #152]	; (8002810 <LL_TIM_Init+0x11c>)
 8002776:	4293      	cmp	r3, r2
 8002778:	d007      	beq.n	800278a <LL_TIM_Init+0x96>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	4a25      	ldr	r2, [pc, #148]	; (8002814 <LL_TIM_Init+0x120>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d003      	beq.n	800278a <LL_TIM_Init+0x96>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	4a24      	ldr	r2, [pc, #144]	; (8002818 <LL_TIM_Init+0x124>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d106      	bne.n	8002798 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	68fa      	ldr	r2, [r7, #12]
 800279c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	689b      	ldr	r3, [r3, #8]
 80027a2:	4619      	mov	r1, r3
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7ff ff23 	bl	80025f0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	881b      	ldrh	r3, [r3, #0]
 80027ae:	4619      	mov	r1, r3
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f7ff ff0f 	bl	80025d4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a10      	ldr	r2, [pc, #64]	; (80027fc <LL_TIM_Init+0x108>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d00f      	beq.n	80027de <LL_TIM_Init+0xea>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4a12      	ldr	r2, [pc, #72]	; (800280c <LL_TIM_Init+0x118>)
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d00b      	beq.n	80027de <LL_TIM_Init+0xea>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	4a11      	ldr	r2, [pc, #68]	; (8002810 <LL_TIM_Init+0x11c>)
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d007      	beq.n	80027de <LL_TIM_Init+0xea>
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a10      	ldr	r2, [pc, #64]	; (8002814 <LL_TIM_Init+0x120>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d003      	beq.n	80027de <LL_TIM_Init+0xea>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a0f      	ldr	r2, [pc, #60]	; (8002818 <LL_TIM_Init+0x124>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d105      	bne.n	80027ea <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	691b      	ldr	r3, [r3, #16]
 80027e2:	4619      	mov	r1, r3
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ff11 	bl	800260c <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80027ea:	6878      	ldr	r0, [r7, #4]
 80027ec:	f7ff ff72 	bl	80026d4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3710      	adds	r7, #16
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	40010000 	.word	0x40010000
 8002800:	40000400 	.word	0x40000400
 8002804:	40000800 	.word	0x40000800
 8002808:	40000c00 	.word	0x40000c00
 800280c:	40010400 	.word	0x40010400
 8002810:	40014000 	.word	0x40014000
 8002814:	40014400 	.word	0x40014400
 8002818:	40014800 	.word	0x40014800

0800281c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800281c:	b580      	push	{r7, lr}
 800281e:	b086      	sub	sp, #24
 8002820:	af00      	add	r7, sp, #0
 8002822:	60f8      	str	r0, [r7, #12]
 8002824:	60b9      	str	r1, [r7, #8]
 8002826:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800282c:	68bb      	ldr	r3, [r7, #8]
 800282e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002832:	d045      	beq.n	80028c0 <LL_TIM_OC_Init+0xa4>
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800283a:	d848      	bhi.n	80028ce <LL_TIM_OC_Init+0xb2>
 800283c:	68bb      	ldr	r3, [r7, #8]
 800283e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002842:	d036      	beq.n	80028b2 <LL_TIM_OC_Init+0x96>
 8002844:	68bb      	ldr	r3, [r7, #8]
 8002846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800284a:	d840      	bhi.n	80028ce <LL_TIM_OC_Init+0xb2>
 800284c:	68bb      	ldr	r3, [r7, #8]
 800284e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002852:	d027      	beq.n	80028a4 <LL_TIM_OC_Init+0x88>
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800285a:	d838      	bhi.n	80028ce <LL_TIM_OC_Init+0xb2>
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002862:	d018      	beq.n	8002896 <LL_TIM_OC_Init+0x7a>
 8002864:	68bb      	ldr	r3, [r7, #8]
 8002866:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800286a:	d830      	bhi.n	80028ce <LL_TIM_OC_Init+0xb2>
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	2b01      	cmp	r3, #1
 8002870:	d003      	beq.n	800287a <LL_TIM_OC_Init+0x5e>
 8002872:	68bb      	ldr	r3, [r7, #8]
 8002874:	2b10      	cmp	r3, #16
 8002876:	d007      	beq.n	8002888 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002878:	e029      	b.n	80028ce <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800287a:	6879      	ldr	r1, [r7, #4]
 800287c:	68f8      	ldr	r0, [r7, #12]
 800287e:	f000 f897 	bl	80029b0 <OC1Config>
 8002882:	4603      	mov	r3, r0
 8002884:	75fb      	strb	r3, [r7, #23]
      break;
 8002886:	e023      	b.n	80028d0 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002888:	6879      	ldr	r1, [r7, #4]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	f000 f910 	bl	8002ab0 <OC2Config>
 8002890:	4603      	mov	r3, r0
 8002892:	75fb      	strb	r3, [r7, #23]
      break;
 8002894:	e01c      	b.n	80028d0 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002896:	6879      	ldr	r1, [r7, #4]
 8002898:	68f8      	ldr	r0, [r7, #12]
 800289a:	f000 f98d 	bl	8002bb8 <OC3Config>
 800289e:	4603      	mov	r3, r0
 80028a0:	75fb      	strb	r3, [r7, #23]
      break;
 80028a2:	e015      	b.n	80028d0 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f000 fa0a 	bl	8002cc0 <OC4Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	75fb      	strb	r3, [r7, #23]
      break;
 80028b0:	e00e      	b.n	80028d0 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80028b2:	6879      	ldr	r1, [r7, #4]
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f000 fa6f 	bl	8002d98 <OC5Config>
 80028ba:	4603      	mov	r3, r0
 80028bc:	75fb      	strb	r3, [r7, #23]
      break;
 80028be:	e007      	b.n	80028d0 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80028c0:	6879      	ldr	r1, [r7, #4]
 80028c2:	68f8      	ldr	r0, [r7, #12]
 80028c4:	f000 facc 	bl	8002e60 <OC6Config>
 80028c8:	4603      	mov	r3, r0
 80028ca:	75fb      	strb	r3, [r7, #23]
      break;
 80028cc:	e000      	b.n	80028d0 <LL_TIM_OC_Init+0xb4>
      break;
 80028ce:	bf00      	nop
  }

  return result;
 80028d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	3718      	adds	r7, #24
 80028d6:	46bd      	mov	sp, r7
 80028d8:	bd80      	pop	{r7, pc}
	...

080028dc <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80028dc:	b480      	push	{r7}
 80028de:	b085      	sub	sp, #20
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
 80028e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 80028e6:	2300      	movs	r3, #0
 80028e8:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80028f0:	683a      	ldr	r2, [r7, #0]
 80028f2:	7b12      	ldrb	r2, [r2, #12]
 80028f4:	4313      	orrs	r3, r2
 80028f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	689b      	ldr	r3, [r3, #8]
 8002902:	4313      	orrs	r3, r2
 8002904:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	4313      	orrs	r3, r2
 8002912:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	4313      	orrs	r3, r2
 8002920:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002928:	683a      	ldr	r2, [r7, #0]
 800292a:	89d2      	ldrh	r2, [r2, #14]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	691b      	ldr	r3, [r3, #16]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002948:	4313      	orrs	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	695b      	ldr	r3, [r3, #20]
 8002956:	4313      	orrs	r3, r2
 8002958:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
#endif /*TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4a12      	ldr	r2, [pc, #72]	; (80029a8 <LL_TIM_BDTR_Init+0xcc>)
 800295e:	4293      	cmp	r3, r2
 8002960:	d003      	beq.n	800296a <LL_TIM_BDTR_Init+0x8e>
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	4a11      	ldr	r2, [pc, #68]	; (80029ac <LL_TIM_BDTR_Init+0xd0>)
 8002966:	4293      	cmp	r3, r2
 8002968:	d114      	bne.n	8002994 <LL_TIM_BDTR_Init+0xb8>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));
#endif /*TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	4313      	orrs	r3, r2
 8002976:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	69db      	ldr	r3, [r3, #28]
 8002990:	4313      	orrs	r3, r2
 8002992:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
#endif /*TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	68fa      	ldr	r2, [r7, #12]
 8002998:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr
 80029a8:	40010000 	.word	0x40010000
 80029ac:	40010400 	.word	0x40010400

080029b0 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b086      	sub	sp, #24
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
 80029b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	6a1b      	ldr	r3, [r3, #32]
 80029be:	f023 0201 	bic.w	r2, r3, #1
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a1b      	ldr	r3, [r3, #32]
 80029ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	699b      	ldr	r3, [r3, #24]
 80029d6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	f023 0303 	bic.w	r3, r3, #3
 80029de:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80029e0:	68fa      	ldr	r2, [r7, #12]
 80029e2:	4b2d      	ldr	r3, [pc, #180]	; (8002a98 <OC1Config+0xe8>)
 80029e4:	4013      	ands	r3, r2
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	6812      	ldr	r2, [r2, #0]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f023 0202 	bic.w	r2, r3, #2
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	691b      	ldr	r3, [r3, #16]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80029fc:	697b      	ldr	r3, [r7, #20]
 80029fe:	f023 0201 	bic.w	r2, r3, #1
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	4a23      	ldr	r2, [pc, #140]	; (8002a9c <OC1Config+0xec>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d00f      	beq.n	8002a32 <OC1Config+0x82>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <OC1Config+0xf0>)
 8002a16:	4293      	cmp	r3, r2
 8002a18:	d00b      	beq.n	8002a32 <OC1Config+0x82>
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	4a21      	ldr	r2, [pc, #132]	; (8002aa4 <OC1Config+0xf4>)
 8002a1e:	4293      	cmp	r3, r2
 8002a20:	d007      	beq.n	8002a32 <OC1Config+0x82>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a20      	ldr	r2, [pc, #128]	; (8002aa8 <OC1Config+0xf8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d003      	beq.n	8002a32 <OC1Config+0x82>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a1f      	ldr	r2, [pc, #124]	; (8002aac <OC1Config+0xfc>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d11e      	bne.n	8002a70 <OC1Config+0xc0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002a32:	697b      	ldr	r3, [r7, #20]
 8002a34:	f023 0208 	bic.w	r2, r3, #8
 8002a38:	683b      	ldr	r3, [r7, #0]
 8002a3a:	695b      	ldr	r3, [r3, #20]
 8002a3c:	009b      	lsls	r3, r3, #2
 8002a3e:	4313      	orrs	r3, r2
 8002a40:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002a42:	697b      	ldr	r3, [r7, #20]
 8002a44:	f023 0204 	bic.w	r2, r3, #4
 8002a48:	683b      	ldr	r3, [r7, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	009b      	lsls	r3, r3, #2
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	699b      	ldr	r3, [r3, #24]
 8002a5c:	4313      	orrs	r3, r2
 8002a5e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002a60:	693b      	ldr	r3, [r7, #16]
 8002a62:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	69db      	ldr	r3, [r3, #28]
 8002a6a:	005b      	lsls	r3, r3, #1
 8002a6c:	4313      	orrs	r3, r2
 8002a6e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	693a      	ldr	r2, [r7, #16]
 8002a74:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	68fa      	ldr	r2, [r7, #12]
 8002a7a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	4619      	mov	r1, r3
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7ff fdd0 	bl	8002628 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	697a      	ldr	r2, [r7, #20]
 8002a8c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3718      	adds	r7, #24
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}
 8002a98:	fffeff8f 	.word	0xfffeff8f
 8002a9c:	40010000 	.word	0x40010000
 8002aa0:	40010400 	.word	0x40010400
 8002aa4:	40014000 	.word	0x40014000
 8002aa8:	40014400 	.word	0x40014400
 8002aac:	40014800 	.word	0x40014800

08002ab0 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b086      	sub	sp, #24
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
 8002ab8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	6a1b      	ldr	r3, [r3, #32]
 8002abe:	f023 0210 	bic.w	r2, r3, #16
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6a1b      	ldr	r3, [r3, #32]
 8002aca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	699b      	ldr	r3, [r3, #24]
 8002ad6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ade:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002ae0:	68fa      	ldr	r2, [r7, #12]
 8002ae2:	4b2f      	ldr	r3, [pc, #188]	; (8002ba0 <OC2Config+0xf0>)
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	6812      	ldr	r2, [r2, #0]
 8002aea:	0212      	lsls	r2, r2, #8
 8002aec:	4313      	orrs	r3, r2
 8002aee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	f023 0220 	bic.w	r2, r3, #32
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	691b      	ldr	r3, [r3, #16]
 8002afa:	011b      	lsls	r3, r3, #4
 8002afc:	4313      	orrs	r3, r2
 8002afe:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002b00:	697b      	ldr	r3, [r7, #20]
 8002b02:	f023 0210 	bic.w	r2, r3, #16
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	011b      	lsls	r3, r3, #4
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a24      	ldr	r2, [pc, #144]	; (8002ba4 <OC2Config+0xf4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d00f      	beq.n	8002b38 <OC2Config+0x88>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a23      	ldr	r2, [pc, #140]	; (8002ba8 <OC2Config+0xf8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d00b      	beq.n	8002b38 <OC2Config+0x88>
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	4a22      	ldr	r2, [pc, #136]	; (8002bac <OC2Config+0xfc>)
 8002b24:	4293      	cmp	r3, r2
 8002b26:	d007      	beq.n	8002b38 <OC2Config+0x88>
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4a21      	ldr	r2, [pc, #132]	; (8002bb0 <OC2Config+0x100>)
 8002b2c:	4293      	cmp	r3, r2
 8002b2e:	d003      	beq.n	8002b38 <OC2Config+0x88>
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	4a20      	ldr	r2, [pc, #128]	; (8002bb4 <OC2Config+0x104>)
 8002b34:	4293      	cmp	r3, r2
 8002b36:	d11f      	bne.n	8002b78 <OC2Config+0xc8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002b3e:	683b      	ldr	r3, [r7, #0]
 8002b40:	695b      	ldr	r3, [r3, #20]
 8002b42:	019b      	lsls	r3, r3, #6
 8002b44:	4313      	orrs	r3, r2
 8002b46:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	019b      	lsls	r3, r3, #6
 8002b54:	4313      	orrs	r3, r2
 8002b56:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	699b      	ldr	r3, [r3, #24]
 8002b62:	009b      	lsls	r3, r3, #2
 8002b64:	4313      	orrs	r3, r2
 8002b66:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002b68:	693b      	ldr	r3, [r7, #16]
 8002b6a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	69db      	ldr	r3, [r3, #28]
 8002b72:	00db      	lsls	r3, r3, #3
 8002b74:	4313      	orrs	r3, r2
 8002b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	693a      	ldr	r2, [r7, #16]
 8002b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002b84:	683b      	ldr	r3, [r7, #0]
 8002b86:	68db      	ldr	r3, [r3, #12]
 8002b88:	4619      	mov	r1, r3
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	f7ff fd5a 	bl	8002644 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	697a      	ldr	r2, [r7, #20]
 8002b94:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b96:	2300      	movs	r3, #0
}
 8002b98:	4618      	mov	r0, r3
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	feff8fff 	.word	0xfeff8fff
 8002ba4:	40010000 	.word	0x40010000
 8002ba8:	40010400 	.word	0x40010400
 8002bac:	40014000 	.word	0x40014000
 8002bb0:	40014400 	.word	0x40014400
 8002bb4:	40014800 	.word	0x40014800

08002bb8 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b086      	sub	sp, #24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6a1b      	ldr	r3, [r3, #32]
 8002bc6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	69db      	ldr	r3, [r3, #28]
 8002bde:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0303 	bic.w	r3, r3, #3
 8002be6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002be8:	68fa      	ldr	r2, [r7, #12]
 8002bea:	4b2f      	ldr	r3, [pc, #188]	; (8002ca8 <OC3Config+0xf0>)
 8002bec:	4013      	ands	r3, r2
 8002bee:	683a      	ldr	r2, [r7, #0]
 8002bf0:	6812      	ldr	r2, [r2, #0]
 8002bf2:	4313      	orrs	r3, r2
 8002bf4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002bf6:	697b      	ldr	r3, [r7, #20]
 8002bf8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	691b      	ldr	r3, [r3, #16]
 8002c00:	021b      	lsls	r3, r3, #8
 8002c02:	4313      	orrs	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	021b      	lsls	r3, r3, #8
 8002c12:	4313      	orrs	r3, r2
 8002c14:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4a24      	ldr	r2, [pc, #144]	; (8002cac <OC3Config+0xf4>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d00f      	beq.n	8002c3e <OC3Config+0x86>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	4a23      	ldr	r2, [pc, #140]	; (8002cb0 <OC3Config+0xf8>)
 8002c22:	4293      	cmp	r3, r2
 8002c24:	d00b      	beq.n	8002c3e <OC3Config+0x86>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a22      	ldr	r2, [pc, #136]	; (8002cb4 <OC3Config+0xfc>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d007      	beq.n	8002c3e <OC3Config+0x86>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a21      	ldr	r2, [pc, #132]	; (8002cb8 <OC3Config+0x100>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d003      	beq.n	8002c3e <OC3Config+0x86>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a20      	ldr	r2, [pc, #128]	; (8002cbc <OC3Config+0x104>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d11f      	bne.n	8002c7e <OC3Config+0xc6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	695b      	ldr	r3, [r3, #20]
 8002c48:	029b      	lsls	r3, r3, #10
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002c4e:	697b      	ldr	r3, [r7, #20]
 8002c50:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	689b      	ldr	r3, [r3, #8]
 8002c58:	029b      	lsls	r3, r3, #10
 8002c5a:	4313      	orrs	r3, r2
 8002c5c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002c5e:	693b      	ldr	r3, [r7, #16]
 8002c60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	699b      	ldr	r3, [r3, #24]
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	69db      	ldr	r3, [r3, #28]
 8002c78:	015b      	lsls	r3, r3, #5
 8002c7a:	4313      	orrs	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	693a      	ldr	r2, [r7, #16]
 8002c82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	4619      	mov	r1, r3
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f7ff fce5 	bl	8002660 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	697a      	ldr	r2, [r7, #20]
 8002c9a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	4618      	mov	r0, r3
 8002ca0:	3718      	adds	r7, #24
 8002ca2:	46bd      	mov	sp, r7
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	fffeff8f 	.word	0xfffeff8f
 8002cac:	40010000 	.word	0x40010000
 8002cb0:	40010400 	.word	0x40010400
 8002cb4:	40014000 	.word	0x40014000
 8002cb8:	40014400 	.word	0x40014400
 8002cbc:	40014800 	.word	0x40014800

08002cc0 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b086      	sub	sp, #24
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
 8002cc8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	6a1b      	ldr	r3, [r3, #32]
 8002cce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6a1b      	ldr	r3, [r3, #32]
 8002cda:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	685b      	ldr	r3, [r3, #4]
 8002ce0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	69db      	ldr	r3, [r3, #28]
 8002ce6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002cf0:	68fa      	ldr	r2, [r7, #12]
 8002cf2:	4b23      	ldr	r3, [pc, #140]	; (8002d80 <OC4Config+0xc0>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	0212      	lsls	r2, r2, #8
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002d00:	693b      	ldr	r3, [r7, #16]
 8002d02:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	031b      	lsls	r3, r3, #12
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002d10:	693b      	ldr	r3, [r7, #16]
 8002d12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	031b      	lsls	r3, r3, #12
 8002d1c:	4313      	orrs	r3, r2
 8002d1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	4a18      	ldr	r2, [pc, #96]	; (8002d84 <OC4Config+0xc4>)
 8002d24:	4293      	cmp	r3, r2
 8002d26:	d00f      	beq.n	8002d48 <OC4Config+0x88>
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a17      	ldr	r2, [pc, #92]	; (8002d88 <OC4Config+0xc8>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00b      	beq.n	8002d48 <OC4Config+0x88>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a16      	ldr	r2, [pc, #88]	; (8002d8c <OC4Config+0xcc>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d007      	beq.n	8002d48 <OC4Config+0x88>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a15      	ldr	r2, [pc, #84]	; (8002d90 <OC4Config+0xd0>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d003      	beq.n	8002d48 <OC4Config+0x88>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a14      	ldr	r2, [pc, #80]	; (8002d94 <OC4Config+0xd4>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d107      	bne.n	8002d58 <OC4Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	699b      	ldr	r3, [r3, #24]
 8002d52:	019b      	lsls	r3, r3, #6
 8002d54:	4313      	orrs	r3, r2
 8002d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	697a      	ldr	r2, [r7, #20]
 8002d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	68fa      	ldr	r2, [r7, #12]
 8002d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4619      	mov	r1, r3
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7ff fc86 	bl	800267c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	693a      	ldr	r2, [r7, #16]
 8002d74:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002d76:	2300      	movs	r3, #0
}
 8002d78:	4618      	mov	r0, r3
 8002d7a:	3718      	adds	r7, #24
 8002d7c:	46bd      	mov	sp, r7
 8002d7e:	bd80      	pop	{r7, pc}
 8002d80:	feff8fff 	.word	0xfeff8fff
 8002d84:	40010000 	.word	0x40010000
 8002d88:	40010400 	.word	0x40010400
 8002d8c:	40014000 	.word	0x40014000
 8002d90:	40014400 	.word	0x40014400
 8002d94:	40014800 	.word	0x40014800

08002d98 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b084      	sub	sp, #16
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
 8002da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6a1b      	ldr	r3, [r3, #32]
 8002da6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	6a1b      	ldr	r3, [r3, #32]
 8002db2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002db8:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002dba:	68ba      	ldr	r2, [r7, #8]
 8002dbc:	4b22      	ldr	r3, [pc, #136]	; (8002e48 <OC5Config+0xb0>)
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	6812      	ldr	r2, [r2, #0]
 8002dc4:	4313      	orrs	r3, r2
 8002dc6:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	041b      	lsls	r3, r3, #16
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002dde:	683b      	ldr	r3, [r7, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	041b      	lsls	r3, r3, #16
 8002de4:	4313      	orrs	r3, r2
 8002de6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <OC5Config+0xb4>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d00f      	beq.n	8002e10 <OC5Config+0x78>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	4a17      	ldr	r2, [pc, #92]	; (8002e50 <OC5Config+0xb8>)
 8002df4:	4293      	cmp	r3, r2
 8002df6:	d00b      	beq.n	8002e10 <OC5Config+0x78>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	4a16      	ldr	r2, [pc, #88]	; (8002e54 <OC5Config+0xbc>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d007      	beq.n	8002e10 <OC5Config+0x78>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a15      	ldr	r2, [pc, #84]	; (8002e58 <OC5Config+0xc0>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <OC5Config+0x78>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	4a14      	ldr	r2, [pc, #80]	; (8002e5c <OC5Config+0xc4>)
 8002e0c:	4293      	cmp	r3, r2
 8002e0e:	d109      	bne.n	8002e24 <OC5Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	021b      	lsls	r3, r3, #8
 8002e1e:	431a      	orrs	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	4619      	mov	r1, r3
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f7ff fc31 	bl	8002698 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68fa      	ldr	r2, [r7, #12]
 8002e3a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	fffeff8f 	.word	0xfffeff8f
 8002e4c:	40010000 	.word	0x40010000
 8002e50:	40010400 	.word	0x40010400
 8002e54:	40014000 	.word	0x40014000
 8002e58:	40014400 	.word	0x40014400
 8002e5c:	40014800 	.word	0x40014800

08002e60 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	6a1b      	ldr	r3, [r3, #32]
 8002e6e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6a1b      	ldr	r3, [r3, #32]
 8002e7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e80:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	4b22      	ldr	r3, [pc, #136]	; (8002f10 <OC6Config+0xb0>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	6812      	ldr	r2, [r2, #0]
 8002e8c:	0212      	lsls	r2, r2, #8
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	691b      	ldr	r3, [r3, #16]
 8002e9c:	051b      	lsls	r3, r3, #20
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	685b      	ldr	r3, [r3, #4]
 8002eac:	051b      	lsls	r3, r3, #20
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a17      	ldr	r2, [pc, #92]	; (8002f14 <OC6Config+0xb4>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d00f      	beq.n	8002eda <OC6Config+0x7a>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a16      	ldr	r2, [pc, #88]	; (8002f18 <OC6Config+0xb8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d00b      	beq.n	8002eda <OC6Config+0x7a>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <OC6Config+0xbc>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d007      	beq.n	8002eda <OC6Config+0x7a>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a14      	ldr	r2, [pc, #80]	; (8002f20 <OC6Config+0xc0>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d003      	beq.n	8002eda <OC6Config+0x7a>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a13      	ldr	r2, [pc, #76]	; (8002f24 <OC6Config+0xc4>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d109      	bne.n	8002eee <OC6Config+0x8e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	685b      	ldr	r3, [r3, #4]
 8002ede:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002ee2:	683b      	ldr	r3, [r7, #0]
 8002ee4:	699b      	ldr	r3, [r3, #24]
 8002ee6:	029b      	lsls	r3, r3, #10
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68ba      	ldr	r2, [r7, #8]
 8002ef2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68db      	ldr	r3, [r3, #12]
 8002ef8:	4619      	mov	r1, r3
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f7ff fbdc 	bl	80026b8 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68fa      	ldr	r2, [r7, #12]
 8002f04:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f06:	2300      	movs	r3, #0
}
 8002f08:	4618      	mov	r0, r3
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	feff8fff 	.word	0xfeff8fff
 8002f14:	40010000 	.word	0x40010000
 8002f18:	40010400 	.word	0x40010400
 8002f1c:	40014000 	.word	0x40014000
 8002f20:	40014400 	.word	0x40014400
 8002f24:	40014800 	.word	0x40014800

08002f28 <memset>:
 8002f28:	4402      	add	r2, r0
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d100      	bne.n	8002f32 <memset+0xa>
 8002f30:	4770      	bx	lr
 8002f32:	f803 1b01 	strb.w	r1, [r3], #1
 8002f36:	e7f9      	b.n	8002f2c <memset+0x4>

08002f38 <__libc_init_array>:
 8002f38:	b570      	push	{r4, r5, r6, lr}
 8002f3a:	4d0d      	ldr	r5, [pc, #52]	; (8002f70 <__libc_init_array+0x38>)
 8002f3c:	4c0d      	ldr	r4, [pc, #52]	; (8002f74 <__libc_init_array+0x3c>)
 8002f3e:	1b64      	subs	r4, r4, r5
 8002f40:	10a4      	asrs	r4, r4, #2
 8002f42:	2600      	movs	r6, #0
 8002f44:	42a6      	cmp	r6, r4
 8002f46:	d109      	bne.n	8002f5c <__libc_init_array+0x24>
 8002f48:	4d0b      	ldr	r5, [pc, #44]	; (8002f78 <__libc_init_array+0x40>)
 8002f4a:	4c0c      	ldr	r4, [pc, #48]	; (8002f7c <__libc_init_array+0x44>)
 8002f4c:	f000 f818 	bl	8002f80 <_init>
 8002f50:	1b64      	subs	r4, r4, r5
 8002f52:	10a4      	asrs	r4, r4, #2
 8002f54:	2600      	movs	r6, #0
 8002f56:	42a6      	cmp	r6, r4
 8002f58:	d105      	bne.n	8002f66 <__libc_init_array+0x2e>
 8002f5a:	bd70      	pop	{r4, r5, r6, pc}
 8002f5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f60:	4798      	blx	r3
 8002f62:	3601      	adds	r6, #1
 8002f64:	e7ee      	b.n	8002f44 <__libc_init_array+0xc>
 8002f66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f6a:	4798      	blx	r3
 8002f6c:	3601      	adds	r6, #1
 8002f6e:	e7f2      	b.n	8002f56 <__libc_init_array+0x1e>
 8002f70:	08002fc0 	.word	0x08002fc0
 8002f74:	08002fc0 	.word	0x08002fc0
 8002f78:	08002fc0 	.word	0x08002fc0
 8002f7c:	08002fc4 	.word	0x08002fc4

08002f80 <_init>:
 8002f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f82:	bf00      	nop
 8002f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f86:	bc08      	pop	{r3}
 8002f88:	469e      	mov	lr, r3
 8002f8a:	4770      	bx	lr

08002f8c <_fini>:
 8002f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f8e:	bf00      	nop
 8002f90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f92:	bc08      	pop	{r3}
 8002f94:	469e      	mov	lr, r3
 8002f96:	4770      	bx	lr
