
adctest_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004adc  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  08004d74  08004d74  00014d74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d9c  08004d9c  00020090  2**0
                  CONTENTS
  4 .ARM          00000000  08004d9c  08004d9c  00020090  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004d9c  08004d9c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d9c  08004d9c  00014d9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004da0  08004da0  00014da0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000088  24000000  08004da4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RAM_D2       00000008  24000088  08004e2c  00020088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000118  24000090  08004e34  00020090  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  240001a8  08004e34  000201a8  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000200be  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000d039  00000000  00000000  00020101  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001f47  00000000  00000000  0002d13a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000b00  00000000  00000000  0002f088  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000080e  00000000  00000000  0002fb88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003188f  00000000  00000000  00030396  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000b9cc  00000000  00000000  00061c25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011e842  00000000  00000000  0006d5f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002c78  00000000  00000000  0018be34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000063  00000000  00000000  0018eaac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	24000090 	.word	0x24000090
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08004d5c 	.word	0x08004d5c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000094 	.word	0x24000094
 80002d4:	08004d5c 	.word	0x08004d5c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000404:	b480      	push	{r7}
 8000406:	b087      	sub	sp, #28
 8000408:	af00      	add	r7, sp, #0
 800040a:	60f8      	str	r0, [r7, #12]
 800040c:	60b9      	str	r1, [r7, #8]
 800040e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8000410:	68fb      	ldr	r3, [r7, #12]
 8000412:	3330      	adds	r3, #48	; 0x30
 8000414:	461a      	mov	r2, r3
 8000416:	68bb      	ldr	r3, [r7, #8]
 8000418:	0a1b      	lsrs	r3, r3, #8
 800041a:	009b      	lsls	r3, r3, #2
 800041c:	f003 030c 	and.w	r3, r3, #12
 8000420:	4413      	add	r3, r2
 8000422:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	681a      	ldr	r2, [r3, #0]
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	f003 031f 	and.w	r3, r3, #31
 800042e:	211f      	movs	r1, #31
 8000430:	fa01 f303 	lsl.w	r3, r1, r3
 8000434:	43db      	mvns	r3, r3
 8000436:	401a      	ands	r2, r3
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	0e9b      	lsrs	r3, r3, #26
 800043c:	f003 011f 	and.w	r1, r3, #31
 8000440:	68bb      	ldr	r3, [r7, #8]
 8000442:	f003 031f 	and.w	r3, r3, #31
 8000446:	fa01 f303 	lsl.w	r3, r1, r3
 800044a:	431a      	orrs	r2, r3
 800044c:	697b      	ldr	r3, [r7, #20]
 800044e:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000450:	bf00      	nop
 8000452:	371c      	adds	r7, #28
 8000454:	46bd      	mov	sp, r7
 8000456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800045a:	4770      	bx	lr

0800045c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800045c:	b480      	push	{r7}
 800045e:	b087      	sub	sp, #28
 8000460:	af00      	add	r7, sp, #0
 8000462:	60f8      	str	r0, [r7, #12]
 8000464:	60b9      	str	r1, [r7, #8]
 8000466:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8000468:	68fb      	ldr	r3, [r7, #12]
 800046a:	3314      	adds	r3, #20
 800046c:	461a      	mov	r2, r3
 800046e:	68bb      	ldr	r3, [r7, #8]
 8000470:	0e5b      	lsrs	r3, r3, #25
 8000472:	009b      	lsls	r3, r3, #2
 8000474:	f003 0304 	and.w	r3, r3, #4
 8000478:	4413      	add	r3, r2
 800047a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	681a      	ldr	r2, [r3, #0]
 8000480:	68bb      	ldr	r3, [r7, #8]
 8000482:	0d1b      	lsrs	r3, r3, #20
 8000484:	f003 031f 	and.w	r3, r3, #31
 8000488:	2107      	movs	r1, #7
 800048a:	fa01 f303 	lsl.w	r3, r1, r3
 800048e:	43db      	mvns	r3, r3
 8000490:	401a      	ands	r2, r3
 8000492:	68bb      	ldr	r3, [r7, #8]
 8000494:	0d1b      	lsrs	r3, r3, #20
 8000496:	f003 031f 	and.w	r3, r3, #31
 800049a:	6879      	ldr	r1, [r7, #4]
 800049c:	fa01 f303 	lsl.w	r3, r1, r3
 80004a0:	431a      	orrs	r2, r3
 80004a2:	697b      	ldr	r3, [r7, #20]
 80004a4:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80004a6:	bf00      	nop
 80004a8:	371c      	adds	r7, #28
 80004aa:	46bd      	mov	sp, r7
 80004ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b0:	4770      	bx	lr
	...

080004b4 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80004b4:	b480      	push	{r7}
 80004b6:	b085      	sub	sp, #20
 80004b8:	af00      	add	r7, sp, #0
 80004ba:	60f8      	str	r0, [r7, #12]
 80004bc:	60b9      	str	r1, [r7, #8]
 80004be:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 80004c0:	68fb      	ldr	r3, [r7, #12]
 80004c2:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 80004c6:	68bb      	ldr	r3, [r7, #8]
 80004c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80004cc:	43db      	mvns	r3, r3
 80004ce:	401a      	ands	r2, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	f003 0318 	and.w	r3, r3, #24
 80004d6:	4908      	ldr	r1, [pc, #32]	; (80004f8 <LL_ADC_SetChannelSingleDiff+0x44>)
 80004d8:	40d9      	lsrs	r1, r3
 80004da:	68bb      	ldr	r3, [r7, #8]
 80004dc:	400b      	ands	r3, r1
 80004de:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80004e2:	431a      	orrs	r2, r3
 80004e4:	68fb      	ldr	r3, [r7, #12]
 80004e6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80004ea:	bf00      	nop
 80004ec:	3714      	adds	r7, #20
 80004ee:	46bd      	mov	sp, r7
 80004f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f4:	4770      	bx	lr
 80004f6:	bf00      	nop
 80004f8:	000fffff 	.word	0x000fffff

080004fc <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 80004fc:	b480      	push	{r7}
 80004fe:	b083      	sub	sp, #12
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
 8000504:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	691a      	ldr	r2, [r3, #16]
 800050a:	4b06      	ldr	r3, [pc, #24]	; (8000524 <LL_ADC_SetOverSamplingScope+0x28>)
 800050c:	4013      	ands	r3, r2
 800050e:	683a      	ldr	r2, [r7, #0]
 8000510:	431a      	orrs	r2, r3
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	611a      	str	r2, [r3, #16]
}
 8000516:	bf00      	nop
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
 8000522:	bf00      	nop
 8000524:	fffffbfc 	.word	0xfffffbfc

08000528 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	689a      	ldr	r2, [r3, #8]
 8000534:	4b04      	ldr	r3, [pc, #16]	; (8000548 <LL_ADC_DisableDeepPowerDown+0x20>)
 8000536:	4013      	ands	r3, r2
 8000538:	687a      	ldr	r2, [r7, #4]
 800053a:	6093      	str	r3, [r2, #8]
}
 800053c:	bf00      	nop
 800053e:	370c      	adds	r7, #12
 8000540:	46bd      	mov	sp, r7
 8000542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000546:	4770      	bx	lr
 8000548:	5fffffc0 	.word	0x5fffffc0

0800054c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800054c:	b480      	push	{r7}
 800054e:	b083      	sub	sp, #12
 8000550:	af00      	add	r7, sp, #0
 8000552:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	689a      	ldr	r2, [r3, #8]
 8000558:	4b05      	ldr	r3, [pc, #20]	; (8000570 <LL_ADC_EnableInternalRegulator+0x24>)
 800055a:	4013      	ands	r3, r2
 800055c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8000560:	687b      	ldr	r3, [r7, #4]
 8000562:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000564:	bf00      	nop
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr
 8000570:	6fffffc0 	.word	0x6fffffc0

08000574 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8000574:	b480      	push	{r7}
 8000576:	b087      	sub	sp, #28
 8000578:	af00      	add	r7, sp, #0
 800057a:	60f8      	str	r0, [r7, #12]
 800057c:	60b9      	str	r1, [r7, #8]
 800057e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000580:	68fb      	ldr	r3, [r7, #12]
 8000582:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 8000584:	4a0d      	ldr	r2, [pc, #52]	; (80005bc <LL_DMA_SetDataTransferDirection+0x48>)
 8000586:	68bb      	ldr	r3, [r7, #8]
 8000588:	4413      	add	r3, r2
 800058a:	781b      	ldrb	r3, [r3, #0]
 800058c:	461a      	mov	r2, r3
 800058e:	697b      	ldr	r3, [r7, #20]
 8000590:	4413      	add	r3, r2
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000598:	4908      	ldr	r1, [pc, #32]	; (80005bc <LL_DMA_SetDataTransferDirection+0x48>)
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	440b      	add	r3, r1
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4619      	mov	r1, r3
 80005a2:	697b      	ldr	r3, [r7, #20]
 80005a4:	440b      	add	r3, r1
 80005a6:	4619      	mov	r1, r3
 80005a8:	687b      	ldr	r3, [r7, #4]
 80005aa:	4313      	orrs	r3, r2
 80005ac:	600b      	str	r3, [r1, #0]
}
 80005ae:	bf00      	nop
 80005b0:	371c      	adds	r7, #28
 80005b2:	46bd      	mov	sp, r7
 80005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop
 80005bc:	08004d74 	.word	0x08004d74

080005c0 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 80005c0:	b480      	push	{r7}
 80005c2:	b087      	sub	sp, #28
 80005c4:	af00      	add	r7, sp, #0
 80005c6:	60f8      	str	r0, [r7, #12]
 80005c8:	60b9      	str	r1, [r7, #8]
 80005ca:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80005cc:	68fb      	ldr	r3, [r7, #12]
 80005ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80005d0:	4a0d      	ldr	r2, [pc, #52]	; (8000608 <LL_DMA_SetMode+0x48>)
 80005d2:	68bb      	ldr	r3, [r7, #8]
 80005d4:	4413      	add	r3, r2
 80005d6:	781b      	ldrb	r3, [r3, #0]
 80005d8:	461a      	mov	r2, r3
 80005da:	697b      	ldr	r3, [r7, #20]
 80005dc:	4413      	add	r3, r2
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80005e4:	4908      	ldr	r1, [pc, #32]	; (8000608 <LL_DMA_SetMode+0x48>)
 80005e6:	68bb      	ldr	r3, [r7, #8]
 80005e8:	440b      	add	r3, r1
 80005ea:	781b      	ldrb	r3, [r3, #0]
 80005ec:	4619      	mov	r1, r3
 80005ee:	697b      	ldr	r3, [r7, #20]
 80005f0:	440b      	add	r3, r1
 80005f2:	4619      	mov	r1, r3
 80005f4:	687b      	ldr	r3, [r7, #4]
 80005f6:	4313      	orrs	r3, r2
 80005f8:	600b      	str	r3, [r1, #0]
}
 80005fa:	bf00      	nop
 80005fc:	371c      	adds	r7, #28
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	08004d74 	.word	0x08004d74

0800060c <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 800060c:	b480      	push	{r7}
 800060e:	b087      	sub	sp, #28
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 800061c:	4a0d      	ldr	r2, [pc, #52]	; (8000654 <LL_DMA_SetPeriphIncMode+0x48>)
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	4413      	add	r3, r2
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	461a      	mov	r2, r3
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	4413      	add	r3, r2
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000630:	4908      	ldr	r1, [pc, #32]	; (8000654 <LL_DMA_SetPeriphIncMode+0x48>)
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	440b      	add	r3, r1
 8000636:	781b      	ldrb	r3, [r3, #0]
 8000638:	4619      	mov	r1, r3
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	440b      	add	r3, r1
 800063e:	4619      	mov	r1, r3
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	4313      	orrs	r3, r2
 8000644:	600b      	str	r3, [r1, #0]
}
 8000646:	bf00      	nop
 8000648:	371c      	adds	r7, #28
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	08004d74 	.word	0x08004d74

08000658 <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000658:	b480      	push	{r7}
 800065a:	b087      	sub	sp, #28
 800065c:	af00      	add	r7, sp, #0
 800065e:	60f8      	str	r0, [r7, #12]
 8000660:	60b9      	str	r1, [r7, #8]
 8000662:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000664:	68fb      	ldr	r3, [r7, #12]
 8000666:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 8000668:	4a0d      	ldr	r2, [pc, #52]	; (80006a0 <LL_DMA_SetMemoryIncMode+0x48>)
 800066a:	68bb      	ldr	r3, [r7, #8]
 800066c:	4413      	add	r3, r2
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	461a      	mov	r2, r3
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	4413      	add	r3, r2
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800067c:	4908      	ldr	r1, [pc, #32]	; (80006a0 <LL_DMA_SetMemoryIncMode+0x48>)
 800067e:	68bb      	ldr	r3, [r7, #8]
 8000680:	440b      	add	r3, r1
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	4619      	mov	r1, r3
 8000686:	697b      	ldr	r3, [r7, #20]
 8000688:	440b      	add	r3, r1
 800068a:	4619      	mov	r1, r3
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	4313      	orrs	r3, r2
 8000690:	600b      	str	r3, [r1, #0]
}
 8000692:	bf00      	nop
 8000694:	371c      	adds	r7, #28
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr
 800069e:	bf00      	nop
 80006a0:	08004d74 	.word	0x08004d74

080006a4 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b087      	sub	sp, #28
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80006b0:	68fb      	ldr	r3, [r7, #12]
 80006b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 80006b4:	4a0d      	ldr	r2, [pc, #52]	; (80006ec <LL_DMA_SetPeriphSize+0x48>)
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	4413      	add	r3, r2
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	461a      	mov	r2, r3
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	4413      	add	r3, r2
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80006c8:	4908      	ldr	r1, [pc, #32]	; (80006ec <LL_DMA_SetPeriphSize+0x48>)
 80006ca:	68bb      	ldr	r3, [r7, #8]
 80006cc:	440b      	add	r3, r1
 80006ce:	781b      	ldrb	r3, [r3, #0]
 80006d0:	4619      	mov	r1, r3
 80006d2:	697b      	ldr	r3, [r7, #20]
 80006d4:	440b      	add	r3, r1
 80006d6:	4619      	mov	r1, r3
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	4313      	orrs	r3, r2
 80006dc:	600b      	str	r3, [r1, #0]
}
 80006de:	bf00      	nop
 80006e0:	371c      	adds	r7, #28
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	08004d74 	.word	0x08004d74

080006f0 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b087      	sub	sp, #28
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	60f8      	str	r0, [r7, #12]
 80006f8:	60b9      	str	r1, [r7, #8]
 80006fa:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 8000700:	4a0d      	ldr	r2, [pc, #52]	; (8000738 <LL_DMA_SetMemorySize+0x48>)
 8000702:	68bb      	ldr	r3, [r7, #8]
 8000704:	4413      	add	r3, r2
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	697b      	ldr	r3, [r7, #20]
 800070c:	4413      	add	r3, r2
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000714:	4908      	ldr	r1, [pc, #32]	; (8000738 <LL_DMA_SetMemorySize+0x48>)
 8000716:	68bb      	ldr	r3, [r7, #8]
 8000718:	440b      	add	r3, r1
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	4619      	mov	r1, r3
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	440b      	add	r3, r1
 8000722:	4619      	mov	r1, r3
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	4313      	orrs	r3, r2
 8000728:	600b      	str	r3, [r1, #0]
}
 800072a:	bf00      	nop
 800072c:	371c      	adds	r7, #28
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	08004d74 	.word	0x08004d74

0800073c <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 800073c:	b480      	push	{r7}
 800073e:	b087      	sub	sp, #28
 8000740:	af00      	add	r7, sp, #0
 8000742:	60f8      	str	r0, [r7, #12]
 8000744:	60b9      	str	r1, [r7, #8]
 8000746:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 800074c:	4a0d      	ldr	r2, [pc, #52]	; (8000784 <LL_DMA_SetStreamPriorityLevel+0x48>)
 800074e:	68bb      	ldr	r3, [r7, #8]
 8000750:	4413      	add	r3, r2
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	461a      	mov	r2, r3
 8000756:	697b      	ldr	r3, [r7, #20]
 8000758:	4413      	add	r3, r2
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000760:	4908      	ldr	r1, [pc, #32]	; (8000784 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8000762:	68bb      	ldr	r3, [r7, #8]
 8000764:	440b      	add	r3, r1
 8000766:	781b      	ldrb	r3, [r3, #0]
 8000768:	4619      	mov	r1, r3
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	440b      	add	r3, r1
 800076e:	4619      	mov	r1, r3
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	4313      	orrs	r3, r2
 8000774:	600b      	str	r3, [r1, #0]
}
 8000776:	bf00      	nop
 8000778:	371c      	adds	r7, #28
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	08004d74 	.word	0x08004d74

08000788 <LL_DMA_SetPeriphRequest>:
  *
  * @note   (*) Availability depends on devices.
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Request)
{
 8000788:	b480      	push	{r7}
 800078a:	b085      	sub	sp, #20
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 8000794:	68ba      	ldr	r2, [r7, #8]
 8000796:	4b12      	ldr	r3, [pc, #72]	; (80007e0 <LL_DMA_SetPeriphRequest+0x58>)
 8000798:	4413      	add	r3, r2
 800079a:	009b      	lsls	r3, r3, #2
 800079c:	68fa      	ldr	r2, [r7, #12]
 800079e:	4911      	ldr	r1, [pc, #68]	; (80007e4 <LL_DMA_SetPeriphRequest+0x5c>)
 80007a0:	428a      	cmp	r2, r1
 80007a2:	d101      	bne.n	80007a8 <LL_DMA_SetPeriphRequest+0x20>
 80007a4:	2200      	movs	r2, #0
 80007a6:	e000      	b.n	80007aa <LL_DMA_SetPeriphRequest+0x22>
 80007a8:	2220      	movs	r2, #32
 80007aa:	4413      	add	r3, r2
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80007b2:	68b9      	ldr	r1, [r7, #8]
 80007b4:	4b0a      	ldr	r3, [pc, #40]	; (80007e0 <LL_DMA_SetPeriphRequest+0x58>)
 80007b6:	440b      	add	r3, r1
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	68f9      	ldr	r1, [r7, #12]
 80007bc:	4809      	ldr	r0, [pc, #36]	; (80007e4 <LL_DMA_SetPeriphRequest+0x5c>)
 80007be:	4281      	cmp	r1, r0
 80007c0:	d101      	bne.n	80007c6 <LL_DMA_SetPeriphRequest+0x3e>
 80007c2:	2100      	movs	r1, #0
 80007c4:	e000      	b.n	80007c8 <LL_DMA_SetPeriphRequest+0x40>
 80007c6:	2120      	movs	r1, #32
 80007c8:	440b      	add	r3, r1
 80007ca:	4619      	mov	r1, r3
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	4313      	orrs	r3, r2
 80007d0:	600b      	str	r3, [r1, #0]
}
 80007d2:	bf00      	nop
 80007d4:	3714      	adds	r7, #20
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	10008200 	.word	0x10008200
 80007e4:	40020000 	.word	0x40020000

080007e8 <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 80007e8:	b480      	push	{r7}
 80007ea:	b085      	sub	sp, #20
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
 80007f0:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 80007f6:	4a0c      	ldr	r2, [pc, #48]	; (8000828 <LL_DMA_DisableFifoMode+0x40>)
 80007f8:	683b      	ldr	r3, [r7, #0]
 80007fa:	4413      	add	r3, r2
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	461a      	mov	r2, r3
 8000800:	68fb      	ldr	r3, [r7, #12]
 8000802:	4413      	add	r3, r2
 8000804:	695b      	ldr	r3, [r3, #20]
 8000806:	4908      	ldr	r1, [pc, #32]	; (8000828 <LL_DMA_DisableFifoMode+0x40>)
 8000808:	683a      	ldr	r2, [r7, #0]
 800080a:	440a      	add	r2, r1
 800080c:	7812      	ldrb	r2, [r2, #0]
 800080e:	4611      	mov	r1, r2
 8000810:	68fa      	ldr	r2, [r7, #12]
 8000812:	440a      	add	r2, r1
 8000814:	f023 0304 	bic.w	r3, r3, #4
 8000818:	6153      	str	r3, [r2, #20]
}
 800081a:	bf00      	nop
 800081c:	3714      	adds	r7, #20
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	08004d74 	.word	0x08004d74

0800082c <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSOURCE_PLL3R
  *         @arg @ref LL_RCC_ADC_CLKSOURCE_CLKP
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ClkSource)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
#if defined(RCC_D3CCIPR_ADCSEL)
  MODIFY_REG(RCC->D3CCIPR, RCC_D3CCIPR_ADCSEL, ClkSource);
 8000834:	4b06      	ldr	r3, [pc, #24]	; (8000850 <LL_RCC_SetADCClockSource+0x24>)
 8000836:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000838:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800083c:	4904      	ldr	r1, [pc, #16]	; (8000850 <LL_RCC_SetADCClockSource+0x24>)
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	4313      	orrs	r3, r2
 8000842:	658b      	str	r3, [r1, #88]	; 0x58
#else
  MODIFY_REG(RCC->SRDCCIPR, RCC_SRDCCIPR_ADCSEL, ClkSource);
#endif /* RCC_D3CCIPR_ADCSEL */
}
 8000844:	bf00      	nop
 8000846:	370c      	adds	r7, #12
 8000848:	46bd      	mov	sp, r7
 800084a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800084e:	4770      	bx	lr
 8000850:	58024400 	.word	0x58024400

08000854 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000854:	b480      	push	{r7}
 8000856:	b085      	sub	sp, #20
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <LL_AHB1_GRP1_EnableClock+0x34>)
 800085e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000862:	4909      	ldr	r1, [pc, #36]	; (8000888 <LL_AHB1_GRP1_EnableClock+0x34>)
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	4313      	orrs	r3, r2
 8000868:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 800086c:	4b06      	ldr	r3, [pc, #24]	; (8000888 <LL_AHB1_GRP1_EnableClock+0x34>)
 800086e:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	4013      	ands	r3, r2
 8000876:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000878:	68fb      	ldr	r3, [r7, #12]
}
 800087a:	bf00      	nop
 800087c:	3714      	adds	r7, #20
 800087e:	46bd      	mov	sp, r7
 8000880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000884:	4770      	bx	lr
 8000886:	bf00      	nop
 8000888:	58024400 	.word	0x58024400

0800088c <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 800088c:	b480      	push	{r7}
 800088e:	b085      	sub	sp, #20
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 8000894:	4b0a      	ldr	r3, [pc, #40]	; (80008c0 <LL_AHB4_GRP1_EnableClock+0x34>)
 8000896:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 800089a:	4909      	ldr	r1, [pc, #36]	; (80008c0 <LL_AHB4_GRP1_EnableClock+0x34>)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	4313      	orrs	r3, r2
 80008a0:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80008a4:	4b06      	ldr	r3, [pc, #24]	; (80008c0 <LL_AHB4_GRP1_EnableClock+0x34>)
 80008a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4013      	ands	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008b0:	68fb      	ldr	r3, [r7, #12]
}
 80008b2:	bf00      	nop
 80008b4:	3714      	adds	r7, #20
 80008b6:	46bd      	mov	sp, r7
 80008b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008bc:	4770      	bx	lr
 80008be:	bf00      	nop
 80008c0:	58024400 	.word	0x58024400

080008c4 <MX_ADC1_Init>:

/* USER CODE END 0 */

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b094      	sub	sp, #80	; 0x50
 80008c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 80008ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 80008d6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
 80008de:	605a      	str	r2, [r3, #4]
 80008e0:	609a      	str	r2, [r3, #8]
 80008e2:	60da      	str	r2, [r3, #12]
 80008e4:	611a      	str	r2, [r3, #16]
 80008e6:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 80008e8:	f107 031c 	add.w	r3, r7, #28
 80008ec:	2200      	movs	r2, #0
 80008ee:	601a      	str	r2, [r3, #0]
 80008f0:	605a      	str	r2, [r3, #4]
 80008f2:	609a      	str	r2, [r3, #8]
 80008f4:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	2200      	movs	r2, #0
 80008fa:	601a      	str	r2, [r3, #0]
 80008fc:	605a      	str	r2, [r3, #4]
 80008fe:	609a      	str	r2, [r3, #8]
 8000900:	60da      	str	r2, [r3, #12]
 8000902:	611a      	str	r2, [r3, #16]
 8000904:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_PLL2P);
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff ff90 	bl	800082c <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 800090c:	2020      	movs	r0, #32
 800090e:	f7ff ffa1 	bl	8000854 <LL_AHB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8000912:	2001      	movs	r0, #1
 8000914:	f7ff ffba 	bl	800088c <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 8000918:	2020      	movs	r0, #32
 800091a:	f7ff ffb7 	bl	800088c <LL_AHB4_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA6   ------> ADC1_INP3
  PA7   ------> ADC1_INN3
  PF11   ------> ADC1_INP2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 800091e:	23c0      	movs	r3, #192	; 0xc0
 8000920:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000922:	2303      	movs	r3, #3
 8000924:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000926:	2300      	movs	r3, #0
 8000928:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	4619      	mov	r1, r3
 800092e:	4856      	ldr	r0, [pc, #344]	; (8000a88 <MX_ADC1_Init+0x1c4>)
 8000930:	f003 fc70 	bl	8004214 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 8000934:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000938:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 800093a:	2303      	movs	r3, #3
 800093c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800093e:	2300      	movs	r3, #0
 8000940:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000942:	1d3b      	adds	r3, r7, #4
 8000944:	4619      	mov	r1, r3
 8000946:	4851      	ldr	r0, [pc, #324]	; (8000a8c <MX_ADC1_Init+0x1c8>)
 8000948:	f003 fc64 	bl	8004214 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_0, LL_DMAMUX1_REQ_ADC1);
 800094c:	2209      	movs	r2, #9
 800094e:	2100      	movs	r1, #0
 8000950:	484f      	ldr	r0, [pc, #316]	; (8000a90 <MX_ADC1_Init+0x1cc>)
 8000952:	f7ff ff19 	bl	8000788 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000956:	2200      	movs	r2, #0
 8000958:	2100      	movs	r1, #0
 800095a:	484d      	ldr	r0, [pc, #308]	; (8000a90 <MX_ADC1_Init+0x1cc>)
 800095c:	f7ff fe0a 	bl	8000574 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 8000960:	2200      	movs	r2, #0
 8000962:	2100      	movs	r1, #0
 8000964:	484a      	ldr	r0, [pc, #296]	; (8000a90 <MX_ADC1_Init+0x1cc>)
 8000966:	f7ff fee9 	bl	800073c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 800096a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800096e:	2100      	movs	r1, #0
 8000970:	4847      	ldr	r0, [pc, #284]	; (8000a90 <MX_ADC1_Init+0x1cc>)
 8000972:	f7ff fe25 	bl	80005c0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	4845      	ldr	r0, [pc, #276]	; (8000a90 <MX_ADC1_Init+0x1cc>)
 800097c:	f7ff fe46 	bl	800060c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 8000980:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000984:	2100      	movs	r1, #0
 8000986:	4842      	ldr	r0, [pc, #264]	; (8000a90 <MX_ADC1_Init+0x1cc>)
 8000988:	f7ff fe66 	bl	8000658 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 800098c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000990:	2100      	movs	r1, #0
 8000992:	483f      	ldr	r0, [pc, #252]	; (8000a90 <MX_ADC1_Init+0x1cc>)
 8000994:	f7ff fe86 	bl	80006a4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 8000998:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800099c:	2100      	movs	r1, #0
 800099e:	483c      	ldr	r0, [pc, #240]	; (8000a90 <MX_ADC1_Init+0x1cc>)
 80009a0:	f7ff fea6 	bl	80006f0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_0);
 80009a4:	2100      	movs	r1, #0
 80009a6:	483a      	ldr	r0, [pc, #232]	; (8000a90 <MX_ADC1_Init+0x1cc>)
 80009a8:	f7ff ff1e 	bl	80007e8 <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 80009ac:	2100      	movs	r1, #0
 80009ae:	4839      	ldr	r0, [pc, #228]	; (8000a94 <MX_ADC1_Init+0x1d0>)
 80009b0:	f7ff fda4 	bl	80004fc <LL_ADC_SetOverSamplingScope>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_16B;
 80009b4:	2300      	movs	r3, #0
 80009b6:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 80009b8:	2300      	movs	r3, #0
 80009ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 80009bc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80009c0:	4619      	mov	r1, r3
 80009c2:	4834      	ldr	r0, [pc, #208]	; (8000a94 <MX_ADC1_Init+0x1d0>)
 80009c4:	f003 fad6 	bl	8003f74 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 80009cc:	2301      	movs	r3, #1
 80009ce:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.SequencerDiscont = DISABLE;
 80009d0:	2300      	movs	r3, #0
 80009d2:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 80009d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d8:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 80009da:	2300      	movs	r3, #0
 80009dc:	643b      	str	r3, [r7, #64]	; 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 80009de:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80009e2:	4619      	mov	r1, r3
 80009e4:	482b      	ldr	r0, [pc, #172]	; (8000a94 <MX_ADC1_Init+0x1d0>)
 80009e6:	f003 faf1 	bl	8003fcc <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV2;
 80009ea:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80009ee:	61fb      	str	r3, [r7, #28]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 80009f0:	2300      	movs	r3, #0
 80009f2:	623b      	str	r3, [r7, #32]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 80009f4:	f107 031c 	add.w	r3, r7, #28
 80009f8:	4619      	mov	r1, r3
 80009fa:	4827      	ldr	r0, [pc, #156]	; (8000a98 <MX_ADC1_Init+0x1d4>)
 80009fc:	f003 fa62 	bl	8003ec4 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8000a00:	4824      	ldr	r0, [pc, #144]	; (8000a94 <MX_ADC1_Init+0x1d0>)
 8000a02:	f7ff fd91 	bl	8000528 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8000a06:	4823      	ldr	r0, [pc, #140]	; (8000a94 <MX_ADC1_Init+0x1d0>)
 8000a08:	f7ff fda0 	bl	800054c <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  __IO uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000a0c:	4b23      	ldr	r3, [pc, #140]	; (8000a9c <MX_ADC1_Init+0x1d8>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	099b      	lsrs	r3, r3, #6
 8000a12:	4a23      	ldr	r2, [pc, #140]	; (8000aa0 <MX_ADC1_Init+0x1dc>)
 8000a14:	fba2 2303 	umull	r2, r3, r2, r3
 8000a18:	099a      	lsrs	r2, r3, #6
 8000a1a:	4613      	mov	r3, r2
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	4413      	add	r3, r2
 8000a20:	005b      	lsls	r3, r3, #1
 8000a22:	461a      	mov	r2, r3
 8000a24:	4b1f      	ldr	r3, [pc, #124]	; (8000aa4 <MX_ADC1_Init+0x1e0>)
 8000a26:	fba3 2302 	umull	r2, r3, r3, r2
 8000a2a:	08db      	lsrs	r3, r3, #3
 8000a2c:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 8000a2e:	e002      	b.n	8000a36 <MX_ADC1_Init+0x172>
  {
    wait_loop_index--;
 8000a30:	683b      	ldr	r3, [r7, #0]
 8000a32:	3b01      	subs	r3, #1
 8000a34:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d1f9      	bne.n	8000a30 <MX_ADC1_Init+0x16c>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_3);
 8000a3c:	4a1a      	ldr	r2, [pc, #104]	; (8000aa8 <MX_ADC1_Init+0x1e4>)
 8000a3e:	2106      	movs	r1, #6
 8000a40:	4814      	ldr	r0, [pc, #80]	; (8000a94 <MX_ADC1_Init+0x1d0>)
 8000a42:	f7ff fcdf 	bl	8000404 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_16CYCLES_5);
 8000a46:	2203      	movs	r2, #3
 8000a48:	4917      	ldr	r1, [pc, #92]	; (8000aa8 <MX_ADC1_Init+0x1e4>)
 8000a4a:	4812      	ldr	r0, [pc, #72]	; (8000a94 <MX_ADC1_Init+0x1d0>)
 8000a4c:	f7ff fd06 	bl	800045c <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_DIFFERENTIAL_ENDED);
 8000a50:	4a16      	ldr	r2, [pc, #88]	; (8000aac <MX_ADC1_Init+0x1e8>)
 8000a52:	4915      	ldr	r1, [pc, #84]	; (8000aa8 <MX_ADC1_Init+0x1e4>)
 8000a54:	480f      	ldr	r0, [pc, #60]	; (8000a94 <MX_ADC1_Init+0x1d0>)
 8000a56:	f7ff fd2d 	bl	80004b4 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_2);
 8000a5a:	4a15      	ldr	r2, [pc, #84]	; (8000ab0 <MX_ADC1_Init+0x1ec>)
 8000a5c:	210c      	movs	r1, #12
 8000a5e:	480d      	ldr	r0, [pc, #52]	; (8000a94 <MX_ADC1_Init+0x1d0>)
 8000a60:	f7ff fcd0 	bl	8000404 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_16CYCLES_5);
 8000a64:	2203      	movs	r2, #3
 8000a66:	4912      	ldr	r1, [pc, #72]	; (8000ab0 <MX_ADC1_Init+0x1ec>)
 8000a68:	480a      	ldr	r0, [pc, #40]	; (8000a94 <MX_ADC1_Init+0x1d0>)
 8000a6a:	f7ff fcf7 	bl	800045c <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 8000a6e:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000a72:	490f      	ldr	r1, [pc, #60]	; (8000ab0 <MX_ADC1_Init+0x1ec>)
 8000a74:	4807      	ldr	r0, [pc, #28]	; (8000a94 <MX_ADC1_Init+0x1d0>)
 8000a76:	f7ff fd1d 	bl	80004b4 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC1->PCSEL = (1U << 3) | (1U << 2);
 8000a7a:	4b06      	ldr	r3, [pc, #24]	; (8000a94 <MX_ADC1_Init+0x1d0>)
 8000a7c:	220c      	movs	r2, #12
 8000a7e:	61da      	str	r2, [r3, #28]
  /* USER CODE END ADC1_Init 2 */

}
 8000a80:	bf00      	nop
 8000a82:	3750      	adds	r7, #80	; 0x50
 8000a84:	46bd      	mov	sp, r7
 8000a86:	bd80      	pop	{r7, pc}
 8000a88:	58020000 	.word	0x58020000
 8000a8c:	58021400 	.word	0x58021400
 8000a90:	40020000 	.word	0x40020000
 8000a94:	40022000 	.word	0x40022000
 8000a98:	40022300 	.word	0x40022300
 8000a9c:	24000000 	.word	0x24000000
 8000aa0:	053e2d63 	.word	0x053e2d63
 8000aa4:	cccccccd 	.word	0xcccccccd
 8000aa8:	0c900008 	.word	0x0c900008
 8000aac:	47ff0000 	.word	0x47ff0000
 8000ab0:	08600004 	.word	0x08600004

08000ab4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b090      	sub	sp, #64	; 0x40
 8000ab8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8000aba:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
 8000ac2:	605a      	str	r2, [r3, #4]
 8000ac4:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8000ac6:	f107 031c 	add.w	r3, r7, #28
 8000aca:	2200      	movs	r2, #0
 8000acc:	601a      	str	r2, [r3, #0]
 8000ace:	605a      	str	r2, [r3, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
 8000ad2:	60da      	str	r2, [r3, #12]
 8000ad4:	611a      	str	r2, [r3, #16]
 8000ad6:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	1d3b      	adds	r3, r7, #4
 8000ada:	2200      	movs	r2, #0
 8000adc:	601a      	str	r2, [r3, #0]
 8000ade:	605a      	str	r2, [r3, #4]
 8000ae0:	609a      	str	r2, [r3, #8]
 8000ae2:	60da      	str	r2, [r3, #12]
 8000ae4:	611a      	str	r2, [r3, #16]
 8000ae6:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_PLL2P);
 8000ae8:	2000      	movs	r0, #0
 8000aea:	f7ff fe9f 	bl	800082c <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8000aee:	2020      	movs	r0, #32
 8000af0:	f7ff feb0 	bl	8000854 <LL_AHB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 8000af4:	2002      	movs	r0, #2
 8000af6:	f7ff fec9 	bl	800088c <LL_AHB4_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PB0   ------> ADC2_INN5
  PB1   ------> ADC2_INP5
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8000afa:	2303      	movs	r3, #3
 8000afc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8000afe:	2303      	movs	r3, #3
 8000b00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b02:	2300      	movs	r3, #0
 8000b04:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	4619      	mov	r1, r3
 8000b0a:	484b      	ldr	r0, [pc, #300]	; (8000c38 <MX_ADC2_Init+0x184>)
 8000b0c:	f003 fb82 	bl	8004214 <LL_GPIO_Init>

  /* ADC2 DMA Init */

  /* ADC2 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_1, LL_DMAMUX1_REQ_ADC2);
 8000b10:	220a      	movs	r2, #10
 8000b12:	2101      	movs	r1, #1
 8000b14:	4849      	ldr	r0, [pc, #292]	; (8000c3c <MX_ADC2_Init+0x188>)
 8000b16:	f7ff fe37 	bl	8000788 <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8000b1a:	2200      	movs	r2, #0
 8000b1c:	2101      	movs	r1, #1
 8000b1e:	4847      	ldr	r0, [pc, #284]	; (8000c3c <MX_ADC2_Init+0x188>)
 8000b20:	f7ff fd28 	bl	8000574 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 8000b24:	2200      	movs	r2, #0
 8000b26:	2101      	movs	r1, #1
 8000b28:	4844      	ldr	r0, [pc, #272]	; (8000c3c <MX_ADC2_Init+0x188>)
 8000b2a:	f7ff fe07 	bl	800073c <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 8000b2e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b32:	2101      	movs	r1, #1
 8000b34:	4841      	ldr	r0, [pc, #260]	; (8000c3c <MX_ADC2_Init+0x188>)
 8000b36:	f7ff fd43 	bl	80005c0 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8000b3a:	2200      	movs	r2, #0
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	483f      	ldr	r0, [pc, #252]	; (8000c3c <MX_ADC2_Init+0x188>)
 8000b40:	f7ff fd64 	bl	800060c <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8000b44:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b48:	2101      	movs	r1, #1
 8000b4a:	483c      	ldr	r0, [pc, #240]	; (8000c3c <MX_ADC2_Init+0x188>)
 8000b4c:	f7ff fd84 	bl	8000658 <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_HALFWORD);
 8000b50:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b54:	2101      	movs	r1, #1
 8000b56:	4839      	ldr	r0, [pc, #228]	; (8000c3c <MX_ADC2_Init+0x188>)
 8000b58:	f7ff fda4 	bl	80006a4 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_HALFWORD);
 8000b5c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b60:	2101      	movs	r1, #1
 8000b62:	4836      	ldr	r0, [pc, #216]	; (8000c3c <MX_ADC2_Init+0x188>)
 8000b64:	f7ff fdc4 	bl	80006f0 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 8000b68:	2101      	movs	r1, #1
 8000b6a:	4834      	ldr	r0, [pc, #208]	; (8000c3c <MX_ADC2_Init+0x188>)
 8000b6c:	f7ff fe3c 	bl	80007e8 <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  LL_ADC_SetOverSamplingScope(ADC2, LL_ADC_OVS_DISABLE);
 8000b70:	2100      	movs	r1, #0
 8000b72:	4833      	ldr	r0, [pc, #204]	; (8000c40 <MX_ADC2_Init+0x18c>)
 8000b74:	f7ff fcc2 	bl	80004fc <LL_ADC_SetOverSamplingScope>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_16B;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8000b80:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8000b84:	4619      	mov	r1, r3
 8000b86:	482e      	ldr	r0, [pc, #184]	; (8000c40 <MX_ADC2_Init+0x18c>)
 8000b88:	f003 f9f4 	bl	8003f74 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8000b8c:	2300      	movs	r3, #0
 8000b8e:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8000b90:	2301      	movs	r3, #1
 8000b92:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerDiscont = DISABLE;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8000b98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000b9c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8000ba2:	f107 031c 	add.w	r3, r7, #28
 8000ba6:	4619      	mov	r1, r3
 8000ba8:	4825      	ldr	r0, [pc, #148]	; (8000c40 <MX_ADC2_Init+0x18c>)
 8000baa:	f003 fa0f 	bl	8003fcc <LL_ADC_REG_Init>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8000bae:	4824      	ldr	r0, [pc, #144]	; (8000c40 <MX_ADC2_Init+0x18c>)
 8000bb0:	f7ff fcba 	bl	8000528 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8000bb4:	4822      	ldr	r0, [pc, #136]	; (8000c40 <MX_ADC2_Init+0x18c>)
 8000bb6:	f7ff fcc9 	bl	800054c <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  __IO uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8000bba:	4b22      	ldr	r3, [pc, #136]	; (8000c44 <MX_ADC2_Init+0x190>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	099b      	lsrs	r3, r3, #6
 8000bc0:	4a21      	ldr	r2, [pc, #132]	; (8000c48 <MX_ADC2_Init+0x194>)
 8000bc2:	fba2 2303 	umull	r2, r3, r2, r3
 8000bc6:	099a      	lsrs	r2, r3, #6
 8000bc8:	4613      	mov	r3, r2
 8000bca:	009b      	lsls	r3, r3, #2
 8000bcc:	4413      	add	r3, r2
 8000bce:	005b      	lsls	r3, r3, #1
 8000bd0:	461a      	mov	r2, r3
 8000bd2:	4b1e      	ldr	r3, [pc, #120]	; (8000c4c <MX_ADC2_Init+0x198>)
 8000bd4:	fba3 2302 	umull	r2, r3, r3, r2
 8000bd8:	08db      	lsrs	r3, r3, #3
 8000bda:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 8000bdc:	e002      	b.n	8000be4 <MX_ADC2_Init+0x130>
  {
    wait_loop_index--;
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d1f9      	bne.n	8000bde <MX_ADC2_Init+0x12a>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_5);
 8000bea:	4a19      	ldr	r2, [pc, #100]	; (8000c50 <MX_ADC2_Init+0x19c>)
 8000bec:	2106      	movs	r1, #6
 8000bee:	4814      	ldr	r0, [pc, #80]	; (8000c40 <MX_ADC2_Init+0x18c>)
 8000bf0:	f7ff fc08 	bl	8000404 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_16CYCLES_5);
 8000bf4:	2203      	movs	r2, #3
 8000bf6:	4916      	ldr	r1, [pc, #88]	; (8000c50 <MX_ADC2_Init+0x19c>)
 8000bf8:	4811      	ldr	r0, [pc, #68]	; (8000c40 <MX_ADC2_Init+0x18c>)
 8000bfa:	f7ff fc2f 	bl	800045c <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_5, LL_ADC_DIFFERENTIAL_ENDED);
 8000bfe:	4a15      	ldr	r2, [pc, #84]	; (8000c54 <MX_ADC2_Init+0x1a0>)
 8000c00:	4913      	ldr	r1, [pc, #76]	; (8000c50 <MX_ADC2_Init+0x19c>)
 8000c02:	480f      	ldr	r0, [pc, #60]	; (8000c40 <MX_ADC2_Init+0x18c>)
 8000c04:	f7ff fc56 	bl	80004b4 <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_11);
 8000c08:	4a13      	ldr	r2, [pc, #76]	; (8000c58 <MX_ADC2_Init+0x1a4>)
 8000c0a:	210c      	movs	r1, #12
 8000c0c:	480c      	ldr	r0, [pc, #48]	; (8000c40 <MX_ADC2_Init+0x18c>)
 8000c0e:	f7ff fbf9 	bl	8000404 <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_16CYCLES_5);
 8000c12:	2203      	movs	r2, #3
 8000c14:	4910      	ldr	r1, [pc, #64]	; (8000c58 <MX_ADC2_Init+0x1a4>)
 8000c16:	480a      	ldr	r0, [pc, #40]	; (8000c40 <MX_ADC2_Init+0x18c>)
 8000c18:	f7ff fc20 	bl	800045c <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SINGLE_ENDED);
 8000c1c:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8000c20:	490d      	ldr	r1, [pc, #52]	; (8000c58 <MX_ADC2_Init+0x1a4>)
 8000c22:	4807      	ldr	r0, [pc, #28]	; (8000c40 <MX_ADC2_Init+0x18c>)
 8000c24:	f7ff fc46 	bl	80004b4 <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */
  ADC2->PCSEL = (1U << 5) | (1U << 11);
 8000c28:	4b05      	ldr	r3, [pc, #20]	; (8000c40 <MX_ADC2_Init+0x18c>)
 8000c2a:	f44f 6202 	mov.w	r2, #2080	; 0x820
 8000c2e:	61da      	str	r2, [r3, #28]
  /* USER CODE END ADC2_Init 2 */

}
 8000c30:	bf00      	nop
 8000c32:	3740      	adds	r7, #64	; 0x40
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	58020400 	.word	0x58020400
 8000c3c:	40020000 	.word	0x40020000
 8000c40:	40022100 	.word	0x40022100
 8000c44:	24000000 	.word	0x24000000
 8000c48:	053e2d63 	.word	0x053e2d63
 8000c4c:	cccccccd 	.word	0xcccccccd
 8000c50:	14f00020 	.word	0x14f00020
 8000c54:	47ff0000 	.word	0x47ff0000
 8000c58:	2e300800 	.word	0x2e300800

08000c5c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	689a      	ldr	r2, [r3, #8]
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <LL_ADC_Enable+0x24>)
 8000c6a:	4013      	ands	r3, r2
 8000c6c:	f043 0201 	orr.w	r2, r3, #1
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000c74:	bf00      	nop
 8000c76:	370c      	adds	r7, #12
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c7e:	4770      	bx	lr
 8000c80:	7fffffc0 	.word	0x7fffffc0

08000c84 <LL_ADC_StartCalibration>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_StartCalibration(ADC_TypeDef *ADCx, uint32_t CalibrationMode, uint32_t SingleDiff)
{
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000c90:	68fb      	ldr	r3, [r7, #12]
 8000c92:	689a      	ldr	r2, [r3, #8]
 8000c94:	4b09      	ldr	r3, [pc, #36]	; (8000cbc <LL_ADC_StartCalibration+0x38>)
 8000c96:	4013      	ands	r3, r2
 8000c98:	68ba      	ldr	r2, [r7, #8]
 8000c9a:	f402 3180 	and.w	r1, r2, #65536	; 0x10000
 8000c9e:	687a      	ldr	r2, [r7, #4]
 8000ca0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8000ca4:	430a      	orrs	r2, r1
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	609a      	str	r2, [r3, #8]
             ADC_CR_ADCALLIN | ADC_CR_ADCALDIF | ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADCAL | (CalibrationMode & ADC_CALIB_MODE_MASK) | (SingleDiff & ADC_SINGLEDIFF_CALIB_START_MASK));
}
 8000cb0:	bf00      	nop
 8000cb2:	3714      	adds	r7, #20
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	3ffeffc0 	.word	0x3ffeffc0

08000cc0 <LL_ADC_IsCalibrationOnGoing>:
  * @rmtoll CR       ADCAL          LL_ADC_IsCalibrationOnGoing
  * @param  ADCx ADC instance
  * @retval 0: calibration complete, 1: calibration in progress.
  */
__STATIC_INLINE uint32_t LL_ADC_IsCalibrationOnGoing(ADC_TypeDef *ADCx)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	689b      	ldr	r3, [r3, #8]
 8000ccc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8000cd0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000cd4:	d101      	bne.n	8000cda <LL_ADC_IsCalibrationOnGoing+0x1a>
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	e000      	b.n	8000cdc <LL_ADC_IsCalibrationOnGoing+0x1c>
 8000cda:	2300      	movs	r3, #0
}
 8000cdc:	4618      	mov	r0, r3
 8000cde:	370c      	adds	r7, #12
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce6:	4770      	bx	lr

08000ce8 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	689a      	ldr	r2, [r3, #8]
 8000cf4:	4b05      	ldr	r3, [pc, #20]	; (8000d0c <LL_ADC_REG_StartConversion+0x24>)
 8000cf6:	4013      	ands	r3, r2
 8000cf8:	f043 0204 	orr.w	r2, r3, #4
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	7fffffc0 	.word	0x7fffffc0

08000d10 <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d101      	bne.n	8000d28 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8000d24:	2301      	movs	r3, #1
 8000d26:	e000      	b.n	8000d2a <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 8000d28:	2300      	movs	r3, #0
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <LL_DMA_EnableStream>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
 8000d40:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	60fb      	str	r3, [r7, #12]
  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8000d46:	4a0c      	ldr	r2, [pc, #48]	; (8000d78 <LL_DMA_EnableStream+0x40>)
 8000d48:	683b      	ldr	r3, [r7, #0]
 8000d4a:	4413      	add	r3, r2
 8000d4c:	781b      	ldrb	r3, [r3, #0]
 8000d4e:	461a      	mov	r2, r3
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	4908      	ldr	r1, [pc, #32]	; (8000d78 <LL_DMA_EnableStream+0x40>)
 8000d58:	683a      	ldr	r2, [r7, #0]
 8000d5a:	440a      	add	r2, r1
 8000d5c:	7812      	ldrb	r2, [r2, #0]
 8000d5e:	4611      	mov	r1, r2
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	440a      	add	r2, r1
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6013      	str	r3, [r2, #0]
}
 8000d6a:	bf00      	nop
 8000d6c:	3714      	adds	r7, #20
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	08004d7c 	.word	0x08004d7c

08000d7c <LL_DMA_SetDataLength>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b087      	sub	sp, #28
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	60f8      	str	r0, [r7, #12]
 8000d84:	60b9      	str	r1, [r7, #8]
 8000d86:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 8000d8c:	4a0d      	ldr	r2, [pc, #52]	; (8000dc4 <LL_DMA_SetDataLength+0x48>)
 8000d8e:	68bb      	ldr	r3, [r7, #8]
 8000d90:	4413      	add	r3, r2
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	461a      	mov	r2, r3
 8000d96:	697b      	ldr	r3, [r7, #20]
 8000d98:	4413      	add	r3, r2
 8000d9a:	685a      	ldr	r2, [r3, #4]
 8000d9c:	4b0a      	ldr	r3, [pc, #40]	; (8000dc8 <LL_DMA_SetDataLength+0x4c>)
 8000d9e:	4013      	ands	r3, r2
 8000da0:	4908      	ldr	r1, [pc, #32]	; (8000dc4 <LL_DMA_SetDataLength+0x48>)
 8000da2:	68ba      	ldr	r2, [r7, #8]
 8000da4:	440a      	add	r2, r1
 8000da6:	7812      	ldrb	r2, [r2, #0]
 8000da8:	4611      	mov	r1, r2
 8000daa:	697a      	ldr	r2, [r7, #20]
 8000dac:	440a      	add	r2, r1
 8000dae:	4611      	mov	r1, r2
 8000db0:	687a      	ldr	r2, [r7, #4]
 8000db2:	4313      	orrs	r3, r2
 8000db4:	604b      	str	r3, [r1, #4]
}
 8000db6:	bf00      	nop
 8000db8:	371c      	adds	r7, #28
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	08004d7c 	.word	0x08004d7c
 8000dc8:	ffff0000 	.word	0xffff0000

08000dcc <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b087      	sub	sp, #28
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	60f8      	str	r0, [r7, #12]
 8000dd4:	60b9      	str	r1, [r7, #8]
 8000dd6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, MemoryAddress);
 8000ddc:	4a07      	ldr	r2, [pc, #28]	; (8000dfc <LL_DMA_SetMemoryAddress+0x30>)
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	4413      	add	r3, r2
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	461a      	mov	r2, r3
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	4413      	add	r3, r2
 8000dea:	461a      	mov	r2, r3
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	60d3      	str	r3, [r2, #12]
}
 8000df0:	bf00      	nop
 8000df2:	371c      	adds	r7, #28
 8000df4:	46bd      	mov	sp, r7
 8000df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfa:	4770      	bx	lr
 8000dfc:	08004d7c 	.word	0x08004d7c

08000e00 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b087      	sub	sp, #28
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	60f8      	str	r0, [r7, #12]
 8000e08:	60b9      	str	r1, [r7, #8]
 8000e0a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 8000e10:	4a07      	ldr	r2, [pc, #28]	; (8000e30 <LL_DMA_SetPeriphAddress+0x30>)
 8000e12:	68bb      	ldr	r3, [r7, #8]
 8000e14:	4413      	add	r3, r2
 8000e16:	781b      	ldrb	r3, [r3, #0]
 8000e18:	461a      	mov	r2, r3
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	4413      	add	r3, r2
 8000e1e:	461a      	mov	r2, r3
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6093      	str	r3, [r2, #8]
}
 8000e24:	bf00      	nop
 8000e26:	371c      	adds	r7, #28
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr
 8000e30:	08004d7c 	.word	0x08004d7c

08000e34 <ADC1_Init_Custom>:
//}

#include "adc_config.h"
#include <stdint.h>

void ADC1_Init_Custom(uint16_t *buffer) {
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
    // Kalibracja w trybie różnicowym
    LL_ADC_StartCalibration(ADC1, LL_ADC_CALIB_OFFSET, LL_ADC_DIFFERENTIAL_ENDED);
 8000e3c:	4a1e      	ldr	r2, [pc, #120]	; (8000eb8 <ADC1_Init_Custom+0x84>)
 8000e3e:	2100      	movs	r1, #0
 8000e40:	481e      	ldr	r0, [pc, #120]	; (8000ebc <ADC1_Init_Custom+0x88>)
 8000e42:	f7ff ff1f 	bl	8000c84 <LL_ADC_StartCalibration>
    while (LL_ADC_IsCalibrationOnGoing(ADC1));
 8000e46:	bf00      	nop
 8000e48:	481c      	ldr	r0, [pc, #112]	; (8000ebc <ADC1_Init_Custom+0x88>)
 8000e4a:	f7ff ff39 	bl	8000cc0 <LL_ADC_IsCalibrationOnGoing>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d1f9      	bne.n	8000e48 <ADC1_Init_Custom+0x14>

    // DMA konfiguracja
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_0, (uint32_t)&ADC1->DR);
 8000e54:	4a1a      	ldr	r2, [pc, #104]	; (8000ec0 <ADC1_Init_Custom+0x8c>)
 8000e56:	2100      	movs	r1, #0
 8000e58:	481a      	ldr	r0, [pc, #104]	; (8000ec4 <ADC1_Init_Custom+0x90>)
 8000e5a:	f7ff ffd1 	bl	8000e00 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_0, (uint32_t)buffer);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	461a      	mov	r2, r3
 8000e62:	2100      	movs	r1, #0
 8000e64:	4817      	ldr	r0, [pc, #92]	; (8000ec4 <ADC1_Init_Custom+0x90>)
 8000e66:	f7ff ffb1 	bl	8000dcc <LL_DMA_SetMemoryAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_0, 2);
 8000e6a:	2202      	movs	r2, #2
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	4815      	ldr	r0, [pc, #84]	; (8000ec4 <ADC1_Init_Custom+0x90>)
 8000e70:	f7ff ff84 	bl	8000d7c <LL_DMA_SetDataLength>
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_0);
 8000e74:	2100      	movs	r1, #0
 8000e76:	4813      	ldr	r0, [pc, #76]	; (8000ec4 <ADC1_Init_Custom+0x90>)
 8000e78:	f7ff ff5e 	bl	8000d38 <LL_DMA_EnableStream>

    ADC1->CFGR &= ~ADC_CFGR_DMNGT;
 8000e7c:	4b0f      	ldr	r3, [pc, #60]	; (8000ebc <ADC1_Init_Custom+0x88>)
 8000e7e:	68db      	ldr	r3, [r3, #12]
 8000e80:	4a0e      	ldr	r2, [pc, #56]	; (8000ebc <ADC1_Init_Custom+0x88>)
 8000e82:	f023 0303 	bic.w	r3, r3, #3
 8000e86:	60d3      	str	r3, [r2, #12]
    ADC1->CFGR |= (ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1);  // DMA circular
 8000e88:	4b0c      	ldr	r3, [pc, #48]	; (8000ebc <ADC1_Init_Custom+0x88>)
 8000e8a:	68db      	ldr	r3, [r3, #12]
 8000e8c:	4a0b      	ldr	r2, [pc, #44]	; (8000ebc <ADC1_Init_Custom+0x88>)
 8000e8e:	f043 0303 	orr.w	r3, r3, #3
 8000e92:	60d3      	str	r3, [r2, #12]

    LL_ADC_Enable(ADC1);
 8000e94:	4809      	ldr	r0, [pc, #36]	; (8000ebc <ADC1_Init_Custom+0x88>)
 8000e96:	f7ff fee1 	bl	8000c5c <LL_ADC_Enable>
    while (!LL_ADC_IsActiveFlag_ADRDY(ADC1));
 8000e9a:	bf00      	nop
 8000e9c:	4807      	ldr	r0, [pc, #28]	; (8000ebc <ADC1_Init_Custom+0x88>)
 8000e9e:	f7ff ff37 	bl	8000d10 <LL_ADC_IsActiveFlag_ADRDY>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d0f9      	beq.n	8000e9c <ADC1_Init_Custom+0x68>
    LL_ADC_REG_StartConversion(ADC1);
 8000ea8:	4804      	ldr	r0, [pc, #16]	; (8000ebc <ADC1_Init_Custom+0x88>)
 8000eaa:	f7ff ff1d 	bl	8000ce8 <LL_ADC_REG_StartConversion>
}
 8000eae:	bf00      	nop
 8000eb0:	3708      	adds	r7, #8
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bd80      	pop	{r7, pc}
 8000eb6:	bf00      	nop
 8000eb8:	47ff0000 	.word	0x47ff0000
 8000ebc:	40022000 	.word	0x40022000
 8000ec0:	40022040 	.word	0x40022040
 8000ec4:	40020000 	.word	0x40020000

08000ec8 <ADC2_Init_Custom>:

void ADC2_Init_Custom(uint16_t *buffer) {
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
    // Kalibracja w trybie różnicowym
    LL_ADC_StartCalibration(ADC2, LL_ADC_CALIB_OFFSET, LL_ADC_DIFFERENTIAL_ENDED);
 8000ed0:	4a1e      	ldr	r2, [pc, #120]	; (8000f4c <ADC2_Init_Custom+0x84>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	481e      	ldr	r0, [pc, #120]	; (8000f50 <ADC2_Init_Custom+0x88>)
 8000ed6:	f7ff fed5 	bl	8000c84 <LL_ADC_StartCalibration>
    while (LL_ADC_IsCalibrationOnGoing(ADC2));
 8000eda:	bf00      	nop
 8000edc:	481c      	ldr	r0, [pc, #112]	; (8000f50 <ADC2_Init_Custom+0x88>)
 8000ede:	f7ff feef 	bl	8000cc0 <LL_ADC_IsCalibrationOnGoing>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d1f9      	bne.n	8000edc <ADC2_Init_Custom+0x14>

    // DMA konfiguracja
    LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_1, (uint32_t)&ADC2->DR);
 8000ee8:	4a1a      	ldr	r2, [pc, #104]	; (8000f54 <ADC2_Init_Custom+0x8c>)
 8000eea:	2101      	movs	r1, #1
 8000eec:	481a      	ldr	r0, [pc, #104]	; (8000f58 <ADC2_Init_Custom+0x90>)
 8000eee:	f7ff ff87 	bl	8000e00 <LL_DMA_SetPeriphAddress>
    LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_1, (uint32_t)buffer);
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	461a      	mov	r2, r3
 8000ef6:	2101      	movs	r1, #1
 8000ef8:	4817      	ldr	r0, [pc, #92]	; (8000f58 <ADC2_Init_Custom+0x90>)
 8000efa:	f7ff ff67 	bl	8000dcc <LL_DMA_SetMemoryAddress>
    LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_1, 2); // 2 kanały!
 8000efe:	2202      	movs	r2, #2
 8000f00:	2101      	movs	r1, #1
 8000f02:	4815      	ldr	r0, [pc, #84]	; (8000f58 <ADC2_Init_Custom+0x90>)
 8000f04:	f7ff ff3a 	bl	8000d7c <LL_DMA_SetDataLength>
    LL_DMA_EnableStream(DMA1, LL_DMA_STREAM_1);
 8000f08:	2101      	movs	r1, #1
 8000f0a:	4813      	ldr	r0, [pc, #76]	; (8000f58 <ADC2_Init_Custom+0x90>)
 8000f0c:	f7ff ff14 	bl	8000d38 <LL_DMA_EnableStream>

    ADC2->CFGR &= ~ADC_CFGR_DMNGT;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <ADC2_Init_Custom+0x88>)
 8000f12:	68db      	ldr	r3, [r3, #12]
 8000f14:	4a0e      	ldr	r2, [pc, #56]	; (8000f50 <ADC2_Init_Custom+0x88>)
 8000f16:	f023 0303 	bic.w	r3, r3, #3
 8000f1a:	60d3      	str	r3, [r2, #12]
    ADC2->CFGR |= (ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1);  // DMA circular
 8000f1c:	4b0c      	ldr	r3, [pc, #48]	; (8000f50 <ADC2_Init_Custom+0x88>)
 8000f1e:	68db      	ldr	r3, [r3, #12]
 8000f20:	4a0b      	ldr	r2, [pc, #44]	; (8000f50 <ADC2_Init_Custom+0x88>)
 8000f22:	f043 0303 	orr.w	r3, r3, #3
 8000f26:	60d3      	str	r3, [r2, #12]

    LL_ADC_Enable(ADC2);
 8000f28:	4809      	ldr	r0, [pc, #36]	; (8000f50 <ADC2_Init_Custom+0x88>)
 8000f2a:	f7ff fe97 	bl	8000c5c <LL_ADC_Enable>
    while (!LL_ADC_IsActiveFlag_ADRDY(ADC2));
 8000f2e:	bf00      	nop
 8000f30:	4807      	ldr	r0, [pc, #28]	; (8000f50 <ADC2_Init_Custom+0x88>)
 8000f32:	f7ff feed 	bl	8000d10 <LL_ADC_IsActiveFlag_ADRDY>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d0f9      	beq.n	8000f30 <ADC2_Init_Custom+0x68>
    LL_ADC_REG_StartConversion(ADC2);
 8000f3c:	4804      	ldr	r0, [pc, #16]	; (8000f50 <ADC2_Init_Custom+0x88>)
 8000f3e:	f7ff fed3 	bl	8000ce8 <LL_ADC_REG_StartConversion>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	47ff0000 	.word	0x47ff0000
 8000f50:	40022100 	.word	0x40022100
 8000f54:	40022140 	.word	0x40022140
 8000f58:	40020000 	.word	0x40020000

08000f5c <adc_to_voltage_out>:




float adc_to_voltage_out(float adc_value) {
 8000f5c:	b480      	push	{r7}
 8000f5e:	b085      	sub	sp, #20
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	ed87 0a01 	vstr	s0, [r7, #4]
    // Stałe z dopasowania liniowego
    const float a = 0.008793f;  // Nachylenie (V na jednostkę ADC)
 8000f66:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <adc_to_voltage_out+0x2c>)
 8000f68:	60fb      	str	r3, [r7, #12]
    const float b = 0.017f;     // Przesunięcie (offset, V)
 8000f6a:	4b08      	ldr	r3, [pc, #32]	; (8000f8c <adc_to_voltage_out+0x30>)
 8000f6c:	60bb      	str	r3, [r7, #8]

    // Przeliczenie wartości ADC na napięcie
    return a * adc_value ;
 8000f6e:	ed97 7a03 	vldr	s14, [r7, #12]
 8000f72:	edd7 7a01 	vldr	s15, [r7, #4]
 8000f76:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8000f7a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr
 8000f88:	3c101084 	.word	0x3c101084
 8000f8c:	3c8b4396 	.word	0x3c8b4396

08000f90 <adc_to_current_inductor>:



float adc_to_current_inductor(float adc_value) {
 8000f90:	b480      	push	{r7}
 8000f92:	b085      	sub	sp, #20
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	ed87 0a01 	vstr	s0, [r7, #4]
    const float a = 0.000500f;  // Nachylenie [A/LSB]
 8000f9a:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <adc_to_current_inductor+0x34>)
 8000f9c:	60fb      	str	r3, [r7, #12]
    const float b = -0.011f;    // Przesunięcie [A]
 8000f9e:	4b0a      	ldr	r3, [pc, #40]	; (8000fc8 <adc_to_current_inductor+0x38>)
 8000fa0:	60bb      	str	r3, [r7, #8]
    return a * adc_value + b;
 8000fa2:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fa6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000faa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fae:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fb2:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000fb6:	eeb0 0a67 	vmov.f32	s0, s15
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	3a03126f 	.word	0x3a03126f
 8000fc8:	bc343958 	.word	0xbc343958

08000fcc <adc_to_current_output>:


float adc_to_current_output(float adc_value) {
 8000fcc:	b480      	push	{r7}
 8000fce:	b085      	sub	sp, #20
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	ed87 0a01 	vstr	s0, [r7, #4]
    const float a = 0.000500f;  // Nachylenie [A/LSB]
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <adc_to_current_output+0x34>)
 8000fd8:	60fb      	str	r3, [r7, #12]
    const float b = -0.010f ;    // Przesunięcie [A]
 8000fda:	4b0a      	ldr	r3, [pc, #40]	; (8001004 <adc_to_current_output+0x38>)
 8000fdc:	60bb      	str	r3, [r7, #8]
    return a * adc_value + b;
 8000fde:	ed97 7a03 	vldr	s14, [r7, #12]
 8000fe2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fe6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fea:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fee:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8000ff2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ff6:	3714      	adds	r7, #20
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffe:	4770      	bx	lr
 8001000:	3a03126f 	.word	0x3a03126f
 8001004:	bc23d70a 	.word	0xbc23d70a

08001008 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	f043 0201 	orr.w	r2, r3, #1
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	601a      	str	r2, [r3, #0]
}
 800101c:	bf00      	nop
 800101e:	370c      	adds	r7, #12
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr

08001028 <LL_TIM_DisableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_DisableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableCounter(TIM_TypeDef *TIMx)
{
 8001028:	b480      	push	{r7}
 800102a:	b083      	sub	sp, #12
 800102c:	af00      	add	r7, sp, #0
 800102e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	f023 0201 	bic.w	r2, r3, #1
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	601a      	str	r2, [r3, #0]
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr

08001048 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001048:	b480      	push	{r7}
 800104a:	b083      	sub	sp, #12
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
 8001050:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	6a1a      	ldr	r2, [r3, #32]
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	431a      	orrs	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	621a      	str	r2, [r3, #32]
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr

0800106a <LL_TIM_CC_DisableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_DisableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800106a:	b480      	push	{r7}
 800106c:	b083      	sub	sp, #12
 800106e:	af00      	add	r7, sp, #0
 8001070:	6078      	str	r0, [r7, #4]
 8001072:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	6a1a      	ldr	r2, [r3, #32]
 8001078:	683b      	ldr	r3, [r7, #0]
 800107a:	43db      	mvns	r3, r3
 800107c:	401a      	ands	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	621a      	str	r2, [r3, #32]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	683a      	ldr	r2, [r7, #0]
 800109c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800109e:	bf00      	nop
 80010a0:	370c      	adds	r7, #12
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr

080010aa <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80010aa:	b480      	push	{r7}
 80010ac:	b083      	sub	sp, #12
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	68db      	ldr	r3, [r3, #12]
 80010b6:	f043 0201 	orr.w	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60da      	str	r2, [r3, #12]
}
 80010be:	bf00      	nop
 80010c0:	370c      	adds	r7, #12
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <LL_TIM_DisableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_DisableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80010ca:	b480      	push	{r7}
 80010cc:	b083      	sub	sp, #12
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	68db      	ldr	r3, [r3, #12]
 80010d6:	f023 0201 	bic.w	r2, r3, #1
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	60da      	str	r2, [r3, #12]
}
 80010de:	bf00      	nop
 80010e0:	370c      	adds	r7, #12
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
	...

080010ec <State_Controller_Update>:
static int controll_enabled = 0;

int temp=0;;

int State_Controller_Update(uint16_t state, uint16_t ocp_state)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	460a      	mov	r2, r1
 80010f6:	80fb      	strh	r3, [r7, #6]
 80010f8:	4613      	mov	r3, r2
 80010fa:	80bb      	strh	r3, [r7, #4]
    if (state == 1)
 80010fc:	88fb      	ldrh	r3, [r7, #6]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d116      	bne.n	8001130 <State_Controller_Update+0x44>
    {
        if (ocp_state == 0)
 8001102:	88bb      	ldrh	r3, [r7, #4]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d109      	bne.n	800111c <State_Controller_Update+0x30>
        {
            if (!controll_enabled)
 8001108:	4b11      	ldr	r3, [pc, #68]	; (8001150 <State_Controller_Update+0x64>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d118      	bne.n	8001142 <State_Controller_Update+0x56>
            {
                Controll_Enable(); // Twoja funkcja włączająca timery i przerwania
 8001110:	f000 f820 	bl	8001154 <Controll_Enable>
                controll_enabled = 1;
 8001114:	4b0e      	ldr	r3, [pc, #56]	; (8001150 <State_Controller_Update+0x64>)
 8001116:	2201      	movs	r2, #1
 8001118:	601a      	str	r2, [r3, #0]
 800111a:	e012      	b.n	8001142 <State_Controller_Update+0x56>
            }
        }
        else
        {
            if (controll_enabled)
 800111c:	4b0c      	ldr	r3, [pc, #48]	; (8001150 <State_Controller_Update+0x64>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d00e      	beq.n	8001142 <State_Controller_Update+0x56>
            {
                Controll_Disable(); // Twoja funkcja wyłączająca timery i przerwania
 8001124:	f000 f838 	bl	8001198 <Controll_Disable>
                controll_enabled = 0;
 8001128:	4b09      	ldr	r3, [pc, #36]	; (8001150 <State_Controller_Update+0x64>)
 800112a:	2200      	movs	r2, #0
 800112c:	601a      	str	r2, [r3, #0]
 800112e:	e008      	b.n	8001142 <State_Controller_Update+0x56>
            }
        }
    }
    else
    {
        if (controll_enabled)
 8001130:	4b07      	ldr	r3, [pc, #28]	; (8001150 <State_Controller_Update+0x64>)
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	2b00      	cmp	r3, #0
 8001136:	d004      	beq.n	8001142 <State_Controller_Update+0x56>
        {
            Controll_Disable();
 8001138:	f000 f82e 	bl	8001198 <Controll_Disable>
            controll_enabled = 0;
 800113c:	4b04      	ldr	r3, [pc, #16]	; (8001150 <State_Controller_Update+0x64>)
 800113e:	2200      	movs	r2, #0
 8001140:	601a      	str	r2, [r3, #0]
        }
    }

    return controll_enabled;
 8001142:	4b03      	ldr	r3, [pc, #12]	; (8001150 <State_Controller_Update+0x64>)
 8001144:	681b      	ldr	r3, [r3, #0]
}
 8001146:	4618      	mov	r0, r3
 8001148:	3708      	adds	r7, #8
 800114a:	46bd      	mov	sp, r7
 800114c:	bd80      	pop	{r7, pc}
 800114e:	bf00      	nop
 8001150:	240000ac 	.word	0x240000ac

08001154 <Controll_Enable>:


void Controll_Enable(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
	LL_TIM_OC_SetCompareCH1(TIM2, 0);
 8001158:	2100      	movs	r1, #0
 800115a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800115e:	f7ff ff96 	bl	800108e <LL_TIM_OC_SetCompareCH1>

	LL_TIM_EnableCounter(TIM4);
 8001162:	480a      	ldr	r0, [pc, #40]	; (800118c <Controll_Enable+0x38>)
 8001164:	f7ff ff50 	bl	8001008 <LL_TIM_EnableCounter>
    LL_TIM_CC_EnableChannel(TIM8, LL_TIM_CHANNEL_CH1);
 8001168:	2101      	movs	r1, #1
 800116a:	4809      	ldr	r0, [pc, #36]	; (8001190 <Controll_Enable+0x3c>)
 800116c:	f7ff ff6c 	bl	8001048 <LL_TIM_CC_EnableChannel>
    LL_TIM_CC_EnableChannel(TIM8, LL_TIM_CHANNEL_CH1N);
 8001170:	2104      	movs	r1, #4
 8001172:	4807      	ldr	r0, [pc, #28]	; (8001190 <Controll_Enable+0x3c>)
 8001174:	f7ff ff68 	bl	8001048 <LL_TIM_CC_EnableChannel>
    LL_TIM_EnableIT_UPDATE(TIM4);
 8001178:	4804      	ldr	r0, [pc, #16]	; (800118c <Controll_Enable+0x38>)
 800117a:	f7ff ff96 	bl	80010aa <LL_TIM_EnableIT_UPDATE>

    temp++;
 800117e:	4b05      	ldr	r3, [pc, #20]	; (8001194 <Controll_Enable+0x40>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	4a03      	ldr	r2, [pc, #12]	; (8001194 <Controll_Enable+0x40>)
 8001186:	6013      	str	r3, [r2, #0]
}
 8001188:	bf00      	nop
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40000800 	.word	0x40000800
 8001190:	40010400 	.word	0x40010400
 8001194:	240000b0 	.word	0x240000b0

08001198 <Controll_Disable>:
void Controll_Disable(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	af00      	add	r7, sp, #0

	LL_TIM_DisableIT_UPDATE(TIM4);
 800119c:	480c      	ldr	r0, [pc, #48]	; (80011d0 <Controll_Disable+0x38>)
 800119e:	f7ff ff94 	bl	80010ca <LL_TIM_DisableIT_UPDATE>
	LL_TIM_DisableCounter(TIM4);
 80011a2:	480b      	ldr	r0, [pc, #44]	; (80011d0 <Controll_Disable+0x38>)
 80011a4:	f7ff ff40 	bl	8001028 <LL_TIM_DisableCounter>
	LL_TIM_OC_SetCompareCH1(TIM1, 0);
 80011a8:	2100      	movs	r1, #0
 80011aa:	480a      	ldr	r0, [pc, #40]	; (80011d4 <Controll_Disable+0x3c>)
 80011ac:	f7ff ff6f 	bl	800108e <LL_TIM_OC_SetCompareCH1>
    LL_TIM_CC_DisableChannel(TIM8, LL_TIM_CHANNEL_CH1);
 80011b0:	2101      	movs	r1, #1
 80011b2:	4809      	ldr	r0, [pc, #36]	; (80011d8 <Controll_Disable+0x40>)
 80011b4:	f7ff ff59 	bl	800106a <LL_TIM_CC_DisableChannel>
    LL_TIM_CC_DisableChannel(TIM8, LL_TIM_CHANNEL_CH1N);
 80011b8:	2104      	movs	r1, #4
 80011ba:	4807      	ldr	r0, [pc, #28]	; (80011d8 <Controll_Disable+0x40>)
 80011bc:	f7ff ff55 	bl	800106a <LL_TIM_CC_DisableChannel>

    LL_TIM_OC_SetCompareCH1(TIM2, 600);
 80011c0:	f44f 7116 	mov.w	r1, #600	; 0x258
 80011c4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80011c8:	f7ff ff61 	bl	800108e <LL_TIM_OC_SetCompareCH1>

}
 80011cc:	bf00      	nop
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40000800 	.word	0x40000800
 80011d4:	40010000 	.word	0x40010000
 80011d8:	40010400 	.word	0x40010400

080011dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011dc:	b480      	push	{r7}
 80011de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e0:	4b04      	ldr	r3, [pc, #16]	; (80011f4 <__NVIC_GetPriorityGrouping+0x18>)
 80011e2:	68db      	ldr	r3, [r3, #12]
 80011e4:	0a1b      	lsrs	r3, r3, #8
 80011e6:	f003 0307 	and.w	r3, r3, #7
}
 80011ea:	4618      	mov	r0, r3
 80011ec:	46bd      	mov	sp, r7
 80011ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f2:	4770      	bx	lr
 80011f4:	e000ed00 	.word	0xe000ed00

080011f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	4603      	mov	r3, r0
 8001200:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001202:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001206:	2b00      	cmp	r3, #0
 8001208:	db0b      	blt.n	8001222 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800120a:	88fb      	ldrh	r3, [r7, #6]
 800120c:	f003 021f 	and.w	r2, r3, #31
 8001210:	4907      	ldr	r1, [pc, #28]	; (8001230 <__NVIC_EnableIRQ+0x38>)
 8001212:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001216:	095b      	lsrs	r3, r3, #5
 8001218:	2001      	movs	r0, #1
 800121a:	fa00 f202 	lsl.w	r2, r0, r2
 800121e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001222:	bf00      	nop
 8001224:	370c      	adds	r7, #12
 8001226:	46bd      	mov	sp, r7
 8001228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122c:	4770      	bx	lr
 800122e:	bf00      	nop
 8001230:	e000e100 	.word	0xe000e100

08001234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	4603      	mov	r3, r0
 800123c:	6039      	str	r1, [r7, #0]
 800123e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001240:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001244:	2b00      	cmp	r3, #0
 8001246:	db0a      	blt.n	800125e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001248:	683b      	ldr	r3, [r7, #0]
 800124a:	b2da      	uxtb	r2, r3
 800124c:	490c      	ldr	r1, [pc, #48]	; (8001280 <__NVIC_SetPriority+0x4c>)
 800124e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	b2d2      	uxtb	r2, r2
 8001256:	440b      	add	r3, r1
 8001258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800125c:	e00a      	b.n	8001274 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	b2da      	uxtb	r2, r3
 8001262:	4908      	ldr	r1, [pc, #32]	; (8001284 <__NVIC_SetPriority+0x50>)
 8001264:	88fb      	ldrh	r3, [r7, #6]
 8001266:	f003 030f 	and.w	r3, r3, #15
 800126a:	3b04      	subs	r3, #4
 800126c:	0112      	lsls	r2, r2, #4
 800126e:	b2d2      	uxtb	r2, r2
 8001270:	440b      	add	r3, r1
 8001272:	761a      	strb	r2, [r3, #24]
}
 8001274:	bf00      	nop
 8001276:	370c      	adds	r7, #12
 8001278:	46bd      	mov	sp, r7
 800127a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127e:	4770      	bx	lr
 8001280:	e000e100 	.word	0xe000e100
 8001284:	e000ed00 	.word	0xe000ed00

08001288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001288:	b480      	push	{r7}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	f003 0307 	and.w	r3, r3, #7
 800129a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800129c:	69fb      	ldr	r3, [r7, #28]
 800129e:	f1c3 0307 	rsb	r3, r3, #7
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	bf28      	it	cs
 80012a6:	2304      	movcs	r3, #4
 80012a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80012aa:	69fb      	ldr	r3, [r7, #28]
 80012ac:	3304      	adds	r3, #4
 80012ae:	2b06      	cmp	r3, #6
 80012b0:	d902      	bls.n	80012b8 <NVIC_EncodePriority+0x30>
 80012b2:	69fb      	ldr	r3, [r7, #28]
 80012b4:	3b03      	subs	r3, #3
 80012b6:	e000      	b.n	80012ba <NVIC_EncodePriority+0x32>
 80012b8:	2300      	movs	r3, #0
 80012ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012bc:	f04f 32ff 	mov.w	r2, #4294967295
 80012c0:	69bb      	ldr	r3, [r7, #24]
 80012c2:	fa02 f303 	lsl.w	r3, r2, r3
 80012c6:	43da      	mvns	r2, r3
 80012c8:	68bb      	ldr	r3, [r7, #8]
 80012ca:	401a      	ands	r2, r3
 80012cc:	697b      	ldr	r3, [r7, #20]
 80012ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012d0:	f04f 31ff 	mov.w	r1, #4294967295
 80012d4:	697b      	ldr	r3, [r7, #20]
 80012d6:	fa01 f303 	lsl.w	r3, r1, r3
 80012da:	43d9      	mvns	r1, r3
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012e0:	4313      	orrs	r3, r2
         );
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	3724      	adds	r7, #36	; 0x24
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr
	...

080012f0 <LL_AHB1_GRP1_EnableClock>:
{
 80012f0:	b480      	push	{r7}
 80012f2:	b085      	sub	sp, #20
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80012f8:	4b0a      	ldr	r3, [pc, #40]	; (8001324 <LL_AHB1_GRP1_EnableClock+0x34>)
 80012fa:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 80012fe:	4909      	ldr	r1, [pc, #36]	; (8001324 <LL_AHB1_GRP1_EnableClock+0x34>)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4313      	orrs	r3, r2
 8001304:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <LL_AHB1_GRP1_EnableClock+0x34>)
 800130a:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4013      	ands	r3, r2
 8001312:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001314:	68fb      	ldr	r3, [r7, #12]
}
 8001316:	bf00      	nop
 8001318:	3714      	adds	r7, #20
 800131a:	46bd      	mov	sp, r7
 800131c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001320:	4770      	bx	lr
 8001322:	bf00      	nop
 8001324:	58024400 	.word	0x58024400

08001328 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800132c:	2001      	movs	r0, #1
 800132e:	f7ff ffdf 	bl	80012f0 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001332:	f7ff ff53 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001336:	4603      	mov	r3, r0
 8001338:	2200      	movs	r2, #0
 800133a:	2100      	movs	r1, #0
 800133c:	4618      	mov	r0, r3
 800133e:	f7ff ffa3 	bl	8001288 <NVIC_EncodePriority>
 8001342:	4603      	mov	r3, r0
 8001344:	4619      	mov	r1, r3
 8001346:	200b      	movs	r0, #11
 8001348:	f7ff ff74 	bl	8001234 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800134c:	200b      	movs	r0, #11
 800134e:	f7ff ff53 	bl	80011f8 <__NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001352:	f7ff ff43 	bl	80011dc <__NVIC_GetPriorityGrouping>
 8001356:	4603      	mov	r3, r0
 8001358:	2200      	movs	r2, #0
 800135a:	2100      	movs	r1, #0
 800135c:	4618      	mov	r0, r3
 800135e:	f7ff ff93 	bl	8001288 <NVIC_EncodePriority>
 8001362:	4603      	mov	r3, r0
 8001364:	4619      	mov	r1, r3
 8001366:	200c      	movs	r0, #12
 8001368:	f7ff ff64 	bl	8001234 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 800136c:	200c      	movs	r0, #12
 800136e:	f7ff ff43 	bl	80011f8 <__NVIC_EnableIRQ>

}
 8001372:	bf00      	nop
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <LL_AHB4_GRP1_EnableClock>:
{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 8001380:	4b0a      	ldr	r3, [pc, #40]	; (80013ac <LL_AHB4_GRP1_EnableClock+0x34>)
 8001382:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001386:	4909      	ldr	r1, [pc, #36]	; (80013ac <LL_AHB4_GRP1_EnableClock+0x34>)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	4313      	orrs	r3, r2
 800138c:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 8001390:	4b06      	ldr	r3, [pc, #24]	; (80013ac <LL_AHB4_GRP1_EnableClock+0x34>)
 8001392:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	4013      	ands	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800139c:	68fb      	ldr	r3, [r7, #12]
}
 800139e:	bf00      	nop
 80013a0:	3714      	adds	r7, #20
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	58024400 	.word	0x58024400

080013b0 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
 80013b8:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	041a      	lsls	r2, r3, #16
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	619a      	str	r2, [r3, #24]
}
 80013c2:	bf00      	nop
 80013c4:	370c      	adds	r7, #12
 80013c6:	46bd      	mov	sp, r7
 80013c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013cc:	4770      	bx	lr
	...

080013d0 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013d6:	463b      	mov	r3, r7
 80013d8:	2200      	movs	r2, #0
 80013da:	601a      	str	r2, [r3, #0]
 80013dc:	605a      	str	r2, [r3, #4]
 80013de:	609a      	str	r2, [r3, #8]
 80013e0:	60da      	str	r2, [r3, #12]
 80013e2:	611a      	str	r2, [r3, #16]
 80013e4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 80013e6:	2004      	movs	r0, #4
 80013e8:	f7ff ffc6 	bl	8001378 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 80013ec:	2001      	movs	r0, #1
 80013ee:	f7ff ffc3 	bl	8001378 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 80013f2:	2002      	movs	r0, #2
 80013f4:	f7ff ffc0 	bl	8001378 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 80013f8:	2020      	movs	r0, #32
 80013fa:	f7ff ffbd 	bl	8001378 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 80013fe:	2010      	movs	r0, #16
 8001400:	f7ff ffba 	bl	8001378 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOD);
 8001404:	2008      	movs	r0, #8
 8001406:	f7ff ffb7 	bl	8001378 <LL_AHB4_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_0);
 800140a:	2101      	movs	r1, #1
 800140c:	481f      	ldr	r0, [pc, #124]	; (800148c <MX_GPIO_Init+0xbc>)
 800140e:	f7ff ffcf 	bl	80013b0 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_0);
 8001412:	2101      	movs	r1, #1
 8001414:	481e      	ldr	r0, [pc, #120]	; (8001490 <MX_GPIO_Init+0xc0>)
 8001416:	f7ff ffcb 	bl	80013b0 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 800141a:	2301      	movs	r3, #1
 800141c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800141e:	2301      	movs	r3, #1
 8001420:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001426:	2300      	movs	r3, #0
 8001428:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800142a:	2302      	movs	r3, #2
 800142c:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800142e:	463b      	mov	r3, r7
 8001430:	4619      	mov	r1, r3
 8001432:	4816      	ldr	r0, [pc, #88]	; (800148c <MX_GPIO_Init+0xbc>)
 8001434:	f002 feee 	bl	8004214 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_9;
 8001438:	f44f 7301 	mov.w	r3, #516	; 0x204
 800143c:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 800143e:	2300      	movs	r3, #0
 8001440:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001442:	2302      	movs	r3, #2
 8001444:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001446:	463b      	mov	r3, r7
 8001448:	4619      	mov	r1, r3
 800144a:	4810      	ldr	r0, [pc, #64]	; (800148c <MX_GPIO_Init+0xbc>)
 800144c:	f002 fee2 	bl	8004214 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8001450:	2301      	movs	r3, #1
 8001452:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001454:	2301      	movs	r3, #1
 8001456:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001458:	2300      	movs	r3, #0
 800145a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800145c:	2300      	movs	r3, #0
 800145e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001460:	2300      	movs	r3, #0
 8001462:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001464:	463b      	mov	r3, r7
 8001466:	4619      	mov	r1, r3
 8001468:	4809      	ldr	r0, [pc, #36]	; (8001490 <MX_GPIO_Init+0xc0>)
 800146a:	f002 fed3 	bl	8004214 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4;
 800146e:	2310      	movs	r3, #16
 8001470:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001472:	2300      	movs	r3, #0
 8001474:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001476:	2302      	movs	r3, #2
 8001478:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147a:	463b      	mov	r3, r7
 800147c:	4619      	mov	r1, r3
 800147e:	4804      	ldr	r0, [pc, #16]	; (8001490 <MX_GPIO_Init+0xc0>)
 8001480:	f002 fec8 	bl	8004214 <LL_GPIO_Init>

}
 8001484:	bf00      	nop
 8001486:	3718      	adds	r7, #24
 8001488:	46bd      	mov	sp, r7
 800148a:	bd80      	pop	{r7, pc}
 800148c:	58020800 	.word	0x58020800
 8001490:	58020c00 	.word	0x58020c00

08001494 <__NVIC_SetPriorityGrouping>:
{
 8001494:	b480      	push	{r7}
 8001496:	b085      	sub	sp, #20
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	f003 0307 	and.w	r3, r3, #7
 80014a2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014a4:	4b0b      	ldr	r3, [pc, #44]	; (80014d4 <__NVIC_SetPriorityGrouping+0x40>)
 80014a6:	68db      	ldr	r3, [r3, #12]
 80014a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014aa:	68ba      	ldr	r2, [r7, #8]
 80014ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014b0:	4013      	ands	r3, r2
 80014b2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014b4:	68fb      	ldr	r3, [r7, #12]
 80014b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <__NVIC_SetPriorityGrouping+0x44>)
 80014be:	4313      	orrs	r3, r2
 80014c0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014c2:	4a04      	ldr	r2, [pc, #16]	; (80014d4 <__NVIC_SetPriorityGrouping+0x40>)
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	60d3      	str	r3, [r2, #12]
}
 80014c8:	bf00      	nop
 80014ca:	3714      	adds	r7, #20
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	e000ed00 	.word	0xe000ed00
 80014d8:	05fa0000 	.word	0x05fa0000

080014dc <__NVIC_GetPriorityGrouping>:
{
 80014dc:	b480      	push	{r7}
 80014de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014e0:	4b04      	ldr	r3, [pc, #16]	; (80014f4 <__NVIC_GetPriorityGrouping+0x18>)
 80014e2:	68db      	ldr	r3, [r3, #12]
 80014e4:	0a1b      	lsrs	r3, r3, #8
 80014e6:	f003 0307 	and.w	r3, r3, #7
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_SetPriority>:
{
 80014f8:	b480      	push	{r7}
 80014fa:	b083      	sub	sp, #12
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	4603      	mov	r3, r0
 8001500:	6039      	str	r1, [r7, #0]
 8001502:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001504:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001508:	2b00      	cmp	r3, #0
 800150a:	db0a      	blt.n	8001522 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	b2da      	uxtb	r2, r3
 8001510:	490c      	ldr	r1, [pc, #48]	; (8001544 <__NVIC_SetPriority+0x4c>)
 8001512:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001516:	0112      	lsls	r2, r2, #4
 8001518:	b2d2      	uxtb	r2, r2
 800151a:	440b      	add	r3, r1
 800151c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001520:	e00a      	b.n	8001538 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	b2da      	uxtb	r2, r3
 8001526:	4908      	ldr	r1, [pc, #32]	; (8001548 <__NVIC_SetPriority+0x50>)
 8001528:	88fb      	ldrh	r3, [r7, #6]
 800152a:	f003 030f 	and.w	r3, r3, #15
 800152e:	3b04      	subs	r3, #4
 8001530:	0112      	lsls	r2, r2, #4
 8001532:	b2d2      	uxtb	r2, r2
 8001534:	440b      	add	r3, r1
 8001536:	761a      	strb	r2, [r3, #24]
}
 8001538:	bf00      	nop
 800153a:	370c      	adds	r7, #12
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000e100 	.word	0xe000e100
 8001548:	e000ed00 	.word	0xe000ed00

0800154c <NVIC_EncodePriority>:
{
 800154c:	b480      	push	{r7}
 800154e:	b089      	sub	sp, #36	; 0x24
 8001550:	af00      	add	r7, sp, #0
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	60b9      	str	r1, [r7, #8]
 8001556:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	f003 0307 	and.w	r3, r3, #7
 800155e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001560:	69fb      	ldr	r3, [r7, #28]
 8001562:	f1c3 0307 	rsb	r3, r3, #7
 8001566:	2b04      	cmp	r3, #4
 8001568:	bf28      	it	cs
 800156a:	2304      	movcs	r3, #4
 800156c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800156e:	69fb      	ldr	r3, [r7, #28]
 8001570:	3304      	adds	r3, #4
 8001572:	2b06      	cmp	r3, #6
 8001574:	d902      	bls.n	800157c <NVIC_EncodePriority+0x30>
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3b03      	subs	r3, #3
 800157a:	e000      	b.n	800157e <NVIC_EncodePriority+0x32>
 800157c:	2300      	movs	r3, #0
 800157e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001580:	f04f 32ff 	mov.w	r2, #4294967295
 8001584:	69bb      	ldr	r3, [r7, #24]
 8001586:	fa02 f303 	lsl.w	r3, r2, r3
 800158a:	43da      	mvns	r2, r3
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	401a      	ands	r2, r3
 8001590:	697b      	ldr	r3, [r7, #20]
 8001592:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001594:	f04f 31ff 	mov.w	r1, #4294967295
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	fa01 f303 	lsl.w	r3, r1, r3
 800159e:	43d9      	mvns	r1, r3
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015a4:	4313      	orrs	r3, r2
}
 80015a6:	4618      	mov	r0, r3
 80015a8:	3724      	adds	r7, #36	; 0x24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b0:	4770      	bx	lr
	...

080015b4 <LL_RCC_HSI_Enable>:
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <LL_RCC_HSI_Enable+0x1c>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <LL_RCC_HSI_Enable+0x1c>)
 80015be:	f043 0301 	orr.w	r3, r3, #1
 80015c2:	6013      	str	r3, [r2, #0]
}
 80015c4:	bf00      	nop
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
 80015ce:	bf00      	nop
 80015d0:	58024400 	.word	0x58024400

080015d4 <LL_RCC_HSI_IsReady>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 80015d8:	4b06      	ldr	r3, [pc, #24]	; (80015f4 <LL_RCC_HSI_IsReady+0x20>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0304 	and.w	r3, r3, #4
 80015e0:	2b04      	cmp	r3, #4
 80015e2:	d101      	bne.n	80015e8 <LL_RCC_HSI_IsReady+0x14>
 80015e4:	2301      	movs	r3, #1
 80015e6:	e000      	b.n	80015ea <LL_RCC_HSI_IsReady+0x16>
 80015e8:	2300      	movs	r3, #0
}
 80015ea:	4618      	mov	r0, r3
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr
 80015f4:	58024400 	.word	0x58024400

080015f8 <LL_RCC_HSI_SetDivider>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	b083      	sub	sp, #12
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSIDIV, Divider);
 8001600:	4b06      	ldr	r3, [pc, #24]	; (800161c <LL_RCC_HSI_SetDivider+0x24>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f023 0218 	bic.w	r2, r3, #24
 8001608:	4904      	ldr	r1, [pc, #16]	; (800161c <LL_RCC_HSI_SetDivider+0x24>)
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	4313      	orrs	r3, r2
 800160e:	600b      	str	r3, [r1, #0]
}
 8001610:	bf00      	nop
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr
 800161c:	58024400 	.word	0x58024400

08001620 <LL_RCC_HSI_SetCalibTrimming>:
{
 8001620:	b480      	push	{r7}
 8001622:	b083      	sub	sp, #12
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  if ((DBGMCU->IDCODE & 0xF0000000U) == 0x10000000U)
 8001628:	4b0f      	ldr	r3, [pc, #60]	; (8001668 <LL_RCC_HSI_SetCalibTrimming+0x48>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001630:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001634:	d109      	bne.n	800164a <LL_RCC_HSI_SetCalibTrimming+0x2a>
    MODIFY_REG(RCC->HSICFGR, 0x3F000U, Value << 12U);
 8001636:	4b0d      	ldr	r3, [pc, #52]	; (800166c <LL_RCC_HSI_SetCalibTrimming+0x4c>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	031b      	lsls	r3, r3, #12
 8001642:	490a      	ldr	r1, [pc, #40]	; (800166c <LL_RCC_HSI_SetCalibTrimming+0x4c>)
 8001644:	4313      	orrs	r3, r2
 8001646:	604b      	str	r3, [r1, #4]
}
 8001648:	e008      	b.n	800165c <LL_RCC_HSI_SetCalibTrimming+0x3c>
    MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
 800164a:	4b08      	ldr	r3, [pc, #32]	; (800166c <LL_RCC_HSI_SetCalibTrimming+0x4c>)
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	061b      	lsls	r3, r3, #24
 8001656:	4905      	ldr	r1, [pc, #20]	; (800166c <LL_RCC_HSI_SetCalibTrimming+0x4c>)
 8001658:	4313      	orrs	r3, r2
 800165a:	604b      	str	r3, [r1, #4]
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr
 8001668:	5c001000 	.word	0x5c001000
 800166c:	58024400 	.word	0x58024400

08001670 <LL_RCC_SetSysClkSource>:
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <LL_RCC_SetSysClkSource+0x24>)
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	f023 0207 	bic.w	r2, r3, #7
 8001680:	4904      	ldr	r1, [pc, #16]	; (8001694 <LL_RCC_SetSysClkSource+0x24>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	4313      	orrs	r3, r2
 8001686:	610b      	str	r3, [r1, #16]
}
 8001688:	bf00      	nop
 800168a:	370c      	adds	r7, #12
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr
 8001694:	58024400 	.word	0x58024400

08001698 <LL_RCC_GetSysClkSource>:
{
 8001698:	b480      	push	{r7}
 800169a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800169c:	4b04      	ldr	r3, [pc, #16]	; (80016b0 <LL_RCC_GetSysClkSource+0x18>)
 800169e:	691b      	ldr	r3, [r3, #16]
 80016a0:	f003 0338 	and.w	r3, r3, #56	; 0x38
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	46bd      	mov	sp, r7
 80016a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ac:	4770      	bx	lr
 80016ae:	bf00      	nop
 80016b0:	58024400 	.word	0x58024400

080016b4 <LL_RCC_SetSysPrescaler>:
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, Prescaler);
 80016bc:	4b06      	ldr	r3, [pc, #24]	; (80016d8 <LL_RCC_SetSysPrescaler+0x24>)
 80016be:	699b      	ldr	r3, [r3, #24]
 80016c0:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80016c4:	4904      	ldr	r1, [pc, #16]	; (80016d8 <LL_RCC_SetSysPrescaler+0x24>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	618b      	str	r3, [r1, #24]
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr
 80016d8:	58024400 	.word	0x58024400

080016dc <LL_RCC_SetAHBPrescaler>:
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 80016e4:	4b06      	ldr	r3, [pc, #24]	; (8001700 <LL_RCC_SetAHBPrescaler+0x24>)
 80016e6:	699b      	ldr	r3, [r3, #24]
 80016e8:	f023 020f 	bic.w	r2, r3, #15
 80016ec:	4904      	ldr	r1, [pc, #16]	; (8001700 <LL_RCC_SetAHBPrescaler+0x24>)
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	4313      	orrs	r3, r2
 80016f2:	618b      	str	r3, [r1, #24]
}
 80016f4:	bf00      	nop
 80016f6:	370c      	adds	r7, #12
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr
 8001700:	58024400 	.word	0x58024400

08001704 <LL_RCC_SetAPB1Prescaler>:
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, Prescaler);
 800170c:	4b06      	ldr	r3, [pc, #24]	; (8001728 <LL_RCC_SetAPB1Prescaler+0x24>)
 800170e:	69db      	ldr	r3, [r3, #28]
 8001710:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001714:	4904      	ldr	r1, [pc, #16]	; (8001728 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	4313      	orrs	r3, r2
 800171a:	61cb      	str	r3, [r1, #28]
}
 800171c:	bf00      	nop
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	58024400 	.word	0x58024400

0800172c <LL_RCC_SetAPB2Prescaler>:
{
 800172c:	b480      	push	{r7}
 800172e:	b083      	sub	sp, #12
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, Prescaler);
 8001734:	4b06      	ldr	r3, [pc, #24]	; (8001750 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001736:	69db      	ldr	r3, [r3, #28]
 8001738:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800173c:	4904      	ldr	r1, [pc, #16]	; (8001750 <LL_RCC_SetAPB2Prescaler+0x24>)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	4313      	orrs	r3, r2
 8001742:	61cb      	str	r3, [r1, #28]
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr
 8001750:	58024400 	.word	0x58024400

08001754 <LL_RCC_SetAPB3Prescaler>:
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, Prescaler);
 800175c:	4b06      	ldr	r3, [pc, #24]	; (8001778 <LL_RCC_SetAPB3Prescaler+0x24>)
 800175e:	699b      	ldr	r3, [r3, #24]
 8001760:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001764:	4904      	ldr	r1, [pc, #16]	; (8001778 <LL_RCC_SetAPB3Prescaler+0x24>)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4313      	orrs	r3, r2
 800176a:	618b      	str	r3, [r1, #24]
}
 800176c:	bf00      	nop
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	58024400 	.word	0x58024400

0800177c <LL_RCC_SetAPB4Prescaler>:
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, Prescaler);
 8001784:	4b06      	ldr	r3, [pc, #24]	; (80017a0 <LL_RCC_SetAPB4Prescaler+0x24>)
 8001786:	6a1b      	ldr	r3, [r3, #32]
 8001788:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800178c:	4904      	ldr	r1, [pc, #16]	; (80017a0 <LL_RCC_SetAPB4Prescaler+0x24>)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	4313      	orrs	r3, r2
 8001792:	620b      	str	r3, [r1, #32]
}
 8001794:	bf00      	nop
 8001796:	370c      	adds	r7, #12
 8001798:	46bd      	mov	sp, r7
 800179a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179e:	4770      	bx	lr
 80017a0:	58024400 	.word	0x58024400

080017a4 <LL_RCC_PLL_SetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_SetSource(uint32_t PLLSource)
{
 80017a4:	b480      	push	{r7}
 80017a6:	b083      	sub	sp, #12
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, PLLSource);
 80017ac:	4b06      	ldr	r3, [pc, #24]	; (80017c8 <LL_RCC_PLL_SetSource+0x24>)
 80017ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017b0:	f023 0203 	bic.w	r2, r3, #3
 80017b4:	4904      	ldr	r1, [pc, #16]	; (80017c8 <LL_RCC_PLL_SetSource+0x24>)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4313      	orrs	r3, r2
 80017ba:	628b      	str	r3, [r1, #40]	; 0x28
}
 80017bc:	bf00      	nop
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr
 80017c8:	58024400 	.word	0x58024400

080017cc <LL_RCC_PLL1_Enable>:
  * @brief  Enable PLL1
  * @rmtoll CR           PLL1ON         LL_RCC_PLL1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_Enable(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 80017d0:	4b05      	ldr	r3, [pc, #20]	; (80017e8 <LL_RCC_PLL1_Enable+0x1c>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	4a04      	ldr	r2, [pc, #16]	; (80017e8 <LL_RCC_PLL1_Enable+0x1c>)
 80017d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80017da:	6013      	str	r3, [r2, #0]
}
 80017dc:	bf00      	nop
 80017de:	46bd      	mov	sp, r7
 80017e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e4:	4770      	bx	lr
 80017e6:	bf00      	nop
 80017e8:	58024400 	.word	0x58024400

080017ec <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll CR           PLL1RDY        LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
 80017ec:	b480      	push	{r7}
 80017ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == (RCC_CR_PLL1RDY)) ? 1UL : 0UL);
 80017f0:	4b07      	ldr	r3, [pc, #28]	; (8001810 <LL_RCC_PLL1_IsReady+0x24>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80017fc:	d101      	bne.n	8001802 <LL_RCC_PLL1_IsReady+0x16>
 80017fe:	2301      	movs	r3, #1
 8001800:	e000      	b.n	8001804 <LL_RCC_PLL1_IsReady+0x18>
 8001802:	2300      	movs	r3, #0
}
 8001804:	4618      	mov	r0, r3
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	58024400 	.word	0x58024400

08001814 <LL_RCC_PLL1P_Enable>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1P_Enable(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN);
 8001818:	4b05      	ldr	r3, [pc, #20]	; (8001830 <LL_RCC_PLL1P_Enable+0x1c>)
 800181a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800181c:	4a04      	ldr	r2, [pc, #16]	; (8001830 <LL_RCC_PLL1P_Enable+0x1c>)
 800181e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001822:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8001824:	bf00      	nop
 8001826:	46bd      	mov	sp, r7
 8001828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800182c:	4770      	bx	lr
 800182e:	bf00      	nop
 8001830:	58024400 	.word	0x58024400

08001834 <LL_RCC_PLL1_SetVCOOutputRange>:
  *         @arg @ref LL_RCC_PLLVCORANGE_WIDE
  *         @arg @ref LL_RCC_PLLVCORANGE_MEDIUM
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOOutputRange(uint32_t VCORange)
{
 8001834:	b480      	push	{r7}
 8001836:	b083      	sub	sp, #12
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, VCORange << RCC_PLLCFGR_PLL1VCOSEL_Pos);
 800183c:	4b07      	ldr	r3, [pc, #28]	; (800185c <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 800183e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001840:	f023 0202 	bic.w	r2, r3, #2
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	005b      	lsls	r3, r3, #1
 8001848:	4904      	ldr	r1, [pc, #16]	; (800185c <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 800184a:	4313      	orrs	r3, r2
 800184c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	58024400 	.word	0x58024400

08001860 <LL_RCC_PLL1_SetVCOInputRange>:
  *         @arg @ref LL_RCC_PLLINPUTRANGE_4_8
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOInputRange(uint32_t InputRange)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, InputRange << RCC_PLLCFGR_PLL1RGE_Pos);
 8001868:	4b07      	ldr	r3, [pc, #28]	; (8001888 <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 800186a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186c:	f023 020c 	bic.w	r2, r3, #12
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	009b      	lsls	r3, r3, #2
 8001874:	4904      	ldr	r1, [pc, #16]	; (8001888 <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 8001876:	4313      	orrs	r3, r2
 8001878:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800187a:	bf00      	nop
 800187c:	370c      	adds	r7, #12
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr
 8001886:	bf00      	nop
 8001888:	58024400 	.word	0x58024400

0800188c <LL_RCC_PLL1_SetN>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_SetN
  * @param  N parameter can be a value between 4 and 512
  */
__STATIC_INLINE void LL_RCC_PLL1_SetN(uint32_t N)
{
 800188c:	b480      	push	{r7}
 800188e:	b083      	sub	sp, #12
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_N1, (N - 1UL) << RCC_PLL1DIVR_N1_Pos);
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <LL_RCC_PLL1_SetN+0x28>)
 8001896:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001898:	4b07      	ldr	r3, [pc, #28]	; (80018b8 <LL_RCC_PLL1_SetN+0x2c>)
 800189a:	4013      	ands	r3, r2
 800189c:	687a      	ldr	r2, [r7, #4]
 800189e:	3a01      	subs	r2, #1
 80018a0:	4904      	ldr	r1, [pc, #16]	; (80018b4 <LL_RCC_PLL1_SetN+0x28>)
 80018a2:	4313      	orrs	r3, r2
 80018a4:	630b      	str	r3, [r1, #48]	; 0x30
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	58024400 	.word	0x58024400
 80018b8:	fffffe00 	.word	0xfffffe00

080018bc <LL_RCC_PLL1_SetM>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t M)
{
 80018bc:	b480      	push	{r7}
 80018be:	b083      	sub	sp, #12
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1, M << RCC_PLLCKSELR_DIVM1_Pos);
 80018c4:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <LL_RCC_PLL1_SetM+0x28>)
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	f423 727c 	bic.w	r2, r3, #1008	; 0x3f0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	011b      	lsls	r3, r3, #4
 80018d0:	4904      	ldr	r1, [pc, #16]	; (80018e4 <LL_RCC_PLL1_SetM+0x28>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	628b      	str	r3, [r1, #40]	; 0x28
}
 80018d6:	bf00      	nop
 80018d8:	370c      	adds	r7, #12
 80018da:	46bd      	mov	sp, r7
 80018dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e0:	4770      	bx	lr
 80018e2:	bf00      	nop
 80018e4:	58024400 	.word	0x58024400

080018e8 <LL_RCC_PLL1_SetP>:
  * @param  P parameter can be a value between 2 (or 1*) and 128 (ODD division factor not supported)
  *
  * (*) : For stm32h72xxx and stm32h73xxx family lines.
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t P)
{
 80018e8:	b480      	push	{r7}
 80018ea:	b083      	sub	sp, #12
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_P1, (P - 1UL) << RCC_PLL1DIVR_P1_Pos);
 80018f0:	4b07      	ldr	r3, [pc, #28]	; (8001910 <LL_RCC_PLL1_SetP+0x28>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	f423 427e 	bic.w	r2, r3, #65024	; 0xfe00
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	3b01      	subs	r3, #1
 80018fc:	025b      	lsls	r3, r3, #9
 80018fe:	4904      	ldr	r1, [pc, #16]	; (8001910 <LL_RCC_PLL1_SetP+0x28>)
 8001900:	4313      	orrs	r3, r2
 8001902:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001904:	bf00      	nop
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	58024400 	.word	0x58024400

08001914 <LL_RCC_PLL1_SetQ>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t Q)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1, (Q - 1UL) << RCC_PLL1DIVR_Q1_Pos);
 800191c:	4b07      	ldr	r3, [pc, #28]	; (800193c <LL_RCC_PLL1_SetQ+0x28>)
 800191e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001920:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	041b      	lsls	r3, r3, #16
 800192a:	4904      	ldr	r1, [pc, #16]	; (800193c <LL_RCC_PLL1_SetQ+0x28>)
 800192c:	4313      	orrs	r3, r2
 800192e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr
 800193c:	58024400 	.word	0x58024400

08001940 <LL_RCC_PLL1_SetR>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t R)
{
 8001940:	b480      	push	{r7}
 8001942:	b083      	sub	sp, #12
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_R1, (R - 1UL) << RCC_PLL1DIVR_R1_Pos);
 8001948:	4b07      	ldr	r3, [pc, #28]	; (8001968 <LL_RCC_PLL1_SetR+0x28>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	3b01      	subs	r3, #1
 8001954:	061b      	lsls	r3, r3, #24
 8001956:	4904      	ldr	r1, [pc, #16]	; (8001968 <LL_RCC_PLL1_SetR+0x28>)
 8001958:	4313      	orrs	r3, r2
 800195a:	630b      	str	r3, [r1, #48]	; 0x30
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	58024400 	.word	0x58024400

0800196c <LL_RCC_PLL2_Enable>:
  * @brief  Enable PLL2
  * @rmtoll CR           PLL2ON         LL_RCC_PLL2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_Enable(void)
{
 800196c:	b480      	push	{r7}
 800196e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLL2ON);
 8001970:	4b05      	ldr	r3, [pc, #20]	; (8001988 <LL_RCC_PLL2_Enable+0x1c>)
 8001972:	681b      	ldr	r3, [r3, #0]
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <LL_RCC_PLL2_Enable+0x1c>)
 8001976:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800197a:	6013      	str	r3, [r2, #0]
}
 800197c:	bf00      	nop
 800197e:	46bd      	mov	sp, r7
 8001980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001984:	4770      	bx	lr
 8001986:	bf00      	nop
 8001988:	58024400 	.word	0x58024400

0800198c <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8001990:	4b07      	ldr	r3, [pc, #28]	; (80019b0 <LL_RCC_PLL2_IsReady+0x24>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001998:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800199c:	d101      	bne.n	80019a2 <LL_RCC_PLL2_IsReady+0x16>
 800199e:	2301      	movs	r3, #1
 80019a0:	e000      	b.n	80019a4 <LL_RCC_PLL2_IsReady+0x18>
 80019a2:	2300      	movs	r3, #0
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	58024400 	.word	0x58024400

080019b4 <LL_RCC_PLL2P_Enable>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2P_Enable(void)
{
 80019b4:	b480      	push	{r7}
 80019b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN);
 80019b8:	4b05      	ldr	r3, [pc, #20]	; (80019d0 <LL_RCC_PLL2P_Enable+0x1c>)
 80019ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <LL_RCC_PLL2P_Enable+0x1c>)
 80019be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80019c2:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 80019c4:	bf00      	nop
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	58024400 	.word	0x58024400

080019d4 <LL_RCC_PLL2_SetVCOOutputRange>:
  *         @arg @ref LL_RCC_PLLVCORANGE_WIDE
  *         @arg @ref LL_RCC_PLLVCORANGE_MEDIUM
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetVCOOutputRange(uint32_t VCORange)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL2VCOSEL, VCORange << RCC_PLLCFGR_PLL2VCOSEL_Pos);
 80019dc:	4b07      	ldr	r3, [pc, #28]	; (80019fc <LL_RCC_PLL2_SetVCOOutputRange+0x28>)
 80019de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019e0:	f023 0220 	bic.w	r2, r3, #32
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	015b      	lsls	r3, r3, #5
 80019e8:	4904      	ldr	r1, [pc, #16]	; (80019fc <LL_RCC_PLL2_SetVCOOutputRange+0x28>)
 80019ea:	4313      	orrs	r3, r2
 80019ec:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80019ee:	bf00      	nop
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	58024400 	.word	0x58024400

08001a00 <LL_RCC_PLL2_SetVCOInputRange>:
  *         @arg @ref LL_RCC_PLLINPUTRANGE_4_8
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetVCOInputRange(uint32_t InputRange)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL2RGE, InputRange << RCC_PLLCFGR_PLL2RGE_Pos);
 8001a08:	4b07      	ldr	r3, [pc, #28]	; (8001a28 <LL_RCC_PLL2_SetVCOInputRange+0x28>)
 8001a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a0c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	019b      	lsls	r3, r3, #6
 8001a14:	4904      	ldr	r1, [pc, #16]	; (8001a28 <LL_RCC_PLL2_SetVCOInputRange+0x28>)
 8001a16:	4313      	orrs	r3, r2
 8001a18:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	58024400 	.word	0x58024400

08001a2c <LL_RCC_PLL2_SetN>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_SetN
  * @param  N parameter can be a value between 4 and 512
  */
__STATIC_INLINE void LL_RCC_PLL2_SetN(uint32_t N)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_N2, (N - 1UL) << RCC_PLL2DIVR_N2_Pos);
 8001a34:	4b07      	ldr	r3, [pc, #28]	; (8001a54 <LL_RCC_PLL2_SetN+0x28>)
 8001a36:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001a38:	4b07      	ldr	r3, [pc, #28]	; (8001a58 <LL_RCC_PLL2_SetN+0x2c>)
 8001a3a:	4013      	ands	r3, r2
 8001a3c:	687a      	ldr	r2, [r7, #4]
 8001a3e:	3a01      	subs	r2, #1
 8001a40:	4904      	ldr	r1, [pc, #16]	; (8001a54 <LL_RCC_PLL2_SetN+0x28>)
 8001a42:	4313      	orrs	r3, r2
 8001a44:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	58024400 	.word	0x58024400
 8001a58:	fffffe00 	.word	0xfffffe00

08001a5c <LL_RCC_PLL2_SetM>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL2_SetM(uint32_t M)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	b083      	sub	sp, #12
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2, M << RCC_PLLCKSELR_DIVM2_Pos);
 8001a64:	4b07      	ldr	r3, [pc, #28]	; (8001a84 <LL_RCC_PLL2_SetM+0x28>)
 8001a66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a68:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	031b      	lsls	r3, r3, #12
 8001a70:	4904      	ldr	r1, [pc, #16]	; (8001a84 <LL_RCC_PLL2_SetM+0x28>)
 8001a72:	4313      	orrs	r3, r2
 8001a74:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	58024400 	.word	0x58024400

08001a88 <LL_RCC_PLL2_SetP>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_SetP
  * @param  P parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetP(uint32_t P)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_P2, (P - 1UL) << RCC_PLL2DIVR_P2_Pos);
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <LL_RCC_PLL2_SetP+0x28>)
 8001a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a94:	f423 427e 	bic.w	r2, r3, #65024	; 0xfe00
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	025b      	lsls	r3, r3, #9
 8001a9e:	4904      	ldr	r1, [pc, #16]	; (8001ab0 <LL_RCC_PLL2_SetP+0x28>)
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001aa4:	bf00      	nop
 8001aa6:	370c      	adds	r7, #12
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	58024400 	.word	0x58024400

08001ab4 <LL_RCC_PLL2_SetQ>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetQ(uint32_t Q)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b083      	sub	sp, #12
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2, (Q - 1UL) << RCC_PLL2DIVR_Q2_Pos);
 8001abc:	4b07      	ldr	r3, [pc, #28]	; (8001adc <LL_RCC_PLL2_SetQ+0x28>)
 8001abe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac0:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	3b01      	subs	r3, #1
 8001ac8:	041b      	lsls	r3, r3, #16
 8001aca:	4904      	ldr	r1, [pc, #16]	; (8001adc <LL_RCC_PLL2_SetQ+0x28>)
 8001acc:	4313      	orrs	r3, r2
 8001ace:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	58024400 	.word	0x58024400

08001ae0 <LL_RCC_PLL2_SetR>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetR(uint32_t R)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_R2, (R - 1UL) << RCC_PLL2DIVR_R2_Pos);
 8001ae8:	4b07      	ldr	r3, [pc, #28]	; (8001b08 <LL_RCC_PLL2_SetR+0x28>)
 8001aea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001aec:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3b01      	subs	r3, #1
 8001af4:	061b      	lsls	r3, r3, #24
 8001af6:	4904      	ldr	r1, [pc, #16]	; (8001b08 <LL_RCC_PLL2_SetR+0x28>)
 8001af8:	4313      	orrs	r3, r2
 8001afa:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001afc:	bf00      	nop
 8001afe:	370c      	adds	r7, #12
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	58024400 	.word	0x58024400

08001b0c <LL_APB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB4_GRP1_EnableClock(uint32_t Periphs)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b085      	sub	sp, #20
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB4ENR, Periphs);
 8001b14:	4b0a      	ldr	r3, [pc, #40]	; (8001b40 <LL_APB4_GRP1_EnableClock+0x34>)
 8001b16:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001b1a:	4909      	ldr	r1, [pc, #36]	; (8001b40 <LL_APB4_GRP1_EnableClock+0x34>)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	f8c1 30f4 	str.w	r3, [r1, #244]	; 0xf4
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB4ENR, Periphs);
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <LL_APB4_GRP1_EnableClock+0x34>)
 8001b26:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001b30:	68fb      	ldr	r3, [r7, #12]
}
 8001b32:	bf00      	nop
 8001b34:	3714      	adds	r7, #20
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	58024400 	.word	0x58024400

08001b44 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b083      	sub	sp, #12
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <LL_FLASH_SetLatency+0x24>)
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f023 020f 	bic.w	r2, r3, #15
 8001b54:	4904      	ldr	r1, [pc, #16]	; (8001b68 <LL_FLASH_SetLatency+0x24>)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	600b      	str	r3, [r1, #0]
}
 8001b5c:	bf00      	nop
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr
 8001b68:	52002000 	.word	0x52002000

08001b6c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_5
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001b6c:	b480      	push	{r7}
 8001b6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001b70:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <LL_FLASH_GetLatency+0x18>)
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	f003 030f 	and.w	r3, r3, #15
}
 8001b78:	4618      	mov	r0, r3
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
 8001b82:	bf00      	nop
 8001b84:	52002000 	.word	0x52002000

08001b88 <LL_PWR_ConfigSupply>:
  *         @arg @ref LL_PWR_SMPS_2V5_SUPPLIES_EXT
  *         @arg @ref LL_PWR_EXTERNAL_SOURCE_SUPPLY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ConfigSupply(uint32_t SupplySource)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, (PWR_CR3_SMPSLEVEL | PWR_CR3_SMPSEXTHP | PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <LL_PWR_ConfigSupply+0x24>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8001b98:	4904      	ldr	r1, [pc, #16]	; (8001bac <LL_PWR_ConfigSupply+0x24>)
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	60cb      	str	r3, [r1, #12]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr
 8001bac:	58024800 	.word	0x58024800

08001bb0 <LL_PWR_SetRegulVoltageScaling>:
  * @note   For all H7 lines except STM32H7Axxx and STM32H7Bxxx lines, VOS0
  *         is applied when PWR_D3CR_VOS[1:0] = 0b11 and  SYSCFG_PWRCR_ODEN = 0b1.
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
#if defined (PWR_CPUCR_PDDS_D2)
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001bc0:	4904      	ldr	r1, [pc, #16]	; (8001bd4 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
#endif /* PWR_CPUCR_PDDS_D2 */
}
 8001bc8:	bf00      	nop
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	58024800 	.word	0x58024800

08001bd8 <LL_PWR_IsActiveFlag_VOS>:
  *         or if its output voltage is still changing to the required voltage level
  * @rmtoll D3CR   VOSRDY       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001bd8:	b480      	push	{r7}
 8001bda:	af00      	add	r7, sp, #0
#if defined (PWR_CPUCR_PDDS_D2)
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 8001bdc:	4b07      	ldr	r3, [pc, #28]	; (8001bfc <LL_PWR_IsActiveFlag_VOS+0x24>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001be4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001be8:	d101      	bne.n	8001bee <LL_PWR_IsActiveFlag_VOS+0x16>
 8001bea:	2301      	movs	r3, #1
 8001bec:	e000      	b.n	8001bf0 <LL_PWR_IsActiveFlag_VOS+0x18>
 8001bee:	2300      	movs	r3, #0
#else
  return ((READ_BIT(PWR->SRDCR, PWR_SRDCR_VOSRDY) == (PWR_SRDCR_VOSRDY)) ? 1UL : 0UL);
#endif /* PWR_CPUCR_PDDS_D2 */
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bf8:	4770      	bx	lr
 8001bfa:	bf00      	nop
 8001bfc:	58024800 	.word	0x58024800

08001c00 <LL_GPIO_IsInputPinSet>:
{
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	691a      	ldr	r2, [r3, #16]
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	4013      	ands	r3, r2
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d101      	bne.n	8001c1c <LL_GPIO_IsInputPinSet+0x1c>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <LL_GPIO_IsInputPinSet+0x1e>
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB4_GRP1_EnableClock(LL_APB4_GRP1_PERIPH_SYSCFG);
 8001c30:	2002      	movs	r0, #2
 8001c32:	f7ff ff6b 	bl	8001b0c <LL_APB4_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c36:	2003      	movs	r0, #3
 8001c38:	f7ff fc2c 	bl	8001494 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001c3c:	f7ff fc4e 	bl	80014dc <__NVIC_GetPriorityGrouping>
 8001c40:	4603      	mov	r3, r0
 8001c42:	2200      	movs	r2, #0
 8001c44:	210f      	movs	r1, #15
 8001c46:	4618      	mov	r0, r3
 8001c48:	f7ff fc80 	bl	800154c <NVIC_EncodePriority>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4619      	mov	r1, r3
 8001c50:	f04f 30ff 	mov.w	r0, #4294967295
 8001c54:	f7ff fc50 	bl	80014f8 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001c58:	f000 f9b6 	bl	8001fc8 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001c5c:	f000 fa26 	bl	80020ac <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001c60:	f7ff fbb6 	bl	80013d0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001c64:	f7ff fb60 	bl	8001328 <MX_DMA_Init>
  MX_TIM1_Init();
 8001c68:	f001 fdc6 	bl	80037f8 <MX_TIM1_Init>
  MX_ADC2_Init();
 8001c6c:	f7fe ff22 	bl	8000ab4 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001c70:	f7fe fe28 	bl	80008c4 <MX_ADC1_Init>
  MX_TIM8_Init();
 8001c74:	f001 ff9a 	bl	8003bac <MX_TIM8_Init>
  MX_TIM3_Init();
 8001c78:	f001 fed8 	bl	8003a2c <MX_TIM3_Init>
  MX_TIM13_Init();
 8001c7c:	f002 f89e 	bl	8003dbc <MX_TIM13_Init>
  MX_TIM2_Init();
 8001c80:	f001 fe5e 	bl	8003940 <MX_TIM2_Init>
  MX_TIM4_Init();
 8001c84:	f001 ff52 	bl	8003b2c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */



	 ADC1_Init_Custom(adc_buffer);
 8001c88:	48a0      	ldr	r0, [pc, #640]	; (8001f0c <main+0x2e0>)
 8001c8a:	f7ff f8d3 	bl	8000e34 <ADC1_Init_Custom>
	 ADC2_Init_Custom(adc2_buffer);
 8001c8e:	48a0      	ldr	r0, [pc, #640]	; (8001f10 <main+0x2e4>)
 8001c90:	f7ff f91a 	bl	8000ec8 <ADC2_Init_Custom>

	 Mesurments_Start();
 8001c94:	f001 f894 	bl	8002dc0 <Mesurments_Start>

	 PowerOnSequence_Start();
 8001c98:	f000 ffc8 	bl	8002c2c <PowerOnSequence_Start>

	 CEC_Start();
 8001c9c:	f001 f87e 	bl	8002d9c <CEC_Start>

	 Fan_Start();
 8001ca0:	f001 f846 	bl	8002d30 <Fan_Start>

	 OCP_Init(output_max_current_ocp);
 8001ca4:	4b9b      	ldr	r3, [pc, #620]	; (8001f14 <main+0x2e8>)
 8001ca6:	edd3 7a00 	vldr	s15, [r3]
 8001caa:	eeb0 0a67 	vmov.f32	s0, s15
 8001cae:	f000 fce3 	bl	8002678 <OCP_Init>


	 PI_Init(&pi_regulator, kp_V_start, ki_V_start, TS, output_min_voltage, output_max_voltage);
 8001cb2:	4b99      	ldr	r3, [pc, #612]	; (8001f18 <main+0x2ec>)
 8001cb4:	edd3 7a00 	vldr	s15, [r3]
 8001cb8:	4b98      	ldr	r3, [pc, #608]	; (8001f1c <main+0x2f0>)
 8001cba:	ed93 7a00 	vldr	s14, [r3]
 8001cbe:	4b98      	ldr	r3, [pc, #608]	; (8001f20 <main+0x2f4>)
 8001cc0:	edd3 6a00 	vldr	s13, [r3]
 8001cc4:	4b97      	ldr	r3, [pc, #604]	; (8001f24 <main+0x2f8>)
 8001cc6:	ed93 6a00 	vldr	s12, [r3]
 8001cca:	4b97      	ldr	r3, [pc, #604]	; (8001f28 <main+0x2fc>)
 8001ccc:	edd3 5a00 	vldr	s11, [r3]
 8001cd0:	eeb0 2a65 	vmov.f32	s4, s11
 8001cd4:	eef0 1a46 	vmov.f32	s3, s12
 8001cd8:	eeb0 1a66 	vmov.f32	s2, s13
 8001cdc:	eef0 0a47 	vmov.f32	s1, s14
 8001ce0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce4:	4891      	ldr	r0, [pc, #580]	; (8001f2c <main+0x300>)
 8001ce6:	f000 fd3b 	bl	8002760 <PI_Init>
	 PIC_Init(&pic_regulator, kp_I_start, ki_I_start, TS, output_min_current, output_max_current);// Ts = 2 µs (500 kHz)
 8001cea:	4b91      	ldr	r3, [pc, #580]	; (8001f30 <main+0x304>)
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	4b90      	ldr	r3, [pc, #576]	; (8001f34 <main+0x308>)
 8001cf2:	ed93 7a00 	vldr	s14, [r3]
 8001cf6:	4b8a      	ldr	r3, [pc, #552]	; (8001f20 <main+0x2f4>)
 8001cf8:	edd3 6a00 	vldr	s13, [r3]
 8001cfc:	4b8e      	ldr	r3, [pc, #568]	; (8001f38 <main+0x30c>)
 8001cfe:	ed93 6a00 	vldr	s12, [r3]
 8001d02:	4b8e      	ldr	r3, [pc, #568]	; (8001f3c <main+0x310>)
 8001d04:	edd3 5a00 	vldr	s11, [r3]
 8001d08:	eeb0 2a65 	vmov.f32	s4, s11
 8001d0c:	eef0 1a46 	vmov.f32	s3, s12
 8001d10:	eeb0 1a66 	vmov.f32	s2, s13
 8001d14:	eef0 0a47 	vmov.f32	s1, s14
 8001d18:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1c:	4888      	ldr	r0, [pc, #544]	; (8001f40 <main+0x314>)
 8001d1e:	f000 fdf9 	bl	8002914 <PIC_Init>
	 NOL_Init(&nol_regulator, limit_high, limit_low, 0);
 8001d22:	4b88      	ldr	r3, [pc, #544]	; (8001f44 <main+0x318>)
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	4b87      	ldr	r3, [pc, #540]	; (8001f48 <main+0x31c>)
 8001d2a:	ed93 7a00 	vldr	s14, [r3]
 8001d2e:	2100      	movs	r1, #0
 8001d30:	eef0 0a47 	vmov.f32	s1, s14
 8001d34:	eeb0 0a67 	vmov.f32	s0, s15
 8001d38:	4884      	ldr	r0, [pc, #528]	; (8001f4c <main+0x320>)
 8001d3a:	f000 fa04 	bl	8002146 <NOL_Init>

	 Buck_Start();
 8001d3e:	f001 f815 	bl	8002d6c <Buck_Start>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	  	test++;
 8001d42:	4b83      	ldr	r3, [pc, #524]	; (8001f50 <main+0x324>)
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	3301      	adds	r3, #1
 8001d48:	4a81      	ldr	r2, [pc, #516]	; (8001f50 <main+0x324>)
 8001d4a:	6013      	str	r3, [r2, #0]


	  	voltage_out_adc = adc_to_voltage_out(adc_buffer[0] - offset_adc1_ch0);
 8001d4c:	4b6f      	ldr	r3, [pc, #444]	; (8001f0c <main+0x2e0>)
 8001d4e:	881b      	ldrh	r3, [r3, #0]
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d58:	4b7e      	ldr	r3, [pc, #504]	; (8001f54 <main+0x328>)
 8001d5a:	edd3 7a00 	vldr	s15, [r3]
 8001d5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d62:	eeb0 0a67 	vmov.f32	s0, s15
 8001d66:	f7ff f8f9 	bl	8000f5c <adc_to_voltage_out>
 8001d6a:	eef0 7a40 	vmov.f32	s15, s0
 8001d6e:	4b7a      	ldr	r3, [pc, #488]	; (8001f58 <main+0x32c>)
 8001d70:	edc3 7a00 	vstr	s15, [r3]

	  	current_inductor_adc = adc_to_current_inductor(adc_buffer[1] - offset_adc1_ch1);
 8001d74:	4b65      	ldr	r3, [pc, #404]	; (8001f0c <main+0x2e0>)
 8001d76:	885b      	ldrh	r3, [r3, #2]
 8001d78:	ee07 3a90 	vmov	s15, r3
 8001d7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d80:	4b76      	ldr	r3, [pc, #472]	; (8001f5c <main+0x330>)
 8001d82:	edd3 7a00 	vldr	s15, [r3]
 8001d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d8a:	eeb0 0a67 	vmov.f32	s0, s15
 8001d8e:	f7ff f8ff 	bl	8000f90 <adc_to_current_inductor>
 8001d92:	eef0 7a40 	vmov.f32	s15, s0
 8001d96:	4b72      	ldr	r3, [pc, #456]	; (8001f60 <main+0x334>)
 8001d98:	edc3 7a00 	vstr	s15, [r3]

	  	voltage_in_adc = adc2_buffer[0] - offset_adc2_ch0;
 8001d9c:	4b5c      	ldr	r3, [pc, #368]	; (8001f10 <main+0x2e4>)
 8001d9e:	881b      	ldrh	r3, [r3, #0]
 8001da0:	ee07 3a90 	vmov	s15, r3
 8001da4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001da8:	4b6e      	ldr	r3, [pc, #440]	; (8001f64 <main+0x338>)
 8001daa:	edd3 7a00 	vldr	s15, [r3]
 8001dae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001db2:	4b6d      	ldr	r3, [pc, #436]	; (8001f68 <main+0x33c>)
 8001db4:	edc3 7a00 	vstr	s15, [r3]


	  	current_out_adc = adc_to_current_output(adc2_buffer[1] - offset_adc2_ch1);
 8001db8:	4b55      	ldr	r3, [pc, #340]	; (8001f10 <main+0x2e4>)
 8001dba:	885b      	ldrh	r3, [r3, #2]
 8001dbc:	ee07 3a90 	vmov	s15, r3
 8001dc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc4:	4b69      	ldr	r3, [pc, #420]	; (8001f6c <main+0x340>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dce:	eeb0 0a67 	vmov.f32	s0, s15
 8001dd2:	f7ff f8fb 	bl	8000fcc <adc_to_current_output>
 8001dd6:	eef0 7a40 	vmov.f32	s15, s0
 8001dda:	4b65      	ldr	r3, [pc, #404]	; (8001f70 <main+0x344>)
 8001ddc:	edc3 7a00 	vstr	s15, [r3]

		filter(&voltage_out_adc_out,       &voltage_out_adc_old,       coff1, voltage_out_adc);
 8001de0:	4b64      	ldr	r3, [pc, #400]	; (8001f74 <main+0x348>)
 8001de2:	edd3 7a00 	vldr	s15, [r3]
 8001de6:	4b5c      	ldr	r3, [pc, #368]	; (8001f58 <main+0x32c>)
 8001de8:	ed93 7a00 	vldr	s14, [r3]
 8001dec:	eef0 0a47 	vmov.f32	s1, s14
 8001df0:	eeb0 0a67 	vmov.f32	s0, s15
 8001df4:	4960      	ldr	r1, [pc, #384]	; (8001f78 <main+0x34c>)
 8001df6:	4861      	ldr	r0, [pc, #388]	; (8001f7c <main+0x350>)
 8001df8:	f000 f97c 	bl	80020f4 <filter>

	    filter(&current_inductor_adc_out,  &current_inductor_adc_old,  coff, current_inductor_adc);
 8001dfc:	4b60      	ldr	r3, [pc, #384]	; (8001f80 <main+0x354>)
 8001dfe:	edd3 7a00 	vldr	s15, [r3]
 8001e02:	4b57      	ldr	r3, [pc, #348]	; (8001f60 <main+0x334>)
 8001e04:	ed93 7a00 	vldr	s14, [r3]
 8001e08:	eef0 0a47 	vmov.f32	s1, s14
 8001e0c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e10:	495c      	ldr	r1, [pc, #368]	; (8001f84 <main+0x358>)
 8001e12:	485d      	ldr	r0, [pc, #372]	; (8001f88 <main+0x35c>)
 8001e14:	f000 f96e 	bl	80020f4 <filter>


	    filter(&current_out_adc_out,       &current_out_adc_old,       0.1, current_out_adc);
 8001e18:	4b55      	ldr	r3, [pc, #340]	; (8001f70 <main+0x344>)
 8001e1a:	edd3 7a00 	vldr	s15, [r3]
 8001e1e:	eef0 0a67 	vmov.f32	s1, s15
 8001e22:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8001f8c <main+0x360>
 8001e26:	495a      	ldr	r1, [pc, #360]	; (8001f90 <main+0x364>)
 8001e28:	485a      	ldr	r0, [pc, #360]	; (8001f94 <main+0x368>)
 8001e2a:	f000 f963 	bl	80020f4 <filter>
//	  	current_out = adc_to_current_out(adc2_buffer[1]);



	  	// Wykrycie przekroczenia progu
	  	if( current_out_adc >  prog_wejscia )
 8001e2e:	4b50      	ldr	r3, [pc, #320]	; (8001f70 <main+0x344>)
 8001e30:	ed93 7a00 	vldr	s14, [r3]
 8001e34:	4b58      	ldr	r3, [pc, #352]	; (8001f98 <main+0x36c>)
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e42:	dd08      	ble.n	8001e56 <main+0x22a>
	  	{
	  		numberoftriger_tomuch++;
 8001e44:	4b55      	ldr	r3, [pc, #340]	; (8001f9c <main+0x370>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	3301      	adds	r3, #1
 8001e4a:	4a54      	ldr	r2, [pc, #336]	; (8001f9c <main+0x370>)
 8001e4c:	6013      	str	r3, [r2, #0]
	  		numberoftriger_git = 0;
 8001e4e:	4b54      	ldr	r3, [pc, #336]	; (8001fa0 <main+0x374>)
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	e00f      	b.n	8001e76 <main+0x24a>

	  	} else if(current_out_adc < prog_wejscia)
 8001e56:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <main+0x344>)
 8001e58:	ed93 7a00 	vldr	s14, [r3]
 8001e5c:	4b4e      	ldr	r3, [pc, #312]	; (8001f98 <main+0x36c>)
 8001e5e:	edd3 7a00 	vldr	s15, [r3]
 8001e62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e6a:	d504      	bpl.n	8001e76 <main+0x24a>
	  	{
	  		numberoftriger_git++;
 8001e6c:	4b4c      	ldr	r3, [pc, #304]	; (8001fa0 <main+0x374>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	3301      	adds	r3, #1
 8001e72:	4a4b      	ldr	r2, [pc, #300]	; (8001fa0 <main+0x374>)
 8001e74:	6013      	str	r3, [r2, #0]
	  	}




	  	ocp_state = OCP_Check(current_out_adc_out);
 8001e76:	4b47      	ldr	r3, [pc, #284]	; (8001f94 <main+0x368>)
 8001e78:	edd3 7a00 	vldr	s15, [r3]
 8001e7c:	eeb0 0a67 	vmov.f32	s0, s15
 8001e80:	f000 fc10 	bl	80026a4 <OCP_Check>
 8001e84:	4603      	mov	r3, r0
 8001e86:	b29a      	uxth	r2, r3
 8001e88:	4b46      	ldr	r3, [pc, #280]	; (8001fa4 <main+0x378>)
 8001e8a:	801a      	strh	r2, [r3, #0]
	  	controll_enabled = State_Controller_Update(state, ocp_state);
 8001e8c:	4b46      	ldr	r3, [pc, #280]	; (8001fa8 <main+0x37c>)
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	4a44      	ldr	r2, [pc, #272]	; (8001fa4 <main+0x378>)
 8001e92:	8812      	ldrh	r2, [r2, #0]
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff f928 	bl	80010ec <State_Controller_Update>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	4a43      	ldr	r2, [pc, #268]	; (8001fac <main+0x380>)
 8001ea0:	6013      	str	r3, [r2, #0]

	    buck_fault = LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_2);
 8001ea2:	2104      	movs	r1, #4
 8001ea4:	4842      	ldr	r0, [pc, #264]	; (8001fb0 <main+0x384>)
 8001ea6:	f7ff feab 	bl	8001c00 <LL_GPIO_IsInputPinSet>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	b29a      	uxth	r2, r3
 8001eae:	4b41      	ldr	r3, [pc, #260]	; (8001fb4 <main+0x388>)
 8001eb0:	801a      	strh	r2, [r3, #0]
	    cec_fault = LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_9);
 8001eb2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001eb6:	483e      	ldr	r0, [pc, #248]	; (8001fb0 <main+0x384>)
 8001eb8:	f7ff fea2 	bl	8001c00 <LL_GPIO_IsInputPinSet>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	4b3d      	ldr	r3, [pc, #244]	; (8001fb8 <main+0x38c>)
 8001ec2:	801a      	strh	r2, [r3, #0]
	    half_bridge_fault = LL_GPIO_IsInputPinSet(GPIOD, LL_GPIO_PIN_4);
 8001ec4:	2110      	movs	r1, #16
 8001ec6:	483d      	ldr	r0, [pc, #244]	; (8001fbc <main+0x390>)
 8001ec8:	f7ff fe9a 	bl	8001c00 <LL_GPIO_IsInputPinSet>
 8001ecc:	4603      	mov	r3, r0
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	4b3b      	ldr	r3, [pc, #236]	; (8001fc0 <main+0x394>)
 8001ed2:	801a      	strh	r2, [r3, #0]



	    setpoint = IPC_SHARED->nap_zadane;
 8001ed4:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	4a3a      	ldr	r2, [pc, #232]	; (8001fc4 <main+0x398>)
 8001edc:	6013      	str	r3, [r2, #0]

	    state = IPC_SHARED->stan_przeksztaltnika;
 8001ede:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8001ee2:	7a1b      	ldrb	r3, [r3, #8]
 8001ee4:	b29a      	uxth	r2, r3
 8001ee6:	4b30      	ldr	r3, [pc, #192]	; (8001fa8 <main+0x37c>)
 8001ee8:	801a      	strh	r2, [r3, #0]

	    IPC_SHARED->nap_wejsciowe = voltage_out_adc_out;
 8001eea:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 8001eee:	4b23      	ldr	r3, [pc, #140]	; (8001f7c <main+0x350>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	6053      	str	r3, [r2, #4]





	    OCP_Reset(current_out_adc_out, state);
 8001ef4:	4b27      	ldr	r3, [pc, #156]	; (8001f94 <main+0x368>)
 8001ef6:	edd3 7a00 	vldr	s15, [r3]
 8001efa:	4b2b      	ldr	r3, [pc, #172]	; (8001fa8 <main+0x37c>)
 8001efc:	881b      	ldrh	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	eeb0 0a67 	vmov.f32	s0, s15
 8001f04:	f000 fbf4 	bl	80026f0 <OCP_Reset>
	  	test++;
 8001f08:	e71b      	b.n	8001d42 <main+0x116>
 8001f0a:	bf00      	nop
 8001f0c:	24000088 	.word	0x24000088
 8001f10:	2400008c 	.word	0x2400008c
 8001f14:	24000034 	.word	0x24000034
 8001f18:	24000004 	.word	0x24000004
 8001f1c:	24000008 	.word	0x24000008
 8001f20:	24000024 	.word	0x24000024
 8001f24:	240000d4 	.word	0x240000d4
 8001f28:	24000014 	.word	0x24000014
 8001f2c:	2400012c 	.word	0x2400012c
 8001f30:	2400000c 	.word	0x2400000c
 8001f34:	24000010 	.word	0x24000010
 8001f38:	240000d8 	.word	0x240000d8
 8001f3c:	24000018 	.word	0x24000018
 8001f40:	2400014c 	.word	0x2400014c
 8001f44:	24000020 	.word	0x24000020
 8001f48:	2400001c 	.word	0x2400001c
 8001f4c:	2400016c 	.word	0x2400016c
 8001f50:	240000b4 	.word	0x240000b4
 8001f54:	24000114 	.word	0x24000114
 8001f58:	240000ec 	.word	0x240000ec
 8001f5c:	24000118 	.word	0x24000118
 8001f60:	240000f0 	.word	0x240000f0
 8001f64:	2400011c 	.word	0x2400011c
 8001f68:	240000f4 	.word	0x240000f4
 8001f6c:	24000120 	.word	0x24000120
 8001f70:	240000f8 	.word	0x240000f8
 8001f74:	24000030 	.word	0x24000030
 8001f78:	24000108 	.word	0x24000108
 8001f7c:	240000fc 	.word	0x240000fc
 8001f80:	2400002c 	.word	0x2400002c
 8001f84:	2400010c 	.word	0x2400010c
 8001f88:	24000100 	.word	0x24000100
 8001f8c:	3dcccccd 	.word	0x3dcccccd
 8001f90:	24000110 	.word	0x24000110
 8001f94:	24000104 	.word	0x24000104
 8001f98:	24000028 	.word	0x24000028
 8001f9c:	24000124 	.word	0x24000124
 8001fa0:	24000128 	.word	0x24000128
 8001fa4:	240000e6 	.word	0x240000e6
 8001fa8:	240000e8 	.word	0x240000e8
 8001fac:	240000dc 	.word	0x240000dc
 8001fb0:	58020800 	.word	0x58020800
 8001fb4:	240000e0 	.word	0x240000e0
 8001fb8:	240000e2 	.word	0x240000e2
 8001fbc:	58020c00 	.word	0x58020c00
 8001fc0:	240000e4 	.word	0x240000e4
 8001fc4:	240000bc 	.word	0x240000bc

08001fc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001fcc:	2004      	movs	r0, #4
 8001fce:	f7ff fdb9 	bl	8001b44 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8001fd2:	bf00      	nop
 8001fd4:	f7ff fdca 	bl	8001b6c <LL_FLASH_GetLatency>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d1fa      	bne.n	8001fd4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_ConfigSupply(LL_PWR_LDO_SUPPLY);
 8001fde:	2002      	movs	r0, #2
 8001fe0:	f7ff fdd2 	bl	8001b88 <LL_PWR_ConfigSupply>
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE0);
 8001fe4:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8001fe8:	f7ff fde2 	bl	8001bb0 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001fec:	bf00      	nop
 8001fee:	f7ff fdf3 	bl	8001bd8 <LL_PWR_IsActiveFlag_VOS>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d0fa      	beq.n	8001fee <SystemClock_Config+0x26>
  {
  }
  LL_RCC_HSI_Enable();
 8001ff8:	f7ff fadc 	bl	80015b4 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001ffc:	bf00      	nop
 8001ffe:	f7ff fae9 	bl	80015d4 <LL_RCC_HSI_IsReady>
 8002002:	4603      	mov	r3, r0
 8002004:	2b01      	cmp	r3, #1
 8002006:	d1fa      	bne.n	8001ffe <SystemClock_Config+0x36>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(64);
 8002008:	2040      	movs	r0, #64	; 0x40
 800200a:	f7ff fb09 	bl	8001620 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_SetDivider(LL_RCC_HSI_DIV1);
 800200e:	2000      	movs	r0, #0
 8002010:	f7ff faf2 	bl	80015f8 <LL_RCC_HSI_SetDivider>
  LL_RCC_PLL_SetSource(LL_RCC_PLLSOURCE_HSI);
 8002014:	2000      	movs	r0, #0
 8002016:	f7ff fbc5 	bl	80017a4 <LL_RCC_PLL_SetSource>
  LL_RCC_PLL1P_Enable();
 800201a:	f7ff fbfb 	bl	8001814 <LL_RCC_PLL1P_Enable>
  LL_RCC_PLL1_SetVCOInputRange(LL_RCC_PLLINPUTRANGE_8_16);
 800201e:	2003      	movs	r0, #3
 8002020:	f7ff fc1e 	bl	8001860 <LL_RCC_PLL1_SetVCOInputRange>
  LL_RCC_PLL1_SetVCOOutputRange(LL_RCC_PLLVCORANGE_WIDE);
 8002024:	2000      	movs	r0, #0
 8002026:	f7ff fc05 	bl	8001834 <LL_RCC_PLL1_SetVCOOutputRange>
  LL_RCC_PLL1_SetM(4);
 800202a:	2004      	movs	r0, #4
 800202c:	f7ff fc46 	bl	80018bc <LL_RCC_PLL1_SetM>
  LL_RCC_PLL1_SetN(60);
 8002030:	203c      	movs	r0, #60	; 0x3c
 8002032:	f7ff fc2b 	bl	800188c <LL_RCC_PLL1_SetN>
  LL_RCC_PLL1_SetP(2);
 8002036:	2002      	movs	r0, #2
 8002038:	f7ff fc56 	bl	80018e8 <LL_RCC_PLL1_SetP>
  LL_RCC_PLL1_SetQ(2);
 800203c:	2002      	movs	r0, #2
 800203e:	f7ff fc69 	bl	8001914 <LL_RCC_PLL1_SetQ>
  LL_RCC_PLL1_SetR(2);
 8002042:	2002      	movs	r0, #2
 8002044:	f7ff fc7c 	bl	8001940 <LL_RCC_PLL1_SetR>
  LL_RCC_PLL1_Enable();
 8002048:	f7ff fbc0 	bl	80017cc <LL_RCC_PLL1_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL1_IsReady() != 1)
 800204c:	bf00      	nop
 800204e:	f7ff fbcd 	bl	80017ec <LL_RCC_PLL1_IsReady>
 8002052:	4603      	mov	r3, r0
 8002054:	2b01      	cmp	r3, #1
 8002056:	d1fa      	bne.n	800204e <SystemClock_Config+0x86>
  {
  }

   /* Intermediate AHB prescaler 2 when target frequency clock is higher than 80 MHz */
   LL_RCC_SetAHBPrescaler(LL_RCC_AHB_DIV_2);
 8002058:	2008      	movs	r0, #8
 800205a:	f7ff fb3f 	bl	80016dc <LL_RCC_SetAHBPrescaler>

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);
 800205e:	2003      	movs	r0, #3
 8002060:	f7ff fb06 	bl	8001670 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1)
 8002064:	bf00      	nop
 8002066:	f7ff fb17 	bl	8001698 <LL_RCC_GetSysClkSource>
 800206a:	4603      	mov	r3, r0
 800206c:	2b18      	cmp	r3, #24
 800206e:	d1fa      	bne.n	8002066 <SystemClock_Config+0x9e>
  {

  }
  LL_RCC_SetSysPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff fb1f 	bl	80016b4 <LL_RCC_SetSysPrescaler>
  LL_RCC_SetAHBPrescaler(LL_RCC_AHB_DIV_2);
 8002076:	2008      	movs	r0, #8
 8002078:	f7ff fb30 	bl	80016dc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 800207c:	2040      	movs	r0, #64	; 0x40
 800207e:	f7ff fb41 	bl	8001704 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8002082:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8002086:	f7ff fb51 	bl	800172c <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetAPB3Prescaler(LL_RCC_APB3_DIV_2);
 800208a:	2040      	movs	r0, #64	; 0x40
 800208c:	f7ff fb62 	bl	8001754 <LL_RCC_SetAPB3Prescaler>
  LL_RCC_SetAPB4Prescaler(LL_RCC_APB4_DIV_2);
 8002090:	2040      	movs	r0, #64	; 0x40
 8002092:	f7ff fb73 	bl	800177c <LL_RCC_SetAPB4Prescaler>

  LL_Init1msTick(480000000);
 8002096:	4804      	ldr	r0, [pc, #16]	; (80020a8 <SystemClock_Config+0xe0>)
 8002098:	f002 fdee 	bl	8004c78 <LL_Init1msTick>

  LL_SetSystemCoreClock(480000000);
 800209c:	4802      	ldr	r0, [pc, #8]	; (80020a8 <SystemClock_Config+0xe0>)
 800209e:	f002 fe21 	bl	8004ce4 <LL_SetSystemCoreClock>
}
 80020a2:	bf00      	nop
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	1c9c3800 	.word	0x1c9c3800

080020ac <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	af00      	add	r7, sp, #0
  LL_RCC_PLL2P_Enable();
 80020b0:	f7ff fc80 	bl	80019b4 <LL_RCC_PLL2P_Enable>
  LL_RCC_PLL2_SetVCOInputRange(LL_RCC_PLLINPUTRANGE_2_4);
 80020b4:	2001      	movs	r0, #1
 80020b6:	f7ff fca3 	bl	8001a00 <LL_RCC_PLL2_SetVCOInputRange>
  LL_RCC_PLL2_SetVCOOutputRange(LL_RCC_PLLVCORANGE_WIDE);
 80020ba:	2000      	movs	r0, #0
 80020bc:	f7ff fc8a 	bl	80019d4 <LL_RCC_PLL2_SetVCOOutputRange>
  LL_RCC_PLL2_SetM(32);
 80020c0:	2020      	movs	r0, #32
 80020c2:	f7ff fccb 	bl	8001a5c <LL_RCC_PLL2_SetM>
  LL_RCC_PLL2_SetN(100);
 80020c6:	2064      	movs	r0, #100	; 0x64
 80020c8:	f7ff fcb0 	bl	8001a2c <LL_RCC_PLL2_SetN>
  LL_RCC_PLL2_SetP(4);
 80020cc:	2004      	movs	r0, #4
 80020ce:	f7ff fcdb 	bl	8001a88 <LL_RCC_PLL2_SetP>
  LL_RCC_PLL2_SetQ(2);
 80020d2:	2002      	movs	r0, #2
 80020d4:	f7ff fcee 	bl	8001ab4 <LL_RCC_PLL2_SetQ>
  LL_RCC_PLL2_SetR(2);
 80020d8:	2002      	movs	r0, #2
 80020da:	f7ff fd01 	bl	8001ae0 <LL_RCC_PLL2_SetR>
  LL_RCC_PLL2_Enable();
 80020de:	f7ff fc45 	bl	800196c <LL_RCC_PLL2_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL2_IsReady() != 1)
 80020e2:	bf00      	nop
 80020e4:	f7ff fc52 	bl	800198c <LL_RCC_PLL2_IsReady>
 80020e8:	4603      	mov	r3, r0
 80020ea:	2b01      	cmp	r3, #1
 80020ec:	d1fa      	bne.n	80020e4 <PeriphCommonClock_Config+0x38>
  {
  }

}
 80020ee:	bf00      	nop
 80020f0:	bf00      	nop
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <filter>:

/* USER CODE BEGIN 4 */
void filter(float *out,float *old, float coff, float in)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	60f8      	str	r0, [r7, #12]
 80020fc:	60b9      	str	r1, [r7, #8]
 80020fe:	ed87 0a01 	vstr	s0, [r7, #4]
 8002102:	edc7 0a00 	vstr	s1, [r7]
    *out= coff*in +(1-coff)*(*old);
 8002106:	ed97 7a01 	vldr	s14, [r7, #4]
 800210a:	edd7 7a00 	vldr	s15, [r7]
 800210e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002112:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8002116:	edd7 7a01 	vldr	s15, [r7, #4]
 800211a:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800211e:	68bb      	ldr	r3, [r7, #8]
 8002120:	edd3 7a00 	vldr	s15, [r3]
 8002124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002128:	ee77 7a27 	vadd.f32	s15, s14, s15
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	edc3 7a00 	vstr	s15, [r3]
    *old=*out;
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	68bb      	ldr	r3, [r7, #8]
 8002138:	601a      	str	r2, [r3, #0]

}
 800213a:	bf00      	nop
 800213c:	3714      	adds	r7, #20
 800213e:	46bd      	mov	sp, r7
 8002140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002144:	4770      	bx	lr

08002146 <NOL_Init>:
 */

#include "no_load_controller.h"

void NOL_Init(NO_LOAD_CONTROLLER *nol, float limit_high, float limit_low, int licznik)
		 {
 8002146:	b480      	push	{r7}
 8002148:	b085      	sub	sp, #20
 800214a:	af00      	add	r7, sp, #0
 800214c:	60f8      	str	r0, [r7, #12]
 800214e:	ed87 0a02 	vstr	s0, [r7, #8]
 8002152:	edc7 0a01 	vstr	s1, [r7, #4]
 8002156:	6039      	str	r1, [r7, #0]
    nol->limit_high = limit_high;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	68ba      	ldr	r2, [r7, #8]
 800215c:	601a      	str	r2, [r3, #0]
    nol->limit_low = limit_low;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	687a      	ldr	r2, [r7, #4]
 8002162:	605a      	str	r2, [r3, #4]
    nol->licznik = licznik;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	609a      	str	r2, [r3, #8]
    nol->previous_setpoint = 0.0f;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f04f 0200 	mov.w	r2, #0
 8002170:	60da      	str	r2, [r3, #12]
}
 8002172:	bf00      	nop
 8002174:	3714      	adds	r7, #20
 8002176:	46bd      	mov	sp, r7
 8002178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217c:	4770      	bx	lr
	...

08002180 <NOL_Update>:

float NOL_Update(NO_LOAD_CONTROLLER *nol, float setpoint, float voltage_out, float voltage_in) {
 8002180:	b480      	push	{r7}
 8002182:	b087      	sub	sp, #28
 8002184:	af00      	add	r7, sp, #0
 8002186:	60f8      	str	r0, [r7, #12]
 8002188:	ed87 0a02 	vstr	s0, [r7, #8]
 800218c:	edc7 0a01 	vstr	s1, [r7, #4]
 8002190:	ed87 1a00 	vstr	s2, [r7]
    float output = 0.0f;
 8002194:	f04f 0300 	mov.w	r3, #0
 8002198:	617b      	str	r3, [r7, #20]

    int transition = 0;
 800219a:	2300      	movs	r3, #0
 800219c:	613b      	str	r3, [r7, #16]

    if (nol->previous_setpoint != setpoint) {
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80021a4:	ed97 7a02 	vldr	s14, [r7, #8]
 80021a8:	eeb4 7a67 	vcmp.f32	s14, s15
 80021ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021b0:	f000 80cc 	beq.w	800234c <NOL_Update+0x1cc>
           // Nowa zmiana — wykryj przejście
           if (fabsf(nol->previous_setpoint - 0.0f) < 0.01f && fabsf(setpoint - 20.0f) < 0.01f)
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	edd3 7a03 	vldr	s15, [r3, #12]
 80021ba:	eef0 7ae7 	vabs.f32	s15, s15
 80021be:	ed9f 7aac 	vldr	s14, [pc, #688]	; 8002470 <NOL_Update+0x2f0>
 80021c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021ca:	d511      	bpl.n	80021f0 <NOL_Update+0x70>
 80021cc:	edd7 7a02 	vldr	s15, [r7, #8]
 80021d0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80021d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021d8:	eef0 7ae7 	vabs.f32	s15, s15
 80021dc:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8002470 <NOL_Update+0x2f0>
 80021e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021e8:	d502      	bpl.n	80021f0 <NOL_Update+0x70>
               transition = 1;
 80021ea:	2301      	movs	r3, #1
 80021ec:	613b      	str	r3, [r7, #16]
 80021ee:	e0a4      	b.n	800233a <NOL_Update+0x1ba>
           else if (fabsf(nol->previous_setpoint - 20.0f) < 0.01f && fabsf(setpoint - 60.0f) < 0.01f)
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	edd3 7a03 	vldr	s15, [r3, #12]
 80021f6:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80021fa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021fe:	eef0 7ae7 	vabs.f32	s15, s15
 8002202:	ed9f 7a9b 	vldr	s14, [pc, #620]	; 8002470 <NOL_Update+0x2f0>
 8002206:	eef4 7ac7 	vcmpe.f32	s15, s14
 800220a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800220e:	d511      	bpl.n	8002234 <NOL_Update+0xb4>
 8002210:	edd7 7a02 	vldr	s15, [r7, #8]
 8002214:	ed9f 7a97 	vldr	s14, [pc, #604]	; 8002474 <NOL_Update+0x2f4>
 8002218:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800221c:	eef0 7ae7 	vabs.f32	s15, s15
 8002220:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8002470 <NOL_Update+0x2f0>
 8002224:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800222c:	d502      	bpl.n	8002234 <NOL_Update+0xb4>
               transition = 2;
 800222e:	2302      	movs	r3, #2
 8002230:	613b      	str	r3, [r7, #16]
 8002232:	e082      	b.n	800233a <NOL_Update+0x1ba>
           else if (fabsf(nol->previous_setpoint - 60.0f) < 0.01f && fabsf(setpoint - 150.0f) < 0.01f)
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	edd3 7a03 	vldr	s15, [r3, #12]
 800223a:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 8002474 <NOL_Update+0x2f4>
 800223e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002242:	eef0 7ae7 	vabs.f32	s15, s15
 8002246:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 8002470 <NOL_Update+0x2f0>
 800224a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800224e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002252:	d511      	bpl.n	8002278 <NOL_Update+0xf8>
 8002254:	edd7 7a02 	vldr	s15, [r7, #8]
 8002258:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8002478 <NOL_Update+0x2f8>
 800225c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002260:	eef0 7ae7 	vabs.f32	s15, s15
 8002264:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8002470 <NOL_Update+0x2f0>
 8002268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800226c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002270:	d502      	bpl.n	8002278 <NOL_Update+0xf8>
               transition = 3;
 8002272:	2303      	movs	r3, #3
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	e060      	b.n	800233a <NOL_Update+0x1ba>
           else if (fabsf(nol->previous_setpoint - 150.0f) < 0.01f && fabsf(setpoint - 60.0f) < 0.01f)
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	edd3 7a03 	vldr	s15, [r3, #12]
 800227e:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 8002478 <NOL_Update+0x2f8>
 8002282:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002286:	eef0 7ae7 	vabs.f32	s15, s15
 800228a:	ed9f 7a79 	vldr	s14, [pc, #484]	; 8002470 <NOL_Update+0x2f0>
 800228e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002292:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002296:	d511      	bpl.n	80022bc <NOL_Update+0x13c>
 8002298:	edd7 7a02 	vldr	s15, [r7, #8]
 800229c:	ed9f 7a75 	vldr	s14, [pc, #468]	; 8002474 <NOL_Update+0x2f4>
 80022a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022a4:	eef0 7ae7 	vabs.f32	s15, s15
 80022a8:	ed9f 7a71 	vldr	s14, [pc, #452]	; 8002470 <NOL_Update+0x2f0>
 80022ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b4:	d502      	bpl.n	80022bc <NOL_Update+0x13c>
               transition = 4;
 80022b6:	2304      	movs	r3, #4
 80022b8:	613b      	str	r3, [r7, #16]
 80022ba:	e03e      	b.n	800233a <NOL_Update+0x1ba>
           else if (fabsf(nol->previous_setpoint - 60.0f) < 0.01f && fabsf(setpoint - 20.0f) < 0.01f)
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	edd3 7a03 	vldr	s15, [r3, #12]
 80022c2:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8002474 <NOL_Update+0x2f4>
 80022c6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022ca:	eef0 7ae7 	vabs.f32	s15, s15
 80022ce:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8002470 <NOL_Update+0x2f0>
 80022d2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022da:	d511      	bpl.n	8002300 <NOL_Update+0x180>
 80022dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80022e0:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 80022e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80022e8:	eef0 7ae7 	vabs.f32	s15, s15
 80022ec:	ed9f 7a60 	vldr	s14, [pc, #384]	; 8002470 <NOL_Update+0x2f0>
 80022f0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80022f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022f8:	d502      	bpl.n	8002300 <NOL_Update+0x180>
               transition = 5;
 80022fa:	2305      	movs	r3, #5
 80022fc:	613b      	str	r3, [r7, #16]
 80022fe:	e01c      	b.n	800233a <NOL_Update+0x1ba>
           else if (fabsf(nol->previous_setpoint - 20.0f) < 0.01f && fabsf(setpoint - 0.0f) < 0.01f)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	edd3 7a03 	vldr	s15, [r3, #12]
 8002306:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 800230a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800230e:	eef0 7ae7 	vabs.f32	s15, s15
 8002312:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002470 <NOL_Update+0x2f0>
 8002316:	eef4 7ac7 	vcmpe.f32	s15, s14
 800231a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231e:	d50c      	bpl.n	800233a <NOL_Update+0x1ba>
 8002320:	edd7 7a02 	vldr	s15, [r7, #8]
 8002324:	eef0 7ae7 	vabs.f32	s15, s15
 8002328:	ed9f 7a51 	vldr	s14, [pc, #324]	; 8002470 <NOL_Update+0x2f0>
 800232c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002334:	d501      	bpl.n	800233a <NOL_Update+0x1ba>
               transition = 6;
 8002336:	2306      	movs	r3, #6
 8002338:	613b      	str	r3, [r7, #16]
        // Zapisz aktywny case
        nol->current_case = transition;
 800233a:	68fb      	ldr	r3, [r7, #12]
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	611a      	str	r2, [r3, #16]
        nol->licznik = 0;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]

        // Zaktualizuj stan poprzedniego setpointu
        nol->previous_setpoint = setpoint;
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	68ba      	ldr	r2, [r7, #8]
 800234a:	60da      	str	r2, [r3, #12]
    }

    // Obsługa wybranego (zapamiętanego) case
    switch (nol->current_case) {
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	3b01      	subs	r3, #1
 8002352:	2b05      	cmp	r3, #5
 8002354:	f200 80fe 	bhi.w	8002554 <NOL_Update+0x3d4>
 8002358:	a201      	add	r2, pc, #4	; (adr r2, 8002360 <NOL_Update+0x1e0>)
 800235a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800235e:	bf00      	nop
 8002360:	08002379 	.word	0x08002379
 8002364:	080023cb 	.word	0x080023cb
 8002368:	0800241d 	.word	0x0800241d
 800236c:	08002495 	.word	0x08002495
 8002370:	080024f3 	.word	0x080024f3
 8002374:	0800254f 	.word	0x0800254f
        case 1:  // 0 -> 20
            if (nol->licznik <= 2) {
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	689b      	ldr	r3, [r3, #8]
 800237c:	2b02      	cmp	r3, #2
 800237e:	dc07      	bgt.n	8002390 <NOL_Update+0x210>
                output = 830.0f;
 8002380:	4b3e      	ldr	r3, [pc, #248]	; (800247c <NOL_Update+0x2fc>)
 8002382:	617b      	str	r3, [r7, #20]
                nol->licznik++;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	1c5a      	adds	r2, r3, #1
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	609a      	str	r2, [r3, #8]
            } else if (nol->licznik < 50) {
                nol->licznik++;
            } else {
                output = (voltage_out < (setpoint - 0.05f)) ? 6.0f : 0.0f;
            }
            break;
 800238e:	e121      	b.n	80025d4 <NOL_Update+0x454>
            } else if (nol->licznik < 50) {
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	689b      	ldr	r3, [r3, #8]
 8002394:	2b31      	cmp	r3, #49	; 0x31
 8002396:	dc05      	bgt.n	80023a4 <NOL_Update+0x224>
                nol->licznik++;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	689b      	ldr	r3, [r3, #8]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	609a      	str	r2, [r3, #8]
            break;
 80023a2:	e117      	b.n	80025d4 <NOL_Update+0x454>
                output = (voltage_out < (setpoint - 0.05f)) ? 6.0f : 0.0f;
 80023a4:	edd7 7a02 	vldr	s15, [r7, #8]
 80023a8:	ed9f 7a35 	vldr	s14, [pc, #212]	; 8002480 <NOL_Update+0x300>
 80023ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80023b0:	ed97 7a01 	vldr	s14, [r7, #4]
 80023b4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023bc:	d501      	bpl.n	80023c2 <NOL_Update+0x242>
 80023be:	4b31      	ldr	r3, [pc, #196]	; (8002484 <NOL_Update+0x304>)
 80023c0:	e001      	b.n	80023c6 <NOL_Update+0x246>
 80023c2:	f04f 0300 	mov.w	r3, #0
 80023c6:	617b      	str	r3, [r7, #20]
            break;
 80023c8:	e104      	b.n	80025d4 <NOL_Update+0x454>

        case 2:  // 20 -> 60
        	 if (nol->licznik <= 10) {
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	689b      	ldr	r3, [r3, #8]
 80023ce:	2b0a      	cmp	r3, #10
 80023d0:	dc07      	bgt.n	80023e2 <NOL_Update+0x262>
        	                output = 1100.0f;
 80023d2:	4b2d      	ldr	r3, [pc, #180]	; (8002488 <NOL_Update+0x308>)
 80023d4:	617b      	str	r3, [r7, #20]
        	                nol->licznik++;
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	689b      	ldr	r3, [r3, #8]
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	609a      	str	r2, [r3, #8]
        	            } else if (nol->licznik < 10) {
        	                nol->licznik++;
        	            } else {
        	                output = (voltage_out < (setpoint - 0.05f)) ? 6.0f : 0.0f;
        	            }
        	            break;
 80023e0:	e0f8      	b.n	80025d4 <NOL_Update+0x454>
        	            } else if (nol->licznik < 10) {
 80023e2:	68fb      	ldr	r3, [r7, #12]
 80023e4:	689b      	ldr	r3, [r3, #8]
 80023e6:	2b09      	cmp	r3, #9
 80023e8:	dc05      	bgt.n	80023f6 <NOL_Update+0x276>
        	                nol->licznik++;
 80023ea:	68fb      	ldr	r3, [r7, #12]
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	1c5a      	adds	r2, r3, #1
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	609a      	str	r2, [r3, #8]
        	            break;
 80023f4:	e0ee      	b.n	80025d4 <NOL_Update+0x454>
        	                output = (voltage_out < (setpoint - 0.05f)) ? 6.0f : 0.0f;
 80023f6:	edd7 7a02 	vldr	s15, [r7, #8]
 80023fa:	ed9f 7a21 	vldr	s14, [pc, #132]	; 8002480 <NOL_Update+0x300>
 80023fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002402:	ed97 7a01 	vldr	s14, [r7, #4]
 8002406:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800240a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800240e:	d501      	bpl.n	8002414 <NOL_Update+0x294>
 8002410:	4b1c      	ldr	r3, [pc, #112]	; (8002484 <NOL_Update+0x304>)
 8002412:	e001      	b.n	8002418 <NOL_Update+0x298>
 8002414:	f04f 0300 	mov.w	r3, #0
 8002418:	617b      	str	r3, [r7, #20]
        	            break;
 800241a:	e0db      	b.n	80025d4 <NOL_Update+0x454>


        case 3:  // 60 -> 150
        	 if (nol->licznik <= 15) {
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	2b0f      	cmp	r3, #15
 8002422:	dc07      	bgt.n	8002434 <NOL_Update+0x2b4>
        	        	                output = 1160.0f;
 8002424:	4b19      	ldr	r3, [pc, #100]	; (800248c <NOL_Update+0x30c>)
 8002426:	617b      	str	r3, [r7, #20]
        	        	                nol->licznik++;
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	1c5a      	adds	r2, r3, #1
 800242e:	68fb      	ldr	r3, [r7, #12]
 8002430:	609a      	str	r2, [r3, #8]
        	        	            } else {
        	        	                output = (voltage_out < (setpoint - 0.05f)) ? 60.0f : 0.0f;
        	        	            }


            break;
 8002432:	e0cf      	b.n	80025d4 <NOL_Update+0x454>
        	        	            } else if (nol->licznik < 15) {
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	689b      	ldr	r3, [r3, #8]
 8002438:	2b0e      	cmp	r3, #14
 800243a:	dc05      	bgt.n	8002448 <NOL_Update+0x2c8>
        	        	                nol->licznik++;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	1c5a      	adds	r2, r3, #1
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	609a      	str	r2, [r3, #8]
            break;
 8002446:	e0c5      	b.n	80025d4 <NOL_Update+0x454>
        	        	                output = (voltage_out < (setpoint - 0.05f)) ? 60.0f : 0.0f;
 8002448:	edd7 7a02 	vldr	s15, [r7, #8]
 800244c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8002480 <NOL_Update+0x300>
 8002450:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002454:	ed97 7a01 	vldr	s14, [r7, #4]
 8002458:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800245c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002460:	d501      	bpl.n	8002466 <NOL_Update+0x2e6>
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <NOL_Update+0x310>)
 8002464:	e001      	b.n	800246a <NOL_Update+0x2ea>
 8002466:	f04f 0300 	mov.w	r3, #0
 800246a:	617b      	str	r3, [r7, #20]
            break;
 800246c:	e0b2      	b.n	80025d4 <NOL_Update+0x454>
 800246e:	bf00      	nop
 8002470:	3c23d70a 	.word	0x3c23d70a
 8002474:	42700000 	.word	0x42700000
 8002478:	43160000 	.word	0x43160000
 800247c:	444f8000 	.word	0x444f8000
 8002480:	3d4ccccd 	.word	0x3d4ccccd
 8002484:	40c00000 	.word	0x40c00000
 8002488:	44898000 	.word	0x44898000
 800248c:	44910000 	.word	0x44910000
 8002490:	42700000 	.word	0x42700000

        case 4:  // 150 -> 60

        	if (nol->licznik <= 500 && voltage_out>setpoint ) {
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800249c:	dc10      	bgt.n	80024c0 <NOL_Update+0x340>
 800249e:	ed97 7a01 	vldr	s14, [r7, #4]
 80024a2:	edd7 7a02 	vldr	s15, [r7, #8]
 80024a6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ae:	dd07      	ble.n	80024c0 <NOL_Update+0x340>
        	        	     output = -1100.0f;
 80024b0:	4b59      	ldr	r3, [pc, #356]	; (8002618 <NOL_Update+0x498>)
 80024b2:	617b      	str	r3, [r7, #20]
        	        	    nol->licznik++;}
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	689b      	ldr	r3, [r3, #8]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	609a      	str	r2, [r3, #8]
        	        	 else {
        	          output = (voltage_out < (setpoint - 0.05f)) ? 6.0f : 0.0f;
        	          nol->licznik=nol->licznik +500;
        	        	         	        	            }
            break;
 80024be:	e089      	b.n	80025d4 <NOL_Update+0x454>
        	          output = (voltage_out < (setpoint - 0.05f)) ? 6.0f : 0.0f;
 80024c0:	edd7 7a02 	vldr	s15, [r7, #8]
 80024c4:	ed9f 7a55 	vldr	s14, [pc, #340]	; 800261c <NOL_Update+0x49c>
 80024c8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80024cc:	ed97 7a01 	vldr	s14, [r7, #4]
 80024d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d8:	d501      	bpl.n	80024de <NOL_Update+0x35e>
 80024da:	4b51      	ldr	r3, [pc, #324]	; (8002620 <NOL_Update+0x4a0>)
 80024dc:	e001      	b.n	80024e2 <NOL_Update+0x362>
 80024de:	f04f 0300 	mov.w	r3, #0
 80024e2:	617b      	str	r3, [r7, #20]
        	          nol->licznik=nol->licznik +500;
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	689b      	ldr	r3, [r3, #8]
 80024e8:	f503 72fa 	add.w	r2, r3, #500	; 0x1f4
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	609a      	str	r2, [r3, #8]
            break;
 80024f0:	e070      	b.n	80025d4 <NOL_Update+0x454>

        case 5:  // 60 -> 20
        	 if (nol->licznik <= 200 && voltage_out>setpoint ) {
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2bc8      	cmp	r3, #200	; 0xc8
 80024f8:	dc10      	bgt.n	800251c <NOL_Update+0x39c>
 80024fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80024fe:	edd7 7a02 	vldr	s15, [r7, #8]
 8002502:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002506:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800250a:	dd07      	ble.n	800251c <NOL_Update+0x39c>
        	     output = -800.0f;
 800250c:	4b45      	ldr	r3, [pc, #276]	; (8002624 <NOL_Update+0x4a4>)
 800250e:	617b      	str	r3, [r7, #20]
        	    nol->licznik++;}
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	689b      	ldr	r3, [r3, #8]
 8002514:	1c5a      	adds	r2, r3, #1
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	609a      	str	r2, [r3, #8]
          output = (voltage_out < (setpoint - 0.05f)) ? 6.0f : 0.0f;
          nol->licznik=nol->licznik +200;
        	         	        	            }


            break;
 800251a:	e05b      	b.n	80025d4 <NOL_Update+0x454>
          output = (voltage_out < (setpoint - 0.05f)) ? 6.0f : 0.0f;
 800251c:	edd7 7a02 	vldr	s15, [r7, #8]
 8002520:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 800261c <NOL_Update+0x49c>
 8002524:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002528:	ed97 7a01 	vldr	s14, [r7, #4]
 800252c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002530:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002534:	d501      	bpl.n	800253a <NOL_Update+0x3ba>
 8002536:	4b3a      	ldr	r3, [pc, #232]	; (8002620 <NOL_Update+0x4a0>)
 8002538:	e001      	b.n	800253e <NOL_Update+0x3be>
 800253a:	f04f 0300 	mov.w	r3, #0
 800253e:	617b      	str	r3, [r7, #20]
          nol->licznik=nol->licznik +200;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	689b      	ldr	r3, [r3, #8]
 8002544:	f103 02c8 	add.w	r2, r3, #200	; 0xc8
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	609a      	str	r2, [r3, #8]
            break;
 800254c:	e042      	b.n	80025d4 <NOL_Update+0x454>

        case 6:  // 20 -> 0
            output =-1200;
 800254e:	4b36      	ldr	r3, [pc, #216]	; (8002628 <NOL_Update+0x4a8>)
 8002550:	617b      	str	r3, [r7, #20]
            break;
 8002552:	e03f      	b.n	80025d4 <NOL_Update+0x454>

        default:
        	if (voltage_out > (setpoint + 0.5f)) {
 8002554:	edd7 7a02 	vldr	s15, [r7, #8]
 8002558:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800255c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002560:	ed97 7a01 	vldr	s14, [r7, #4]
 8002564:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800256c:	dd02      	ble.n	8002574 <NOL_Update+0x3f4>
        	    output = -1100.0f;
 800256e:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <NOL_Update+0x498>)
 8002570:	617b      	str	r3, [r7, #20]
        	    if(setpoint>140)output = 60.0f;
        		 else output = 6.0f;
        	} else {
        	    output = 0.0f;
        	}
        	break;
 8002572:	e02e      	b.n	80025d2 <NOL_Update+0x452>
        	} else if (voltage_out > (setpoint + 0.1f)) {
 8002574:	edd7 7a02 	vldr	s15, [r7, #8]
 8002578:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800262c <NOL_Update+0x4ac>
 800257c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002580:	ed97 7a01 	vldr	s14, [r7, #4]
 8002584:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002588:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800258c:	dd02      	ble.n	8002594 <NOL_Update+0x414>
        	    output = -50.0f;
 800258e:	4b28      	ldr	r3, [pc, #160]	; (8002630 <NOL_Update+0x4b0>)
 8002590:	617b      	str	r3, [r7, #20]
        	break;
 8002592:	e01e      	b.n	80025d2 <NOL_Update+0x452>
        	} else if (voltage_out < (setpoint - 0.05f)) {
 8002594:	edd7 7a02 	vldr	s15, [r7, #8]
 8002598:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800261c <NOL_Update+0x49c>
 800259c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80025a0:	ed97 7a01 	vldr	s14, [r7, #4]
 80025a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80025a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025ac:	d50e      	bpl.n	80025cc <NOL_Update+0x44c>
        	    if(setpoint>140)output = 60.0f;
 80025ae:	edd7 7a02 	vldr	s15, [r7, #8]
 80025b2:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8002634 <NOL_Update+0x4b4>
 80025b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025be:	dd02      	ble.n	80025c6 <NOL_Update+0x446>
 80025c0:	4b1d      	ldr	r3, [pc, #116]	; (8002638 <NOL_Update+0x4b8>)
 80025c2:	617b      	str	r3, [r7, #20]
        	break;
 80025c4:	e005      	b.n	80025d2 <NOL_Update+0x452>
        		 else output = 6.0f;
 80025c6:	4b16      	ldr	r3, [pc, #88]	; (8002620 <NOL_Update+0x4a0>)
 80025c8:	617b      	str	r3, [r7, #20]
        	break;
 80025ca:	e002      	b.n	80025d2 <NOL_Update+0x452>
        	    output = 0.0f;
 80025cc:	f04f 0300 	mov.w	r3, #0
 80025d0:	617b      	str	r3, [r7, #20]
        	break;
 80025d2:	bf00      	nop

    // Dodatkowe warunki niezależne
 //   if (voltage_out > setpoint) {
 //       output = 0.0f;
//    }
    if (fabsf(setpoint) < 0.1f && voltage_out < 0.1f) {
 80025d4:	edd7 7a02 	vldr	s15, [r7, #8]
 80025d8:	eef0 7ae7 	vabs.f32	s15, s15
 80025dc:	ed9f 7a13 	vldr	s14, [pc, #76]	; 800262c <NOL_Update+0x4ac>
 80025e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025e8:	d50b      	bpl.n	8002602 <NOL_Update+0x482>
 80025ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80025ee:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 800262c <NOL_Update+0x4ac>
 80025f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80025f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025fa:	d502      	bpl.n	8002602 <NOL_Update+0x482>
        output = 0.0f;
 80025fc:	f04f 0300 	mov.w	r3, #0
 8002600:	617b      	str	r3, [r7, #20]
    }

    return output;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	ee07 3a90 	vmov	s15, r3
}
 8002608:	eeb0 0a67 	vmov.f32	s0, s15
 800260c:	371c      	adds	r7, #28
 800260e:	46bd      	mov	sp, r7
 8002610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002614:	4770      	bx	lr
 8002616:	bf00      	nop
 8002618:	c4898000 	.word	0xc4898000
 800261c:	3d4ccccd 	.word	0x3d4ccccd
 8002620:	40c00000 	.word	0x40c00000
 8002624:	c4480000 	.word	0xc4480000
 8002628:	c4960000 	.word	0xc4960000
 800262c:	3dcccccd 	.word	0x3dcccccd
 8002630:	c2480000 	.word	0xc2480000
 8002634:	430c0000 	.word	0x430c0000
 8002638:	42700000 	.word	0x42700000

0800263c <LL_GPIO_SetOutputPin>:
{
 800263c:	b480      	push	{r7}
 800263e:	b083      	sub	sp, #12
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	619a      	str	r2, [r3, #24]
}
 800264c:	bf00      	nop
 800264e:	370c      	adds	r7, #12
 8002650:	46bd      	mov	sp, r7
 8002652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002656:	4770      	bx	lr

08002658 <LL_GPIO_ResetOutputPin>:
{
 8002658:	b480      	push	{r7}
 800265a:	b083      	sub	sp, #12
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
 8002660:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	041a      	lsls	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	619a      	str	r2, [r3, #24]
}
 800266a:	bf00      	nop
 800266c:	370c      	adds	r7, #12
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <OCP_Init>:
static int ocp_triggered = 0;
static int states[2];


void OCP_Init(float current_limit)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	ed87 0a01 	vstr	s0, [r7, #4]
    ocp_limit = current_limit;
 8002682:	4a06      	ldr	r2, [pc, #24]	; (800269c <OCP_Init+0x24>)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6013      	str	r3, [r2, #0]
    ocp_triggered = 0;
 8002688:	4b05      	ldr	r3, [pc, #20]	; (80026a0 <OCP_Init+0x28>)
 800268a:	2200      	movs	r2, #0
 800268c:	601a      	str	r2, [r3, #0]
}
 800268e:	bf00      	nop
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr
 800269a:	bf00      	nop
 800269c:	24000038 	.word	0x24000038
 80026a0:	24000180 	.word	0x24000180

080026a4 <OCP_Check>:

int OCP_Check(float current)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	b082      	sub	sp, #8
 80026a8:	af00      	add	r7, sp, #0
 80026aa:	ed87 0a01 	vstr	s0, [r7, #4]


    if (!ocp_triggered && current > ocp_limit)
 80026ae:	4b0d      	ldr	r3, [pc, #52]	; (80026e4 <OCP_Check+0x40>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d110      	bne.n	80026d8 <OCP_Check+0x34>
 80026b6:	4b0c      	ldr	r3, [pc, #48]	; (80026e8 <OCP_Check+0x44>)
 80026b8:	edd3 7a00 	vldr	s15, [r3]
 80026bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80026c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80026c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c8:	dd06      	ble.n	80026d8 <OCP_Check+0x34>
    {
        ocp_triggered = 1;
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <OCP_Check+0x40>)
 80026cc:	2201      	movs	r2, #1
 80026ce:	601a      	str	r2, [r3, #0]

        LL_GPIO_SetOutputPin(GPIOD, LL_GPIO_PIN_0);
 80026d0:	2101      	movs	r1, #1
 80026d2:	4806      	ldr	r0, [pc, #24]	; (80026ec <OCP_Check+0x48>)
 80026d4:	f7ff ffb2 	bl	800263c <LL_GPIO_SetOutputPin>
    }

    return ocp_triggered;
 80026d8:	4b02      	ldr	r3, [pc, #8]	; (80026e4 <OCP_Check+0x40>)
 80026da:	681b      	ldr	r3, [r3, #0]

}
 80026dc:	4618      	mov	r0, r3
 80026de:	3708      	adds	r7, #8
 80026e0:	46bd      	mov	sp, r7
 80026e2:	bd80      	pop	{r7, pc}
 80026e4:	24000180 	.word	0x24000180
 80026e8:	24000038 	.word	0x24000038
 80026ec:	58020c00 	.word	0x58020c00

080026f0 <OCP_Reset>:

void OCP_Reset(float current, int state)
{
 80026f0:	b580      	push	{r7, lr}
 80026f2:	b082      	sub	sp, #8
 80026f4:	af00      	add	r7, sp, #0
 80026f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80026fa:	6038      	str	r0, [r7, #0]

    states[1] = states[0];
 80026fc:	4b14      	ldr	r3, [pc, #80]	; (8002750 <OCP_Reset+0x60>)
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a13      	ldr	r2, [pc, #76]	; (8002750 <OCP_Reset+0x60>)
 8002702:	6053      	str	r3, [r2, #4]

    states[0] = state;
 8002704:	4a12      	ldr	r2, [pc, #72]	; (8002750 <OCP_Reset+0x60>)
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	6013      	str	r3, [r2, #0]


    if (ocp_triggered && current < ocp_limit && !states[0] && states[1])
 800270a:	4b12      	ldr	r3, [pc, #72]	; (8002754 <OCP_Reset+0x64>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d019      	beq.n	8002746 <OCP_Reset+0x56>
 8002712:	4b11      	ldr	r3, [pc, #68]	; (8002758 <OCP_Reset+0x68>)
 8002714:	edd3 7a00 	vldr	s15, [r3]
 8002718:	ed97 7a01 	vldr	s14, [r7, #4]
 800271c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002724:	d400      	bmi.n	8002728 <OCP_Reset+0x38>

	}



}
 8002726:	e00e      	b.n	8002746 <OCP_Reset+0x56>
    if (ocp_triggered && current < ocp_limit && !states[0] && states[1])
 8002728:	4b09      	ldr	r3, [pc, #36]	; (8002750 <OCP_Reset+0x60>)
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d10a      	bne.n	8002746 <OCP_Reset+0x56>
 8002730:	4b07      	ldr	r3, [pc, #28]	; (8002750 <OCP_Reset+0x60>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d006      	beq.n	8002746 <OCP_Reset+0x56>
    ocp_triggered = 0;
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <OCP_Reset+0x64>)
 800273a:	2200      	movs	r2, #0
 800273c:	601a      	str	r2, [r3, #0]
    LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_0);
 800273e:	2101      	movs	r1, #1
 8002740:	4806      	ldr	r0, [pc, #24]	; (800275c <OCP_Reset+0x6c>)
 8002742:	f7ff ff89 	bl	8002658 <LL_GPIO_ResetOutputPin>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	24000184 	.word	0x24000184
 8002754:	24000180 	.word	0x24000180
 8002758:	24000038 	.word	0x24000038
 800275c:	58020c00 	.word	0x58020c00

08002760 <PI_Init>:
 *      Author: birdd
 */

#include "pi_controller.h"

void PI_Init(PI_Controller *pi, float Kp, float Ki, float Ts, float out_min, float out_max) {
 8002760:	b480      	push	{r7}
 8002762:	b087      	sub	sp, #28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6178      	str	r0, [r7, #20]
 8002768:	ed87 0a04 	vstr	s0, [r7, #16]
 800276c:	edc7 0a03 	vstr	s1, [r7, #12]
 8002770:	ed87 1a02 	vstr	s2, [r7, #8]
 8002774:	edc7 1a01 	vstr	s3, [r7, #4]
 8002778:	ed87 2a00 	vstr	s4, [r7]
    pi->Kp = Kp;
 800277c:	697b      	ldr	r3, [r7, #20]
 800277e:	693a      	ldr	r2, [r7, #16]
 8002780:	601a      	str	r2, [r3, #0]
    pi->Ki = Ki;
 8002782:	697b      	ldr	r3, [r7, #20]
 8002784:	68fa      	ldr	r2, [r7, #12]
 8002786:	605a      	str	r2, [r3, #4]
    pi->Ts = Ts;
 8002788:	697b      	ldr	r3, [r7, #20]
 800278a:	68ba      	ldr	r2, [r7, #8]
 800278c:	609a      	str	r2, [r3, #8]
    pi->integral = 0.0f;
 800278e:	697b      	ldr	r3, [r7, #20]
 8002790:	f04f 0200 	mov.w	r2, #0
 8002794:	60da      	str	r2, [r3, #12]
    pi->out_min = out_min;
 8002796:	697b      	ldr	r3, [r7, #20]
 8002798:	687a      	ldr	r2, [r7, #4]
 800279a:	611a      	str	r2, [r3, #16]
    pi->out_max = out_max;
 800279c:	697b      	ldr	r3, [r7, #20]
 800279e:	683a      	ldr	r2, [r7, #0]
 80027a0:	615a      	str	r2, [r3, #20]
    pi->pi_voltage_output_scaling=0.0667;
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	4a09      	ldr	r2, [pc, #36]	; (80027cc <PI_Init+0x6c>)
 80027a6:	61da      	str	r2, [r3, #28]
    pi->integral_limit = (pi->out_max / pi->Ki);
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	edd3 6a05 	vldr	s13, [r3, #20]
 80027ae:	697b      	ldr	r3, [r7, #20]
 80027b0:	ed93 7a01 	vldr	s14, [r3, #4]
 80027b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027b8:	697b      	ldr	r3, [r7, #20]
 80027ba:	edc3 7a06 	vstr	s15, [r3, #24]
}
 80027be:	bf00      	nop
 80027c0:	371c      	adds	r7, #28
 80027c2:	46bd      	mov	sp, r7
 80027c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c8:	4770      	bx	lr
 80027ca:	bf00      	nop
 80027cc:	3d889a02 	.word	0x3d889a02

080027d0 <PI_Update>:

float PI_Update(PI_Controller *pi, float setpoint, float measurement_voltage, float voltage_in) {
 80027d0:	b480      	push	{r7}
 80027d2:	b087      	sub	sp, #28
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	60f8      	str	r0, [r7, #12]
 80027d8:	ed87 0a02 	vstr	s0, [r7, #8]
 80027dc:	edc7 0a01 	vstr	s1, [r7, #4]
 80027e0:	ed87 1a00 	vstr	s2, [r7]
   if (voltage_in<0) voltage_in = 0;
 80027e4:	edd7 7a00 	vldr	s15, [r7]
 80027e8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f0:	d502      	bpl.n	80027f8 <PI_Update+0x28>
 80027f2:	f04f 0300 	mov.w	r3, #0
 80027f6:	603b      	str	r3, [r7, #0]

	float error = setpoint - measurement_voltage;
 80027f8:	ed97 7a02 	vldr	s14, [r7, #8]
 80027fc:	edd7 7a01 	vldr	s15, [r7, #4]
 8002800:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002804:	edc7 7a04 	vstr	s15, [r7, #16]

    // Człon całkujący z ograniczeniem
    pi->integral += error * pi->Ts;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	ed93 7a03 	vldr	s14, [r3, #12]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	edd3 6a02 	vldr	s13, [r3, #8]
 8002814:	edd7 7a04 	vldr	s15, [r7, #16]
 8002818:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800281c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	edc3 7a03 	vstr	s15, [r3, #12]



    // Anti-windup (bazujące na wyjściu)
    if (pi->integral * pi->Ki > pi->out_max)
 8002826:	68fb      	ldr	r3, [r7, #12]
 8002828:	ed93 7a03 	vldr	s14, [r3, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002832:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	edd3 7a05 	vldr	s15, [r3, #20]
 800283c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002840:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002844:	dd04      	ble.n	8002850 <PI_Update+0x80>
        pi->integral = pi->integral_limit;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	699a      	ldr	r2, [r3, #24]
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	e01a      	b.n	8002886 <PI_Update+0xb6>
    else if (pi->integral * pi->Ki < pi->out_min)
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	ed93 7a03 	vldr	s14, [r3, #12]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	edd3 7a01 	vldr	s15, [r3, #4]
 800285c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	edd3 7a04 	vldr	s15, [r3, #16]
 8002866:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800286a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800286e:	d50a      	bpl.n	8002886 <PI_Update+0xb6>
        pi->integral = pi->out_min / pi->Ki;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	edd3 6a04 	vldr	s13, [r3, #16]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	ed93 7a01 	vldr	s14, [r3, #4]
 800287c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	edc3 7a03 	vstr	s15, [r3, #12]

    float output = pi->Kp * error + pi->Ki * pi->integral;
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	ed93 7a00 	vldr	s14, [r3]
 800288c:	edd7 7a04 	vldr	s15, [r7, #16]
 8002890:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	edd3 6a01 	vldr	s13, [r3, #4]
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	edd3 7a03 	vldr	s15, [r3, #12]
 80028a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028a8:	edc7 7a05 	vstr	s15, [r7, #20]
   // float output = U_reg*pi->pi_voltage_output_scaling;

    if (output > pi->out_max) output = pi->out_max;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	edd3 7a05 	vldr	s15, [r3, #20]
 80028b2:	ed97 7a05 	vldr	s14, [r7, #20]
 80028b6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028be:	dd02      	ble.n	80028c6 <PI_Update+0xf6>
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	617b      	str	r3, [r7, #20]
    if (output < pi->out_min) output = pi->out_min;
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80028cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80028d0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80028d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028d8:	d502      	bpl.n	80028e0 <PI_Update+0x110>
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	691b      	ldr	r3, [r3, #16]
 80028de:	617b      	str	r3, [r7, #20]

    return output;
 80028e0:	697b      	ldr	r3, [r7, #20]
 80028e2:	ee07 3a90 	vmov	s15, r3
}
 80028e6:	eeb0 0a67 	vmov.f32	s0, s15
 80028ea:	371c      	adds	r7, #28
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr

080028f4 <PI_SetIntegralLimit>:

void PI_Reset(PI_Controller *pi) {
    pi->integral = 0.0f;
}

void PI_SetIntegralLimit(PI_Controller *pi, float limit) {
 80028f4:	b480      	push	{r7}
 80028f6:	b083      	sub	sp, #12
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
 80028fc:	ed87 0a00 	vstr	s0, [r7]
    pi->integral= limit;
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	683a      	ldr	r2, [r7, #0]
 8002904:	60da      	str	r2, [r3, #12]
}
 8002906:	bf00      	nop
 8002908:	370c      	adds	r7, #12
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
	...

08002914 <PIC_Init>:
 *      Author: WODZU
 */

#include "pi_controller_current.h"

void PIC_Init(PI_Controller_current *pic, float Kp, float Ki, float Ts, float out_min, float out_max) {
 8002914:	b480      	push	{r7}
 8002916:	b087      	sub	sp, #28
 8002918:	af00      	add	r7, sp, #0
 800291a:	6178      	str	r0, [r7, #20]
 800291c:	ed87 0a04 	vstr	s0, [r7, #16]
 8002920:	edc7 0a03 	vstr	s1, [r7, #12]
 8002924:	ed87 1a02 	vstr	s2, [r7, #8]
 8002928:	edc7 1a01 	vstr	s3, [r7, #4]
 800292c:	ed87 2a00 	vstr	s4, [r7]
    pic->Kp = Kp;
 8002930:	697b      	ldr	r3, [r7, #20]
 8002932:	693a      	ldr	r2, [r7, #16]
 8002934:	601a      	str	r2, [r3, #0]
    pic->Ki = Ki;
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	605a      	str	r2, [r3, #4]
    pic->Ts = Ts;
 800293c:	697b      	ldr	r3, [r7, #20]
 800293e:	68ba      	ldr	r2, [r7, #8]
 8002940:	609a      	str	r2, [r3, #8]
    pic->integral = 0.0f;
 8002942:	697b      	ldr	r3, [r7, #20]
 8002944:	f04f 0200 	mov.w	r2, #0
 8002948:	60da      	str	r2, [r3, #12]
    pic->out_min = out_min;
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	687a      	ldr	r2, [r7, #4]
 800294e:	611a      	str	r2, [r3, #16]
    pic->out_max = out_max;
 8002950:	697b      	ldr	r3, [r7, #20]
 8002952:	683a      	ldr	r2, [r7, #0]
 8002954:	615a      	str	r2, [r3, #20]
    pic->pic_current_output_scaling=1200;
 8002956:	697b      	ldr	r3, [r7, #20]
 8002958:	4a09      	ldr	r2, [pc, #36]	; (8002980 <PIC_Init+0x6c>)
 800295a:	61da      	str	r2, [r3, #28]
    pic->integral_limit = (pic->out_max / pic->Ki); //
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	edd3 6a05 	vldr	s13, [r3, #20]
 8002962:	697b      	ldr	r3, [r7, #20]
 8002964:	ed93 7a01 	vldr	s14, [r3, #4]
 8002968:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800296c:	697b      	ldr	r3, [r7, #20]
 800296e:	edc3 7a06 	vstr	s15, [r3, #24]
}
 8002972:	bf00      	nop
 8002974:	371c      	adds	r7, #28
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	44960000 	.word	0x44960000

08002984 <PIC_Update>:

float PIC_Update(PI_Controller_current *pic, float setpoint_c, float current_out) {
 8002984:	b480      	push	{r7}
 8002986:	b087      	sub	sp, #28
 8002988:	af00      	add	r7, sp, #0
 800298a:	60f8      	str	r0, [r7, #12]
 800298c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002990:	edc7 0a01 	vstr	s1, [r7, #4]
    		//if(current_out<0) current_out = 0;

	float error = setpoint_c - current_out;
 8002994:	ed97 7a02 	vldr	s14, [r7, #8]
 8002998:	edd7 7a01 	vldr	s15, [r7, #4]
 800299c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a0:	edc7 7a04 	vstr	s15, [r7, #16]

    // Człon całkujący z ograniczeniem
    pic->integral += error * pic->Ts;
 80029a4:	68fb      	ldr	r3, [r7, #12]
 80029a6:	ed93 7a03 	vldr	s14, [r3, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	edd3 6a02 	vldr	s13, [r3, #8]
 80029b0:	edd7 7a04 	vldr	s15, [r7, #16]
 80029b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80029b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	edc3 7a03 	vstr	s15, [r3, #12]


    // Anti-windup
    if (pic->integral * pic->Ki > pic->out_max)
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	ed93 7a03 	vldr	s14, [r3, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	edd3 7a01 	vldr	s15, [r3, #4]
 80029ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	edd3 7a05 	vldr	s15, [r3, #20]
 80029d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e0:	dd04      	ble.n	80029ec <PIC_Update+0x68>
        pic->integral = pic->integral_limit;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	699a      	ldr	r2, [r3, #24]
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	60da      	str	r2, [r3, #12]
 80029ea:	e01a      	b.n	8002a22 <PIC_Update+0x9e>
    else if (pic->integral * pic->Ki < pic->out_min)
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	ed93 7a03 	vldr	s14, [r3, #12]
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80029f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a02:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a0a:	d50a      	bpl.n	8002a22 <PIC_Update+0x9e>
        pic->integral = pic->out_min / pic->Ki;
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	edd3 6a04 	vldr	s13, [r3, #16]
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	ed93 7a01 	vldr	s14, [r3, #4]
 8002a18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	edc3 7a03 	vstr	s15, [r3, #12]

    float output = (pic->Kp * error + pic->Ki * pic->integral);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	ed93 7a00 	vldr	s14, [r3]
 8002a28:	edd7 7a04 	vldr	s15, [r7, #16]
 8002a2c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	edd3 6a01 	vldr	s13, [r3, #4]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	edd3 7a03 	vldr	s15, [r3, #12]
 8002a3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002a40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a44:	edc7 7a05 	vstr	s15, [r7, #20]

    if (output > pic->out_max) output = pic->out_max;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	edd3 7a05 	vldr	s15, [r3, #20]
 8002a4e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a52:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a5a:	dd02      	ble.n	8002a62 <PIC_Update+0xde>
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	695b      	ldr	r3, [r3, #20]
 8002a60:	617b      	str	r3, [r7, #20]
       if (output < pic->out_min) output = pic->out_min;
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	edd3 7a04 	vldr	s15, [r3, #16]
 8002a68:	ed97 7a05 	vldr	s14, [r7, #20]
 8002a6c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a74:	d502      	bpl.n	8002a7c <PIC_Update+0xf8>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	617b      	str	r3, [r7, #20]




    return output*pic->pic_current_output_scaling;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	ed93 7a07 	vldr	s14, [r3, #28]
 8002a82:	edd7 7a05 	vldr	s15, [r7, #20]
 8002a86:	ee67 7a27 	vmul.f32	s15, s14, s15
}
 8002a8a:	eeb0 0a67 	vmov.f32	s0, s15
 8002a8e:	371c      	adds	r7, #28
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <PIC_SetIntegralLimit>:

void PIC_Reset(PI_Controller_current *pic) {
    pic->integral = 0.0f;
}

void PIC_SetIntegralLimit(PI_Controller_current *pic, float limit) {
 8002a98:	b480      	push	{r7}
 8002a9a:	b083      	sub	sp, #12
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
 8002aa0:	ed87 0a00 	vstr	s0, [r7]
    pic->integral= limit;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	683a      	ldr	r2, [r7, #0]
 8002aa8:	60da      	str	r2, [r3, #12]
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr

08002ab6 <LL_TIM_EnableCounter>:
{
 8002ab6:	b480      	push	{r7}
 8002ab8:	b083      	sub	sp, #12
 8002aba:	af00      	add	r7, sp, #0
 8002abc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f043 0201 	orr.w	r2, r3, #1
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	601a      	str	r2, [r3, #0]
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr

08002ad6 <LL_TIM_DisableCounter>:
{
 8002ad6:	b480      	push	{r7}
 8002ad8:	b083      	sub	sp, #12
 8002ada:	af00      	add	r7, sp, #0
 8002adc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f023 0201 	bic.w	r2, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	601a      	str	r2, [r3, #0]
}
 8002aea:	bf00      	nop
 8002aec:	370c      	adds	r7, #12
 8002aee:	46bd      	mov	sp, r7
 8002af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af4:	4770      	bx	lr

08002af6 <LL_TIM_CC_EnableChannel>:
{
 8002af6:	b480      	push	{r7}
 8002af8:	b083      	sub	sp, #12
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	6078      	str	r0, [r7, #4]
 8002afe:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6a1a      	ldr	r2, [r3, #32]
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	431a      	orrs	r2, r3
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	621a      	str	r2, [r3, #32]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr

08002b18 <LL_TIM_OC_SetCompareCH1>:
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
 8002b20:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	683a      	ldr	r2, [r7, #0]
 8002b26:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <LL_TIM_OC_SetCompareCH2>:
{
 8002b34:	b480      	push	{r7}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002b44:	bf00      	nop
 8002b46:	370c      	adds	r7, #12
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr

08002b50 <LL_TIM_OC_SetCompareCH3>:
{
 8002b50:	b480      	push	{r7}
 8002b52:	b083      	sub	sp, #12
 8002b54:	af00      	add	r7, sp, #0
 8002b56:	6078      	str	r0, [r7, #4]
 8002b58:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	683a      	ldr	r2, [r7, #0]
 8002b5e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002b60:	bf00      	nop
 8002b62:	370c      	adds	r7, #12
 8002b64:	46bd      	mov	sp, r7
 8002b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6a:	4770      	bx	lr

08002b6c <LL_TIM_EnableAllOutputs>:
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b78:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	645a      	str	r2, [r3, #68]	; 0x44
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_TIM_ClearFlag_UPDATE>:
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f06f 0201 	mvn.w	r2, #1
 8002b9a:	611a      	str	r2, [r3, #16]
}
 8002b9c:	bf00      	nop
 8002b9e:	370c      	adds	r7, #12
 8002ba0:	46bd      	mov	sp, r7
 8002ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba6:	4770      	bx	lr

08002ba8 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	f003 0301 	and.w	r3, r3, #1
 8002bb8:	2b01      	cmp	r3, #1
 8002bba:	d101      	bne.n	8002bc0 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	e000      	b.n	8002bc2 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002bc0:	2300      	movs	r3, #0
}
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bcc:	4770      	bx	lr

08002bce <LL_TIM_EnableIT_UPDATE>:
{
 8002bce:	b480      	push	{r7}
 8002bd0:	b083      	sub	sp, #12
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	f043 0201 	orr.w	r2, r3, #1
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	60da      	str	r2, [r3, #12]
}
 8002be2:	bf00      	nop
 8002be4:	370c      	adds	r7, #12
 8002be6:	46bd      	mov	sp, r7
 8002be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bec:	4770      	bx	lr

08002bee <LL_TIM_DisableIT_UPDATE>:
{
 8002bee:	b480      	push	{r7}
 8002bf0:	b083      	sub	sp, #12
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	68db      	ldr	r3, [r3, #12]
 8002bfa:	f023 0201 	bic.w	r2, r3, #1
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	60da      	str	r2, [r3, #12]
}
 8002c02:	bf00      	nop
 8002c04:	370c      	adds	r7, #12
 8002c06:	46bd      	mov	sp, r7
 8002c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0c:	4770      	bx	lr

08002c0e <LL_GPIO_SetOutputPin>:
{
 8002c0e:	b480      	push	{r7}
 8002c10:	b083      	sub	sp, #12
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	6078      	str	r0, [r7, #4]
 8002c16:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	683a      	ldr	r2, [r7, #0]
 8002c1c:	619a      	str	r2, [r3, #24]
}
 8002c1e:	bf00      	nop
 8002c20:	370c      	adds	r7, #12
 8002c22:	46bd      	mov	sp, r7
 8002c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c28:	4770      	bx	lr
	...

08002c2c <PowerOnSequence_Start>:
static uint8_t current_deadtime = 255;
#define ADC_OFFSET_SAMPLES 1000


void PowerOnSequence_Start(void)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	af00      	add	r7, sp, #0
	LL_mDelay(3000);
 8002c30:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8002c34:	f002 f82e 	bl	8004c94 <LL_mDelay>

	LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_0);
 8002c38:	2101      	movs	r1, #1
 8002c3a:	4814      	ldr	r0, [pc, #80]	; (8002c8c <PowerOnSequence_Start+0x60>)
 8002c3c:	f7ff ffe7 	bl	8002c0e <LL_GPIO_SetOutputPin>


	LL_TIM_OC_SetCompareCH1(TIM8, 750);
 8002c40:	f240 21ee 	movw	r1, #750	; 0x2ee
 8002c44:	4812      	ldr	r0, [pc, #72]	; (8002c90 <PowerOnSequence_Start+0x64>)
 8002c46:	f7ff ff67 	bl	8002b18 <LL_TIM_OC_SetCompareCH1>
    LL_TIM_OC_SetCompareCH2(TIM8, 900);
 8002c4a:	f44f 7161 	mov.w	r1, #900	; 0x384
 8002c4e:	4810      	ldr	r0, [pc, #64]	; (8002c90 <PowerOnSequence_Start+0x64>)
 8002c50:	f7ff ff70 	bl	8002b34 <LL_TIM_OC_SetCompareCH2>
    LL_TIM_OC_SetCompareCH3(TIM8, 600);
 8002c54:	f44f 7116 	mov.w	r1, #600	; 0x258
 8002c58:	480d      	ldr	r0, [pc, #52]	; (8002c90 <PowerOnSequence_Start+0x64>)
 8002c5a:	f7ff ff79 	bl	8002b50 <LL_TIM_OC_SetCompareCH3>



    LL_TIM_EnableAllOutputs(TIM8);
 8002c5e:	480c      	ldr	r0, [pc, #48]	; (8002c90 <PowerOnSequence_Start+0x64>)
 8002c60:	f7ff ff84 	bl	8002b6c <LL_TIM_EnableAllOutputs>
    LL_TIM_EnableCounter(TIM8);
 8002c64:	480a      	ldr	r0, [pc, #40]	; (8002c90 <PowerOnSequence_Start+0x64>)
 8002c66:	f7ff ff26 	bl	8002ab6 <LL_TIM_EnableCounter>
    LL_TIM_CC_EnableChannel(TIM8, LL_TIM_CHANNEL_CH1);
 8002c6a:	2101      	movs	r1, #1
 8002c6c:	4808      	ldr	r0, [pc, #32]	; (8002c90 <PowerOnSequence_Start+0x64>)
 8002c6e:	f7ff ff42 	bl	8002af6 <LL_TIM_CC_EnableChannel>
    LL_TIM_CC_EnableChannel(TIM8, LL_TIM_CHANNEL_CH1N);
 8002c72:	2104      	movs	r1, #4
 8002c74:	4806      	ldr	r0, [pc, #24]	; (8002c90 <PowerOnSequence_Start+0x64>)
 8002c76:	f7ff ff3e 	bl	8002af6 <LL_TIM_CC_EnableChannel>

    LL_TIM_EnableIT_UPDATE(TIM13);
 8002c7a:	4806      	ldr	r0, [pc, #24]	; (8002c94 <PowerOnSequence_Start+0x68>)
 8002c7c:	f7ff ffa7 	bl	8002bce <LL_TIM_EnableIT_UPDATE>
    LL_TIM_EnableCounter(TIM13);
 8002c80:	4804      	ldr	r0, [pc, #16]	; (8002c94 <PowerOnSequence_Start+0x68>)
 8002c82:	f7ff ff18 	bl	8002ab6 <LL_TIM_EnableCounter>

}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	58020800 	.word	0x58020800
 8002c90:	40010400 	.word	0x40010400
 8002c94:	40001c00 	.word	0x40001c00

08002c98 <PowerOnSequence_Update>:

void PowerOnSequence_Update(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
    if (LL_TIM_IsActiveFlag_UPDATE(TIM13)) {
 8002c9c:	4821      	ldr	r0, [pc, #132]	; (8002d24 <PowerOnSequence_Update+0x8c>)
 8002c9e:	f7ff ff83 	bl	8002ba8 <LL_TIM_IsActiveFlag_UPDATE>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d03b      	beq.n	8002d20 <PowerOnSequence_Update+0x88>

        LL_TIM_ClearFlag_UPDATE(TIM13);
 8002ca8:	481e      	ldr	r0, [pc, #120]	; (8002d24 <PowerOnSequence_Update+0x8c>)
 8002caa:	f7ff ff6f 	bl	8002b8c <LL_TIM_ClearFlag_UPDATE>

        if (current_deadtime == 254) {
 8002cae:	4b1e      	ldr	r3, [pc, #120]	; (8002d28 <PowerOnSequence_Update+0x90>)
 8002cb0:	781b      	ldrb	r3, [r3, #0]
 8002cb2:	2bfe      	cmp	r3, #254	; 0xfe
 8002cb4:	d107      	bne.n	8002cc6 <PowerOnSequence_Update+0x2e>
            LL_TIM_CC_EnableChannel(TIM8, LL_TIM_CHANNEL_CH1);
 8002cb6:	2101      	movs	r1, #1
 8002cb8:	481c      	ldr	r0, [pc, #112]	; (8002d2c <PowerOnSequence_Update+0x94>)
 8002cba:	f7ff ff1c 	bl	8002af6 <LL_TIM_CC_EnableChannel>
            LL_TIM_CC_EnableChannel(TIM8, LL_TIM_CHANNEL_CH1N);
 8002cbe:	2104      	movs	r1, #4
 8002cc0:	481a      	ldr	r0, [pc, #104]	; (8002d2c <PowerOnSequence_Update+0x94>)
 8002cc2:	f7ff ff18 	bl	8002af6 <LL_TIM_CC_EnableChannel>
        }

        if (current_deadtime > 24) {
 8002cc6:	4b18      	ldr	r3, [pc, #96]	; (8002d28 <PowerOnSequence_Update+0x90>)
 8002cc8:	781b      	ldrb	r3, [r3, #0]
 8002cca:	2b18      	cmp	r3, #24
 8002ccc:	d90f      	bls.n	8002cee <PowerOnSequence_Update+0x56>
            current_deadtime--;
 8002cce:	4b16      	ldr	r3, [pc, #88]	; (8002d28 <PowerOnSequence_Update+0x90>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b2da      	uxtb	r2, r3
 8002cd6:	4b14      	ldr	r3, [pc, #80]	; (8002d28 <PowerOnSequence_Update+0x90>)
 8002cd8:	701a      	strb	r2, [r3, #0]
            TIM8->BDTR = (TIM8->BDTR & ~TIM_BDTR_DTG_Msk) | (current_deadtime & 0xFF);
 8002cda:	4b14      	ldr	r3, [pc, #80]	; (8002d2c <PowerOnSequence_Update+0x94>)
 8002cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002cde:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ce2:	4a11      	ldr	r2, [pc, #68]	; (8002d28 <PowerOnSequence_Update+0x90>)
 8002ce4:	7812      	ldrb	r2, [r2, #0]
 8002ce6:	4611      	mov	r1, r2
 8002ce8:	4a10      	ldr	r2, [pc, #64]	; (8002d2c <PowerOnSequence_Update+0x94>)
 8002cea:	430b      	orrs	r3, r1
 8002cec:	6453      	str	r3, [r2, #68]	; 0x44
        }

        if (current_deadtime == 24) {
 8002cee:	4b0e      	ldr	r3, [pc, #56]	; (8002d28 <PowerOnSequence_Update+0x90>)
 8002cf0:	781b      	ldrb	r3, [r3, #0]
 8002cf2:	2b18      	cmp	r3, #24
 8002cf4:	d114      	bne.n	8002d20 <PowerOnSequence_Update+0x88>

            LL_TIM_CC_EnableChannel(TIM8, LL_TIM_CHANNEL_CH2);
 8002cf6:	2110      	movs	r1, #16
 8002cf8:	480c      	ldr	r0, [pc, #48]	; (8002d2c <PowerOnSequence_Update+0x94>)
 8002cfa:	f7ff fefc 	bl	8002af6 <LL_TIM_CC_EnableChannel>
            LL_TIM_CC_EnableChannel(TIM8, LL_TIM_CHANNEL_CH3N);
 8002cfe:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8002d02:	480a      	ldr	r0, [pc, #40]	; (8002d2c <PowerOnSequence_Update+0x94>)
 8002d04:	f7ff fef7 	bl	8002af6 <LL_TIM_CC_EnableChannel>
            LL_TIM_EnableAllOutputs(TIM8);
 8002d08:	4808      	ldr	r0, [pc, #32]	; (8002d2c <PowerOnSequence_Update+0x94>)
 8002d0a:	f7ff ff2f 	bl	8002b6c <LL_TIM_EnableAllOutputs>
            LL_TIM_EnableCounter(TIM8);
 8002d0e:	4807      	ldr	r0, [pc, #28]	; (8002d2c <PowerOnSequence_Update+0x94>)
 8002d10:	f7ff fed1 	bl	8002ab6 <LL_TIM_EnableCounter>

            LL_TIM_DisableIT_UPDATE(TIM13);
 8002d14:	4803      	ldr	r0, [pc, #12]	; (8002d24 <PowerOnSequence_Update+0x8c>)
 8002d16:	f7ff ff6a 	bl	8002bee <LL_TIM_DisableIT_UPDATE>
            LL_TIM_DisableCounter(TIM13);
 8002d1a:	4802      	ldr	r0, [pc, #8]	; (8002d24 <PowerOnSequence_Update+0x8c>)
 8002d1c:	f7ff fedb 	bl	8002ad6 <LL_TIM_DisableCounter>
        }
    }
}
 8002d20:	bf00      	nop
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40001c00 	.word	0x40001c00
 8002d28:	2400003c 	.word	0x2400003c
 8002d2c:	40010400 	.word	0x40010400

08002d30 <Fan_Start>:

void Fan_Start(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH1);
 8002d34:	2101      	movs	r1, #1
 8002d36:	480c      	ldr	r0, [pc, #48]	; (8002d68 <Fan_Start+0x38>)
 8002d38:	f7ff fedd 	bl	8002af6 <LL_TIM_CC_EnableChannel>
	LL_TIM_CC_EnableChannel(TIM3, LL_TIM_CHANNEL_CH2);
 8002d3c:	2110      	movs	r1, #16
 8002d3e:	480a      	ldr	r0, [pc, #40]	; (8002d68 <Fan_Start+0x38>)
 8002d40:	f7ff fed9 	bl	8002af6 <LL_TIM_CC_EnableChannel>
	  LL_TIM_EnableAllOutputs(TIM3);
 8002d44:	4808      	ldr	r0, [pc, #32]	; (8002d68 <Fan_Start+0x38>)
 8002d46:	f7ff ff11 	bl	8002b6c <LL_TIM_EnableAllOutputs>
	  LL_TIM_EnableCounter(TIM3);
 8002d4a:	4807      	ldr	r0, [pc, #28]	; (8002d68 <Fan_Start+0x38>)
 8002d4c:	f7ff feb3 	bl	8002ab6 <LL_TIM_EnableCounter>


	  LL_TIM_OC_SetCompareCH1(TIM3, 20000);
 8002d50:	f644 6120 	movw	r1, #20000	; 0x4e20
 8002d54:	4804      	ldr	r0, [pc, #16]	; (8002d68 <Fan_Start+0x38>)
 8002d56:	f7ff fedf 	bl	8002b18 <LL_TIM_OC_SetCompareCH1>
	  LL_TIM_OC_SetCompareCH2(TIM3, 20000);
 8002d5a:	f644 6120 	movw	r1, #20000	; 0x4e20
 8002d5e:	4802      	ldr	r0, [pc, #8]	; (8002d68 <Fan_Start+0x38>)
 8002d60:	f7ff fee8 	bl	8002b34 <LL_TIM_OC_SetCompareCH2>



}
 8002d64:	bf00      	nop
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40000400 	.word	0x40000400

08002d6c <Buck_Start>:




void Buck_Start(void)
{
 8002d6c:	b580      	push	{r7, lr}
 8002d6e:	af00      	add	r7, sp, #0
	  LL_TIM_OC_SetCompareCH1(TIM1, 0);
 8002d70:	2100      	movs	r1, #0
 8002d72:	4809      	ldr	r0, [pc, #36]	; (8002d98 <Buck_Start+0x2c>)
 8002d74:	f7ff fed0 	bl	8002b18 <LL_TIM_OC_SetCompareCH1>
	  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);
 8002d78:	2101      	movs	r1, #1
 8002d7a:	4807      	ldr	r0, [pc, #28]	; (8002d98 <Buck_Start+0x2c>)
 8002d7c:	f7ff febb 	bl	8002af6 <LL_TIM_CC_EnableChannel>
	  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
 8002d80:	2104      	movs	r1, #4
 8002d82:	4805      	ldr	r0, [pc, #20]	; (8002d98 <Buck_Start+0x2c>)
 8002d84:	f7ff feb7 	bl	8002af6 <LL_TIM_CC_EnableChannel>
	  LL_TIM_EnableAllOutputs(TIM1);
 8002d88:	4803      	ldr	r0, [pc, #12]	; (8002d98 <Buck_Start+0x2c>)
 8002d8a:	f7ff feef 	bl	8002b6c <LL_TIM_EnableAllOutputs>
	  LL_TIM_EnableCounter(TIM1);
 8002d8e:	4802      	ldr	r0, [pc, #8]	; (8002d98 <Buck_Start+0x2c>)
 8002d90:	f7ff fe91 	bl	8002ab6 <LL_TIM_EnableCounter>
}
 8002d94:	bf00      	nop
 8002d96:	bd80      	pop	{r7, pc}
 8002d98:	40010000 	.word	0x40010000

08002d9c <CEC_Start>:



void CEC_Start(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	af00      	add	r7, sp, #0
	  LL_TIM_OC_SetCompareCH1(TIM2, 0);
 8002da0:	2100      	movs	r1, #0
 8002da2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002da6:	f7ff feb7 	bl	8002b18 <LL_TIM_OC_SetCompareCH1>
	  LL_TIM_CC_EnableChannel(TIM2, LL_TIM_CHANNEL_CH1);
 8002daa:	2101      	movs	r1, #1
 8002dac:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002db0:	f7ff fea1 	bl	8002af6 <LL_TIM_CC_EnableChannel>
	  LL_TIM_EnableCounter(TIM2);
 8002db4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002db8:	f7ff fe7d 	bl	8002ab6 <LL_TIM_EnableCounter>

}
 8002dbc:	bf00      	nop
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <Mesurments_Start>:


void Mesurments_Start(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b086      	sub	sp, #24
 8002dc4:	af00      	add	r7, sp, #0



	LL_TIM_OC_SetCompareCH3(TIM2, 2400);
 8002dc6:	f44f 6116 	mov.w	r1, #2400	; 0x960
 8002dca:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002dce:	f7ff febf 	bl	8002b50 <LL_TIM_OC_SetCompareCH3>

    uint32_t sum_adc1_ch0 = 0;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	617b      	str	r3, [r7, #20]
    uint32_t sum_adc1_ch1 = 0;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	613b      	str	r3, [r7, #16]
    uint32_t sum_adc2_ch0 = 0;
 8002dda:	2300      	movs	r3, #0
 8002ddc:	60fb      	str	r3, [r7, #12]
    uint32_t sum_adc2_ch1 = 0;
 8002dde:	2300      	movs	r3, #0
 8002de0:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < ADC_OFFSET_SAMPLES; i++)
 8002de2:	2300      	movs	r3, #0
 8002de4:	607b      	str	r3, [r7, #4]
 8002de6:	e01d      	b.n	8002e24 <Mesurments_Start+0x64>
    {
        LL_mDelay(1); // krótka przerwa, żeby ADC nadążył z DMA
 8002de8:	2001      	movs	r0, #1
 8002dea:	f001 ff53 	bl	8004c94 <LL_mDelay>

        sum_adc1_ch0 += adc_buffer[0];
 8002dee:	4b2c      	ldr	r3, [pc, #176]	; (8002ea0 <Mesurments_Start+0xe0>)
 8002df0:	881b      	ldrh	r3, [r3, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	697b      	ldr	r3, [r7, #20]
 8002df6:	4413      	add	r3, r2
 8002df8:	617b      	str	r3, [r7, #20]
        sum_adc1_ch1 += adc_buffer[1];
 8002dfa:	4b29      	ldr	r3, [pc, #164]	; (8002ea0 <Mesurments_Start+0xe0>)
 8002dfc:	885b      	ldrh	r3, [r3, #2]
 8002dfe:	461a      	mov	r2, r3
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	4413      	add	r3, r2
 8002e04:	613b      	str	r3, [r7, #16]
        sum_adc2_ch0 += adc2_buffer[0];
 8002e06:	4b27      	ldr	r3, [pc, #156]	; (8002ea4 <Mesurments_Start+0xe4>)
 8002e08:	881b      	ldrh	r3, [r3, #0]
 8002e0a:	461a      	mov	r2, r3
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	4413      	add	r3, r2
 8002e10:	60fb      	str	r3, [r7, #12]
        sum_adc2_ch1 += adc2_buffer[1];
 8002e12:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <Mesurments_Start+0xe4>)
 8002e14:	885b      	ldrh	r3, [r3, #2]
 8002e16:	461a      	mov	r2, r3
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	60bb      	str	r3, [r7, #8]
    for (int i = 0; i < ADC_OFFSET_SAMPLES; i++)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	3301      	adds	r3, #1
 8002e22:	607b      	str	r3, [r7, #4]
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e2a:	dbdd      	blt.n	8002de8 <Mesurments_Start+0x28>
    }

    offset_adc1_ch0 = sum_adc1_ch0 / (float)ADC_OFFSET_SAMPLES;
 8002e2c:	697b      	ldr	r3, [r7, #20]
 8002e2e:	ee07 3a90 	vmov	s15, r3
 8002e32:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e36:	eddf 6a1c 	vldr	s13, [pc, #112]	; 8002ea8 <Mesurments_Start+0xe8>
 8002e3a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e3e:	4b1b      	ldr	r3, [pc, #108]	; (8002eac <Mesurments_Start+0xec>)
 8002e40:	edc3 7a00 	vstr	s15, [r3]
    offset_adc1_ch1 = sum_adc1_ch1 / (float)ADC_OFFSET_SAMPLES;
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	ee07 3a90 	vmov	s15, r3
 8002e4a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e4e:	eddf 6a16 	vldr	s13, [pc, #88]	; 8002ea8 <Mesurments_Start+0xe8>
 8002e52:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e56:	4b16      	ldr	r3, [pc, #88]	; (8002eb0 <Mesurments_Start+0xf0>)
 8002e58:	edc3 7a00 	vstr	s15, [r3]
    offset_adc2_ch0 = sum_adc2_ch0 / (float)ADC_OFFSET_SAMPLES;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	ee07 3a90 	vmov	s15, r3
 8002e62:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e66:	eddf 6a10 	vldr	s13, [pc, #64]	; 8002ea8 <Mesurments_Start+0xe8>
 8002e6a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e6e:	4b11      	ldr	r3, [pc, #68]	; (8002eb4 <Mesurments_Start+0xf4>)
 8002e70:	edc3 7a00 	vstr	s15, [r3]
    offset_adc2_ch1 = sum_adc2_ch1 / (float)ADC_OFFSET_SAMPLES;
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	ee07 3a90 	vmov	s15, r3
 8002e7a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e7e:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002ea8 <Mesurments_Start+0xe8>
 8002e82:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e86:	4b0c      	ldr	r3, [pc, #48]	; (8002eb8 <Mesurments_Start+0xf8>)
 8002e88:	edc3 7a00 	vstr	s15, [r3]


	LL_TIM_OC_SetCompareCH3(TIM2, 0);
 8002e8c:	2100      	movs	r1, #0
 8002e8e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8002e92:	f7ff fe5d 	bl	8002b50 <LL_TIM_OC_SetCompareCH3>

}
 8002e96:	bf00      	nop
 8002e98:	3718      	adds	r7, #24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	24000088 	.word	0x24000088
 8002ea4:	2400008c 	.word	0x2400008c
 8002ea8:	447a0000 	.word	0x447a0000
 8002eac:	24000114 	.word	0x24000114
 8002eb0:	24000118 	.word	0x24000118
 8002eb4:	2400011c 	.word	0x2400011c
 8002eb8:	24000120 	.word	0x24000120

08002ebc <LL_TIM_CC_EnableChannel>:
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
 8002ec4:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a1a      	ldr	r2, [r3, #32]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	431a      	orrs	r2, r3
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	621a      	str	r2, [r3, #32]
}
 8002ed2:	bf00      	nop
 8002ed4:	370c      	adds	r7, #12
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <LL_TIM_CC_DisableChannel>:
{
 8002ede:	b480      	push	{r7}
 8002ee0:	b083      	sub	sp, #12
 8002ee2:	af00      	add	r7, sp, #0
 8002ee4:	6078      	str	r0, [r7, #4]
 8002ee6:	6039      	str	r1, [r7, #0]
  CLEAR_BIT(TIMx->CCER, Channels);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a1a      	ldr	r2, [r3, #32]
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	43db      	mvns	r3, r3
 8002ef0:	401a      	ands	r2, r3
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	621a      	str	r2, [r3, #32]
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <LL_TIM_OC_SetCompareCH1>:
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
 8002f0a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	683a      	ldr	r2, [r7, #0]
 8002f10:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002f12:	bf00      	nop
 8002f14:	370c      	adds	r7, #12
 8002f16:	46bd      	mov	sp, r7
 8002f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1c:	4770      	bx	lr

08002f1e <LL_TIM_ClearFlag_UPDATE>:
{
 8002f1e:	b480      	push	{r7}
 8002f20:	b083      	sub	sp, #12
 8002f22:	af00      	add	r7, sp, #0
 8002f24:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	f06f 0201 	mvn.w	r2, #1
 8002f2c:	611a      	str	r2, [r3, #16]
}
 8002f2e:	bf00      	nop
 8002f30:	370c      	adds	r7, #12
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr

08002f3a <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002f3a:	b480      	push	{r7}
 8002f3c:	b083      	sub	sp, #12
 8002f3e:	af00      	add	r7, sp, #0
 8002f40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	691b      	ldr	r3, [r3, #16]
 8002f46:	f003 0301 	and.w	r3, r3, #1
 8002f4a:	2b01      	cmp	r3, #1
 8002f4c:	d101      	bne.n	8002f52 <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002f4e:	2301      	movs	r3, #1
 8002f50:	e000      	b.n	8002f54 <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 8002f52:	2300      	movs	r3, #0
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	370c      	adds	r7, #12
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002f60:	b480      	push	{r7}
 8002f62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002f64:	e7fe      	b.n	8002f64 <NMI_Handler+0x4>

08002f66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002f66:	b480      	push	{r7}
 8002f68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002f6a:	e7fe      	b.n	8002f6a <HardFault_Handler+0x4>

08002f6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002f6c:	b480      	push	{r7}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002f70:	e7fe      	b.n	8002f70 <MemManage_Handler+0x4>

08002f72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002f72:	b480      	push	{r7}
 8002f74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002f76:	e7fe      	b.n	8002f76 <BusFault_Handler+0x4>

08002f78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002f7c:	e7fe      	b.n	8002f7c <UsageFault_Handler+0x4>

08002f7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002f82:	bf00      	nop
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream0_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
	...

08002fd4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	af00      	add	r7, sp, #0
	static int previous_case = -1;

    if (LL_TIM_IsActiveFlag_UPDATE(TIM4)) {
 8002fd8:	488a      	ldr	r0, [pc, #552]	; (8003204 <TIM4_IRQHandler+0x230>)
 8002fda:	f7ff ffae 	bl	8002f3a <LL_TIM_IsActiveFlag_UPDATE>
 8002fde:	4603      	mov	r3, r0
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	f000 81cd 	beq.w	8003380 <TIM4_IRQHandler+0x3ac>
        LL_TIM_ClearFlag_UPDATE(TIM4);
 8002fe6:	4887      	ldr	r0, [pc, #540]	; (8003204 <TIM4_IRQHandler+0x230>)
 8002fe8:	f7ff ff99 	bl	8002f1e <LL_TIM_ClearFlag_UPDATE>
      //  filter(&current_out_adc_out,       &current_out_adc_old,       0.001, current_out_adc);




        if (previous_setpoint != setpoint) {
 8002fec:	4b86      	ldr	r3, [pc, #536]	; (8003208 <TIM4_IRQHandler+0x234>)
 8002fee:	ed93 7a00 	vldr	s14, [r3]
 8002ff2:	4b86      	ldr	r3, [pc, #536]	; (800320c <TIM4_IRQHandler+0x238>)
 8002ff4:	edd3 7a00 	vldr	s15, [r3]
 8002ff8:	eeb4 7a67 	vcmp.f32	s14, s15
 8002ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003000:	d006      	beq.n	8003010 <TIM4_IRQHandler+0x3c>
            previous_setpoint = setpoint;
 8003002:	4b82      	ldr	r3, [pc, #520]	; (800320c <TIM4_IRQHandler+0x238>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4a80      	ldr	r2, [pc, #512]	; (8003208 <TIM4_IRQHandler+0x234>)
 8003008:	6013      	str	r3, [r2, #0]
            blokada_case_change = 400; // blokuj zmianę current_case przez 20 cykli
 800300a:	4b81      	ldr	r3, [pc, #516]	; (8003210 <TIM4_IRQHandler+0x23c>)
 800300c:	2290      	movs	r2, #144	; 0x90
 800300e:	701a      	strb	r2, [r3, #0]
        }

        if (blokada_case_change > 0) {
 8003010:	4b7f      	ldr	r3, [pc, #508]	; (8003210 <TIM4_IRQHandler+0x23c>)
 8003012:	781b      	ldrb	r3, [r3, #0]
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d007      	beq.n	800302a <TIM4_IRQHandler+0x56>
            blokada_case_change--;
 800301a:	4b7d      	ldr	r3, [pc, #500]	; (8003210 <TIM4_IRQHandler+0x23c>)
 800301c:	781b      	ldrb	r3, [r3, #0]
 800301e:	b2db      	uxtb	r3, r3
 8003020:	3b01      	subs	r3, #1
 8003022:	b2da      	uxtb	r2, r3
 8003024:	4b7a      	ldr	r3, [pc, #488]	; (8003210 <TIM4_IRQHandler+0x23c>)
 8003026:	701a      	strb	r2, [r3, #0]
 8003028:	e01f      	b.n	800306a <TIM4_IRQHandler+0x96>
        } else if (force_case1_counter > 0) {
 800302a:	4b7a      	ldr	r3, [pc, #488]	; (8003214 <TIM4_IRQHandler+0x240>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	2b00      	cmp	r3, #0
 8003030:	dd08      	ble.n	8003044 <TIM4_IRQHandler+0x70>
            force_case1_counter--;
 8003032:	4b78      	ldr	r3, [pc, #480]	; (8003214 <TIM4_IRQHandler+0x240>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	3b01      	subs	r3, #1
 8003038:	4a76      	ldr	r2, [pc, #472]	; (8003214 <TIM4_IRQHandler+0x240>)
 800303a:	6013      	str	r3, [r2, #0]
            current_case = 1;
 800303c:	4b76      	ldr	r3, [pc, #472]	; (8003218 <TIM4_IRQHandler+0x244>)
 800303e:	2201      	movs	r2, #1
 8003040:	601a      	str	r2, [r3, #0]
 8003042:	e012      	b.n	800306a <TIM4_IRQHandler+0x96>
        } else {
            current_case = (current_out_adc>= 1.5f && target_duty >= 0) ? 1 : 0;
 8003044:	4b75      	ldr	r3, [pc, #468]	; (800321c <TIM4_IRQHandler+0x248>)
 8003046:	edd3 7a00 	vldr	s15, [r3]
 800304a:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 800304e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003052:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003056:	db05      	blt.n	8003064 <TIM4_IRQHandler+0x90>
 8003058:	4b71      	ldr	r3, [pc, #452]	; (8003220 <TIM4_IRQHandler+0x24c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	2b00      	cmp	r3, #0
 800305e:	db01      	blt.n	8003064 <TIM4_IRQHandler+0x90>
 8003060:	2301      	movs	r3, #1
 8003062:	e000      	b.n	8003066 <TIM4_IRQHandler+0x92>
 8003064:	2300      	movs	r3, #0
 8003066:	4a6c      	ldr	r2, [pc, #432]	; (8003218 <TIM4_IRQHandler+0x244>)
 8003068:	6013      	str	r3, [r2, #0]
        }

       // current_case =1;

        switch (current_case) {
 800306a:	4b6b      	ldr	r3, [pc, #428]	; (8003218 <TIM4_IRQHandler+0x244>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d002      	beq.n	8003078 <TIM4_IRQHandler+0xa4>
 8003072:	2b01      	cmp	r3, #1
 8003074:	d06f      	beq.n	8003156 <TIM4_IRQHandler+0x182>
 8003076:	e17f      	b.n	8003378 <TIM4_IRQHandler+0x3a4>
            case 0:

            	 if (previous_case == 1) {
 8003078:	4b6a      	ldr	r3, [pc, #424]	; (8003224 <TIM4_IRQHandler+0x250>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d102      	bne.n	8003086 <TIM4_IRQHandler+0xb2>
            	                    nol_regulator.previous_setpoint = 151.0f;
 8003080:	4b69      	ldr	r3, [pc, #420]	; (8003228 <TIM4_IRQHandler+0x254>)
 8003082:	4a6a      	ldr	r2, [pc, #424]	; (800322c <TIM4_IRQHandler+0x258>)
 8003084:	60da      	str	r2, [r3, #12]

            	                }
                // Reset flagi po wyjściu z case 1
                entered_case1_once = 0;
 8003086:	4b6a      	ldr	r3, [pc, #424]	; (8003230 <TIM4_IRQHandler+0x25c>)
 8003088:	2200      	movs	r2, #0
 800308a:	601a      	str	r2, [r3, #0]


                // Brak obciążenia – np. pomiń regulator prądu
                LL_TIM_CC_DisableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
 800308c:	2104      	movs	r1, #4
 800308e:	4869      	ldr	r0, [pc, #420]	; (8003234 <TIM4_IRQHandler+0x260>)
 8003090:	f7ff ff25 	bl	8002ede <LL_TIM_CC_DisableChannel>
                target_duty = (int)NOL_Update(&nol_regulator, setpoint, voltage_out_adc, voltage_in_adc);
 8003094:	4b5d      	ldr	r3, [pc, #372]	; (800320c <TIM4_IRQHandler+0x238>)
 8003096:	edd3 7a00 	vldr	s15, [r3]
 800309a:	4b67      	ldr	r3, [pc, #412]	; (8003238 <TIM4_IRQHandler+0x264>)
 800309c:	ed93 7a00 	vldr	s14, [r3]
 80030a0:	4b66      	ldr	r3, [pc, #408]	; (800323c <TIM4_IRQHandler+0x268>)
 80030a2:	edd3 6a00 	vldr	s13, [r3]
 80030a6:	eeb0 1a66 	vmov.f32	s2, s13
 80030aa:	eef0 0a47 	vmov.f32	s1, s14
 80030ae:	eeb0 0a67 	vmov.f32	s0, s15
 80030b2:	485d      	ldr	r0, [pc, #372]	; (8003228 <TIM4_IRQHandler+0x254>)
 80030b4:	f7ff f864 	bl	8002180 <NOL_Update>
 80030b8:	eef0 7a40 	vmov.f32	s15, s0
 80030bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030c0:	ee17 2a90 	vmov	r2, s15
 80030c4:	4b56      	ldr	r3, [pc, #344]	; (8003220 <TIM4_IRQHandler+0x24c>)
 80030c6:	601a      	str	r2, [r3, #0]

                switch ((target_duty > 0) ? 1 : (target_duty < 0) ? -1 : 0) {
 80030c8:	4b55      	ldr	r3, [pc, #340]	; (8003220 <TIM4_IRQHandler+0x24c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	dc08      	bgt.n	80030e2 <TIM4_IRQHandler+0x10e>
 80030d0:	4b53      	ldr	r3, [pc, #332]	; (8003220 <TIM4_IRQHandler+0x24c>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	da02      	bge.n	80030de <TIM4_IRQHandler+0x10a>
 80030d8:	f04f 33ff 	mov.w	r3, #4294967295
 80030dc:	e002      	b.n	80030e4 <TIM4_IRQHandler+0x110>
 80030de:	2300      	movs	r3, #0
 80030e0:	e000      	b.n	80030e4 <TIM4_IRQHandler+0x110>
 80030e2:	2301      	movs	r3, #1
 80030e4:	2b01      	cmp	r3, #1
 80030e6:	d012      	beq.n	800310e <TIM4_IRQHandler+0x13a>
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	f300 8144 	bgt.w	8003376 <TIM4_IRQHandler+0x3a2>
 80030ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030f2:	d01d      	beq.n	8003130 <TIM4_IRQHandler+0x15c>
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f040 813e 	bne.w	8003376 <TIM4_IRQHandler+0x3a2>
                    case 0:
                        LL_TIM_OC_SetCompareCH1(TIM1, 0);
 80030fa:	2100      	movs	r1, #0
 80030fc:	484d      	ldr	r0, [pc, #308]	; (8003234 <TIM4_IRQHandler+0x260>)
 80030fe:	f7ff ff00 	bl	8002f02 <LL_TIM_OC_SetCompareCH1>
                        LL_TIM_OC_SetCompareCH1(TIM2, 0);
 8003102:	2100      	movs	r1, #0
 8003104:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003108:	f7ff fefb 	bl	8002f02 <LL_TIM_OC_SetCompareCH1>
                        //zero++;
                        break;
 800310c:	e022      	b.n	8003154 <TIM4_IRQHandler+0x180>

                    case 1:
                        LL_TIM_OC_SetCompareCH1(TIM1, target_duty);
 800310e:	4b44      	ldr	r3, [pc, #272]	; (8003220 <TIM4_IRQHandler+0x24c>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4619      	mov	r1, r3
 8003114:	4847      	ldr	r0, [pc, #284]	; (8003234 <TIM4_IRQHandler+0x260>)
 8003116:	f7ff fef4 	bl	8002f02 <LL_TIM_OC_SetCompareCH1>
                        LL_TIM_OC_SetCompareCH1(TIM2, 0);
 800311a:	2100      	movs	r1, #0
 800311c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003120:	f7ff feef 	bl	8002f02 <LL_TIM_OC_SetCompareCH1>
                        plus++;
 8003124:	4b46      	ldr	r3, [pc, #280]	; (8003240 <TIM4_IRQHandler+0x26c>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	3301      	adds	r3, #1
 800312a:	4a45      	ldr	r2, [pc, #276]	; (8003240 <TIM4_IRQHandler+0x26c>)
 800312c:	6013      	str	r3, [r2, #0]
                        break;
 800312e:	e011      	b.n	8003154 <TIM4_IRQHandler+0x180>

                    case -1:
                        LL_TIM_OC_SetCompareCH1(TIM1, 0);
 8003130:	2100      	movs	r1, #0
 8003132:	4840      	ldr	r0, [pc, #256]	; (8003234 <TIM4_IRQHandler+0x260>)
 8003134:	f7ff fee5 	bl	8002f02 <LL_TIM_OC_SetCompareCH1>
                        LL_TIM_OC_SetCompareCH1(TIM2, -target_duty);
 8003138:	4b39      	ldr	r3, [pc, #228]	; (8003220 <TIM4_IRQHandler+0x24c>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	425b      	negs	r3, r3
 800313e:	4619      	mov	r1, r3
 8003140:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003144:	f7ff fedd 	bl	8002f02 <LL_TIM_OC_SetCompareCH1>
                        minus++;
 8003148:	4b3e      	ldr	r3, [pc, #248]	; (8003244 <TIM4_IRQHandler+0x270>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	3301      	adds	r3, #1
 800314e:	4a3d      	ldr	r2, [pc, #244]	; (8003244 <TIM4_IRQHandler+0x270>)
 8003150:	6013      	str	r3, [r2, #0]
                        break;
 8003152:	bf00      	nop
                }

                break;
 8003154:	e10f      	b.n	8003376 <TIM4_IRQHandler+0x3a2>

                case 1: {
                    static int case1_divider = 0;

                    // Jednorazowe wejście
                    if (!entered_case1_once)
 8003156:	4b36      	ldr	r3, [pc, #216]	; (8003230 <TIM4_IRQHandler+0x25c>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d138      	bne.n	80031d0 <TIM4_IRQHandler+0x1fc>
                    {
                        entered_case1_once = 1;
 800315e:	4b34      	ldr	r3, [pc, #208]	; (8003230 <TIM4_IRQHandler+0x25c>)
 8003160:	2201      	movs	r2, #1
 8003162:	601a      	str	r2, [r3, #0]
                       // force_case1_counter = 1000;
                        force_case1_counter = 100000;
 8003164:	4b2b      	ldr	r3, [pc, #172]	; (8003214 <TIM4_IRQHandler+0x240>)
 8003166:	4a38      	ldr	r2, [pc, #224]	; (8003248 <TIM4_IRQHandler+0x274>)
 8003168:	601a      	str	r2, [r3, #0]
                      //  force_case1_counter = 100000000000;
                        xd++;
 800316a:	4b38      	ldr	r3, [pc, #224]	; (800324c <TIM4_IRQHandler+0x278>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	3301      	adds	r3, #1
 8003170:	4a36      	ldr	r2, [pc, #216]	; (800324c <TIM4_IRQHandler+0x278>)
 8003172:	6013      	str	r3, [r2, #0]
                        current_triger=current_out_adc;
 8003174:	4b29      	ldr	r3, [pc, #164]	; (800321c <TIM4_IRQHandler+0x248>)
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	4a35      	ldr	r2, [pc, #212]	; (8003250 <TIM4_IRQHandler+0x27c>)
 800317a:	6013      	str	r3, [r2, #0]
                        LL_TIM_OC_SetCompareCH1(TIM2, 0);
 800317c:	2100      	movs	r1, #0
 800317e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003182:	f7ff febe 	bl	8002f02 <LL_TIM_OC_SetCompareCH1>
                        LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1N);
 8003186:	2104      	movs	r1, #4
 8003188:	482a      	ldr	r0, [pc, #168]	; (8003234 <TIM4_IRQHandler+0x260>)
 800318a:	f7ff fe97 	bl	8002ebc <LL_TIM_CC_EnableChannel>

                        PI_SetIntegralLimit(&pi_regulator, 10/ki_V_start);
 800318e:	4b31      	ldr	r3, [pc, #196]	; (8003254 <TIM4_IRQHandler+0x280>)
 8003190:	edd3 7a00 	vldr	s15, [r3]
 8003194:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8003198:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800319c:	eeb0 0a47 	vmov.f32	s0, s14
 80031a0:	482d      	ldr	r0, [pc, #180]	; (8003258 <TIM4_IRQHandler+0x284>)
 80031a2:	f7ff fba7 	bl	80028f4 <PI_SetIntegralLimit>
                        PIC_SetIntegralLimit(&pic_regulator, setpoint/180);
 80031a6:	4b19      	ldr	r3, [pc, #100]	; (800320c <TIM4_IRQHandler+0x238>)
 80031a8:	edd3 7a00 	vldr	s15, [r3]
 80031ac:	eddf 6a2b 	vldr	s13, [pc, #172]	; 800325c <TIM4_IRQHandler+0x288>
 80031b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80031b4:	eeb0 0a47 	vmov.f32	s0, s14
 80031b8:	4829      	ldr	r0, [pc, #164]	; (8003260 <TIM4_IRQHandler+0x28c>)
 80031ba:	f7ff fc6d 	bl	8002a98 <PIC_SetIntegralLimit>
                        V_reg_out=10;
 80031be:	4b29      	ldr	r3, [pc, #164]	; (8003264 <TIM4_IRQHandler+0x290>)
 80031c0:	4a29      	ldr	r2, [pc, #164]	; (8003268 <TIM4_IRQHandler+0x294>)
 80031c2:	601a      	str	r2, [r3, #0]

                        target_duty_sum = 0;
 80031c4:	4b29      	ldr	r3, [pc, #164]	; (800326c <TIM4_IRQHandler+0x298>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	601a      	str	r2, [r3, #0]
                        kp_boost_counter = 0;
 80031ca:	4b29      	ldr	r3, [pc, #164]	; (8003270 <TIM4_IRQHandler+0x29c>)
 80031cc:	2200      	movs	r2, #0
 80031ce:	601a      	str	r2, [r3, #0]

                       // case1_divider = 0; // Wyzeruj licznik przy wejściu!
                    }

                    if (kp_boost_counter < 5) {
 80031d0:	4b27      	ldr	r3, [pc, #156]	; (8003270 <TIM4_IRQHandler+0x29c>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b04      	cmp	r3, #4
 80031d6:	dc08      	bgt.n	80031ea <TIM4_IRQHandler+0x216>
                        pi_regulator.Kp = KP_V_dynamic;
 80031d8:	4b26      	ldr	r3, [pc, #152]	; (8003274 <TIM4_IRQHandler+0x2a0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a1e      	ldr	r2, [pc, #120]	; (8003258 <TIM4_IRQHandler+0x284>)
 80031de:	6013      	str	r3, [r2, #0]
                        pic_regulator.Kp = KP_I_dynamic;
 80031e0:	4b25      	ldr	r3, [pc, #148]	; (8003278 <TIM4_IRQHandler+0x2a4>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a1e      	ldr	r2, [pc, #120]	; (8003260 <TIM4_IRQHandler+0x28c>)
 80031e6:	6013      	str	r3, [r2, #0]
 80031e8:	e054      	b.n	8003294 <TIM4_IRQHandler+0x2c0>
                        //kp_boost_counter++;
                    } else if (kp_boost_counter <10) {
 80031ea:	4b21      	ldr	r3, [pc, #132]	; (8003270 <TIM4_IRQHandler+0x29c>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	2b09      	cmp	r3, #9
 80031f0:	dc48      	bgt.n	8003284 <TIM4_IRQHandler+0x2b0>
                    	pi_regulator.Kp = KP_V_dynamic2;
 80031f2:	4b22      	ldr	r3, [pc, #136]	; (800327c <TIM4_IRQHandler+0x2a8>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4a18      	ldr	r2, [pc, #96]	; (8003258 <TIM4_IRQHandler+0x284>)
 80031f8:	6013      	str	r3, [r2, #0]
                    	pic_regulator.Kp = KP_I_dynamic2;
 80031fa:	4b21      	ldr	r3, [pc, #132]	; (8003280 <TIM4_IRQHandler+0x2ac>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	4a18      	ldr	r2, [pc, #96]	; (8003260 <TIM4_IRQHandler+0x28c>)
 8003200:	6013      	str	r3, [r2, #0]
 8003202:	e047      	b.n	8003294 <TIM4_IRQHandler+0x2c0>
 8003204:	40000800 	.word	0x40000800
 8003208:	240000c0 	.word	0x240000c0
 800320c:	240000bc 	.word	0x240000bc
 8003210:	24000198 	.word	0x24000198
 8003214:	24000194 	.word	0x24000194
 8003218:	240000c8 	.word	0x240000c8
 800321c:	240000f8 	.word	0x240000f8
 8003220:	240000b8 	.word	0x240000b8
 8003224:	24000084 	.word	0x24000084
 8003228:	2400016c 	.word	0x2400016c
 800322c:	43170000 	.word	0x43170000
 8003230:	2400018c 	.word	0x2400018c
 8003234:	40010000 	.word	0x40010000
 8003238:	240000ec 	.word	0x240000ec
 800323c:	240000f4 	.word	0x240000f4
 8003240:	240000cc 	.word	0x240000cc
 8003244:	240000d0 	.word	0x240000d0
 8003248:	000186a0 	.word	0x000186a0
 800324c:	24000190 	.word	0x24000190
 8003250:	240001a0 	.word	0x240001a0
 8003254:	24000008 	.word	0x24000008
 8003258:	2400012c 	.word	0x2400012c
 800325c:	43340000 	.word	0x43340000
 8003260:	2400014c 	.word	0x2400014c
 8003264:	240000c4 	.word	0x240000c4
 8003268:	41200000 	.word	0x41200000
 800326c:	240001a4 	.word	0x240001a4
 8003270:	2400019c 	.word	0x2400019c
 8003274:	24000040 	.word	0x24000040
 8003278:	24000044 	.word	0x24000044
 800327c:	24000048 	.word	0x24000048
 8003280:	2400004c 	.word	0x2400004c
                    	//kp_boost_counter++;
                    } else {
                    	pi_regulator.Kp = kp_V_start;
 8003284:	4b3f      	ldr	r3, [pc, #252]	; (8003384 <TIM4_IRQHandler+0x3b0>)
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	4a3f      	ldr	r2, [pc, #252]	; (8003388 <TIM4_IRQHandler+0x3b4>)
 800328a:	6013      	str	r3, [r2, #0]
                    	pic_regulator.Kp = kp_I_start;
 800328c:	4b3f      	ldr	r3, [pc, #252]	; (800338c <TIM4_IRQHandler+0x3b8>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a3f      	ldr	r2, [pc, #252]	; (8003390 <TIM4_IRQHandler+0x3bc>)
 8003292:	6013      	str	r3, [r2, #0]
                  //  pi_regulator.Kp = kp_V_start;
                  // 	pic_regulator.Kp = kp_I_start;



                     kp_boost_counter++;
 8003294:	4b3f      	ldr	r3, [pc, #252]	; (8003394 <TIM4_IRQHandler+0x3c0>)
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	3301      	adds	r3, #1
 800329a:	4a3e      	ldr	r2, [pc, #248]	; (8003394 <TIM4_IRQHandler+0x3c0>)
 800329c:	6013      	str	r3, [r2, #0]

                    V_reg_out = PI_Update(&pi_regulator, setpoint + setpoint_underload_correction_value[ return_safe_correction_index(( setpoint / 10 ) - 2) ], voltage_out_adc_out, 0);
 800329e:	4b3e      	ldr	r3, [pc, #248]	; (8003398 <TIM4_IRQHandler+0x3c4>)
 80032a0:	ed93 7a00 	vldr	s14, [r3]
 80032a4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 80032a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80032ac:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80032b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80032b4:	eeb0 0a67 	vmov.f32	s0, s15
 80032b8:	f000 f892 	bl	80033e0 <return_safe_correction_index>
 80032bc:	4603      	mov	r3, r0
 80032be:	4a37      	ldr	r2, [pc, #220]	; (800339c <TIM4_IRQHandler+0x3c8>)
 80032c0:	009b      	lsls	r3, r3, #2
 80032c2:	4413      	add	r3, r2
 80032c4:	ed93 7a00 	vldr	s14, [r3]
 80032c8:	4b33      	ldr	r3, [pc, #204]	; (8003398 <TIM4_IRQHandler+0x3c4>)
 80032ca:	edd3 7a00 	vldr	s15, [r3]
 80032ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80032d2:	4b33      	ldr	r3, [pc, #204]	; (80033a0 <TIM4_IRQHandler+0x3cc>)
 80032d4:	ed93 7a00 	vldr	s14, [r3]
 80032d8:	ed9f 1a32 	vldr	s2, [pc, #200]	; 80033a4 <TIM4_IRQHandler+0x3d0>
 80032dc:	eef0 0a47 	vmov.f32	s1, s14
 80032e0:	eeb0 0a67 	vmov.f32	s0, s15
 80032e4:	4828      	ldr	r0, [pc, #160]	; (8003388 <TIM4_IRQHandler+0x3b4>)
 80032e6:	f7ff fa73 	bl	80027d0 <PI_Update>
 80032ea:	eef0 7a40 	vmov.f32	s15, s0
 80032ee:	4b2e      	ldr	r3, [pc, #184]	; (80033a8 <TIM4_IRQHandler+0x3d4>)
 80032f0:	edc3 7a00 	vstr	s15, [r3]

                    target_duty = (int)PIC_Update(&pic_regulator, V_reg_out, current_inductor_adc_out);
 80032f4:	4b2c      	ldr	r3, [pc, #176]	; (80033a8 <TIM4_IRQHandler+0x3d4>)
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	4b2c      	ldr	r3, [pc, #176]	; (80033ac <TIM4_IRQHandler+0x3d8>)
 80032fc:	ed93 7a00 	vldr	s14, [r3]
 8003300:	eef0 0a47 	vmov.f32	s1, s14
 8003304:	eeb0 0a67 	vmov.f32	s0, s15
 8003308:	4821      	ldr	r0, [pc, #132]	; (8003390 <TIM4_IRQHandler+0x3bc>)
 800330a:	f7ff fb3b 	bl	8002984 <PIC_Update>
 800330e:	eef0 7a40 	vmov.f32	s15, s0
 8003312:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003316:	ee17 2a90 	vmov	r2, s15
 800331a:	4b25      	ldr	r3, [pc, #148]	; (80033b0 <TIM4_IRQHandler+0x3dc>)
 800331c:	601a      	str	r2, [r3, #0]

                   if(kp_boost_counter > 200000 && kp_boost_counter < 200000+200) target_duty_sum += target_duty;
 800331e:	4b1d      	ldr	r3, [pc, #116]	; (8003394 <TIM4_IRQHandler+0x3c0>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4a24      	ldr	r2, [pc, #144]	; (80033b4 <TIM4_IRQHandler+0x3e0>)
 8003324:	4293      	cmp	r3, r2
 8003326:	dd0b      	ble.n	8003340 <TIM4_IRQHandler+0x36c>
 8003328:	4b1a      	ldr	r3, [pc, #104]	; (8003394 <TIM4_IRQHandler+0x3c0>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a22      	ldr	r2, [pc, #136]	; (80033b8 <TIM4_IRQHandler+0x3e4>)
 800332e:	4293      	cmp	r3, r2
 8003330:	dc06      	bgt.n	8003340 <TIM4_IRQHandler+0x36c>
 8003332:	4b22      	ldr	r3, [pc, #136]	; (80033bc <TIM4_IRQHandler+0x3e8>)
 8003334:	681a      	ldr	r2, [r3, #0]
 8003336:	4b1e      	ldr	r3, [pc, #120]	; (80033b0 <TIM4_IRQHandler+0x3dc>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	4413      	add	r3, r2
 800333c:	4a1f      	ldr	r2, [pc, #124]	; (80033bc <TIM4_IRQHandler+0x3e8>)
 800333e:	6013      	str	r3, [r2, #0]

                    if( kp_boost_counter >  200000+200) target_duty = target_duty_sum/200;
 8003340:	4b14      	ldr	r3, [pc, #80]	; (8003394 <TIM4_IRQHandler+0x3c0>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a1e      	ldr	r2, [pc, #120]	; (80033c0 <TIM4_IRQHandler+0x3ec>)
 8003346:	4293      	cmp	r3, r2
 8003348:	dd09      	ble.n	800335e <TIM4_IRQHandler+0x38a>
 800334a:	4b1c      	ldr	r3, [pc, #112]	; (80033bc <TIM4_IRQHandler+0x3e8>)
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	4a1d      	ldr	r2, [pc, #116]	; (80033c4 <TIM4_IRQHandler+0x3f0>)
 8003350:	fb82 1203 	smull	r1, r2, r2, r3
 8003354:	1192      	asrs	r2, r2, #6
 8003356:	17db      	asrs	r3, r3, #31
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	4a15      	ldr	r2, [pc, #84]	; (80033b0 <TIM4_IRQHandler+0x3dc>)
 800335c:	6013      	str	r3, [r2, #0]


                   //	target_duty=xddd;
           LL_TIM_OC_SetCompareCH1(TIM1, target_duty);
 800335e:	4b14      	ldr	r3, [pc, #80]	; (80033b0 <TIM4_IRQHandler+0x3dc>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4619      	mov	r1, r3
 8003364:	4818      	ldr	r0, [pc, #96]	; (80033c8 <TIM4_IRQHandler+0x3f4>)
 8003366:	f7ff fdcc 	bl	8002f02 <LL_TIM_OC_SetCompareCH1>
           LL_TIM_OC_SetCompareCH1(TIM2, 0);
 800336a:	2100      	movs	r1, #0
 800336c:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003370:	f7ff fdc7 	bl	8002f02 <LL_TIM_OC_SetCompareCH1>

        }

                break;
 8003374:	e000      	b.n	8003378 <TIM4_IRQHandler+0x3a4>
                break;
 8003376:	bf00      	nop
        }

        previous_case = current_case;
 8003378:	4b14      	ldr	r3, [pc, #80]	; (80033cc <TIM4_IRQHandler+0x3f8>)
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	4a14      	ldr	r2, [pc, #80]	; (80033d0 <TIM4_IRQHandler+0x3fc>)
 800337e:	6013      	str	r3, [r2, #0]


   // LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_6);
  //  LL_GPIO_ResetOutputPin(GPIOD, LL_GPIO_PIN_0);

}
 8003380:	bf00      	nop
 8003382:	bd80      	pop	{r7, pc}
 8003384:	24000004 	.word	0x24000004
 8003388:	2400012c 	.word	0x2400012c
 800338c:	2400000c 	.word	0x2400000c
 8003390:	2400014c 	.word	0x2400014c
 8003394:	2400019c 	.word	0x2400019c
 8003398:	240000bc 	.word	0x240000bc
 800339c:	24000050 	.word	0x24000050
 80033a0:	240000fc 	.word	0x240000fc
 80033a4:	00000000 	.word	0x00000000
 80033a8:	240000c4 	.word	0x240000c4
 80033ac:	24000100 	.word	0x24000100
 80033b0:	240000b8 	.word	0x240000b8
 80033b4:	00030d40 	.word	0x00030d40
 80033b8:	00030e07 	.word	0x00030e07
 80033bc:	240001a4 	.word	0x240001a4
 80033c0:	00030e08 	.word	0x00030e08
 80033c4:	51eb851f 	.word	0x51eb851f
 80033c8:	40010000 	.word	0x40010000
 80033cc:	240000c8 	.word	0x240000c8
 80033d0:	24000084 	.word	0x24000084

080033d4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80033d4:	b580      	push	{r7, lr}
 80033d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */
	PowerOnSequence_Update();
 80033d8:	f7ff fc5e 	bl	8002c98 <PowerOnSequence_Update>
  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80033dc:	bf00      	nop
 80033de:	bd80      	pop	{r7, pc}

080033e0 <return_safe_correction_index>:

/* USER CODE BEGIN 1 */


int return_safe_correction_index(float index)
{
 80033e0:	b480      	push	{r7}
 80033e2:	b083      	sub	sp, #12
 80033e4:	af00      	add	r7, sp, #0
 80033e6:	ed87 0a01 	vstr	s0, [r7, #4]
    if (index >= 0 && index <= 13 && index == (int)index)
 80033ea:	edd7 7a01 	vldr	s15, [r7, #4]
 80033ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033f6:	db1c      	blt.n	8003432 <return_safe_correction_index+0x52>
 80033f8:	edd7 7a01 	vldr	s15, [r7, #4]
 80033fc:	eeb2 7a0a 	vmov.f32	s14, #42	; 0x41500000  13.0
 8003400:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003408:	d813      	bhi.n	8003432 <return_safe_correction_index+0x52>
 800340a:	edd7 7a01 	vldr	s15, [r7, #4]
 800340e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003412:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003416:	ed97 7a01 	vldr	s14, [r7, #4]
 800341a:	eeb4 7a67 	vcmp.f32	s14, s15
 800341e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003422:	d106      	bne.n	8003432 <return_safe_correction_index+0x52>
    {
        return (int)index;
 8003424:	edd7 7a01 	vldr	s15, [r7, #4]
 8003428:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800342c:	ee17 3a90 	vmov	r3, s15
 8003430:	e000      	b.n	8003434 <return_safe_correction_index+0x54>
    }

    return 0;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	370c      	adds	r7, #12
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr

08003440 <__NVIC_GetPriorityGrouping>:
{
 8003440:	b480      	push	{r7}
 8003442:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003444:	4b04      	ldr	r3, [pc, #16]	; (8003458 <__NVIC_GetPriorityGrouping+0x18>)
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	0a1b      	lsrs	r3, r3, #8
 800344a:	f003 0307 	and.w	r3, r3, #7
}
 800344e:	4618      	mov	r0, r3
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr
 8003458:	e000ed00 	.word	0xe000ed00

0800345c <__NVIC_EnableIRQ>:
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	4603      	mov	r3, r0
 8003464:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8003466:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800346a:	2b00      	cmp	r3, #0
 800346c:	db0b      	blt.n	8003486 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800346e:	88fb      	ldrh	r3, [r7, #6]
 8003470:	f003 021f 	and.w	r2, r3, #31
 8003474:	4907      	ldr	r1, [pc, #28]	; (8003494 <__NVIC_EnableIRQ+0x38>)
 8003476:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800347a:	095b      	lsrs	r3, r3, #5
 800347c:	2001      	movs	r0, #1
 800347e:	fa00 f202 	lsl.w	r2, r0, r2
 8003482:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003486:	bf00      	nop
 8003488:	370c      	adds	r7, #12
 800348a:	46bd      	mov	sp, r7
 800348c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003490:	4770      	bx	lr
 8003492:	bf00      	nop
 8003494:	e000e100 	.word	0xe000e100

08003498 <__NVIC_SetPriority>:
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	4603      	mov	r3, r0
 80034a0:	6039      	str	r1, [r7, #0]
 80034a2:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80034a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	db0a      	blt.n	80034c2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	b2da      	uxtb	r2, r3
 80034b0:	490c      	ldr	r1, [pc, #48]	; (80034e4 <__NVIC_SetPriority+0x4c>)
 80034b2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80034b6:	0112      	lsls	r2, r2, #4
 80034b8:	b2d2      	uxtb	r2, r2
 80034ba:	440b      	add	r3, r1
 80034bc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80034c0:	e00a      	b.n	80034d8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80034c2:	683b      	ldr	r3, [r7, #0]
 80034c4:	b2da      	uxtb	r2, r3
 80034c6:	4908      	ldr	r1, [pc, #32]	; (80034e8 <__NVIC_SetPriority+0x50>)
 80034c8:	88fb      	ldrh	r3, [r7, #6]
 80034ca:	f003 030f 	and.w	r3, r3, #15
 80034ce:	3b04      	subs	r3, #4
 80034d0:	0112      	lsls	r2, r2, #4
 80034d2:	b2d2      	uxtb	r2, r2
 80034d4:	440b      	add	r3, r1
 80034d6:	761a      	strb	r2, [r3, #24]
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr
 80034e4:	e000e100 	.word	0xe000e100
 80034e8:	e000ed00 	.word	0xe000ed00

080034ec <NVIC_EncodePriority>:
{
 80034ec:	b480      	push	{r7}
 80034ee:	b089      	sub	sp, #36	; 0x24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	60f8      	str	r0, [r7, #12]
 80034f4:	60b9      	str	r1, [r7, #8]
 80034f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	f003 0307 	and.w	r3, r3, #7
 80034fe:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003500:	69fb      	ldr	r3, [r7, #28]
 8003502:	f1c3 0307 	rsb	r3, r3, #7
 8003506:	2b04      	cmp	r3, #4
 8003508:	bf28      	it	cs
 800350a:	2304      	movcs	r3, #4
 800350c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800350e:	69fb      	ldr	r3, [r7, #28]
 8003510:	3304      	adds	r3, #4
 8003512:	2b06      	cmp	r3, #6
 8003514:	d902      	bls.n	800351c <NVIC_EncodePriority+0x30>
 8003516:	69fb      	ldr	r3, [r7, #28]
 8003518:	3b03      	subs	r3, #3
 800351a:	e000      	b.n	800351e <NVIC_EncodePriority+0x32>
 800351c:	2300      	movs	r3, #0
 800351e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003520:	f04f 32ff 	mov.w	r2, #4294967295
 8003524:	69bb      	ldr	r3, [r7, #24]
 8003526:	fa02 f303 	lsl.w	r3, r2, r3
 800352a:	43da      	mvns	r2, r3
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	401a      	ands	r2, r3
 8003530:	697b      	ldr	r3, [r7, #20]
 8003532:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003534:	f04f 31ff 	mov.w	r1, #4294967295
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	fa01 f303 	lsl.w	r3, r1, r3
 800353e:	43d9      	mvns	r1, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003544:	4313      	orrs	r3, r2
}
 8003546:	4618      	mov	r0, r3
 8003548:	3724      	adds	r7, #36	; 0x24
 800354a:	46bd      	mov	sp, r7
 800354c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003550:	4770      	bx	lr
	...

08003554 <LL_AHB4_GRP1_EnableClock>:
{
 8003554:	b480      	push	{r7}
 8003556:	b085      	sub	sp, #20
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 800355c:	4b0a      	ldr	r3, [pc, #40]	; (8003588 <LL_AHB4_GRP1_EnableClock+0x34>)
 800355e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003562:	4909      	ldr	r1, [pc, #36]	; (8003588 <LL_AHB4_GRP1_EnableClock+0x34>)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 800356c:	4b06      	ldr	r3, [pc, #24]	; (8003588 <LL_AHB4_GRP1_EnableClock+0x34>)
 800356e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	4013      	ands	r3, r2
 8003576:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003578:	68fb      	ldr	r3, [r7, #12]
}
 800357a:	bf00      	nop
 800357c:	3714      	adds	r7, #20
 800357e:	46bd      	mov	sp, r7
 8003580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003584:	4770      	bx	lr
 8003586:	bf00      	nop
 8003588:	58024400 	.word	0x58024400

0800358c <LL_APB1_GRP1_EnableClock>:
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 8003594:	4b0a      	ldr	r3, [pc, #40]	; (80035c0 <LL_APB1_GRP1_EnableClock+0x34>)
 8003596:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 800359a:	4909      	ldr	r1, [pc, #36]	; (80035c0 <LL_APB1_GRP1_EnableClock+0x34>)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 80035a4:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <LL_APB1_GRP1_EnableClock+0x34>)
 80035a6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	4013      	ands	r3, r2
 80035ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035b0:	68fb      	ldr	r3, [r7, #12]
}
 80035b2:	bf00      	nop
 80035b4:	3714      	adds	r7, #20
 80035b6:	46bd      	mov	sp, r7
 80035b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035bc:	4770      	bx	lr
 80035be:	bf00      	nop
 80035c0:	58024400 	.word	0x58024400

080035c4 <LL_APB2_GRP1_EnableClock>:
{
 80035c4:	b480      	push	{r7}
 80035c6:	b085      	sub	sp, #20
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80035cc:	4b0a      	ldr	r3, [pc, #40]	; (80035f8 <LL_APB2_GRP1_EnableClock+0x34>)
 80035ce:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80035d2:	4909      	ldr	r1, [pc, #36]	; (80035f8 <LL_APB2_GRP1_EnableClock+0x34>)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4313      	orrs	r3, r2
 80035d8:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80035dc:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <LL_APB2_GRP1_EnableClock+0x34>)
 80035de:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4013      	ands	r3, r2
 80035e6:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80035e8:	68fb      	ldr	r3, [r7, #12]
}
 80035ea:	bf00      	nop
 80035ec:	3714      	adds	r7, #20
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	58024400 	.word	0x58024400

080035fc <LL_TIM_DisableARRPreload>:
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	601a      	str	r2, [r3, #0]
}
 8003610:	bf00      	nop
 8003612:	370c      	adds	r7, #12
 8003614:	46bd      	mov	sp, r7
 8003616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361a:	4770      	bx	lr

0800361c <LL_TIM_OC_DisableFast>:
{
 800361c:	b480      	push	{r7}
 800361e:	b085      	sub	sp, #20
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
 8003624:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d028      	beq.n	800367e <LL_TIM_OC_DisableFast+0x62>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	2b04      	cmp	r3, #4
 8003630:	d023      	beq.n	800367a <LL_TIM_OC_DisableFast+0x5e>
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	2b10      	cmp	r3, #16
 8003636:	d01e      	beq.n	8003676 <LL_TIM_OC_DisableFast+0x5a>
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	2b40      	cmp	r3, #64	; 0x40
 800363c:	d019      	beq.n	8003672 <LL_TIM_OC_DisableFast+0x56>
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003644:	d013      	beq.n	800366e <LL_TIM_OC_DisableFast+0x52>
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800364c:	d00d      	beq.n	800366a <LL_TIM_OC_DisableFast+0x4e>
 800364e:	683b      	ldr	r3, [r7, #0]
 8003650:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003654:	d007      	beq.n	8003666 <LL_TIM_OC_DisableFast+0x4a>
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800365c:	d101      	bne.n	8003662 <LL_TIM_OC_DisableFast+0x46>
 800365e:	2307      	movs	r3, #7
 8003660:	e00e      	b.n	8003680 <LL_TIM_OC_DisableFast+0x64>
 8003662:	2308      	movs	r3, #8
 8003664:	e00c      	b.n	8003680 <LL_TIM_OC_DisableFast+0x64>
 8003666:	2306      	movs	r3, #6
 8003668:	e00a      	b.n	8003680 <LL_TIM_OC_DisableFast+0x64>
 800366a:	2305      	movs	r3, #5
 800366c:	e008      	b.n	8003680 <LL_TIM_OC_DisableFast+0x64>
 800366e:	2304      	movs	r3, #4
 8003670:	e006      	b.n	8003680 <LL_TIM_OC_DisableFast+0x64>
 8003672:	2303      	movs	r3, #3
 8003674:	e004      	b.n	8003680 <LL_TIM_OC_DisableFast+0x64>
 8003676:	2302      	movs	r3, #2
 8003678:	e002      	b.n	8003680 <LL_TIM_OC_DisableFast+0x64>
 800367a:	2301      	movs	r3, #1
 800367c:	e000      	b.n	8003680 <LL_TIM_OC_DisableFast+0x64>
 800367e:	2300      	movs	r3, #0
 8003680:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	3318      	adds	r3, #24
 8003686:	4619      	mov	r1, r3
 8003688:	7bfb      	ldrb	r3, [r7, #15]
 800368a:	4a0b      	ldr	r2, [pc, #44]	; (80036b8 <LL_TIM_OC_DisableFast+0x9c>)
 800368c:	5cd3      	ldrb	r3, [r2, r3]
 800368e:	440b      	add	r3, r1
 8003690:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	681a      	ldr	r2, [r3, #0]
 8003696:	7bfb      	ldrb	r3, [r7, #15]
 8003698:	4908      	ldr	r1, [pc, #32]	; (80036bc <LL_TIM_OC_DisableFast+0xa0>)
 800369a:	5ccb      	ldrb	r3, [r1, r3]
 800369c:	4619      	mov	r1, r3
 800369e:	2304      	movs	r3, #4
 80036a0:	408b      	lsls	r3, r1
 80036a2:	43db      	mvns	r3, r3
 80036a4:	401a      	ands	r2, r3
 80036a6:	68bb      	ldr	r3, [r7, #8]
 80036a8:	601a      	str	r2, [r3, #0]
}
 80036aa:	bf00      	nop
 80036ac:	3714      	adds	r7, #20
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
 80036b6:	bf00      	nop
 80036b8:	08004d84 	.word	0x08004d84
 80036bc:	08004d90 	.word	0x08004d90

080036c0 <LL_TIM_OC_EnablePreload>:
{
 80036c0:	b480      	push	{r7}
 80036c2:	b085      	sub	sp, #20
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	6078      	str	r0, [r7, #4]
 80036c8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d028      	beq.n	8003722 <LL_TIM_OC_EnablePreload+0x62>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b04      	cmp	r3, #4
 80036d4:	d023      	beq.n	800371e <LL_TIM_OC_EnablePreload+0x5e>
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	2b10      	cmp	r3, #16
 80036da:	d01e      	beq.n	800371a <LL_TIM_OC_EnablePreload+0x5a>
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	2b40      	cmp	r3, #64	; 0x40
 80036e0:	d019      	beq.n	8003716 <LL_TIM_OC_EnablePreload+0x56>
 80036e2:	683b      	ldr	r3, [r7, #0]
 80036e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80036e8:	d013      	beq.n	8003712 <LL_TIM_OC_EnablePreload+0x52>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f0:	d00d      	beq.n	800370e <LL_TIM_OC_EnablePreload+0x4e>
 80036f2:	683b      	ldr	r3, [r7, #0]
 80036f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80036f8:	d007      	beq.n	800370a <LL_TIM_OC_EnablePreload+0x4a>
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003700:	d101      	bne.n	8003706 <LL_TIM_OC_EnablePreload+0x46>
 8003702:	2307      	movs	r3, #7
 8003704:	e00e      	b.n	8003724 <LL_TIM_OC_EnablePreload+0x64>
 8003706:	2308      	movs	r3, #8
 8003708:	e00c      	b.n	8003724 <LL_TIM_OC_EnablePreload+0x64>
 800370a:	2306      	movs	r3, #6
 800370c:	e00a      	b.n	8003724 <LL_TIM_OC_EnablePreload+0x64>
 800370e:	2305      	movs	r3, #5
 8003710:	e008      	b.n	8003724 <LL_TIM_OC_EnablePreload+0x64>
 8003712:	2304      	movs	r3, #4
 8003714:	e006      	b.n	8003724 <LL_TIM_OC_EnablePreload+0x64>
 8003716:	2303      	movs	r3, #3
 8003718:	e004      	b.n	8003724 <LL_TIM_OC_EnablePreload+0x64>
 800371a:	2302      	movs	r3, #2
 800371c:	e002      	b.n	8003724 <LL_TIM_OC_EnablePreload+0x64>
 800371e:	2301      	movs	r3, #1
 8003720:	e000      	b.n	8003724 <LL_TIM_OC_EnablePreload+0x64>
 8003722:	2300      	movs	r3, #0
 8003724:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3318      	adds	r3, #24
 800372a:	4619      	mov	r1, r3
 800372c:	7bfb      	ldrb	r3, [r7, #15]
 800372e:	4a0a      	ldr	r2, [pc, #40]	; (8003758 <LL_TIM_OC_EnablePreload+0x98>)
 8003730:	5cd3      	ldrb	r3, [r2, r3]
 8003732:	440b      	add	r3, r1
 8003734:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8003736:	68bb      	ldr	r3, [r7, #8]
 8003738:	681a      	ldr	r2, [r3, #0]
 800373a:	7bfb      	ldrb	r3, [r7, #15]
 800373c:	4907      	ldr	r1, [pc, #28]	; (800375c <LL_TIM_OC_EnablePreload+0x9c>)
 800373e:	5ccb      	ldrb	r3, [r1, r3]
 8003740:	4619      	mov	r1, r3
 8003742:	2308      	movs	r3, #8
 8003744:	408b      	lsls	r3, r1
 8003746:	431a      	orrs	r2, r3
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	601a      	str	r2, [r3, #0]
}
 800374c:	bf00      	nop
 800374e:	3714      	adds	r7, #20
 8003750:	46bd      	mov	sp, r7
 8003752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003756:	4770      	bx	lr
 8003758:	08004d84 	.word	0x08004d84
 800375c:	08004d90 	.word	0x08004d90

08003760 <LL_TIM_SetClockSource>:
{
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689a      	ldr	r2, [r3, #8]
 800376e:	4b06      	ldr	r3, [pc, #24]	; (8003788 <LL_TIM_SetClockSource+0x28>)
 8003770:	4013      	ands	r3, r2
 8003772:	683a      	ldr	r2, [r7, #0]
 8003774:	431a      	orrs	r2, r3
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	609a      	str	r2, [r3, #8]
}
 800377a:	bf00      	nop
 800377c:	370c      	adds	r7, #12
 800377e:	46bd      	mov	sp, r7
 8003780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003784:	4770      	bx	lr
 8003786:	bf00      	nop
 8003788:	fffebff8 	.word	0xfffebff8

0800378c <LL_TIM_SetTriggerOutput>:
{
 800378c:	b480      	push	{r7}
 800378e:	b083      	sub	sp, #12
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
 8003794:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	685b      	ldr	r3, [r3, #4]
 800379a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	431a      	orrs	r2, r3
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	605a      	str	r2, [r3, #4]
}
 80037a6:	bf00      	nop
 80037a8:	370c      	adds	r7, #12
 80037aa:	46bd      	mov	sp, r7
 80037ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b0:	4770      	bx	lr

080037b2 <LL_TIM_SetTriggerOutput2>:
{
 80037b2:	b480      	push	{r7}
 80037b4:	b083      	sub	sp, #12
 80037b6:	af00      	add	r7, sp, #0
 80037b8:	6078      	str	r0, [r7, #4]
 80037ba:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80037c4:	683b      	ldr	r3, [r7, #0]
 80037c6:	431a      	orrs	r2, r3
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	605a      	str	r2, [r3, #4]
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <LL_TIM_DisableMasterSlaveMode>:
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	689b      	ldr	r3, [r3, #8]
 80037e4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	609a      	str	r2, [r3, #8]
}
 80037ec:	bf00      	nop
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b09e      	sub	sp, #120	; 0x78
 80037fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80037fe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003802:	2200      	movs	r2, #0
 8003804:	601a      	str	r2, [r3, #0]
 8003806:	605a      	str	r2, [r3, #4]
 8003808:	609a      	str	r2, [r3, #8]
 800380a:	60da      	str	r2, [r3, #12]
 800380c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800380e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003812:	2220      	movs	r2, #32
 8003814:	2100      	movs	r1, #0
 8003816:	4618      	mov	r0, r3
 8003818:	f001 fa74 	bl	8004d04 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 800381c:	f107 031c 	add.w	r3, r7, #28
 8003820:	2228      	movs	r2, #40	; 0x28
 8003822:	2100      	movs	r1, #0
 8003824:	4618      	mov	r0, r3
 8003826:	f001 fa6d 	bl	8004d04 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382a:	1d3b      	adds	r3, r7, #4
 800382c:	2200      	movs	r2, #0
 800382e:	601a      	str	r2, [r3, #0]
 8003830:	605a      	str	r2, [r3, #4]
 8003832:	609a      	str	r2, [r3, #8]
 8003834:	60da      	str	r2, [r3, #12]
 8003836:	611a      	str	r2, [r3, #16]
 8003838:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800383a:	2001      	movs	r0, #1
 800383c:	f7ff fec2 	bl	80035c4 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003840:	2300      	movs	r3, #0
 8003842:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003846:	2300      	movs	r3, #0
 8003848:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = 1199;
 800384a:	f240 43af 	movw	r3, #1199	; 0x4af
 800384e:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003850:	2300      	movs	r3, #0
 8003852:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8003854:	2300      	movs	r3, #0
 8003856:	677b      	str	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8003858:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800385c:	4619      	mov	r1, r3
 800385e:	4836      	ldr	r0, [pc, #216]	; (8003938 <MX_TIM1_Init+0x140>)
 8003860:	f000 fdd6 	bl	8004410 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8003864:	4834      	ldr	r0, [pc, #208]	; (8003938 <MX_TIM1_Init+0x140>)
 8003866:	f7ff fec9 	bl	80035fc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800386a:	2100      	movs	r1, #0
 800386c:	4832      	ldr	r0, [pc, #200]	; (8003938 <MX_TIM1_Init+0x140>)
 800386e:	f7ff ff77 	bl	8003760 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8003872:	2101      	movs	r1, #1
 8003874:	4830      	ldr	r0, [pc, #192]	; (8003938 <MX_TIM1_Init+0x140>)
 8003876:	f7ff ff23 	bl	80036c0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 800387a:	2360      	movs	r3, #96	; 0x60
 800387c:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800387e:	2300      	movs	r3, #0
 8003880:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003882:	2300      	movs	r3, #0
 8003884:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 0;
 8003886:	2300      	movs	r3, #0
 8003888:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 800388a:	2300      	movs	r3, #0
 800388c:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 800388e:	2300      	movs	r3, #0
 8003890:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003892:	2300      	movs	r3, #0
 8003894:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003896:	2300      	movs	r3, #0
 8003898:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800389a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800389e:	461a      	mov	r2, r3
 80038a0:	2101      	movs	r1, #1
 80038a2:	4825      	ldr	r0, [pc, #148]	; (8003938 <MX_TIM1_Init+0x140>)
 80038a4:	f000 fe48 	bl	8004538 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 80038a8:	2101      	movs	r1, #1
 80038aa:	4823      	ldr	r0, [pc, #140]	; (8003938 <MX_TIM1_Init+0x140>)
 80038ac:	f7ff feb6 	bl	800361c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 80038b0:	2100      	movs	r1, #0
 80038b2:	4821      	ldr	r0, [pc, #132]	; (8003938 <MX_TIM1_Init+0x140>)
 80038b4:	f7ff ff6a 	bl	800378c <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 80038b8:	2100      	movs	r1, #0
 80038ba:	481f      	ldr	r0, [pc, #124]	; (8003938 <MX_TIM1_Init+0x140>)
 80038bc:	f7ff ff79 	bl	80037b2 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80038c0:	481d      	ldr	r0, [pc, #116]	; (8003938 <MX_TIM1_Init+0x140>)
 80038c2:	f7ff ff89 	bl	80037d8 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 80038c6:	2300      	movs	r3, #0
 80038c8:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 80038ca:	2300      	movs	r3, #0
 80038cc:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 80038ce:	2300      	movs	r3, #0
 80038d0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 10;
 80038d2:	230a      	movs	r3, #10
 80038d4:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 80038d8:	2300      	movs	r3, #0
 80038da:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 80038dc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80038e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 80038e2:	2300      	movs	r3, #0
 80038e4:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 80038e6:	2300      	movs	r3, #0
 80038e8:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 80038ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80038ee:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 80038f0:	2300      	movs	r3, #0
 80038f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 80038f4:	2300      	movs	r3, #0
 80038f6:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 80038f8:	f107 031c 	add.w	r3, r7, #28
 80038fc:	4619      	mov	r1, r3
 80038fe:	480e      	ldr	r0, [pc, #56]	; (8003938 <MX_TIM1_Init+0x140>)
 8003900:	f000 fe7a 	bl	80045f8 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 8003904:	2010      	movs	r0, #16
 8003906:	f7ff fe25 	bl	8003554 <LL_AHB4_GRP1_EnableClock>
    /**TIM1 GPIO Configuration
    PE8     ------> TIM1_CH1N
    PE9     ------> TIM1_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 800390a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800390e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003910:	2302      	movs	r3, #2
 8003912:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003914:	2300      	movs	r3, #0
 8003916:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003918:	2300      	movs	r3, #0
 800391a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 800391c:	2302      	movs	r3, #2
 800391e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8003920:	2301      	movs	r3, #1
 8003922:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003924:	1d3b      	adds	r3, r7, #4
 8003926:	4619      	mov	r1, r3
 8003928:	4804      	ldr	r0, [pc, #16]	; (800393c <MX_TIM1_Init+0x144>)
 800392a:	f000 fc73 	bl	8004214 <LL_GPIO_Init>

}
 800392e:	bf00      	nop
 8003930:	3778      	adds	r7, #120	; 0x78
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}
 8003936:	bf00      	nop
 8003938:	40010000 	.word	0x40010000
 800393c:	58021000 	.word	0x58021000

08003940 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b094      	sub	sp, #80	; 0x50
 8003944:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003946:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]
 800394e:	605a      	str	r2, [r3, #4]
 8003950:	609a      	str	r2, [r3, #8]
 8003952:	60da      	str	r2, [r3, #12]
 8003954:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003956:	f107 031c 	add.w	r3, r7, #28
 800395a:	2220      	movs	r2, #32
 800395c:	2100      	movs	r1, #0
 800395e:	4618      	mov	r0, r3
 8003960:	f001 f9d0 	bl	8004d04 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	605a      	str	r2, [r3, #4]
 800396c:	609a      	str	r2, [r3, #8]
 800396e:	60da      	str	r2, [r3, #12]
 8003970:	611a      	str	r2, [r3, #16]
 8003972:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM2);
 8003974:	2001      	movs	r0, #1
 8003976:	f7ff fe09 	bl	800358c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 800397a:	2300      	movs	r3, #0
 800397c:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800397e:	2300      	movs	r3, #0
 8003980:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 2399;
 8003982:	f640 135f 	movw	r3, #2399	; 0x95f
 8003986:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003988:	2300      	movs	r3, #0
 800398a:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM2, &TIM_InitStruct);
 800398c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003990:	4619      	mov	r1, r3
 8003992:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8003996:	f000 fd3b 	bl	8004410 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM2);
 800399a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 800399e:	f7ff fe2d 	bl	80035fc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM2, LL_TIM_CLOCKSOURCE_INTERNAL);
 80039a2:	2100      	movs	r1, #0
 80039a4:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039a8:	f7ff feda 	bl	8003760 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM2, LL_TIM_CHANNEL_CH1);
 80039ac:	2101      	movs	r1, #1
 80039ae:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039b2:	f7ff fe85 	bl	80036c0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80039b6:	2360      	movs	r3, #96	; 0x60
 80039b8:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80039ba:	2300      	movs	r3, #0
 80039bc:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80039be:	2300      	movs	r3, #0
 80039c0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80039c6:	2300      	movs	r3, #0
 80039c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM2, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80039ca:	f107 031c 	add.w	r3, r7, #28
 80039ce:	461a      	mov	r2, r3
 80039d0:	2101      	movs	r1, #1
 80039d2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039d6:	f000 fdaf 	bl	8004538 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM2, LL_TIM_CHANNEL_CH1);
 80039da:	2101      	movs	r1, #1
 80039dc:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039e0:	f7ff fe1c 	bl	800361c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_RESET);
 80039e4:	2100      	movs	r1, #0
 80039e6:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039ea:	f7ff fecf 	bl	800378c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM2);
 80039ee:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 80039f2:	f7ff fef1 	bl	80037d8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 80039f6:	2001      	movs	r0, #1
 80039f8:	f7ff fdac 	bl	8003554 <LL_AHB4_GRP1_EnableClock>
    /**TIM2 GPIO Configuration
    PA15 (JTDI)     ------> TIM2_CH1
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 80039fc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a00:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003a02:	2302      	movs	r3, #2
 8003a04:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003a06:	2300      	movs	r3, #0
 8003a08:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8003a0e:	2302      	movs	r3, #2
 8003a10:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8003a12:	2301      	movs	r3, #1
 8003a14:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a16:	1d3b      	adds	r3, r7, #4
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4803      	ldr	r0, [pc, #12]	; (8003a28 <MX_TIM2_Init+0xe8>)
 8003a1c:	f000 fbfa 	bl	8004214 <LL_GPIO_Init>

}
 8003a20:	bf00      	nop
 8003a22:	3750      	adds	r7, #80	; 0x50
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	58020000 	.word	0x58020000

08003a2c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b094      	sub	sp, #80	; 0x50
 8003a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003a32:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a36:	2200      	movs	r2, #0
 8003a38:	601a      	str	r2, [r3, #0]
 8003a3a:	605a      	str	r2, [r3, #4]
 8003a3c:	609a      	str	r2, [r3, #8]
 8003a3e:	60da      	str	r2, [r3, #12]
 8003a40:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003a42:	f107 031c 	add.w	r3, r7, #28
 8003a46:	2220      	movs	r2, #32
 8003a48:	2100      	movs	r1, #0
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f001 f95a 	bl	8004d04 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a50:	1d3b      	adds	r3, r7, #4
 8003a52:	2200      	movs	r2, #0
 8003a54:	601a      	str	r2, [r3, #0]
 8003a56:	605a      	str	r2, [r3, #4]
 8003a58:	609a      	str	r2, [r3, #8]
 8003a5a:	60da      	str	r2, [r3, #12]
 8003a5c:	611a      	str	r2, [r3, #16]
 8003a5e:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003a60:	2002      	movs	r0, #2
 8003a62:	f7ff fd93 	bl	800358c <LL_APB1_GRP1_EnableClock>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003a66:	2300      	movs	r3, #0
 8003a68:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 20000;
 8003a6e:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003a72:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV4;
 8003a74:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003a78:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003a7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003a7e:	4619      	mov	r1, r3
 8003a80:	4828      	ldr	r0, [pc, #160]	; (8003b24 <MX_TIM3_Init+0xf8>)
 8003a82:	f000 fcc5 	bl	8004410 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8003a86:	4827      	ldr	r0, [pc, #156]	; (8003b24 <MX_TIM3_Init+0xf8>)
 8003a88:	f7ff fdb8 	bl	80035fc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003a8c:	2100      	movs	r1, #0
 8003a8e:	4825      	ldr	r0, [pc, #148]	; (8003b24 <MX_TIM3_Init+0xf8>)
 8003a90:	f7ff fe66 	bl	8003760 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 8003a94:	2101      	movs	r1, #1
 8003a96:	4823      	ldr	r0, [pc, #140]	; (8003b24 <MX_TIM3_Init+0xf8>)
 8003a98:	f7ff fe12 	bl	80036c0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003a9c:	2360      	movs	r3, #96	; 0x60
 8003a9e:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 20000;
 8003aa8:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003aac:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003ab2:	f107 031c 	add.w	r3, r7, #28
 8003ab6:	461a      	mov	r2, r3
 8003ab8:	2101      	movs	r1, #1
 8003aba:	481a      	ldr	r0, [pc, #104]	; (8003b24 <MX_TIM3_Init+0xf8>)
 8003abc:	f000 fd3c 	bl	8004538 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8003ac0:	2101      	movs	r1, #1
 8003ac2:	4818      	ldr	r0, [pc, #96]	; (8003b24 <MX_TIM3_Init+0xf8>)
 8003ac4:	f7ff fdaa 	bl	800361c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8003ac8:	2110      	movs	r1, #16
 8003aca:	4816      	ldr	r0, [pc, #88]	; (8003b24 <MX_TIM3_Init+0xf8>)
 8003acc:	f7ff fdf8 	bl	80036c0 <LL_TIM_OC_EnablePreload>
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003ad0:	f107 031c 	add.w	r3, r7, #28
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2110      	movs	r1, #16
 8003ad8:	4812      	ldr	r0, [pc, #72]	; (8003b24 <MX_TIM3_Init+0xf8>)
 8003ada:	f000 fd2d 	bl	8004538 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8003ade:	2110      	movs	r1, #16
 8003ae0:	4810      	ldr	r0, [pc, #64]	; (8003b24 <MX_TIM3_Init+0xf8>)
 8003ae2:	f7ff fd9b 	bl	800361c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 8003ae6:	2100      	movs	r1, #0
 8003ae8:	480e      	ldr	r0, [pc, #56]	; (8003b24 <MX_TIM3_Init+0xf8>)
 8003aea:	f7ff fe4f 	bl	800378c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003aee:	480d      	ldr	r0, [pc, #52]	; (8003b24 <MX_TIM3_Init+0xf8>)
 8003af0:	f7ff fe72 	bl	80037d8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 8003af4:	2002      	movs	r0, #2
 8003af6:	f7ff fd2d 	bl	8003554 <LL_AHB4_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PB4 (NJTRST)     ------> TIM3_CH1
    PB5     ------> TIM3_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_4|LL_GPIO_PIN_5;
 8003afa:	2330      	movs	r3, #48	; 0x30
 8003afc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003afe:	2302      	movs	r3, #2
 8003b00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003b02:	2300      	movs	r3, #0
 8003b04:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b06:	2300      	movs	r3, #0
 8003b08:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8003b0a:	2302      	movs	r3, #2
 8003b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003b0e:	2302      	movs	r3, #2
 8003b10:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b12:	1d3b      	adds	r3, r7, #4
 8003b14:	4619      	mov	r1, r3
 8003b16:	4804      	ldr	r0, [pc, #16]	; (8003b28 <MX_TIM3_Init+0xfc>)
 8003b18:	f000 fb7c 	bl	8004214 <LL_GPIO_Init>

}
 8003b1c:	bf00      	nop
 8003b1e:	3750      	adds	r7, #80	; 0x50
 8003b20:	46bd      	mov	sp, r7
 8003b22:	bd80      	pop	{r7, pc}
 8003b24:	40000400 	.word	0x40000400
 8003b28:	58020400 	.word	0x58020400

08003b2c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003b32:	1d3b      	adds	r3, r7, #4
 8003b34:	2200      	movs	r2, #0
 8003b36:	601a      	str	r2, [r3, #0]
 8003b38:	605a      	str	r2, [r3, #4]
 8003b3a:	609a      	str	r2, [r3, #8]
 8003b3c:	60da      	str	r2, [r3, #12]
 8003b3e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8003b40:	2004      	movs	r0, #4
 8003b42:	f7ff fd23 	bl	800358c <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003b46:	f7ff fc7b 	bl	8003440 <__NVIC_GetPriorityGrouping>
 8003b4a:	4603      	mov	r3, r0
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	2100      	movs	r1, #0
 8003b50:	4618      	mov	r0, r3
 8003b52:	f7ff fccb 	bl	80034ec <NVIC_EncodePriority>
 8003b56:	4603      	mov	r3, r0
 8003b58:	4619      	mov	r1, r3
 8003b5a:	201e      	movs	r0, #30
 8003b5c:	f7ff fc9c 	bl	8003498 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8003b60:	201e      	movs	r0, #30
 8003b62:	f7ff fc7b 	bl	800345c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003b66:	2300      	movs	r3, #0
 8003b68:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003b6a:	2300      	movs	r3, #0
 8003b6c:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1199;
 8003b6e:	f240 43af 	movw	r3, #1199	; 0x4af
 8003b72:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003b74:	2300      	movs	r3, #0
 8003b76:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8003b78:	1d3b      	adds	r3, r7, #4
 8003b7a:	4619      	mov	r1, r3
 8003b7c:	480a      	ldr	r0, [pc, #40]	; (8003ba8 <MX_TIM4_Init+0x7c>)
 8003b7e:	f000 fc47 	bl	8004410 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8003b82:	4809      	ldr	r0, [pc, #36]	; (8003ba8 <MX_TIM4_Init+0x7c>)
 8003b84:	f7ff fd3a 	bl	80035fc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003b88:	2100      	movs	r1, #0
 8003b8a:	4807      	ldr	r0, [pc, #28]	; (8003ba8 <MX_TIM4_Init+0x7c>)
 8003b8c:	f7ff fde8 	bl	8003760 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8003b90:	2100      	movs	r1, #0
 8003b92:	4805      	ldr	r0, [pc, #20]	; (8003ba8 <MX_TIM4_Init+0x7c>)
 8003b94:	f7ff fdfa 	bl	800378c <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8003b98:	4803      	ldr	r0, [pc, #12]	; (8003ba8 <MX_TIM4_Init+0x7c>)
 8003b9a:	f7ff fe1d 	bl	80037d8 <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8003b9e:	bf00      	nop
 8003ba0:	3718      	adds	r7, #24
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	40000800 	.word	0x40000800

08003bac <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b09e      	sub	sp, #120	; 0x78
 8003bb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003bb2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	601a      	str	r2, [r3, #0]
 8003bba:	605a      	str	r2, [r3, #4]
 8003bbc:	609a      	str	r2, [r3, #8]
 8003bbe:	60da      	str	r2, [r3, #12]
 8003bc0:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8003bc2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	2100      	movs	r1, #0
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f001 f89a 	bl	8004d04 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8003bd0:	f107 031c 	add.w	r3, r7, #28
 8003bd4:	2228      	movs	r2, #40	; 0x28
 8003bd6:	2100      	movs	r1, #0
 8003bd8:	4618      	mov	r0, r3
 8003bda:	f001 f893 	bl	8004d04 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bde:	1d3b      	adds	r3, r7, #4
 8003be0:	2200      	movs	r2, #0
 8003be2:	601a      	str	r2, [r3, #0]
 8003be4:	605a      	str	r2, [r3, #4]
 8003be6:	609a      	str	r2, [r3, #8]
 8003be8:	60da      	str	r2, [r3, #12]
 8003bea:	611a      	str	r2, [r3, #16]
 8003bec:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM8);
 8003bee:	2002      	movs	r0, #2
 8003bf0:	f7ff fce8 	bl	80035c4 <LL_APB2_GRP1_EnableClock>

  /* TIM8 interrupt Init */
  NVIC_SetPriority(TIM8_UP_TIM13_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003bf4:	f7ff fc24 	bl	8003440 <__NVIC_GetPriorityGrouping>
 8003bf8:	4603      	mov	r3, r0
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	2100      	movs	r1, #0
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7ff fc74 	bl	80034ec <NVIC_EncodePriority>
 8003c04:	4603      	mov	r3, r0
 8003c06:	4619      	mov	r1, r3
 8003c08:	202c      	movs	r0, #44	; 0x2c
 8003c0a:	f7ff fc45 	bl	8003498 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003c0e:	202c      	movs	r0, #44	; 0x2c
 8003c10:	f7ff fc24 	bl	800345c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003c14:	2300      	movs	r3, #0
 8003c16:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_CENTER_DOWN;
 8003c1a:	2320      	movs	r3, #32
 8003c1c:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = 1499;
 8003c1e:	f240 53db 	movw	r3, #1499	; 0x5db
 8003c22:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003c24:	2300      	movs	r3, #0
 8003c26:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	677b      	str	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM8, &TIM_InitStruct);
 8003c2c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c30:	4619      	mov	r1, r3
 8003c32:	485e      	ldr	r0, [pc, #376]	; (8003dac <MX_TIM8_Init+0x200>)
 8003c34:	f000 fbec 	bl	8004410 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM8);
 8003c38:	485c      	ldr	r0, [pc, #368]	; (8003dac <MX_TIM8_Init+0x200>)
 8003c3a:	f7ff fcdf 	bl	80035fc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM8, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003c3e:	2100      	movs	r1, #0
 8003c40:	485a      	ldr	r0, [pc, #360]	; (8003dac <MX_TIM8_Init+0x200>)
 8003c42:	f7ff fd8d 	bl	8003760 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH1);
 8003c46:	2101      	movs	r1, #1
 8003c48:	4858      	ldr	r0, [pc, #352]	; (8003dac <MX_TIM8_Init+0x200>)
 8003c4a:	f7ff fd39 	bl	80036c0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003c4e:	2360      	movs	r3, #96	; 0x60
 8003c50:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003c52:	2300      	movs	r3, #0
 8003c54:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8003c56:	2300      	movs	r3, #0
 8003c58:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 750;
 8003c5a:	f240 23ee 	movw	r3, #750	; 0x2ee
 8003c5e:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003c60:	2300      	movs	r3, #0
 8003c62:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003c64:	2300      	movs	r3, #0
 8003c66:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003c70:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c74:	461a      	mov	r2, r3
 8003c76:	2101      	movs	r1, #1
 8003c78:	484c      	ldr	r0, [pc, #304]	; (8003dac <MX_TIM8_Init+0x200>)
 8003c7a:	f000 fc5d 	bl	8004538 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH1);
 8003c7e:	2101      	movs	r1, #1
 8003c80:	484a      	ldr	r0, [pc, #296]	; (8003dac <MX_TIM8_Init+0x200>)
 8003c82:	f7ff fccb 	bl	800361c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH2);
 8003c86:	2110      	movs	r1, #16
 8003c88:	4848      	ldr	r0, [pc, #288]	; (8003dac <MX_TIM8_Init+0x200>)
 8003c8a:	f7ff fd19 	bl	80036c0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.CompareValue = 0;
 8003c8e:	2300      	movs	r3, #0
 8003c90:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_LOW;
 8003c92:	2302      	movs	r3, #2
 8003c94:	657b      	str	r3, [r7, #84]	; 0x54
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8003c96:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	2110      	movs	r1, #16
 8003c9e:	4843      	ldr	r0, [pc, #268]	; (8003dac <MX_TIM8_Init+0x200>)
 8003ca0:	f000 fc4a 	bl	8004538 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH2);
 8003ca4:	2110      	movs	r1, #16
 8003ca6:	4841      	ldr	r0, [pc, #260]	; (8003dac <MX_TIM8_Init+0x200>)
 8003ca8:	f7ff fcb8 	bl	800361c <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM8, LL_TIM_CHANNEL_CH3);
 8003cac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cb0:	483e      	ldr	r0, [pc, #248]	; (8003dac <MX_TIM8_Init+0x200>)
 8003cb2:	f7ff fd05 	bl	80036c0 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	657b      	str	r3, [r7, #84]	; 0x54
  LL_TIM_OC_Init(TIM8, LL_TIM_CHANNEL_CH3, &TIM_OC_InitStruct);
 8003cba:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8003cbe:	461a      	mov	r2, r3
 8003cc0:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cc4:	4839      	ldr	r0, [pc, #228]	; (8003dac <MX_TIM8_Init+0x200>)
 8003cc6:	f000 fc37 	bl	8004538 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM8, LL_TIM_CHANNEL_CH3);
 8003cca:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003cce:	4837      	ldr	r0, [pc, #220]	; (8003dac <MX_TIM8_Init+0x200>)
 8003cd0:	f7ff fca4 	bl	800361c <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM8, LL_TIM_TRGO_RESET);
 8003cd4:	2100      	movs	r1, #0
 8003cd6:	4835      	ldr	r0, [pc, #212]	; (8003dac <MX_TIM8_Init+0x200>)
 8003cd8:	f7ff fd58 	bl	800378c <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM8, LL_TIM_TRGO2_RESET);
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4833      	ldr	r0, [pc, #204]	; (8003dac <MX_TIM8_Init+0x200>)
 8003ce0:	f7ff fd67 	bl	80037b2 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM8);
 8003ce4:	4831      	ldr	r0, [pc, #196]	; (8003dac <MX_TIM8_Init+0x200>)
 8003ce6:	f7ff fd77 	bl	80037d8 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8003cea:	2300      	movs	r3, #0
 8003cec:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8003cee:	2300      	movs	r3, #0
 8003cf0:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 24;
 8003cf6:	2318      	movs	r3, #24
 8003cf8:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8003d00:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003d04:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8003d06:	2300      	movs	r3, #0
 8003d08:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8003d0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003d12:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8003d14:	2300      	movs	r3, #0
 8003d16:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM8, &TIM_BDTRInitStruct);
 8003d1c:	f107 031c 	add.w	r3, r7, #28
 8003d20:	4619      	mov	r1, r3
 8003d22:	4822      	ldr	r0, [pc, #136]	; (8003dac <MX_TIM8_Init+0x200>)
 8003d24:	f000 fc68 	bl	80045f8 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8003d28:	2001      	movs	r0, #1
 8003d2a:	f7ff fc13 	bl	8003554 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 8003d2e:	2002      	movs	r0, #2
 8003d30:	f7ff fc10 	bl	8003554 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8003d34:	2004      	movs	r0, #4
 8003d36:	f7ff fc0d 	bl	8003554 <LL_AHB4_GRP1_EnableClock>
    PA5     ------> TIM8_CH1N
    PB15     ------> TIM8_CH3N
    PC6     ------> TIM8_CH1
    PC7     ------> TIM8_CH2
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_5;
 8003d3a:	2320      	movs	r3, #32
 8003d3c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003d3e:	2302      	movs	r3, #2
 8003d40:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003d42:	2300      	movs	r3, #0
 8003d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003d46:	2300      	movs	r3, #0
 8003d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8003d4a:	2302      	movs	r3, #2
 8003d4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8003d4e:	2303      	movs	r3, #3
 8003d50:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d52:	1d3b      	adds	r3, r7, #4
 8003d54:	4619      	mov	r1, r3
 8003d56:	4816      	ldr	r0, [pc, #88]	; (8003db0 <MX_TIM8_Init+0x204>)
 8003d58:	f000 fa5c 	bl	8004214 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_15;
 8003d5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d60:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003d62:	2302      	movs	r3, #2
 8003d64:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003d66:	2300      	movs	r3, #0
 8003d68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003d6a:	2300      	movs	r3, #0
 8003d6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8003d6e:	2302      	movs	r3, #2
 8003d70:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8003d72:	2303      	movs	r3, #3
 8003d74:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d76:	1d3b      	adds	r3, r7, #4
 8003d78:	4619      	mov	r1, r3
 8003d7a:	480e      	ldr	r0, [pc, #56]	; (8003db4 <MX_TIM8_Init+0x208>)
 8003d7c:	f000 fa4a 	bl	8004214 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003d80:	23c0      	movs	r3, #192	; 0xc0
 8003d82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003d84:	2302      	movs	r3, #2
 8003d86:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8003d90:	2302      	movs	r3, #2
 8003d92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_3;
 8003d94:	2303      	movs	r3, #3
 8003d96:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d98:	1d3b      	adds	r3, r7, #4
 8003d9a:	4619      	mov	r1, r3
 8003d9c:	4806      	ldr	r0, [pc, #24]	; (8003db8 <MX_TIM8_Init+0x20c>)
 8003d9e:	f000 fa39 	bl	8004214 <LL_GPIO_Init>

}
 8003da2:	bf00      	nop
 8003da4:	3778      	adds	r7, #120	; 0x78
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}
 8003daa:	bf00      	nop
 8003dac:	40010400 	.word	0x40010400
 8003db0:	58020000 	.word	0x58020000
 8003db4:	58020400 	.word	0x58020400
 8003db8:	58020800 	.word	0x58020800

08003dbc <MX_TIM13_Init>:
/* TIM13 init function */
void MX_TIM13_Init(void)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b086      	sub	sp, #24
 8003dc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM13_Init 0 */

  /* USER CODE END TIM13_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003dc2:	1d3b      	adds	r3, r7, #4
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	601a      	str	r2, [r3, #0]
 8003dc8:	605a      	str	r2, [r3, #4]
 8003dca:	609a      	str	r2, [r3, #8]
 8003dcc:	60da      	str	r2, [r3, #12]
 8003dce:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM13);
 8003dd0:	2080      	movs	r0, #128	; 0x80
 8003dd2:	f7ff fbdb 	bl	800358c <LL_APB1_GRP1_EnableClock>

  /* TIM13 interrupt Init */
  NVIC_SetPriority(TIM8_UP_TIM13_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003dd6:	f7ff fb33 	bl	8003440 <__NVIC_GetPriorityGrouping>
 8003dda:	4603      	mov	r3, r0
 8003ddc:	2200      	movs	r2, #0
 8003dde:	2100      	movs	r1, #0
 8003de0:	4618      	mov	r0, r3
 8003de2:	f7ff fb83 	bl	80034ec <NVIC_EncodePriority>
 8003de6:	4603      	mov	r3, r0
 8003de8:	4619      	mov	r1, r3
 8003dea:	202c      	movs	r0, #44	; 0x2c
 8003dec:	f7ff fb54 	bl	8003498 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8003df0:	202c      	movs	r0, #44	; 0x2c
 8003df2:	f7ff fb33 	bl	800345c <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM13_Init 1 */

  /* USER CODE END TIM13_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8003df6:	2300      	movs	r3, #0
 8003df8:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003dfa:	2300      	movs	r3, #0
 8003dfc:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1999;
 8003dfe:	f240 73cf 	movw	r3, #1999	; 0x7cf
 8003e02:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8003e04:	2300      	movs	r3, #0
 8003e06:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM13, &TIM_InitStruct);
 8003e08:	1d3b      	adds	r3, r7, #4
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4804      	ldr	r0, [pc, #16]	; (8003e20 <MX_TIM13_Init+0x64>)
 8003e0e:	f000 faff 	bl	8004410 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM13);
 8003e12:	4803      	ldr	r0, [pc, #12]	; (8003e20 <MX_TIM13_Init+0x64>)
 8003e14:	f7ff fbf2 	bl	80035fc <LL_TIM_DisableARRPreload>
  /* USER CODE BEGIN TIM13_Init 2 */

  /* USER CODE END TIM13_Init 2 */

}
 8003e18:	bf00      	nop
 8003e1a:	3718      	adds	r7, #24
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	bd80      	pop	{r7, pc}
 8003e20:	40001c00 	.word	0x40001c00

08003e24 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8003e24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003e5c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8003e28:	f7fc fa56 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e2c:	480c      	ldr	r0, [pc, #48]	; (8003e60 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003e2e:	490d      	ldr	r1, [pc, #52]	; (8003e64 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003e30:	4a0d      	ldr	r2, [pc, #52]	; (8003e68 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003e32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e34:	e002      	b.n	8003e3c <LoopCopyDataInit>

08003e36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e3a:	3304      	adds	r3, #4

08003e3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003e3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003e3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003e40:	d3f9      	bcc.n	8003e36 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003e42:	4a0a      	ldr	r2, [pc, #40]	; (8003e6c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003e44:	4c0a      	ldr	r4, [pc, #40]	; (8003e70 <LoopFillZerobss+0x22>)
  movs r3, #0
 8003e46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003e48:	e001      	b.n	8003e4e <LoopFillZerobss>

08003e4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003e4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003e4c:	3204      	adds	r2, #4

08003e4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003e4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003e50:	d3fb      	bcc.n	8003e4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003e52:	f000 ff5f 	bl	8004d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003e56:	f7fd fee9 	bl	8001c2c <main>
  bx  lr
 8003e5a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8003e5c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8003e60:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8003e64:	24000088 	.word	0x24000088
  ldr r2, =_sidata
 8003e68:	08004da4 	.word	0x08004da4
  ldr r2, =_sbss
 8003e6c:	24000090 	.word	0x24000090
  ldr r4, =_ebss
 8003e70:	240001a8 	.word	0x240001a8

08003e74 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003e74:	e7fe      	b.n	8003e74 <ADC3_IRQHandler>

08003e76 <LL_ADC_REG_SetSequencerLength>:
{
 8003e76:	b480      	push	{r7}
 8003e78:	b083      	sub	sp, #12
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
 8003e7e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e84:	f023 020f 	bic.w	r2, r3, #15
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003e90:	bf00      	nop
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <LL_ADC_IsEnabled>:
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0301 	and.w	r3, r3, #1
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d101      	bne.n	8003eb4 <LL_ADC_IsEnabled+0x18>
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <LL_ADC_IsEnabled+0x1a>
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	370c      	adds	r7, #12
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
	...

08003ec4 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8003ec4:	b590      	push	{r4, r7, lr}
 8003ec6:	b085      	sub	sp, #20
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a22      	ldr	r2, [pc, #136]	; (8003f60 <LL_ADC_CommonInit+0x9c>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d10e      	bne.n	8003ef8 <LL_ADC_CommonInit+0x34>
 8003eda:	4822      	ldr	r0, [pc, #136]	; (8003f64 <LL_ADC_CommonInit+0xa0>)
 8003edc:	f7ff ffde 	bl	8003e9c <LL_ADC_IsEnabled>
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	4821      	ldr	r0, [pc, #132]	; (8003f68 <LL_ADC_CommonInit+0xa4>)
 8003ee4:	f7ff ffda 	bl	8003e9c <LL_ADC_IsEnabled>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	4323      	orrs	r3, r4
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	bf0c      	ite	eq
 8003ef0:	2301      	moveq	r3, #1
 8003ef2:	2300      	movne	r3, #0
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	e008      	b.n	8003f0a <LL_ADC_CommonInit+0x46>
 8003ef8:	481c      	ldr	r0, [pc, #112]	; (8003f6c <LL_ADC_CommonInit+0xa8>)
 8003efa:	f7ff ffcf 	bl	8003e9c <LL_ADC_IsEnabled>
 8003efe:	4603      	mov	r3, r0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	bf0c      	ite	eq
 8003f04:	2301      	moveq	r3, #1
 8003f06:	2300      	movne	r3, #0
 8003f08:	b2db      	uxtb	r3, r3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d020      	beq.n	8003f50 <LL_ADC_CommonInit+0x8c>
    /*  - multimode (if several ADC instances available on the                */
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 8003f0e:	683b      	ldr	r3, [r7, #0]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d012      	beq.n	8003f3c <LL_ADC_CommonInit+0x78>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	689a      	ldr	r2, [r3, #8]
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <LL_ADC_CommonInit+0xac>)
 8003f1c:	4013      	ands	r3, r2
 8003f1e:	683a      	ldr	r2, [r7, #0]
 8003f20:	6811      	ldr	r1, [r2, #0]
 8003f22:	683a      	ldr	r2, [r7, #0]
 8003f24:	6852      	ldr	r2, [r2, #4]
 8003f26:	4311      	orrs	r1, r2
 8003f28:	683a      	ldr	r2, [r7, #0]
 8003f2a:	6892      	ldr	r2, [r2, #8]
 8003f2c:	4311      	orrs	r1, r2
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	68d2      	ldr	r2, [r2, #12]
 8003f32:	430a      	orrs	r2, r1
 8003f34:	431a      	orrs	r2, r3
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	609a      	str	r2, [r3, #8]
 8003f3a:	e00b      	b.n	8003f54 <LL_ADC_CommonInit+0x90>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	4b0b      	ldr	r3, [pc, #44]	; (8003f70 <LL_ADC_CommonInit+0xac>)
 8003f42:	4013      	ands	r3, r2
 8003f44:	683a      	ldr	r2, [r7, #0]
 8003f46:	6812      	ldr	r2, [r2, #0]
 8003f48:	431a      	orrs	r2, r3
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	609a      	str	r2, [r3, #8]
 8003f4e:	e001      	b.n	8003f54 <LL_ADC_CommonInit+0x90>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8003f50:	2301      	movs	r3, #1
 8003f52:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003f54:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	3714      	adds	r7, #20
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	bd90      	pop	{r4, r7, pc}
 8003f5e:	bf00      	nop
 8003f60:	40022300 	.word	0x40022300
 8003f64:	40022000 	.word	0x40022000
 8003f68:	40022100 	.word	0x40022100
 8003f6c:	58026000 	.word	0x58026000
 8003f70:	ffc030e0 	.word	0xffc030e0

08003f74 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b084      	sub	sp, #16
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
 8003f7c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003f7e:	2300      	movs	r3, #0
 8003f80:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_LEFT_BIT_SHIFT(ADC_InitStruct->LeftBitShift));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8003f82:	6878      	ldr	r0, [r7, #4]
 8003f84:	f7ff ff8a 	bl	8003e9c <LL_ADC_IsEnabled>
 8003f88:	4603      	mov	r3, r0
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d115      	bne.n	8003fba <LL_ADC_Init+0x46>
               ADC_InitStruct->Resolution
               | ADC_InitStruct->LowPowerMode
              );
    }
#else
    MODIFY_REG(ADCx->CFGR,
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	68da      	ldr	r2, [r3, #12]
 8003f92:	4b0d      	ldr	r3, [pc, #52]	; (8003fc8 <LL_ADC_Init+0x54>)
 8003f94:	4013      	ands	r3, r2
 8003f96:	683a      	ldr	r2, [r7, #0]
 8003f98:	6811      	ldr	r1, [r2, #0]
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	6892      	ldr	r2, [r2, #8]
 8003f9e:	430a      	orrs	r2, r1
 8003fa0:	431a      	orrs	r2, r3
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->LowPowerMode
              );
#endif

    MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LSHIFT, ADC_InitStruct->LeftBitShift);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691b      	ldr	r3, [r3, #16]
 8003faa:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	685b      	ldr	r3, [r3, #4]
 8003fb2:	431a      	orrs	r2, r3
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	611a      	str	r2, [r3, #16]
 8003fb8:	e001      	b.n	8003fbe <LL_ADC_Init+0x4a>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8003fbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	3710      	adds	r7, #16
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	bd80      	pop	{r7, pc}
 8003fc8:	ffffbfe3 	.word	0xffffbfe3

08003fcc <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8003fcc:	b580      	push	{r7, lr}
 8003fce:	b084      	sub	sp, #16
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
 8003fd4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8003fd6:	2300      	movs	r3, #0
 8003fd8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DATA_TRANSFER_MODE(ADC_REG_InitStruct->DataTransferMode));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f7ff ff5e 	bl	8003e9c <LL_ADC_IsEnabled>
 8003fe0:	4603      	mov	r3, r0
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d132      	bne.n	800404c <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d015      	beq.n	800401a <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	68da      	ldr	r2, [r3, #12]
 8003ff2:	4b1a      	ldr	r3, [pc, #104]	; (800405c <LL_ADC_REG_Init+0x90>)
 8003ff4:	4013      	ands	r3, r2
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	6811      	ldr	r1, [r2, #0]
 8003ffa:	683a      	ldr	r2, [r7, #0]
 8003ffc:	6892      	ldr	r2, [r2, #8]
 8003ffe:	4311      	orrs	r1, r2
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	68d2      	ldr	r2, [r2, #12]
 8004004:	4311      	orrs	r1, r2
 8004006:	683a      	ldr	r2, [r7, #0]
 8004008:	6912      	ldr	r2, [r2, #16]
 800400a:	4311      	orrs	r1, r2
 800400c:	683a      	ldr	r2, [r7, #0]
 800400e:	6952      	ldr	r2, [r2, #20]
 8004010:	430a      	orrs	r2, r1
 8004012:	431a      	orrs	r2, r3
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	60da      	str	r2, [r3, #12]
 8004018:	e011      	b.n	800403e <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	68da      	ldr	r2, [r3, #12]
 800401e:	4b0f      	ldr	r3, [pc, #60]	; (800405c <LL_ADC_REG_Init+0x90>)
 8004020:	4013      	ands	r3, r2
 8004022:	683a      	ldr	r2, [r7, #0]
 8004024:	6811      	ldr	r1, [r2, #0]
 8004026:	683a      	ldr	r2, [r7, #0]
 8004028:	68d2      	ldr	r2, [r2, #12]
 800402a:	4311      	orrs	r1, r2
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	6912      	ldr	r2, [r2, #16]
 8004030:	4311      	orrs	r1, r2
 8004032:	683a      	ldr	r2, [r7, #0]
 8004034:	6952      	ldr	r2, [r2, #20]
 8004036:	430a      	orrs	r2, r1
 8004038:	431a      	orrs	r2, r3
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685b      	ldr	r3, [r3, #4]
 8004042:	4619      	mov	r1, r3
 8004044:	6878      	ldr	r0, [r7, #4]
 8004046:	f7ff ff16 	bl	8003e76 <LL_ADC_REG_SetSequencerLength>
 800404a:	e001      	b.n	8004050 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800404c:	2301      	movs	r3, #1
 800404e:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8004050:	7bfb      	ldrb	r3, [r7, #15]
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
 800405a:	bf00      	nop
 800405c:	fff0c01c 	.word	0xfff0c01c

08004060 <LL_GPIO_SetPinMode>:
{
 8004060:	b480      	push	{r7}
 8004062:	b085      	sub	sp, #20
 8004064:	af00      	add	r7, sp, #0
 8004066:	60f8      	str	r0, [r7, #12]
 8004068:	60b9      	str	r1, [r7, #8]
 800406a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	6819      	ldr	r1, [r3, #0]
 8004070:	68bb      	ldr	r3, [r7, #8]
 8004072:	fb03 f203 	mul.w	r2, r3, r3
 8004076:	4613      	mov	r3, r2
 8004078:	005b      	lsls	r3, r3, #1
 800407a:	4413      	add	r3, r2
 800407c:	43db      	mvns	r3, r3
 800407e:	ea01 0203 	and.w	r2, r1, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	fb03 f303 	mul.w	r3, r3, r3
 8004088:	6879      	ldr	r1, [r7, #4]
 800408a:	fb01 f303 	mul.w	r3, r1, r3
 800408e:	431a      	orrs	r2, r3
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	601a      	str	r2, [r3, #0]
}
 8004094:	bf00      	nop
 8004096:	3714      	adds	r7, #20
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <LL_GPIO_SetPinOutputType>:
{
 80040a0:	b480      	push	{r7}
 80040a2:	b085      	sub	sp, #20
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	60f8      	str	r0, [r7, #12]
 80040a8:	60b9      	str	r1, [r7, #8]
 80040aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	685a      	ldr	r2, [r3, #4]
 80040b0:	68bb      	ldr	r3, [r7, #8]
 80040b2:	43db      	mvns	r3, r3
 80040b4:	401a      	ands	r2, r3
 80040b6:	68bb      	ldr	r3, [r7, #8]
 80040b8:	6879      	ldr	r1, [r7, #4]
 80040ba:	fb01 f303 	mul.w	r3, r1, r3
 80040be:	431a      	orrs	r2, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	605a      	str	r2, [r3, #4]
}
 80040c4:	bf00      	nop
 80040c6:	3714      	adds	r7, #20
 80040c8:	46bd      	mov	sp, r7
 80040ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ce:	4770      	bx	lr

080040d0 <LL_GPIO_SetPinSpeed>:
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	60f8      	str	r0, [r7, #12]
 80040d8:	60b9      	str	r1, [r7, #8]
 80040da:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6899      	ldr	r1, [r3, #8]
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	fb03 f203 	mul.w	r2, r3, r3
 80040e6:	4613      	mov	r3, r2
 80040e8:	005b      	lsls	r3, r3, #1
 80040ea:	4413      	add	r3, r2
 80040ec:	43db      	mvns	r3, r3
 80040ee:	ea01 0203 	and.w	r2, r1, r3
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	fb03 f303 	mul.w	r3, r3, r3
 80040f8:	6879      	ldr	r1, [r7, #4]
 80040fa:	fb01 f303 	mul.w	r3, r1, r3
 80040fe:	431a      	orrs	r2, r3
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	609a      	str	r2, [r3, #8]
}
 8004104:	bf00      	nop
 8004106:	3714      	adds	r7, #20
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr

08004110 <LL_GPIO_SetPinPull>:
{
 8004110:	b480      	push	{r7}
 8004112:	b085      	sub	sp, #20
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	68d9      	ldr	r1, [r3, #12]
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	fb03 f203 	mul.w	r2, r3, r3
 8004126:	4613      	mov	r3, r2
 8004128:	005b      	lsls	r3, r3, #1
 800412a:	4413      	add	r3, r2
 800412c:	43db      	mvns	r3, r3
 800412e:	ea01 0203 	and.w	r2, r1, r3
 8004132:	68bb      	ldr	r3, [r7, #8]
 8004134:	fb03 f303 	mul.w	r3, r3, r3
 8004138:	6879      	ldr	r1, [r7, #4]
 800413a:	fb01 f303 	mul.w	r3, r1, r3
 800413e:	431a      	orrs	r2, r3
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	60da      	str	r2, [r3, #12]
}
 8004144:	bf00      	nop
 8004146:	3714      	adds	r7, #20
 8004148:	46bd      	mov	sp, r7
 800414a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800414e:	4770      	bx	lr

08004150 <LL_GPIO_SetAFPin_0_7>:
{
 8004150:	b480      	push	{r7}
 8004152:	b085      	sub	sp, #20
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	6a19      	ldr	r1, [r3, #32]
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	fb03 f303 	mul.w	r3, r3, r3
 8004166:	68ba      	ldr	r2, [r7, #8]
 8004168:	fb02 f303 	mul.w	r3, r2, r3
 800416c:	68ba      	ldr	r2, [r7, #8]
 800416e:	fb03 f202 	mul.w	r2, r3, r2
 8004172:	4613      	mov	r3, r2
 8004174:	011b      	lsls	r3, r3, #4
 8004176:	1a9b      	subs	r3, r3, r2
 8004178:	43db      	mvns	r3, r3
 800417a:	ea01 0203 	and.w	r2, r1, r3
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	fb03 f303 	mul.w	r3, r3, r3
 8004184:	68b9      	ldr	r1, [r7, #8]
 8004186:	fb01 f303 	mul.w	r3, r1, r3
 800418a:	68b9      	ldr	r1, [r7, #8]
 800418c:	fb01 f303 	mul.w	r3, r1, r3
 8004190:	6879      	ldr	r1, [r7, #4]
 8004192:	fb01 f303 	mul.w	r3, r1, r3
 8004196:	431a      	orrs	r2, r3
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	621a      	str	r2, [r3, #32]
}
 800419c:	bf00      	nop
 800419e:	3714      	adds	r7, #20
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr

080041a8 <LL_GPIO_SetAFPin_8_15>:
{
 80041a8:	b480      	push	{r7}
 80041aa:	b085      	sub	sp, #20
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	0a1b      	lsrs	r3, r3, #8
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	0a12      	lsrs	r2, r2, #8
 80041c0:	fb02 f303 	mul.w	r3, r2, r3
 80041c4:	68ba      	ldr	r2, [r7, #8]
 80041c6:	0a12      	lsrs	r2, r2, #8
 80041c8:	fb02 f303 	mul.w	r3, r2, r3
 80041cc:	68ba      	ldr	r2, [r7, #8]
 80041ce:	0a12      	lsrs	r2, r2, #8
 80041d0:	fb03 f202 	mul.w	r2, r3, r2
 80041d4:	4613      	mov	r3, r2
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	1a9b      	subs	r3, r3, r2
 80041da:	43db      	mvns	r3, r3
 80041dc:	ea01 0203 	and.w	r2, r1, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	0a1b      	lsrs	r3, r3, #8
 80041e4:	68b9      	ldr	r1, [r7, #8]
 80041e6:	0a09      	lsrs	r1, r1, #8
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	68b9      	ldr	r1, [r7, #8]
 80041ee:	0a09      	lsrs	r1, r1, #8
 80041f0:	fb01 f303 	mul.w	r3, r1, r3
 80041f4:	68b9      	ldr	r1, [r7, #8]
 80041f6:	0a09      	lsrs	r1, r1, #8
 80041f8:	fb01 f303 	mul.w	r3, r1, r3
 80041fc:	6879      	ldr	r1, [r7, #4]
 80041fe:	fb01 f303 	mul.w	r3, r1, r3
 8004202:	431a      	orrs	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	625a      	str	r2, [r3, #36]	; 0x24
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr

08004214 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b088      	sub	sp, #32
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	fa93 f3a3 	rbit	r3, r3
 800422a:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8004230:	697b      	ldr	r3, [r7, #20]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d101      	bne.n	800423a <LL_GPIO_Init+0x26>
  {
    return 32U;
 8004236:	2320      	movs	r3, #32
 8004238:	e003      	b.n	8004242 <LL_GPIO_Init+0x2e>
  }
  return __builtin_clz(value);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	fab3 f383 	clz	r3, r3
 8004240:	b2db      	uxtb	r3, r3
 8004242:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8004244:	e048      	b.n	80042d8 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	681a      	ldr	r2, [r3, #0]
 800424a:	2101      	movs	r1, #1
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	fa01 f303 	lsl.w	r3, r1, r3
 8004252:	4013      	ands	r3, r2
 8004254:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d03a      	beq.n	80042d2 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800425c:	683b      	ldr	r3, [r7, #0]
 800425e:	685b      	ldr	r3, [r3, #4]
 8004260:	2b01      	cmp	r3, #1
 8004262:	d003      	beq.n	800426c <LL_GPIO_Init+0x58>
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685b      	ldr	r3, [r3, #4]
 8004268:	2b02      	cmp	r3, #2
 800426a:	d10e      	bne.n	800428a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	461a      	mov	r2, r3
 8004272:	69b9      	ldr	r1, [r7, #24]
 8004274:	6878      	ldr	r0, [r7, #4]
 8004276:	f7ff ff2b 	bl	80040d0 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	6819      	ldr	r1, [r3, #0]
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	461a      	mov	r2, r3
 8004284:	6878      	ldr	r0, [r7, #4]
 8004286:	f7ff ff0b 	bl	80040a0 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	461a      	mov	r2, r3
 8004290:	69b9      	ldr	r1, [r7, #24]
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f7ff ff3c 	bl	8004110 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	2b02      	cmp	r3, #2
 800429e:	d111      	bne.n	80042c4 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80042a0:	69bb      	ldr	r3, [r7, #24]
 80042a2:	2bff      	cmp	r3, #255	; 0xff
 80042a4:	d807      	bhi.n	80042b6 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	695b      	ldr	r3, [r3, #20]
 80042aa:	461a      	mov	r2, r3
 80042ac:	69b9      	ldr	r1, [r7, #24]
 80042ae:	6878      	ldr	r0, [r7, #4]
 80042b0:	f7ff ff4e 	bl	8004150 <LL_GPIO_SetAFPin_0_7>
 80042b4:	e006      	b.n	80042c4 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	695b      	ldr	r3, [r3, #20]
 80042ba:	461a      	mov	r2, r3
 80042bc:	69b9      	ldr	r1, [r7, #24]
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff ff72 	bl	80041a8 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	461a      	mov	r2, r3
 80042ca:	69b9      	ldr	r1, [r7, #24]
 80042cc:	6878      	ldr	r0, [r7, #4]
 80042ce:	f7ff fec7 	bl	8004060 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	3301      	adds	r3, #1
 80042d6:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	681a      	ldr	r2, [r3, #0]
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	fa22 f303 	lsr.w	r3, r2, r3
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d1af      	bne.n	8004246 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 80042e6:	2300      	movs	r3, #0
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3720      	adds	r7, #32
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}

080042f0 <LL_TIM_SetPrescaler>:
{
 80042f0:	b480      	push	{r7}
 80042f2:	b083      	sub	sp, #12
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
 80042f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <LL_TIM_SetAutoReload>:
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	683a      	ldr	r2, [r7, #0]
 800431a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800431c:	bf00      	nop
 800431e:	370c      	adds	r7, #12
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr

08004328 <LL_TIM_SetRepetitionCounter>:
{
 8004328:	b480      	push	{r7}
 800432a:	b083      	sub	sp, #12
 800432c:	af00      	add	r7, sp, #0
 800432e:	6078      	str	r0, [r7, #4]
 8004330:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <LL_TIM_OC_SetCompareCH1>:
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
 800434c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	683a      	ldr	r2, [r7, #0]
 8004352:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <LL_TIM_OC_SetCompareCH2>:
{
 8004360:	b480      	push	{r7}
 8004362:	b083      	sub	sp, #12
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
 8004368:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	683a      	ldr	r2, [r7, #0]
 800436e:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004370:	bf00      	nop
 8004372:	370c      	adds	r7, #12
 8004374:	46bd      	mov	sp, r7
 8004376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437a:	4770      	bx	lr

0800437c <LL_TIM_OC_SetCompareCH3>:
{
 800437c:	b480      	push	{r7}
 800437e:	b083      	sub	sp, #12
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
 8004384:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	683a      	ldr	r2, [r7, #0]
 800438a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <LL_TIM_OC_SetCompareCH4>:
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	683a      	ldr	r2, [r7, #0]
 80043a6:	641a      	str	r2, [r3, #64]	; 0x40
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr

080043b4 <LL_TIM_OC_SetCompareCH5>:
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	659a      	str	r2, [r3, #88]	; 0x58
}
 80043c8:	bf00      	nop
 80043ca:	370c      	adds	r7, #12
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <LL_TIM_OC_SetCompareCH6>:
{
 80043d4:	b480      	push	{r7}
 80043d6:	b083      	sub	sp, #12
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
 80043dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	683a      	ldr	r2, [r7, #0]
 80043e2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80043e4:	bf00      	nop
 80043e6:	370c      	adds	r7, #12
 80043e8:	46bd      	mov	sp, r7
 80043ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ee:	4770      	bx	lr

080043f0 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b083      	sub	sp, #12
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	f043 0201 	orr.w	r2, r3, #1
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	615a      	str	r2, [r3, #20]
}
 8004404:	bf00      	nop
 8004406:	370c      	adds	r7, #12
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr

08004410 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b084      	sub	sp, #16
 8004414:	af00      	add	r7, sp, #0
 8004416:	6078      	str	r0, [r7, #4]
 8004418:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	4a3d      	ldr	r2, [pc, #244]	; (8004518 <LL_TIM_Init+0x108>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d013      	beq.n	8004450 <LL_TIM_Init+0x40>
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800442e:	d00f      	beq.n	8004450 <LL_TIM_Init+0x40>
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a3a      	ldr	r2, [pc, #232]	; (800451c <LL_TIM_Init+0x10c>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d00b      	beq.n	8004450 <LL_TIM_Init+0x40>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a39      	ldr	r2, [pc, #228]	; (8004520 <LL_TIM_Init+0x110>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d007      	beq.n	8004450 <LL_TIM_Init+0x40>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a38      	ldr	r2, [pc, #224]	; (8004524 <LL_TIM_Init+0x114>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d003      	beq.n	8004450 <LL_TIM_Init+0x40>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a37      	ldr	r2, [pc, #220]	; (8004528 <LL_TIM_Init+0x118>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d106      	bne.n	800445e <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004456:	683b      	ldr	r3, [r7, #0]
 8004458:	685b      	ldr	r3, [r3, #4]
 800445a:	4313      	orrs	r3, r2
 800445c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a2d      	ldr	r2, [pc, #180]	; (8004518 <LL_TIM_Init+0x108>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d01f      	beq.n	80044a6 <LL_TIM_Init+0x96>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800446c:	d01b      	beq.n	80044a6 <LL_TIM_Init+0x96>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a2a      	ldr	r2, [pc, #168]	; (800451c <LL_TIM_Init+0x10c>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d017      	beq.n	80044a6 <LL_TIM_Init+0x96>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a29      	ldr	r2, [pc, #164]	; (8004520 <LL_TIM_Init+0x110>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d013      	beq.n	80044a6 <LL_TIM_Init+0x96>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	4a28      	ldr	r2, [pc, #160]	; (8004524 <LL_TIM_Init+0x114>)
 8004482:	4293      	cmp	r3, r2
 8004484:	d00f      	beq.n	80044a6 <LL_TIM_Init+0x96>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a27      	ldr	r2, [pc, #156]	; (8004528 <LL_TIM_Init+0x118>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d00b      	beq.n	80044a6 <LL_TIM_Init+0x96>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a26      	ldr	r2, [pc, #152]	; (800452c <LL_TIM_Init+0x11c>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d007      	beq.n	80044a6 <LL_TIM_Init+0x96>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a25      	ldr	r2, [pc, #148]	; (8004530 <LL_TIM_Init+0x120>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d003      	beq.n	80044a6 <LL_TIM_Init+0x96>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a24      	ldr	r2, [pc, #144]	; (8004534 <LL_TIM_Init+0x124>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d106      	bne.n	80044b4 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	68db      	ldr	r3, [r3, #12]
 80044b0:	4313      	orrs	r3, r2
 80044b2:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80044ba:	683b      	ldr	r3, [r7, #0]
 80044bc:	689b      	ldr	r3, [r3, #8]
 80044be:	4619      	mov	r1, r3
 80044c0:	6878      	ldr	r0, [r7, #4]
 80044c2:	f7ff ff23 	bl	800430c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	881b      	ldrh	r3, [r3, #0]
 80044ca:	4619      	mov	r1, r3
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff0f 	bl	80042f0 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a10      	ldr	r2, [pc, #64]	; (8004518 <LL_TIM_Init+0x108>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00f      	beq.n	80044fa <LL_TIM_Init+0xea>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	4a12      	ldr	r2, [pc, #72]	; (8004528 <LL_TIM_Init+0x118>)
 80044de:	4293      	cmp	r3, r2
 80044e0:	d00b      	beq.n	80044fa <LL_TIM_Init+0xea>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a11      	ldr	r2, [pc, #68]	; (800452c <LL_TIM_Init+0x11c>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d007      	beq.n	80044fa <LL_TIM_Init+0xea>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a10      	ldr	r2, [pc, #64]	; (8004530 <LL_TIM_Init+0x120>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d003      	beq.n	80044fa <LL_TIM_Init+0xea>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	4a0f      	ldr	r2, [pc, #60]	; (8004534 <LL_TIM_Init+0x124>)
 80044f6:	4293      	cmp	r3, r2
 80044f8:	d105      	bne.n	8004506 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	691b      	ldr	r3, [r3, #16]
 80044fe:	4619      	mov	r1, r3
 8004500:	6878      	ldr	r0, [r7, #4]
 8004502:	f7ff ff11 	bl	8004328 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff ff72 	bl	80043f0 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800450c:	2300      	movs	r3, #0
}
 800450e:	4618      	mov	r0, r3
 8004510:	3710      	adds	r7, #16
 8004512:	46bd      	mov	sp, r7
 8004514:	bd80      	pop	{r7, pc}
 8004516:	bf00      	nop
 8004518:	40010000 	.word	0x40010000
 800451c:	40000400 	.word	0x40000400
 8004520:	40000800 	.word	0x40000800
 8004524:	40000c00 	.word	0x40000c00
 8004528:	40010400 	.word	0x40010400
 800452c:	40014000 	.word	0x40014000
 8004530:	40014400 	.word	0x40014400
 8004534:	40014800 	.word	0x40014800

08004538 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004538:	b580      	push	{r7, lr}
 800453a:	b086      	sub	sp, #24
 800453c:	af00      	add	r7, sp, #0
 800453e:	60f8      	str	r0, [r7, #12]
 8004540:	60b9      	str	r1, [r7, #8]
 8004542:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8004544:	2301      	movs	r3, #1
 8004546:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800454e:	d045      	beq.n	80045dc <LL_TIM_OC_Init+0xa4>
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004556:	d848      	bhi.n	80045ea <LL_TIM_OC_Init+0xb2>
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800455e:	d036      	beq.n	80045ce <LL_TIM_OC_Init+0x96>
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004566:	d840      	bhi.n	80045ea <LL_TIM_OC_Init+0xb2>
 8004568:	68bb      	ldr	r3, [r7, #8]
 800456a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800456e:	d027      	beq.n	80045c0 <LL_TIM_OC_Init+0x88>
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004576:	d838      	bhi.n	80045ea <LL_TIM_OC_Init+0xb2>
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800457e:	d018      	beq.n	80045b2 <LL_TIM_OC_Init+0x7a>
 8004580:	68bb      	ldr	r3, [r7, #8]
 8004582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004586:	d830      	bhi.n	80045ea <LL_TIM_OC_Init+0xb2>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	2b01      	cmp	r3, #1
 800458c:	d003      	beq.n	8004596 <LL_TIM_OC_Init+0x5e>
 800458e:	68bb      	ldr	r3, [r7, #8]
 8004590:	2b10      	cmp	r3, #16
 8004592:	d007      	beq.n	80045a4 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004594:	e029      	b.n	80045ea <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8004596:	6879      	ldr	r1, [r7, #4]
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 f897 	bl	80046cc <OC1Config>
 800459e:	4603      	mov	r3, r0
 80045a0:	75fb      	strb	r3, [r7, #23]
      break;
 80045a2:	e023      	b.n	80045ec <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 80045a4:	6879      	ldr	r1, [r7, #4]
 80045a6:	68f8      	ldr	r0, [r7, #12]
 80045a8:	f000 f910 	bl	80047cc <OC2Config>
 80045ac:	4603      	mov	r3, r0
 80045ae:	75fb      	strb	r3, [r7, #23]
      break;
 80045b0:	e01c      	b.n	80045ec <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80045b2:	6879      	ldr	r1, [r7, #4]
 80045b4:	68f8      	ldr	r0, [r7, #12]
 80045b6:	f000 f98d 	bl	80048d4 <OC3Config>
 80045ba:	4603      	mov	r3, r0
 80045bc:	75fb      	strb	r3, [r7, #23]
      break;
 80045be:	e015      	b.n	80045ec <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80045c0:	6879      	ldr	r1, [r7, #4]
 80045c2:	68f8      	ldr	r0, [r7, #12]
 80045c4:	f000 fa0a 	bl	80049dc <OC4Config>
 80045c8:	4603      	mov	r3, r0
 80045ca:	75fb      	strb	r3, [r7, #23]
      break;
 80045cc:	e00e      	b.n	80045ec <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80045ce:	6879      	ldr	r1, [r7, #4]
 80045d0:	68f8      	ldr	r0, [r7, #12]
 80045d2:	f000 fa6f 	bl	8004ab4 <OC5Config>
 80045d6:	4603      	mov	r3, r0
 80045d8:	75fb      	strb	r3, [r7, #23]
      break;
 80045da:	e007      	b.n	80045ec <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80045dc:	6879      	ldr	r1, [r7, #4]
 80045de:	68f8      	ldr	r0, [r7, #12]
 80045e0:	f000 facc 	bl	8004b7c <OC6Config>
 80045e4:	4603      	mov	r3, r0
 80045e6:	75fb      	strb	r3, [r7, #23]
      break;
 80045e8:	e000      	b.n	80045ec <LL_TIM_OC_Init+0xb4>
      break;
 80045ea:	bf00      	nop
  }

  return result;
 80045ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	3718      	adds	r7, #24
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bd80      	pop	{r7, pc}
	...

080045f8 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8004602:	2300      	movs	r3, #0
 8004604:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800460c:	683a      	ldr	r2, [r7, #0]
 800460e:	7b12      	ldrb	r2, [r2, #12]
 8004610:	4313      	orrs	r3, r2
 8004612:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	689b      	ldr	r3, [r3, #8]
 800461e:	4313      	orrs	r3, r2
 8004620:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	4313      	orrs	r3, r2
 800462e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4313      	orrs	r3, r2
 800463c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	89d2      	ldrh	r2, [r2, #14]
 8004648:	4313      	orrs	r3, r2
 800464a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	4313      	orrs	r3, r2
 8004658:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004664:	4313      	orrs	r3, r2
 8004666:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	695b      	ldr	r3, [r3, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
#endif /*TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a12      	ldr	r2, [pc, #72]	; (80046c4 <LL_TIM_BDTR_Init+0xcc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d003      	beq.n	8004686 <LL_TIM_BDTR_Init+0x8e>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a11      	ldr	r2, [pc, #68]	; (80046c8 <LL_TIM_BDTR_Init+0xd0>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d114      	bne.n	80046b0 <LL_TIM_BDTR_Init+0xb8>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));
#endif /*TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	4313      	orrs	r3, r2
 8004692:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800469a:	683b      	ldr	r3, [r7, #0]
 800469c:	699b      	ldr	r3, [r3, #24]
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	69db      	ldr	r3, [r3, #28]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
#endif /*TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 80046b6:	2300      	movs	r3, #0
}
 80046b8:	4618      	mov	r0, r3
 80046ba:	3714      	adds	r7, #20
 80046bc:	46bd      	mov	sp, r7
 80046be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c2:	4770      	bx	lr
 80046c4:	40010000 	.word	0x40010000
 80046c8:	40010400 	.word	0x40010400

080046cc <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6a1b      	ldr	r3, [r3, #32]
 80046da:	f023 0201 	bic.w	r2, r3, #1
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a1b      	ldr	r3, [r3, #32]
 80046e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	699b      	ldr	r3, [r3, #24]
 80046f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	f023 0303 	bic.w	r3, r3, #3
 80046fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80046fc:	68fa      	ldr	r2, [r7, #12]
 80046fe:	4b2d      	ldr	r3, [pc, #180]	; (80047b4 <OC1Config+0xe8>)
 8004700:	4013      	ands	r3, r2
 8004702:	683a      	ldr	r2, [r7, #0]
 8004704:	6812      	ldr	r2, [r2, #0]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f023 0202 	bic.w	r2, r3, #2
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	691b      	ldr	r3, [r3, #16]
 8004714:	4313      	orrs	r3, r2
 8004716:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	f023 0201 	bic.w	r2, r3, #1
 800471e:	683b      	ldr	r3, [r7, #0]
 8004720:	685b      	ldr	r3, [r3, #4]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a23      	ldr	r2, [pc, #140]	; (80047b8 <OC1Config+0xec>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d00f      	beq.n	800474e <OC1Config+0x82>
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	4a22      	ldr	r2, [pc, #136]	; (80047bc <OC1Config+0xf0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d00b      	beq.n	800474e <OC1Config+0x82>
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	4a21      	ldr	r2, [pc, #132]	; (80047c0 <OC1Config+0xf4>)
 800473a:	4293      	cmp	r3, r2
 800473c:	d007      	beq.n	800474e <OC1Config+0x82>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	4a20      	ldr	r2, [pc, #128]	; (80047c4 <OC1Config+0xf8>)
 8004742:	4293      	cmp	r3, r2
 8004744:	d003      	beq.n	800474e <OC1Config+0x82>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	4a1f      	ldr	r2, [pc, #124]	; (80047c8 <OC1Config+0xfc>)
 800474a:	4293      	cmp	r3, r2
 800474c:	d11e      	bne.n	800478c <OC1Config+0xc0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f023 0208 	bic.w	r2, r3, #8
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	695b      	ldr	r3, [r3, #20]
 8004758:	009b      	lsls	r3, r3, #2
 800475a:	4313      	orrs	r3, r2
 800475c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	f023 0204 	bic.w	r2, r3, #4
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	689b      	ldr	r3, [r3, #8]
 8004768:	009b      	lsls	r3, r3, #2
 800476a:	4313      	orrs	r3, r2
 800476c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	4313      	orrs	r3, r2
 800477a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800477c:	693b      	ldr	r3, [r7, #16]
 800477e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	69db      	ldr	r3, [r3, #28]
 8004786:	005b      	lsls	r3, r3, #1
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	68db      	ldr	r3, [r3, #12]
 800479c:	4619      	mov	r1, r3
 800479e:	6878      	ldr	r0, [r7, #4]
 80047a0:	f7ff fdd0 	bl	8004344 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	697a      	ldr	r2, [r7, #20]
 80047a8:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80047aa:	2300      	movs	r3, #0
}
 80047ac:	4618      	mov	r0, r3
 80047ae:	3718      	adds	r7, #24
 80047b0:	46bd      	mov	sp, r7
 80047b2:	bd80      	pop	{r7, pc}
 80047b4:	fffeff8f 	.word	0xfffeff8f
 80047b8:	40010000 	.word	0x40010000
 80047bc:	40010400 	.word	0x40010400
 80047c0:	40014000 	.word	0x40014000
 80047c4:	40014400 	.word	0x40014400
 80047c8:	40014800 	.word	0x40014800

080047cc <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80047cc:	b580      	push	{r7, lr}
 80047ce:	b086      	sub	sp, #24
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6a1b      	ldr	r3, [r3, #32]
 80047da:	f023 0210 	bic.w	r2, r3, #16
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a1b      	ldr	r3, [r3, #32]
 80047e6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	685b      	ldr	r3, [r3, #4]
 80047ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	4b2f      	ldr	r3, [pc, #188]	; (80048bc <OC2Config+0xf0>)
 8004800:	4013      	ands	r3, r2
 8004802:	683a      	ldr	r2, [r7, #0]
 8004804:	6812      	ldr	r2, [r2, #0]
 8004806:	0212      	lsls	r2, r2, #8
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800480c:	697b      	ldr	r3, [r7, #20]
 800480e:	f023 0220 	bic.w	r2, r3, #32
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	691b      	ldr	r3, [r3, #16]
 8004816:	011b      	lsls	r3, r3, #4
 8004818:	4313      	orrs	r3, r2
 800481a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 800481c:	697b      	ldr	r3, [r7, #20]
 800481e:	f023 0210 	bic.w	r2, r3, #16
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	011b      	lsls	r3, r3, #4
 8004828:	4313      	orrs	r3, r2
 800482a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	4a24      	ldr	r2, [pc, #144]	; (80048c0 <OC2Config+0xf4>)
 8004830:	4293      	cmp	r3, r2
 8004832:	d00f      	beq.n	8004854 <OC2Config+0x88>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	4a23      	ldr	r2, [pc, #140]	; (80048c4 <OC2Config+0xf8>)
 8004838:	4293      	cmp	r3, r2
 800483a:	d00b      	beq.n	8004854 <OC2Config+0x88>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	4a22      	ldr	r2, [pc, #136]	; (80048c8 <OC2Config+0xfc>)
 8004840:	4293      	cmp	r3, r2
 8004842:	d007      	beq.n	8004854 <OC2Config+0x88>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	4a21      	ldr	r2, [pc, #132]	; (80048cc <OC2Config+0x100>)
 8004848:	4293      	cmp	r3, r2
 800484a:	d003      	beq.n	8004854 <OC2Config+0x88>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	4a20      	ldr	r2, [pc, #128]	; (80048d0 <OC2Config+0x104>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d11f      	bne.n	8004894 <OC2Config+0xc8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004854:	697b      	ldr	r3, [r7, #20]
 8004856:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	695b      	ldr	r3, [r3, #20]
 800485e:	019b      	lsls	r3, r3, #6
 8004860:	4313      	orrs	r3, r2
 8004862:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	019b      	lsls	r3, r3, #6
 8004870:	4313      	orrs	r3, r2
 8004872:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	699b      	ldr	r3, [r3, #24]
 800487e:	009b      	lsls	r3, r3, #2
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004884:	693b      	ldr	r3, [r7, #16]
 8004886:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	00db      	lsls	r3, r3, #3
 8004890:	4313      	orrs	r3, r2
 8004892:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	693a      	ldr	r2, [r7, #16]
 8004898:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	68fa      	ldr	r2, [r7, #12]
 800489e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	68db      	ldr	r3, [r3, #12]
 80048a4:	4619      	mov	r1, r3
 80048a6:	6878      	ldr	r0, [r7, #4]
 80048a8:	f7ff fd5a 	bl	8004360 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	697a      	ldr	r2, [r7, #20]
 80048b0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3718      	adds	r7, #24
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}
 80048bc:	feff8fff 	.word	0xfeff8fff
 80048c0:	40010000 	.word	0x40010000
 80048c4:	40010400 	.word	0x40010400
 80048c8:	40014000 	.word	0x40014000
 80048cc:	40014400 	.word	0x40014400
 80048d0:	40014800 	.word	0x40014800

080048d4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b086      	sub	sp, #24
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
 80048dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	6a1b      	ldr	r3, [r3, #32]
 80048e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	685b      	ldr	r3, [r3, #4]
 80048f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	69db      	ldr	r3, [r3, #28]
 80048fa:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	f023 0303 	bic.w	r3, r3, #3
 8004902:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004904:	68fa      	ldr	r2, [r7, #12]
 8004906:	4b2f      	ldr	r3, [pc, #188]	; (80049c4 <OC3Config+0xf0>)
 8004908:	4013      	ands	r3, r2
 800490a:	683a      	ldr	r2, [r7, #0]
 800490c:	6812      	ldr	r2, [r2, #0]
 800490e:	4313      	orrs	r3, r2
 8004910:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004912:	697b      	ldr	r3, [r7, #20]
 8004914:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	691b      	ldr	r3, [r3, #16]
 800491c:	021b      	lsls	r3, r3, #8
 800491e:	4313      	orrs	r3, r2
 8004920:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004928:	683b      	ldr	r3, [r7, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	021b      	lsls	r3, r3, #8
 800492e:	4313      	orrs	r3, r2
 8004930:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a24      	ldr	r2, [pc, #144]	; (80049c8 <OC3Config+0xf4>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00f      	beq.n	800495a <OC3Config+0x86>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a23      	ldr	r2, [pc, #140]	; (80049cc <OC3Config+0xf8>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d00b      	beq.n	800495a <OC3Config+0x86>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a22      	ldr	r2, [pc, #136]	; (80049d0 <OC3Config+0xfc>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d007      	beq.n	800495a <OC3Config+0x86>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	4a21      	ldr	r2, [pc, #132]	; (80049d4 <OC3Config+0x100>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d003      	beq.n	800495a <OC3Config+0x86>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	4a20      	ldr	r2, [pc, #128]	; (80049d8 <OC3Config+0x104>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d11f      	bne.n	800499a <OC3Config+0xc6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004960:	683b      	ldr	r3, [r7, #0]
 8004962:	695b      	ldr	r3, [r3, #20]
 8004964:	029b      	lsls	r3, r3, #10
 8004966:	4313      	orrs	r3, r2
 8004968:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800496a:	697b      	ldr	r3, [r7, #20]
 800496c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	029b      	lsls	r3, r3, #10
 8004976:	4313      	orrs	r3, r2
 8004978:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	011b      	lsls	r3, r3, #4
 8004986:	4313      	orrs	r3, r2
 8004988:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	69db      	ldr	r3, [r3, #28]
 8004994:	015b      	lsls	r3, r3, #5
 8004996:	4313      	orrs	r3, r2
 8004998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	693a      	ldr	r2, [r7, #16]
 800499e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	4619      	mov	r1, r3
 80049ac:	6878      	ldr	r0, [r7, #4]
 80049ae:	f7ff fce5 	bl	800437c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	697a      	ldr	r2, [r7, #20]
 80049b6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3718      	adds	r7, #24
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}
 80049c2:	bf00      	nop
 80049c4:	fffeff8f 	.word	0xfffeff8f
 80049c8:	40010000 	.word	0x40010000
 80049cc:	40010400 	.word	0x40010400
 80049d0:	40014000 	.word	0x40014000
 80049d4:	40014400 	.word	0x40014400
 80049d8:	40014800 	.word	0x40014800

080049dc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6a1b      	ldr	r3, [r3, #32]
 80049f6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	69db      	ldr	r3, [r3, #28]
 8004a02:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a0a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8004a0c:	68fa      	ldr	r2, [r7, #12]
 8004a0e:	4b23      	ldr	r3, [pc, #140]	; (8004a9c <OC4Config+0xc0>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	683a      	ldr	r2, [r7, #0]
 8004a14:	6812      	ldr	r2, [r2, #0]
 8004a16:	0212      	lsls	r2, r2, #8
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	031b      	lsls	r3, r3, #12
 8004a28:	4313      	orrs	r3, r2
 8004a2a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004a2c:	693b      	ldr	r3, [r7, #16]
 8004a2e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	685b      	ldr	r3, [r3, #4]
 8004a36:	031b      	lsls	r3, r3, #12
 8004a38:	4313      	orrs	r3, r2
 8004a3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	4a18      	ldr	r2, [pc, #96]	; (8004aa0 <OC4Config+0xc4>)
 8004a40:	4293      	cmp	r3, r2
 8004a42:	d00f      	beq.n	8004a64 <OC4Config+0x88>
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a17      	ldr	r2, [pc, #92]	; (8004aa4 <OC4Config+0xc8>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00b      	beq.n	8004a64 <OC4Config+0x88>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a16      	ldr	r2, [pc, #88]	; (8004aa8 <OC4Config+0xcc>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d007      	beq.n	8004a64 <OC4Config+0x88>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	4a15      	ldr	r2, [pc, #84]	; (8004aac <OC4Config+0xd0>)
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d003      	beq.n	8004a64 <OC4Config+0x88>
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	4a14      	ldr	r2, [pc, #80]	; (8004ab0 <OC4Config+0xd4>)
 8004a60:	4293      	cmp	r3, r2
 8004a62:	d107      	bne.n	8004a74 <OC4Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004a64:	697b      	ldr	r3, [r7, #20]
 8004a66:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	699b      	ldr	r3, [r3, #24]
 8004a6e:	019b      	lsls	r3, r3, #6
 8004a70:	4313      	orrs	r3, r2
 8004a72:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	697a      	ldr	r2, [r7, #20]
 8004a78:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004a80:	683b      	ldr	r3, [r7, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4619      	mov	r1, r3
 8004a86:	6878      	ldr	r0, [r7, #4]
 8004a88:	f7ff fc86 	bl	8004398 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	693a      	ldr	r2, [r7, #16]
 8004a90:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004a92:	2300      	movs	r3, #0
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3718      	adds	r7, #24
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}
 8004a9c:	feff8fff 	.word	0xfeff8fff
 8004aa0:	40010000 	.word	0x40010000
 8004aa4:	40010400 	.word	0x40010400
 8004aa8:	40014000 	.word	0x40014000
 8004aac:	40014400 	.word	0x40014400
 8004ab0:	40014800 	.word	0x40014800

08004ab4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a1b      	ldr	r3, [r3, #32]
 8004ac2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a1b      	ldr	r3, [r3, #32]
 8004ace:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8004ad6:	68ba      	ldr	r2, [r7, #8]
 8004ad8:	4b22      	ldr	r3, [pc, #136]	; (8004b64 <OC5Config+0xb0>)
 8004ada:	4013      	ands	r3, r2
 8004adc:	683a      	ldr	r2, [r7, #0]
 8004ade:	6812      	ldr	r2, [r2, #0]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004aea:	683b      	ldr	r3, [r7, #0]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	041b      	lsls	r3, r3, #16
 8004af0:	4313      	orrs	r3, r2
 8004af2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004afa:	683b      	ldr	r3, [r7, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	041b      	lsls	r3, r3, #16
 8004b00:	4313      	orrs	r3, r2
 8004b02:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	4a18      	ldr	r2, [pc, #96]	; (8004b68 <OC5Config+0xb4>)
 8004b08:	4293      	cmp	r3, r2
 8004b0a:	d00f      	beq.n	8004b2c <OC5Config+0x78>
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	4a17      	ldr	r2, [pc, #92]	; (8004b6c <OC5Config+0xb8>)
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d00b      	beq.n	8004b2c <OC5Config+0x78>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	4a16      	ldr	r2, [pc, #88]	; (8004b70 <OC5Config+0xbc>)
 8004b18:	4293      	cmp	r3, r2
 8004b1a:	d007      	beq.n	8004b2c <OC5Config+0x78>
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	4a15      	ldr	r2, [pc, #84]	; (8004b74 <OC5Config+0xc0>)
 8004b20:	4293      	cmp	r3, r2
 8004b22:	d003      	beq.n	8004b2c <OC5Config+0x78>
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	4a14      	ldr	r2, [pc, #80]	; (8004b78 <OC5Config+0xc4>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d109      	bne.n	8004b40 <OC5Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	699b      	ldr	r3, [r3, #24]
 8004b38:	021b      	lsls	r3, r3, #8
 8004b3a:	431a      	orrs	r2, r3
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	4619      	mov	r1, r3
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7ff fc31 	bl	80043b4 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	68fa      	ldr	r2, [r7, #12]
 8004b56:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	fffeff8f 	.word	0xfffeff8f
 8004b68:	40010000 	.word	0x40010000
 8004b6c:	40010400 	.word	0x40010400
 8004b70:	40014000 	.word	0x40014000
 8004b74:	40014400 	.word	0x40014400
 8004b78:	40014800 	.word	0x40014800

08004b7c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b084      	sub	sp, #16
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	6078      	str	r0, [r7, #4]
 8004b84:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	6a1b      	ldr	r3, [r3, #32]
 8004b8a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6a1b      	ldr	r3, [r3, #32]
 8004b96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b9c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8004b9e:	68ba      	ldr	r2, [r7, #8]
 8004ba0:	4b22      	ldr	r3, [pc, #136]	; (8004c2c <OC6Config+0xb0>)
 8004ba2:	4013      	ands	r3, r2
 8004ba4:	683a      	ldr	r2, [r7, #0]
 8004ba6:	6812      	ldr	r2, [r2, #0]
 8004ba8:	0212      	lsls	r2, r2, #8
 8004baa:	4313      	orrs	r3, r2
 8004bac:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004bb4:	683b      	ldr	r3, [r7, #0]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	051b      	lsls	r3, r3, #20
 8004bba:	4313      	orrs	r3, r2
 8004bbc:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	051b      	lsls	r3, r3, #20
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	4a17      	ldr	r2, [pc, #92]	; (8004c30 <OC6Config+0xb4>)
 8004bd2:	4293      	cmp	r3, r2
 8004bd4:	d00f      	beq.n	8004bf6 <OC6Config+0x7a>
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	4a16      	ldr	r2, [pc, #88]	; (8004c34 <OC6Config+0xb8>)
 8004bda:	4293      	cmp	r3, r2
 8004bdc:	d00b      	beq.n	8004bf6 <OC6Config+0x7a>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	4a15      	ldr	r2, [pc, #84]	; (8004c38 <OC6Config+0xbc>)
 8004be2:	4293      	cmp	r3, r2
 8004be4:	d007      	beq.n	8004bf6 <OC6Config+0x7a>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	4a14      	ldr	r2, [pc, #80]	; (8004c3c <OC6Config+0xc0>)
 8004bea:	4293      	cmp	r3, r2
 8004bec:	d003      	beq.n	8004bf6 <OC6Config+0x7a>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	4a13      	ldr	r2, [pc, #76]	; (8004c40 <OC6Config+0xc4>)
 8004bf2:	4293      	cmp	r3, r2
 8004bf4:	d109      	bne.n	8004c0a <OC6Config+0x8e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004bfe:	683b      	ldr	r3, [r7, #0]
 8004c00:	699b      	ldr	r3, [r3, #24]
 8004c02:	029b      	lsls	r3, r3, #10
 8004c04:	431a      	orrs	r2, r3
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	68ba      	ldr	r2, [r7, #8]
 8004c0e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	68db      	ldr	r3, [r3, #12]
 8004c14:	4619      	mov	r1, r3
 8004c16:	6878      	ldr	r0, [r7, #4]
 8004c18:	f7ff fbdc 	bl	80043d4 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	68fa      	ldr	r2, [r7, #12]
 8004c20:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004c22:	2300      	movs	r3, #0
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3710      	adds	r7, #16
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	bd80      	pop	{r7, pc}
 8004c2c:	feff8fff 	.word	0xfeff8fff
 8004c30:	40010000 	.word	0x40010000
 8004c34:	40010400 	.word	0x40010400
 8004c38:	40014000 	.word	0x40014000
 8004c3c:	40014400 	.word	0x40014400
 8004c40:	40014800 	.word	0x40014800

08004c44 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c56:	4a07      	ldr	r2, [pc, #28]	; (8004c74 <LL_InitTick+0x30>)
 8004c58:	3b01      	subs	r3, #1
 8004c5a:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004c5c:	4b05      	ldr	r3, [pc, #20]	; (8004c74 <LL_InitTick+0x30>)
 8004c5e:	2200      	movs	r2, #0
 8004c60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c62:	4b04      	ldr	r3, [pc, #16]	; (8004c74 <LL_InitTick+0x30>)
 8004c64:	2205      	movs	r2, #5
 8004c66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004c68:	bf00      	nop
 8004c6a:	370c      	adds	r7, #12
 8004c6c:	46bd      	mov	sp, r7
 8004c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c72:	4770      	bx	lr
 8004c74:	e000e010 	.word	0xe000e010

08004c78 <LL_Init1msTick>:
  *         @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
#endif /* DUAL_CORE */
void LL_Init1msTick(uint32_t CPU_Frequency)
{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b082      	sub	sp, #8
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(CPU_Frequency, 1000U);
 8004c80:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004c84:	6878      	ldr	r0, [r7, #4]
 8004c86:	f7ff ffdd 	bl	8004c44 <LL_InitTick>
}
 8004c8a:	bf00      	nop
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
	...

08004c94 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8004c94:	b480      	push	{r7}
 8004c96:	b085      	sub	sp, #20
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	6078      	str	r0, [r7, #4]
  uint32_t count = Delay;
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004ca0:	4b0f      	ldr	r3, [pc, #60]	; (8004ce0 <LL_mDelay+0x4c>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	60bb      	str	r3, [r7, #8]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8004ca6:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(count < LL_MAX_DELAY)
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cae:	d00c      	beq.n	8004cca <LL_mDelay+0x36>
  {
    count++;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	3301      	adds	r3, #1
 8004cb4:	60fb      	str	r3, [r7, #12]
  }

  while (count != 0U)
 8004cb6:	e008      	b.n	8004cca <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004cb8:	4b09      	ldr	r3, [pc, #36]	; (8004ce0 <LL_mDelay+0x4c>)
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d002      	beq.n	8004cca <LL_mDelay+0x36>
    {
      count--;
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	60fb      	str	r3, [r7, #12]
  while (count != 0U)
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d1f3      	bne.n	8004cb8 <LL_mDelay+0x24>
    }
  }
}
 8004cd0:	bf00      	nop
 8004cd2:	bf00      	nop
 8004cd4:	3714      	adds	r7, #20
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cdc:	4770      	bx	lr
 8004cde:	bf00      	nop
 8004ce0:	e000e010 	.word	0xe000e010

08004ce4 <LL_SetSystemCoreClock>:
  *         @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
#endif /* DUAL_CORE */
void LL_SetSystemCoreClock(uint32_t CPU_Frequency)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b083      	sub	sp, #12
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = CPU_Frequency;
 8004cec:	4a04      	ldr	r2, [pc, #16]	; (8004d00 <LL_SetSystemCoreClock+0x1c>)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	6013      	str	r3, [r2, #0]
}
 8004cf2:	bf00      	nop
 8004cf4:	370c      	adds	r7, #12
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cfc:	4770      	bx	lr
 8004cfe:	bf00      	nop
 8004d00:	24000000 	.word	0x24000000

08004d04 <memset>:
 8004d04:	4402      	add	r2, r0
 8004d06:	4603      	mov	r3, r0
 8004d08:	4293      	cmp	r3, r2
 8004d0a:	d100      	bne.n	8004d0e <memset+0xa>
 8004d0c:	4770      	bx	lr
 8004d0e:	f803 1b01 	strb.w	r1, [r3], #1
 8004d12:	e7f9      	b.n	8004d08 <memset+0x4>

08004d14 <__libc_init_array>:
 8004d14:	b570      	push	{r4, r5, r6, lr}
 8004d16:	4d0d      	ldr	r5, [pc, #52]	; (8004d4c <__libc_init_array+0x38>)
 8004d18:	4c0d      	ldr	r4, [pc, #52]	; (8004d50 <__libc_init_array+0x3c>)
 8004d1a:	1b64      	subs	r4, r4, r5
 8004d1c:	10a4      	asrs	r4, r4, #2
 8004d1e:	2600      	movs	r6, #0
 8004d20:	42a6      	cmp	r6, r4
 8004d22:	d109      	bne.n	8004d38 <__libc_init_array+0x24>
 8004d24:	4d0b      	ldr	r5, [pc, #44]	; (8004d54 <__libc_init_array+0x40>)
 8004d26:	4c0c      	ldr	r4, [pc, #48]	; (8004d58 <__libc_init_array+0x44>)
 8004d28:	f000 f818 	bl	8004d5c <_init>
 8004d2c:	1b64      	subs	r4, r4, r5
 8004d2e:	10a4      	asrs	r4, r4, #2
 8004d30:	2600      	movs	r6, #0
 8004d32:	42a6      	cmp	r6, r4
 8004d34:	d105      	bne.n	8004d42 <__libc_init_array+0x2e>
 8004d36:	bd70      	pop	{r4, r5, r6, pc}
 8004d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d3c:	4798      	blx	r3
 8004d3e:	3601      	adds	r6, #1
 8004d40:	e7ee      	b.n	8004d20 <__libc_init_array+0xc>
 8004d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d46:	4798      	blx	r3
 8004d48:	3601      	adds	r6, #1
 8004d4a:	e7f2      	b.n	8004d32 <__libc_init_array+0x1e>
 8004d4c:	08004d9c 	.word	0x08004d9c
 8004d50:	08004d9c 	.word	0x08004d9c
 8004d54:	08004d9c 	.word	0x08004d9c
 8004d58:	08004da0 	.word	0x08004da0

08004d5c <_init>:
 8004d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d5e:	bf00      	nop
 8004d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d62:	bc08      	pop	{r3}
 8004d64:	469e      	mov	lr, r3
 8004d66:	4770      	bx	lr

08004d68 <_fini>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr
