
adctest_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002f40  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  080031d8  080031d8  000131d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080031f8  080031f8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080031f8  080031f8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080031f8  080031f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080031f8  080031f8  000131f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080031fc  080031fc  000131fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  24000000  08003200  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RAM_D2       00000008  24000004  08003204  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000060  2400000c  0800320c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2400006c  0800320c  0002006c  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003a  2**0
                  CONTENTS, READONLY
 14 .debug_info   000081db  00000000  00000000  0002007d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000fc0  00000000  00000000  00028258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000848  00000000  00000000  00029218  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 0000062c  00000000  00000000  00029a60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002fd8b  00000000  00000000  0002a08c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00005dd7  00000000  00000000  00059e17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011c5e9  00000000  00000000  0005fbee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002384  00000000  00000000  0017c1d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0017e55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400000c 	.word	0x2400000c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	080031c0 	.word	0x080031c0

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000010 	.word	0x24000010
 80002d4:	080031c0 	.word	0x080031c0

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	f003 0307 	and.w	r3, r3, #7
 8000412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000414:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <__NVIC_SetPriorityGrouping+0x40>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800041a:	68ba      	ldr	r2, [r7, #8]
 800041c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000420:	4013      	ands	r3, r2
 8000422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <__NVIC_SetPriorityGrouping+0x44>)
 800042e:	4313      	orrs	r3, r2
 8000430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000432:	4a04      	ldr	r2, [pc, #16]	; (8000444 <__NVIC_SetPriorityGrouping+0x40>)
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	60d3      	str	r3, [r2, #12]
}
 8000438:	bf00      	nop
 800043a:	3714      	adds	r7, #20
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	e000ed00 	.word	0xe000ed00
 8000448:	05fa0000 	.word	0x05fa0000

0800044c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <__NVIC_GetPriorityGrouping+0x18>)
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	0a1b      	lsrs	r3, r3, #8
 8000456:	f003 0307 	and.w	r3, r3, #7
}
 800045a:	4618      	mov	r0, r3
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000476:	2b00      	cmp	r3, #0
 8000478:	db0b      	blt.n	8000492 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800047a:	88fb      	ldrh	r3, [r7, #6]
 800047c:	f003 021f 	and.w	r2, r3, #31
 8000480:	4907      	ldr	r1, [pc, #28]	; (80004a0 <__NVIC_EnableIRQ+0x38>)
 8000482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000486:	095b      	lsrs	r3, r3, #5
 8000488:	2001      	movs	r0, #1
 800048a:	fa00 f202 	lsl.w	r2, r0, r2
 800048e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	e000e100 	.word	0xe000e100

080004a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	6039      	str	r1, [r7, #0]
 80004ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80004b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	db0a      	blt.n	80004ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	490c      	ldr	r1, [pc, #48]	; (80004f0 <__NVIC_SetPriority+0x4c>)
 80004be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004c2:	0112      	lsls	r2, r2, #4
 80004c4:	b2d2      	uxtb	r2, r2
 80004c6:	440b      	add	r3, r1
 80004c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004cc:	e00a      	b.n	80004e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4908      	ldr	r1, [pc, #32]	; (80004f4 <__NVIC_SetPriority+0x50>)
 80004d4:	88fb      	ldrh	r3, [r7, #6]
 80004d6:	f003 030f 	and.w	r3, r3, #15
 80004da:	3b04      	subs	r3, #4
 80004dc:	0112      	lsls	r2, r2, #4
 80004de:	b2d2      	uxtb	r2, r2
 80004e0:	440b      	add	r3, r1
 80004e2:	761a      	strb	r2, [r3, #24]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	e000e100 	.word	0xe000e100
 80004f4:	e000ed00 	.word	0xe000ed00

080004f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b089      	sub	sp, #36	; 0x24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f003 0307 	and.w	r3, r3, #7
 800050a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	f1c3 0307 	rsb	r3, r3, #7
 8000512:	2b04      	cmp	r3, #4
 8000514:	bf28      	it	cs
 8000516:	2304      	movcs	r3, #4
 8000518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800051a:	69fb      	ldr	r3, [r7, #28]
 800051c:	3304      	adds	r3, #4
 800051e:	2b06      	cmp	r3, #6
 8000520:	d902      	bls.n	8000528 <NVIC_EncodePriority+0x30>
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	3b03      	subs	r3, #3
 8000526:	e000      	b.n	800052a <NVIC_EncodePriority+0x32>
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800052c:	f04f 32ff 	mov.w	r2, #4294967295
 8000530:	69bb      	ldr	r3, [r7, #24]
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	43da      	mvns	r2, r3
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	401a      	ands	r2, r3
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000540:	f04f 31ff 	mov.w	r1, #4294967295
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	43d9      	mvns	r1, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000550:	4313      	orrs	r3, r2
         );
}
 8000552:	4618      	mov	r0, r3
 8000554:	3724      	adds	r7, #36	; 0x24
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800055e:	b480      	push	{r7}
 8000560:	b087      	sub	sp, #28
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	3330      	adds	r3, #48	; 0x30
 800056e:	461a      	mov	r2, r3
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	f003 030c 	and.w	r3, r3, #12
 800057a:	4413      	add	r3, r2
 800057c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	f003 031f 	and.w	r3, r3, #31
 8000588:	211f      	movs	r1, #31
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	43db      	mvns	r3, r3
 8000590:	401a      	ands	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	0e9b      	lsrs	r3, r3, #26
 8000596:	f003 011f 	and.w	r1, r3, #31
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	f003 031f 	and.w	r3, r3, #31
 80005a0:	fa01 f303 	lsl.w	r3, r1, r3
 80005a4:	431a      	orrs	r2, r3
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80005aa:	bf00      	nop
 80005ac:	371c      	adds	r7, #28
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b087      	sub	sp, #28
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	3314      	adds	r3, #20
 80005c6:	461a      	mov	r2, r3
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	0e5b      	lsrs	r3, r3, #25
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	4413      	add	r3, r2
 80005d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	0d1b      	lsrs	r3, r3, #20
 80005de:	f003 031f 	and.w	r3, r3, #31
 80005e2:	2107      	movs	r1, #7
 80005e4:	fa01 f303 	lsl.w	r3, r1, r3
 80005e8:	43db      	mvns	r3, r3
 80005ea:	401a      	ands	r2, r3
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	0d1b      	lsrs	r3, r3, #20
 80005f0:	f003 031f 	and.w	r3, r3, #31
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	431a      	orrs	r2, r3
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000600:	bf00      	nop
 8000602:	371c      	adds	r7, #28
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000624:	43db      	mvns	r3, r3
 8000626:	401a      	ands	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f003 0318 	and.w	r3, r3, #24
 800062e:	4908      	ldr	r1, [pc, #32]	; (8000650 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000630:	40d9      	lsrs	r1, r3
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	400b      	ands	r3, r1
 8000636:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800063a:	431a      	orrs	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	000fffff 	.word	0x000fffff

08000654 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	691a      	ldr	r2, [r3, #16]
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <LL_ADC_SetOverSamplingScope+0x28>)
 8000664:	4013      	ands	r3, r2
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	431a      	orrs	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	611a      	str	r2, [r3, #16]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	fffffbfc 	.word	0xfffffbfc

08000680 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	689a      	ldr	r2, [r3, #8]
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800068e:	4013      	ands	r3, r2
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	6093      	str	r3, [r2, #8]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	5fffffc0 	.word	0x5fffffc0

080006a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80006b2:	4013      	ands	r3, r2
 80006b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	6fffffc0 	.word	0x6fffffc0

080006cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689a      	ldr	r2, [r3, #8]
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <LL_ADC_Enable+0x24>)
 80006da:	4013      	ands	r3, r2
 80006dc:	f043 0201 	orr.w	r2, r3, #1
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	7fffffc0 	.word	0x7fffffc0

080006f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689a      	ldr	r2, [r3, #8]
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <LL_ADC_REG_StartConversion+0x24>)
 8000702:	4013      	ands	r3, r2
 8000704:	f043 0204 	orr.w	r2, r3, #4
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	7fffffc0 	.word	0x7fffffc0

0800071c <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	2b01      	cmp	r3, #1
 800072e:	d101      	bne.n	8000734 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8000730:	2301      	movs	r3, #1
 8000732:	e000      	b.n	8000736 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8000752:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <LL_DMA_EnableStream+0x40>)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	4413      	add	r3, r2
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4908      	ldr	r1, [pc, #32]	; (8000784 <LL_DMA_EnableStream+0x40>)
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	440a      	add	r2, r1
 8000768:	7812      	ldrb	r2, [r2, #0]
 800076a:	4611      	mov	r1, r2
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	440a      	add	r2, r1
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6013      	str	r3, [r2, #0]
}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	080031d8 	.word	0x080031d8

08000788 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8000788:	b480      	push	{r7}
 800078a:	b087      	sub	sp, #28
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 8000798:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <LL_DMA_SetDataTransferDirection+0x48>)
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	4413      	add	r3, r2
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80007ac:	4908      	ldr	r1, [pc, #32]	; (80007d0 <LL_DMA_SetDataTransferDirection+0x48>)
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	440b      	add	r3, r1
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	440b      	add	r3, r1
 80007ba:	4619      	mov	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	600b      	str	r3, [r1, #0]
}
 80007c2:	bf00      	nop
 80007c4:	371c      	adds	r7, #28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	080031d8 	.word	0x080031d8

080007d4 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80007e4:	4a0d      	ldr	r2, [pc, #52]	; (800081c <LL_DMA_SetMode+0x48>)
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80007f8:	4908      	ldr	r1, [pc, #32]	; (800081c <LL_DMA_SetMode+0x48>)
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	440b      	add	r3, r1
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	440b      	add	r3, r1
 8000806:	4619      	mov	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4313      	orrs	r3, r2
 800080c:	600b      	str	r3, [r1, #0]
}
 800080e:	bf00      	nop
 8000810:	371c      	adds	r7, #28
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	080031d8 	.word	0x080031d8

08000820 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000820:	b480      	push	{r7}
 8000822:	b087      	sub	sp, #28
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 8000830:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <LL_DMA_SetPeriphIncMode+0x48>)
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	4413      	add	r3, r2
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	4413      	add	r3, r2
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000844:	4908      	ldr	r1, [pc, #32]	; (8000868 <LL_DMA_SetPeriphIncMode+0x48>)
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	440b      	add	r3, r1
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	440b      	add	r3, r1
 8000852:	4619      	mov	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4313      	orrs	r3, r2
 8000858:	600b      	str	r3, [r1, #0]
}
 800085a:	bf00      	nop
 800085c:	371c      	adds	r7, #28
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	080031d8 	.word	0x080031d8

0800086c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 800086c:	b480      	push	{r7}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 800087c:	4a0d      	ldr	r2, [pc, #52]	; (80008b4 <LL_DMA_SetMemoryIncMode+0x48>)
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	4413      	add	r3, r2
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	4413      	add	r3, r2
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000890:	4908      	ldr	r1, [pc, #32]	; (80008b4 <LL_DMA_SetMemoryIncMode+0x48>)
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	440b      	add	r3, r1
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	440b      	add	r3, r1
 800089e:	4619      	mov	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	600b      	str	r3, [r1, #0]
}
 80008a6:	bf00      	nop
 80008a8:	371c      	adds	r7, #28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	080031d8 	.word	0x080031d8

080008b8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 80008c8:	4a0d      	ldr	r2, [pc, #52]	; (8000900 <LL_DMA_SetPeriphSize+0x48>)
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	4413      	add	r3, r2
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	4413      	add	r3, r2
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80008dc:	4908      	ldr	r1, [pc, #32]	; (8000900 <LL_DMA_SetPeriphSize+0x48>)
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	440b      	add	r3, r1
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	440b      	add	r3, r1
 80008ea:	4619      	mov	r1, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	600b      	str	r3, [r1, #0]
}
 80008f2:	bf00      	nop
 80008f4:	371c      	adds	r7, #28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	080031d8 	.word	0x080031d8

08000904 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <LL_DMA_SetMemorySize+0x48>)
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	4413      	add	r3, r2
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	4413      	add	r3, r2
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000928:	4908      	ldr	r1, [pc, #32]	; (800094c <LL_DMA_SetMemorySize+0x48>)
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	440b      	add	r3, r1
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	440b      	add	r3, r1
 8000936:	4619      	mov	r1, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4313      	orrs	r3, r2
 800093c:	600b      	str	r3, [r1, #0]
}
 800093e:	bf00      	nop
 8000940:	371c      	adds	r7, #28
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	080031d8 	.word	0x080031d8

08000950 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8000950:	b480      	push	{r7}
 8000952:	b087      	sub	sp, #28
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	4413      	add	r3, r2
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000974:	4908      	ldr	r1, [pc, #32]	; (8000998 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	440b      	add	r3, r1
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	440b      	add	r3, r1
 8000982:	4619      	mov	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4313      	orrs	r3, r2
 8000988:	600b      	str	r3, [r1, #0]
}
 800098a:	bf00      	nop
 800098c:	371c      	adds	r7, #28
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	080031d8 	.word	0x080031d8

0800099c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t NbData)
{
 800099c:	b480      	push	{r7}
 800099e:	b087      	sub	sp, #28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 80009ac:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <LL_DMA_SetDataLength+0x48>)
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	4413      	add	r3, r2
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <LL_DMA_SetDataLength+0x4c>)
 80009be:	4013      	ands	r3, r2
 80009c0:	4908      	ldr	r1, [pc, #32]	; (80009e4 <LL_DMA_SetDataLength+0x48>)
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	440a      	add	r2, r1
 80009c6:	7812      	ldrb	r2, [r2, #0]
 80009c8:	4611      	mov	r1, r2
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	440a      	add	r2, r1
 80009ce:	4611      	mov	r1, r2
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	604b      	str	r3, [r1, #4]
}
 80009d6:	bf00      	nop
 80009d8:	371c      	adds	r7, #28
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	080031d8 	.word	0x080031d8
 80009e8:	ffff0000 	.word	0xffff0000

080009ec <LL_DMA_SetPeriphRequest>:
  *
  * @note   (*) Availability depends on devices.
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Request)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80009f8:	68ba      	ldr	r2, [r7, #8]
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <LL_DMA_SetPeriphRequest+0x58>)
 80009fc:	4413      	add	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	4911      	ldr	r1, [pc, #68]	; (8000a48 <LL_DMA_SetPeriphRequest+0x5c>)
 8000a04:	428a      	cmp	r2, r1
 8000a06:	d101      	bne.n	8000a0c <LL_DMA_SetPeriphRequest+0x20>
 8000a08:	2200      	movs	r2, #0
 8000a0a:	e000      	b.n	8000a0e <LL_DMA_SetPeriphRequest+0x22>
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	4413      	add	r3, r2
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000a16:	68b9      	ldr	r1, [r7, #8]
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <LL_DMA_SetPeriphRequest+0x58>)
 8000a1a:	440b      	add	r3, r1
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	68f9      	ldr	r1, [r7, #12]
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <LL_DMA_SetPeriphRequest+0x5c>)
 8000a22:	4281      	cmp	r1, r0
 8000a24:	d101      	bne.n	8000a2a <LL_DMA_SetPeriphRequest+0x3e>
 8000a26:	2100      	movs	r1, #0
 8000a28:	e000      	b.n	8000a2c <LL_DMA_SetPeriphRequest+0x40>
 8000a2a:	2120      	movs	r1, #32
 8000a2c:	440b      	add	r3, r1
 8000a2e:	4619      	mov	r1, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	600b      	str	r3, [r1, #0]
}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	10008200 	.word	0x10008200
 8000a48:	40020000 	.word	0x40020000

08000a4c <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 8000a5a:	4a0c      	ldr	r2, [pc, #48]	; (8000a8c <LL_DMA_DisableFifoMode+0x40>)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4908      	ldr	r1, [pc, #32]	; (8000a8c <LL_DMA_DisableFifoMode+0x40>)
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	440a      	add	r2, r1
 8000a70:	7812      	ldrb	r2, [r2, #0]
 8000a72:	4611      	mov	r1, r2
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	440a      	add	r2, r1
 8000a78:	f023 0304 	bic.w	r3, r3, #4
 8000a7c:	6153      	str	r3, [r2, #20]
}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	080031d8 	.word	0x080031d8

08000a90 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, MemoryAddress);
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <LL_DMA_SetMemoryAddress+0x30>)
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	4413      	add	r3, r2
 8000aae:	461a      	mov	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	371c      	adds	r7, #28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	080031d8 	.word	0x080031d8

08000ac4 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <LL_DMA_SetPeriphAddress+0x30>)
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6093      	str	r3, [r2, #8]
}
 8000ae8:	bf00      	nop
 8000aea:	371c      	adds	r7, #28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	080031d8 	.word	0x080031d8

08000af8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <LL_RCC_HSI_Enable+0x1c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <LL_RCC_HSI_Enable+0x1c>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	58024400 	.word	0x58024400

08000b18 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <LL_RCC_HSI_IsReady+0x20>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f003 0304 	and.w	r3, r3, #4
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	d101      	bne.n	8000b2c <LL_RCC_HSI_IsReady+0x14>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e000      	b.n	8000b2e <LL_RCC_HSI_IsReady+0x16>
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	58024400 	.word	0x58024400

08000b3c <LL_RCC_HSI_SetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_HSI_SetDivider(uint32_t Divider)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSIDIV, Divider);
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <LL_RCC_HSI_SetDivider+0x24>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f023 0218 	bic.w	r2, r3, #24
 8000b4c:	4904      	ldr	r1, [pc, #16]	; (8000b60 <LL_RCC_HSI_SetDivider+0x24>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	600b      	str	r3, [r1, #0]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	58024400 	.word	0x58024400

08000b64 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll HSICFGR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value can be a value between 0 and 127 (63 for Cut1.x)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
#if defined(RCC_VER_X)
  if ((DBGMCU->IDCODE & 0xF0000000U) == 0x10000000U)
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <LL_RCC_HSI_SetCalibTrimming+0x48>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000b74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b78:	d109      	bne.n	8000b8e <LL_RCC_HSI_SetCalibTrimming+0x2a>
  {
    /* STM32H7 Rev.Y */
    MODIFY_REG(RCC->HSICFGR, 0x3F000U, Value << 12U);
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <LL_RCC_HSI_SetCalibTrimming+0x4c>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	031b      	lsls	r3, r3, #12
 8000b86:	490a      	ldr	r1, [pc, #40]	; (8000bb0 <LL_RCC_HSI_SetCalibTrimming+0x4c>)
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
  }
#else
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
#endif /* RCC_VER_X */
}
 8000b8c:	e008      	b.n	8000ba0 <LL_RCC_HSI_SetCalibTrimming+0x3c>
    MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <LL_RCC_HSI_SetCalibTrimming+0x4c>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	061b      	lsls	r3, r3, #24
 8000b9a:	4905      	ldr	r1, [pc, #20]	; (8000bb0 <LL_RCC_HSI_SetCalibTrimming+0x4c>)
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	604b      	str	r3, [r1, #4]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	5c001000 	.word	0x5c001000
 8000bb0:	58024400 	.word	0x58024400

08000bb4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <LL_RCC_SetSysClkSource+0x24>)
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	f023 0207 	bic.w	r2, r3, #7
 8000bc4:	4904      	ldr	r1, [pc, #16]	; (8000bd8 <LL_RCC_SetSysClkSource+0x24>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	610b      	str	r3, [r1, #16]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	58024400 	.word	0x58024400

08000bdc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <LL_RCC_GetSysClkSource+0x18>)
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	f003 0338 	and.w	r3, r3, #56	; 0x38
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	58024400 	.word	0x58024400

08000bf8 <LL_RCC_SetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysPrescaler(uint32_t Prescaler)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CFGR_D1CPRE)
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, Prescaler);
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <LL_RCC_SetSysPrescaler+0x24>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000c08:	4904      	ldr	r1, [pc, #16]	; (8000c1c <LL_RCC_SetSysPrescaler+0x24>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, Prescaler);
#endif /* RCC_D1CFGR_D1CPRE */
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	58024400 	.word	0x58024400

08000c20 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CFGR_HPRE)
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <LL_RCC_SetAHBPrescaler+0x24>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f023 020f 	bic.w	r2, r3, #15
 8000c30:	4904      	ldr	r1, [pc, #16]	; (8000c44 <LL_RCC_SetAHBPrescaler+0x24>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, Prescaler);
#endif /* RCC_D1CFGR_HPRE */
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	58024400 	.word	0x58024400

08000c48 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
#if defined(RCC_D2CFGR_D2PPRE1)
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, Prescaler);
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c52:	69db      	ldr	r3, [r3, #28]
 8000c54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000c58:	4904      	ldr	r1, [pc, #16]	; (8000c6c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	61cb      	str	r3, [r1, #28]
#else
  MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, Prescaler);
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	58024400 	.word	0x58024400

08000c70 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
#if defined(RCC_D2CFGR_D2PPRE2)
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, Prescaler);
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000c80:	4904      	ldr	r1, [pc, #16]	; (8000c94 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	61cb      	str	r3, [r1, #28]
#else
  MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, Prescaler);
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	58024400 	.word	0x58024400

08000c98 <LL_RCC_SetAPB3Prescaler>:
  *         @arg @ref LL_RCC_APB3_DIV_8
  *         @arg @ref LL_RCC_APB3_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB3Prescaler(uint32_t Prescaler)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CFGR_D1PPRE)
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, Prescaler);
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <LL_RCC_SetAPB3Prescaler+0x24>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000ca8:	4904      	ldr	r1, [pc, #16]	; (8000cbc <LL_RCC_SetAPB3Prescaler+0x24>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, Prescaler);
#endif /* RCC_D1CFGR_D1PPRE */
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	58024400 	.word	0x58024400

08000cc0 <LL_RCC_SetAPB4Prescaler>:
  *         @arg @ref LL_RCC_APB4_DIV_8
  *         @arg @ref LL_RCC_APB4_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB4Prescaler(uint32_t Prescaler)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
#if defined(RCC_D3CFGR_D3PPRE)
  MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, Prescaler);
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <LL_RCC_SetAPB4Prescaler+0x24>)
 8000cca:	6a1b      	ldr	r3, [r3, #32]
 8000ccc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000cd0:	4904      	ldr	r1, [pc, #16]	; (8000ce4 <LL_RCC_SetAPB4Prescaler+0x24>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	620b      	str	r3, [r1, #32]
#else
  MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, Prescaler);
#endif /* RCC_D3CFGR_D3PPRE */
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	58024400 	.word	0x58024400

08000ce8 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSOURCE_PLL3R
  *         @arg @ref LL_RCC_ADC_CLKSOURCE_CLKP
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ClkSource)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
#if defined(RCC_D3CCIPR_ADCSEL)
  MODIFY_REG(RCC->D3CCIPR, RCC_D3CCIPR_ADCSEL, ClkSource);
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <LL_RCC_SetADCClockSource+0x24>)
 8000cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000cf8:	4904      	ldr	r1, [pc, #16]	; (8000d0c <LL_RCC_SetADCClockSource+0x24>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	658b      	str	r3, [r1, #88]	; 0x58
#else
  MODIFY_REG(RCC->SRDCCIPR, RCC_SRDCCIPR_ADCSEL, ClkSource);
#endif /* RCC_D3CCIPR_ADCSEL */
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	58024400 	.word	0x58024400

08000d10 <LL_RCC_PLL_SetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_SetSource(uint32_t PLLSource)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, PLLSource);
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <LL_RCC_PLL_SetSource+0x24>)
 8000d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1c:	f023 0203 	bic.w	r2, r3, #3
 8000d20:	4904      	ldr	r1, [pc, #16]	; (8000d34 <LL_RCC_PLL_SetSource+0x24>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	58024400 	.word	0x58024400

08000d38 <LL_RCC_PLL1_Enable>:
  * @brief  Enable PLL1
  * @rmtoll CR           PLL1ON         LL_RCC_PLL1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_Enable(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <LL_RCC_PLL1_Enable+0x1c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <LL_RCC_PLL1_Enable+0x1c>)
 8000d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	58024400 	.word	0x58024400

08000d58 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll CR           PLL1RDY        LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == (RCC_CR_PLL1RDY)) ? 1UL : 0UL);
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <LL_RCC_PLL1_IsReady+0x24>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000d68:	d101      	bne.n	8000d6e <LL_RCC_PLL1_IsReady+0x16>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e000      	b.n	8000d70 <LL_RCC_PLL1_IsReady+0x18>
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	58024400 	.word	0x58024400

08000d80 <LL_RCC_PLL1P_Enable>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1P_Enable(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN);
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <LL_RCC_PLL1P_Enable+0x1c>)
 8000d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <LL_RCC_PLL1P_Enable+0x1c>)
 8000d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	58024400 	.word	0x58024400

08000da0 <LL_RCC_PLL1_SetVCOOutputRange>:
  *         @arg @ref LL_RCC_PLLVCORANGE_WIDE
  *         @arg @ref LL_RCC_PLLVCORANGE_MEDIUM
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOOutputRange(uint32_t VCORange)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, VCORange << RCC_PLLCFGR_PLL1VCOSEL_Pos);
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 8000daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dac:	f023 0202 	bic.w	r2, r3, #2
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	4904      	ldr	r1, [pc, #16]	; (8000dc8 <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 8000db6:	4313      	orrs	r3, r2
 8000db8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	58024400 	.word	0x58024400

08000dcc <LL_RCC_PLL1_SetVCOInputRange>:
  *         @arg @ref LL_RCC_PLLINPUTRANGE_4_8
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOInputRange(uint32_t InputRange)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, InputRange << RCC_PLLCFGR_PLL1RGE_Pos);
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 8000dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd8:	f023 020c 	bic.w	r2, r3, #12
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4904      	ldr	r1, [pc, #16]	; (8000df4 <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	58024400 	.word	0x58024400

08000df8 <LL_RCC_PLL1_SetN>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_SetN
  * @param  N parameter can be a value between 4 and 512
  */
__STATIC_INLINE void LL_RCC_PLL1_SetN(uint32_t N)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_N1, (N - 1UL) << RCC_PLL1DIVR_N1_Pos);
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <LL_RCC_PLL1_SetN+0x28>)
 8000e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <LL_RCC_PLL1_SetN+0x2c>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	3a01      	subs	r2, #1
 8000e0c:	4904      	ldr	r1, [pc, #16]	; (8000e20 <LL_RCC_PLL1_SetN+0x28>)
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	58024400 	.word	0x58024400
 8000e24:	fffffe00 	.word	0xfffffe00

08000e28 <LL_RCC_PLL1_SetM>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t M)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1, M << RCC_PLLCKSELR_DIVM1_Pos);
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <LL_RCC_PLL1_SetM+0x28>)
 8000e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e34:	f423 727c 	bic.w	r2, r3, #1008	; 0x3f0
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	4904      	ldr	r1, [pc, #16]	; (8000e50 <LL_RCC_PLL1_SetM+0x28>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	58024400 	.word	0x58024400

08000e54 <LL_RCC_PLL1_SetP>:
  * @param  P parameter can be a value between 2 (or 1*) and 128 (ODD division factor not supported)
  *
  * (*) : For stm32h72xxx and stm32h73xxx family lines.
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t P)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_P1, (P - 1UL) << RCC_PLL1DIVR_P1_Pos);
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <LL_RCC_PLL1_SetP+0x28>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	f423 427e 	bic.w	r2, r3, #65024	; 0xfe00
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	025b      	lsls	r3, r3, #9
 8000e6a:	4904      	ldr	r1, [pc, #16]	; (8000e7c <LL_RCC_PLL1_SetP+0x28>)
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	58024400 	.word	0x58024400

08000e80 <LL_RCC_PLL1_SetQ>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t Q)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1, (Q - 1UL) << RCC_PLL1DIVR_Q1_Pos);
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <LL_RCC_PLL1_SetQ+0x28>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	041b      	lsls	r3, r3, #16
 8000e96:	4904      	ldr	r1, [pc, #16]	; (8000ea8 <LL_RCC_PLL1_SetQ+0x28>)
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	58024400 	.word	0x58024400

08000eac <LL_RCC_PLL1_SetR>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t R)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_R1, (R - 1UL) << RCC_PLL1DIVR_R1_Pos);
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <LL_RCC_PLL1_SetR+0x28>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	061b      	lsls	r3, r3, #24
 8000ec2:	4904      	ldr	r1, [pc, #16]	; (8000ed4 <LL_RCC_PLL1_SetR+0x28>)
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	58024400 	.word	0x58024400

08000ed8 <LL_RCC_PLL2_Enable>:
  * @brief  Enable PLL2
  * @rmtoll CR           PLL2ON         LL_RCC_PLL2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_Enable(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLL2ON);
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <LL_RCC_PLL2_Enable+0x1c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <LL_RCC_PLL2_Enable+0x1c>)
 8000ee2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	58024400 	.word	0x58024400

08000ef8 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <LL_RCC_PLL2_IsReady+0x24>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000f08:	d101      	bne.n	8000f0e <LL_RCC_PLL2_IsReady+0x16>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <LL_RCC_PLL2_IsReady+0x18>
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	58024400 	.word	0x58024400

08000f20 <LL_RCC_PLL2P_Enable>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2P_Enable(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN);
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <LL_RCC_PLL2P_Enable+0x1c>)
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <LL_RCC_PLL2P_Enable+0x1c>)
 8000f2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	58024400 	.word	0x58024400

08000f40 <LL_RCC_PLL2_SetVCOOutputRange>:
  *         @arg @ref LL_RCC_PLLVCORANGE_WIDE
  *         @arg @ref LL_RCC_PLLVCORANGE_MEDIUM
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetVCOOutputRange(uint32_t VCORange)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL2VCOSEL, VCORange << RCC_PLLCFGR_PLL2VCOSEL_Pos);
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <LL_RCC_PLL2_SetVCOOutputRange+0x28>)
 8000f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4c:	f023 0220 	bic.w	r2, r3, #32
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	015b      	lsls	r3, r3, #5
 8000f54:	4904      	ldr	r1, [pc, #16]	; (8000f68 <LL_RCC_PLL2_SetVCOOutputRange+0x28>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	58024400 	.word	0x58024400

08000f6c <LL_RCC_PLL2_SetVCOInputRange>:
  *         @arg @ref LL_RCC_PLLINPUTRANGE_4_8
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetVCOInputRange(uint32_t InputRange)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL2RGE, InputRange << RCC_PLLCFGR_PLL2RGE_Pos);
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <LL_RCC_PLL2_SetVCOInputRange+0x28>)
 8000f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f78:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	019b      	lsls	r3, r3, #6
 8000f80:	4904      	ldr	r1, [pc, #16]	; (8000f94 <LL_RCC_PLL2_SetVCOInputRange+0x28>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	58024400 	.word	0x58024400

08000f98 <LL_RCC_PLL2_SetN>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_SetN
  * @param  N parameter can be a value between 4 and 512
  */
__STATIC_INLINE void LL_RCC_PLL2_SetN(uint32_t N)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_N2, (N - 1UL) << RCC_PLL2DIVR_N2_Pos);
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <LL_RCC_PLL2_SetN+0x28>)
 8000fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <LL_RCC_PLL2_SetN+0x2c>)
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	3a01      	subs	r2, #1
 8000fac:	4904      	ldr	r1, [pc, #16]	; (8000fc0 <LL_RCC_PLL2_SetN+0x28>)
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	638b      	str	r3, [r1, #56]	; 0x38
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	fffffe00 	.word	0xfffffe00

08000fc8 <LL_RCC_PLL2_SetM>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL2_SetM(uint32_t M)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2, M << RCC_PLLCKSELR_DIVM2_Pos);
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <LL_RCC_PLL2_SetM+0x28>)
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	031b      	lsls	r3, r3, #12
 8000fdc:	4904      	ldr	r1, [pc, #16]	; (8000ff0 <LL_RCC_PLL2_SetM+0x28>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	58024400 	.word	0x58024400

08000ff4 <LL_RCC_PLL2_SetP>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_SetP
  * @param  P parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetP(uint32_t P)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_P2, (P - 1UL) << RCC_PLL2DIVR_P2_Pos);
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <LL_RCC_PLL2_SetP+0x28>)
 8000ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001000:	f423 427e 	bic.w	r2, r3, #65024	; 0xfe00
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	025b      	lsls	r3, r3, #9
 800100a:	4904      	ldr	r1, [pc, #16]	; (800101c <LL_RCC_PLL2_SetP+0x28>)
 800100c:	4313      	orrs	r3, r2
 800100e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	58024400 	.word	0x58024400

08001020 <LL_RCC_PLL2_SetQ>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetQ(uint32_t Q)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2, (Q - 1UL) << RCC_PLL2DIVR_Q2_Pos);
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <LL_RCC_PLL2_SetQ+0x28>)
 800102a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102c:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	041b      	lsls	r3, r3, #16
 8001036:	4904      	ldr	r1, [pc, #16]	; (8001048 <LL_RCC_PLL2_SetQ+0x28>)
 8001038:	4313      	orrs	r3, r2
 800103a:	638b      	str	r3, [r1, #56]	; 0x38
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	58024400 	.word	0x58024400

0800104c <LL_RCC_PLL2_SetR>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetR(uint32_t R)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_R2, (R - 1UL) << RCC_PLL2DIVR_R2_Pos);
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <LL_RCC_PLL2_SetR+0x28>)
 8001056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001058:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	061b      	lsls	r3, r3, #24
 8001062:	4904      	ldr	r1, [pc, #16]	; (8001074 <LL_RCC_PLL2_SetR+0x28>)
 8001064:	4313      	orrs	r3, r2
 8001066:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	58024400 	.word	0x58024400

08001078 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <LL_AHB1_GRP1_EnableClock+0x34>)
 8001082:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001086:	4909      	ldr	r1, [pc, #36]	; (80010ac <LL_AHB1_GRP1_EnableClock+0x34>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4313      	orrs	r3, r2
 800108c:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <LL_AHB1_GRP1_EnableClock+0x34>)
 8001092:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800109c:	68fb      	ldr	r3, [r7, #12]
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	58024400 	.word	0x58024400

080010b0 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <LL_AHB4_GRP1_EnableClock+0x34>)
 80010ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010be:	4909      	ldr	r1, [pc, #36]	; (80010e4 <LL_AHB4_GRP1_EnableClock+0x34>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <LL_AHB4_GRP1_EnableClock+0x34>)
 80010ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d4:	68fb      	ldr	r3, [r7, #12]
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	58024400 	.word	0x58024400

080010e8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1LENR, Periphs);
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <LL_APB1_GRP1_EnableClock+0x34>)
 80010f2:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 80010f6:	4909      	ldr	r1, [pc, #36]	; (800111c <LL_APB1_GRP1_EnableClock+0x34>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <LL_APB1_GRP1_EnableClock+0x34>)
 8001102:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800110c:	68fb      	ldr	r3, [r7, #12]
}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	58024400 	.word	0x58024400

08001120 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <LL_APB2_GRP1_EnableClock+0x34>)
 800112a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800112e:	4909      	ldr	r1, [pc, #36]	; (8001154 <LL_APB2_GRP1_EnableClock+0x34>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4313      	orrs	r3, r2
 8001134:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <LL_APB2_GRP1_EnableClock+0x34>)
 800113a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4013      	ands	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001144:	68fb      	ldr	r3, [r7, #12]
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	58024400 	.word	0x58024400

08001158 <LL_APB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB4_GRP1_EnableClock(uint32_t Periphs)
{
 8001158:	b480      	push	{r7}
 800115a:	b085      	sub	sp, #20
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB4ENR, Periphs);
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <LL_APB4_GRP1_EnableClock+0x34>)
 8001162:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001166:	4909      	ldr	r1, [pc, #36]	; (800118c <LL_APB4_GRP1_EnableClock+0x34>)
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4313      	orrs	r3, r2
 800116c:	f8c1 30f4 	str.w	r3, [r1, #244]	; 0xf4
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB4ENR, Periphs);
 8001170:	4b06      	ldr	r3, [pc, #24]	; (800118c <LL_APB4_GRP1_EnableClock+0x34>)
 8001172:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	4013      	ands	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800117c:	68fb      	ldr	r3, [r7, #12]
}
 800117e:	bf00      	nop
 8001180:	3714      	adds	r7, #20
 8001182:	46bd      	mov	sp, r7
 8001184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001188:	4770      	bx	lr
 800118a:	bf00      	nop
 800118c:	58024400 	.word	0x58024400

08001190 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001190:	b480      	push	{r7}
 8001192:	b083      	sub	sp, #12
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <LL_FLASH_SetLatency+0x24>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f023 020f 	bic.w	r2, r3, #15
 80011a0:	4904      	ldr	r1, [pc, #16]	; (80011b4 <LL_FLASH_SetLatency+0x24>)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	600b      	str	r3, [r1, #0]
}
 80011a8:	bf00      	nop
 80011aa:	370c      	adds	r7, #12
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr
 80011b4:	52002000 	.word	0x52002000

080011b8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_5
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80011bc:	4b04      	ldr	r3, [pc, #16]	; (80011d0 <LL_FLASH_GetLatency+0x18>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 030f 	and.w	r3, r3, #15
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	52002000 	.word	0x52002000

080011d4 <LL_PWR_ConfigSupply>:
  *         @arg @ref LL_PWR_SMPS_2V5_SUPPLIES_EXT
  *         @arg @ref LL_PWR_EXTERNAL_SOURCE_SUPPLY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ConfigSupply(uint32_t SupplySource)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, (PWR_CR3_SMPSLEVEL | PWR_CR3_SMPSEXTHP | PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 80011dc:	4b06      	ldr	r3, [pc, #24]	; (80011f8 <LL_PWR_ConfigSupply+0x24>)
 80011de:	68db      	ldr	r3, [r3, #12]
 80011e0:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80011e4:	4904      	ldr	r1, [pc, #16]	; (80011f8 <LL_PWR_ConfigSupply+0x24>)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	4313      	orrs	r3, r2
 80011ea:	60cb      	str	r3, [r1, #12]
}
 80011ec:	bf00      	nop
 80011ee:	370c      	adds	r7, #12
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr
 80011f8:	58024800 	.word	0x58024800

080011fc <LL_PWR_SetRegulVoltageScaling>:
  * @note   For all H7 lines except STM32H7Axxx and STM32H7Bxxx lines, VOS0
  *         is applied when PWR_D3CR_VOS[1:0] = 0b11 and  SYSCFG_PWRCR_ODEN = 0b1.
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
#if defined (PWR_CPUCR_PDDS_D2)
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 8001204:	4b06      	ldr	r3, [pc, #24]	; (8001220 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001206:	699b      	ldr	r3, [r3, #24]
 8001208:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800120c:	4904      	ldr	r1, [pc, #16]	; (8001220 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	4313      	orrs	r3, r2
 8001212:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
#endif /* PWR_CPUCR_PDDS_D2 */
}
 8001214:	bf00      	nop
 8001216:	370c      	adds	r7, #12
 8001218:	46bd      	mov	sp, r7
 800121a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121e:	4770      	bx	lr
 8001220:	58024800 	.word	0x58024800

08001224 <LL_PWR_IsActiveFlag_VOS>:
  *         or if its output voltage is still changing to the required voltage level
  * @rmtoll D3CR   VOSRDY       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
#if defined (PWR_CPUCR_PDDS_D2)
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 8001228:	4b07      	ldr	r3, [pc, #28]	; (8001248 <LL_PWR_IsActiveFlag_VOS+0x24>)
 800122a:	699b      	ldr	r3, [r3, #24]
 800122c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001230:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001234:	d101      	bne.n	800123a <LL_PWR_IsActiveFlag_VOS+0x16>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <LL_PWR_IsActiveFlag_VOS+0x18>
 800123a:	2300      	movs	r3, #0
#else
  return ((READ_BIT(PWR->SRDCR, PWR_SRDCR_VOSRDY) == (PWR_SRDCR_VOSRDY)) ? 1UL : 0UL);
#endif /* PWR_CPUCR_PDDS_D2 */
}
 800123c:	4618      	mov	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr
 8001246:	bf00      	nop
 8001248:	58024800 	.word	0x58024800

0800124c <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	f043 0201 	orr.w	r2, r3, #1
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	601a      	str	r2, [r3, #0]
}
 8001260:	bf00      	nop
 8001262:	370c      	adds	r7, #12
 8001264:	46bd      	mov	sp, r7
 8001266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126a:	4770      	bx	lr

0800126c <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 800126c:	b480      	push	{r7}
 800126e:	b083      	sub	sp, #12
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	601a      	str	r2, [r3, #0]
}
 8001280:	bf00      	nop
 8001282:	370c      	adds	r7, #12
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
 8001294:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	6a1a      	ldr	r2, [r3, #32]
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	431a      	orrs	r2, r3
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	621a      	str	r2, [r3, #32]
}
 80012a2:	bf00      	nop
 80012a4:	370c      	adds	r7, #12
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
	...

080012b0 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
 80012b8:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d028      	beq.n	8001312 <LL_TIM_OC_DisableFast+0x62>
 80012c0:	683b      	ldr	r3, [r7, #0]
 80012c2:	2b04      	cmp	r3, #4
 80012c4:	d023      	beq.n	800130e <LL_TIM_OC_DisableFast+0x5e>
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	2b10      	cmp	r3, #16
 80012ca:	d01e      	beq.n	800130a <LL_TIM_OC_DisableFast+0x5a>
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	2b40      	cmp	r3, #64	; 0x40
 80012d0:	d019      	beq.n	8001306 <LL_TIM_OC_DisableFast+0x56>
 80012d2:	683b      	ldr	r3, [r7, #0]
 80012d4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012d8:	d013      	beq.n	8001302 <LL_TIM_OC_DisableFast+0x52>
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012e0:	d00d      	beq.n	80012fe <LL_TIM_OC_DisableFast+0x4e>
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012e8:	d007      	beq.n	80012fa <LL_TIM_OC_DisableFast+0x4a>
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012f0:	d101      	bne.n	80012f6 <LL_TIM_OC_DisableFast+0x46>
 80012f2:	2307      	movs	r3, #7
 80012f4:	e00e      	b.n	8001314 <LL_TIM_OC_DisableFast+0x64>
 80012f6:	2308      	movs	r3, #8
 80012f8:	e00c      	b.n	8001314 <LL_TIM_OC_DisableFast+0x64>
 80012fa:	2306      	movs	r3, #6
 80012fc:	e00a      	b.n	8001314 <LL_TIM_OC_DisableFast+0x64>
 80012fe:	2305      	movs	r3, #5
 8001300:	e008      	b.n	8001314 <LL_TIM_OC_DisableFast+0x64>
 8001302:	2304      	movs	r3, #4
 8001304:	e006      	b.n	8001314 <LL_TIM_OC_DisableFast+0x64>
 8001306:	2303      	movs	r3, #3
 8001308:	e004      	b.n	8001314 <LL_TIM_OC_DisableFast+0x64>
 800130a:	2302      	movs	r3, #2
 800130c:	e002      	b.n	8001314 <LL_TIM_OC_DisableFast+0x64>
 800130e:	2301      	movs	r3, #1
 8001310:	e000      	b.n	8001314 <LL_TIM_OC_DisableFast+0x64>
 8001312:	2300      	movs	r3, #0
 8001314:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3318      	adds	r3, #24
 800131a:	4619      	mov	r1, r3
 800131c:	7bfb      	ldrb	r3, [r7, #15]
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <LL_TIM_OC_DisableFast+0x9c>)
 8001320:	5cd3      	ldrb	r3, [r2, r3]
 8001322:	440b      	add	r3, r1
 8001324:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 8001326:	68bb      	ldr	r3, [r7, #8]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	7bfb      	ldrb	r3, [r7, #15]
 800132c:	4908      	ldr	r1, [pc, #32]	; (8001350 <LL_TIM_OC_DisableFast+0xa0>)
 800132e:	5ccb      	ldrb	r3, [r1, r3]
 8001330:	4619      	mov	r1, r3
 8001332:	2304      	movs	r3, #4
 8001334:	408b      	lsls	r3, r1
 8001336:	43db      	mvns	r3, r3
 8001338:	401a      	ands	r2, r3
 800133a:	68bb      	ldr	r3, [r7, #8]
 800133c:	601a      	str	r2, [r3, #0]

}
 800133e:	bf00      	nop
 8001340:	3714      	adds	r7, #20
 8001342:	46bd      	mov	sp, r7
 8001344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001348:	4770      	bx	lr
 800134a:	bf00      	nop
 800134c:	080031e0 	.word	0x080031e0
 8001350:	080031ec 	.word	0x080031ec

08001354 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800135e:	683b      	ldr	r3, [r7, #0]
 8001360:	2b01      	cmp	r3, #1
 8001362:	d028      	beq.n	80013b6 <LL_TIM_OC_EnablePreload+0x62>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	2b04      	cmp	r3, #4
 8001368:	d023      	beq.n	80013b2 <LL_TIM_OC_EnablePreload+0x5e>
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	2b10      	cmp	r3, #16
 800136e:	d01e      	beq.n	80013ae <LL_TIM_OC_EnablePreload+0x5a>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	2b40      	cmp	r3, #64	; 0x40
 8001374:	d019      	beq.n	80013aa <LL_TIM_OC_EnablePreload+0x56>
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800137c:	d013      	beq.n	80013a6 <LL_TIM_OC_EnablePreload+0x52>
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001384:	d00d      	beq.n	80013a2 <LL_TIM_OC_EnablePreload+0x4e>
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800138c:	d007      	beq.n	800139e <LL_TIM_OC_EnablePreload+0x4a>
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001394:	d101      	bne.n	800139a <LL_TIM_OC_EnablePreload+0x46>
 8001396:	2307      	movs	r3, #7
 8001398:	e00e      	b.n	80013b8 <LL_TIM_OC_EnablePreload+0x64>
 800139a:	2308      	movs	r3, #8
 800139c:	e00c      	b.n	80013b8 <LL_TIM_OC_EnablePreload+0x64>
 800139e:	2306      	movs	r3, #6
 80013a0:	e00a      	b.n	80013b8 <LL_TIM_OC_EnablePreload+0x64>
 80013a2:	2305      	movs	r3, #5
 80013a4:	e008      	b.n	80013b8 <LL_TIM_OC_EnablePreload+0x64>
 80013a6:	2304      	movs	r3, #4
 80013a8:	e006      	b.n	80013b8 <LL_TIM_OC_EnablePreload+0x64>
 80013aa:	2303      	movs	r3, #3
 80013ac:	e004      	b.n	80013b8 <LL_TIM_OC_EnablePreload+0x64>
 80013ae:	2302      	movs	r3, #2
 80013b0:	e002      	b.n	80013b8 <LL_TIM_OC_EnablePreload+0x64>
 80013b2:	2301      	movs	r3, #1
 80013b4:	e000      	b.n	80013b8 <LL_TIM_OC_EnablePreload+0x64>
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	3318      	adds	r3, #24
 80013be:	4619      	mov	r1, r3
 80013c0:	7bfb      	ldrb	r3, [r7, #15]
 80013c2:	4a0a      	ldr	r2, [pc, #40]	; (80013ec <LL_TIM_OC_EnablePreload+0x98>)
 80013c4:	5cd3      	ldrb	r3, [r2, r3]
 80013c6:	440b      	add	r3, r1
 80013c8:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80013ca:	68bb      	ldr	r3, [r7, #8]
 80013cc:	681a      	ldr	r2, [r3, #0]
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	4907      	ldr	r1, [pc, #28]	; (80013f0 <LL_TIM_OC_EnablePreload+0x9c>)
 80013d2:	5ccb      	ldrb	r3, [r1, r3]
 80013d4:	4619      	mov	r1, r3
 80013d6:	2308      	movs	r3, #8
 80013d8:	408b      	lsls	r3, r1
 80013da:	431a      	orrs	r2, r3
 80013dc:	68bb      	ldr	r3, [r7, #8]
 80013de:	601a      	str	r2, [r3, #0]
}
 80013e0:	bf00      	nop
 80013e2:	3714      	adds	r7, #20
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr
 80013ec:	080031e0 	.word	0x080031e0
 80013f0:	080031ec 	.word	0x080031ec

080013f4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80013f4:	b480      	push	{r7}
 80013f6:	b083      	sub	sp, #12
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
 80013fc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	689a      	ldr	r2, [r3, #8]
 8001402:	4b06      	ldr	r3, [pc, #24]	; (800141c <LL_TIM_SetClockSource+0x28>)
 8001404:	4013      	ands	r3, r2
 8001406:	683a      	ldr	r2, [r7, #0]
 8001408:	431a      	orrs	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	609a      	str	r2, [r3, #8]
}
 800140e:	bf00      	nop
 8001410:	370c      	adds	r7, #12
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	fffebff8 	.word	0xfffebff8

08001420 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
 8001428:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	685b      	ldr	r3, [r3, #4]
 800142e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	431a      	orrs	r2, r3
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	605a      	str	r2, [r3, #4]
}
 800143a:	bf00      	nop
 800143c:	370c      	adds	r7, #12
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8001446:	b480      	push	{r7}
 8001448:	b083      	sub	sp, #12
 800144a:	af00      	add	r7, sp, #0
 800144c:	6078      	str	r0, [r7, #4]
 800144e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	685b      	ldr	r3, [r3, #4]
 8001454:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	431a      	orrs	r2, r3
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	605a      	str	r2, [r3, #4]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	609a      	str	r2, [r3, #8]
}
 8001480:	bf00      	nop
 8001482:	370c      	adds	r7, #12
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr

0800148c <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 800148c:	b480      	push	{r7}
 800148e:	b083      	sub	sp, #12
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001498:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	645a      	str	r2, [r3, #68]	; 0x44
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_TIM_EnableIT_UPDATE>:
  * @rmtoll DIER         UIE           LL_TIM_EnableIT_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableIT_UPDATE(TIM_TypeDef *TIMx)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	f043 0201 	orr.w	r2, r3, #1
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	60da      	str	r2, [r3, #12]
}
 80014c0:	bf00      	nop
 80014c2:	370c      	adds	r7, #12
 80014c4:	46bd      	mov	sp, r7
 80014c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ca:	4770      	bx	lr

080014cc <LL_GPIO_IsInputPinSet>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_GPIO_IsInputPinSet(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
 80014d4:	6039      	str	r1, [r7, #0]
  return ((READ_BIT(GPIOx->IDR, PinMask) == (PinMask)) ? 1UL : 0UL);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	691a      	ldr	r2, [r3, #16]
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	4013      	ands	r3, r2
 80014de:	683a      	ldr	r2, [r7, #0]
 80014e0:	429a      	cmp	r2, r3
 80014e2:	d101      	bne.n	80014e8 <LL_GPIO_IsInputPinSet+0x1c>
 80014e4:	2301      	movs	r3, #1
 80014e6:	e000      	b.n	80014ea <LL_GPIO_IsInputPinSet+0x1e>
 80014e8:	2300      	movs	r3, #0
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr

080014f6 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80014f6:	b480      	push	{r7}
 80014f8:	b083      	sub	sp, #12
 80014fa:	af00      	add	r7, sp, #0
 80014fc:	6078      	str	r0, [r7, #4]
 80014fe:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	041a      	lsls	r2, r3, #16
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	619a      	str	r2, [r3, #24]
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr

08001514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB4_GRP1_EnableClock(LL_APB4_GRP1_PERIPH_SYSCFG);
 8001518:	2002      	movs	r0, #2
 800151a:	f7ff fe1d 	bl	8001158 <LL_APB4_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800151e:	2003      	movs	r0, #3
 8001520:	f7fe ff70 	bl	8000404 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8001524:	f7fe ff92 	bl	800044c <__NVIC_GetPriorityGrouping>
 8001528:	4603      	mov	r3, r0
 800152a:	2200      	movs	r2, #0
 800152c:	210f      	movs	r1, #15
 800152e:	4618      	mov	r0, r3
 8001530:	f7fe ffe2 	bl	80004f8 <NVIC_EncodePriority>
 8001534:	4603      	mov	r3, r0
 8001536:	4619      	mov	r1, r3
 8001538:	f04f 30ff 	mov.w	r0, #4294967295
 800153c:	f7fe ffb2 	bl	80004a4 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001540:	f000 f900 	bl	8001744 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8001544:	f000 f970 	bl	8001828 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001548:	f000 fc7a 	bl	8001e40 <MX_GPIO_Init>
  MX_DMA_Init();
 800154c:	f000 fc50 	bl	8001df0 <MX_DMA_Init>
  MX_ADC1_Init();
 8001550:	f000 f98e 	bl	8001870 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001554:	f000 fb68 	bl	8001c28 <MX_TIM1_Init>
  MX_ADC2_Init();
 8001558:	f000 fa82 	bl	8001a60 <MX_ADC2_Init>
  MX_TIM4_Init();
 800155c:	f000 fc08 	bl	8001d70 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */


  // Włącz kanał CH1 (PE9) i CH1N (PE8)
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);    // kanał główny
 8001560:	2101      	movs	r1, #1
 8001562:	485f      	ldr	r0, [pc, #380]	; (80016e0 <main+0x1cc>)
 8001564:	f7ff fe92 	bl	800128c <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1N);   // kanał komplementarny
 8001568:	2104      	movs	r1, #4
 800156a:	485d      	ldr	r0, [pc, #372]	; (80016e0 <main+0x1cc>)
 800156c:	f7ff fe8e 	bl	800128c <LL_TIM_CC_EnableChannel>

  // Włącz wyjścia (ważne dla zaawansowanego timera TIM1)
  LL_TIM_EnableAllOutputs(TIM1);
 8001570:	485b      	ldr	r0, [pc, #364]	; (80016e0 <main+0x1cc>)
 8001572:	f7ff ff8b 	bl	800148c <LL_TIM_EnableAllOutputs>

  // Włącz licznik
  LL_TIM_EnableCounter(TIM1);
 8001576:	485a      	ldr	r0, [pc, #360]	; (80016e0 <main+0x1cc>)
 8001578:	f7ff fe68 	bl	800124c <LL_TIM_EnableCounter>


  /*-----------------------------------------------------------
    1) KONFIGURACJA DMA (adresy + długość)
  -----------------------------------------------------------*/
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_0, (uint32_t)&ADC1->DR);
 800157c:	4a59      	ldr	r2, [pc, #356]	; (80016e4 <main+0x1d0>)
 800157e:	2100      	movs	r1, #0
 8001580:	4859      	ldr	r0, [pc, #356]	; (80016e8 <main+0x1d4>)
 8001582:	f7ff fa9f 	bl	8000ac4 <LL_DMA_SetPeriphAddress>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_0, (uint32_t)adc_buffer);
 8001586:	4b59      	ldr	r3, [pc, #356]	; (80016ec <main+0x1d8>)
 8001588:	461a      	mov	r2, r3
 800158a:	2100      	movs	r1, #0
 800158c:	4856      	ldr	r0, [pc, #344]	; (80016e8 <main+0x1d4>)
 800158e:	f7ff fa7f 	bl	8000a90 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength(DMA1, LL_DMA_STREAM_0, 2);
 8001592:	2202      	movs	r2, #2
 8001594:	2100      	movs	r1, #0
 8001596:	4854      	ldr	r0, [pc, #336]	; (80016e8 <main+0x1d4>)
 8001598:	f7ff fa00 	bl	800099c <LL_DMA_SetDataLength>
  LL_DMA_EnableStream    (DMA1, LL_DMA_STREAM_0);
 800159c:	2100      	movs	r1, #0
 800159e:	4852      	ldr	r0, [pc, #328]	; (80016e8 <main+0x1d4>)
 80015a0:	f7ff f8d0 	bl	8000744 <LL_DMA_EnableStream>

  /*-----------------------------------------------------------
    2) ADC: tryb „unlimited DMA requests”
  -----------------------------------------------------------*/
  /* Dane z ADC trafiają do bufora przez DMA, w trybie „circular” */
  ADC1->CFGR &= ~ADC_CFGR_DMNGT;                            // 00 = DR
 80015a4:	4b52      	ldr	r3, [pc, #328]	; (80016f0 <main+0x1dc>)
 80015a6:	68db      	ldr	r3, [r3, #12]
 80015a8:	4a51      	ldr	r2, [pc, #324]	; (80016f0 <main+0x1dc>)
 80015aa:	f023 0303 	bic.w	r3, r3, #3
 80015ae:	60d3      	str	r3, [r2, #12]
  ADC1->CFGR |=  (ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1);     // 10 = DMA circular
 80015b0:	4b4f      	ldr	r3, [pc, #316]	; (80016f0 <main+0x1dc>)
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4a4e      	ldr	r2, [pc, #312]	; (80016f0 <main+0x1dc>)
 80015b6:	f043 0303 	orr.w	r3, r3, #3
 80015ba:	60d3      	str	r3, [r2, #12]


  /*-----------------------------------------------------------
    3) START: ADC → TIM3
  -----------------------------------------------------------*/
  LL_ADC_Enable(ADC1);
 80015bc:	484c      	ldr	r0, [pc, #304]	; (80016f0 <main+0x1dc>)
 80015be:	f7ff f885 	bl	80006cc <LL_ADC_Enable>
  while (!LL_ADC_IsActiveFlag_ADRDY(ADC1)) ;
 80015c2:	bf00      	nop
 80015c4:	484a      	ldr	r0, [pc, #296]	; (80016f0 <main+0x1dc>)
 80015c6:	f7ff f8a9 	bl	800071c <LL_ADC_IsActiveFlag_ADRDY>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f9      	beq.n	80015c4 <main+0xb0>
  LL_ADC_REG_StartConversion(ADC1);   // rozpocznie się po TRGO
 80015d0:	4847      	ldr	r0, [pc, #284]	; (80016f0 <main+0x1dc>)
 80015d2:	f7ff f88f 	bl	80006f4 <LL_ADC_REG_StartConversion>





LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_1, (uint32_t)&ADC2->DR);
 80015d6:	4a47      	ldr	r2, [pc, #284]	; (80016f4 <main+0x1e0>)
 80015d8:	2101      	movs	r1, #1
 80015da:	4843      	ldr	r0, [pc, #268]	; (80016e8 <main+0x1d4>)
 80015dc:	f7ff fa72 	bl	8000ac4 <LL_DMA_SetPeriphAddress>
LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_1, (uint32_t)adc2_buffer);
 80015e0:	4b45      	ldr	r3, [pc, #276]	; (80016f8 <main+0x1e4>)
 80015e2:	461a      	mov	r2, r3
 80015e4:	2101      	movs	r1, #1
 80015e6:	4840      	ldr	r0, [pc, #256]	; (80016e8 <main+0x1d4>)
 80015e8:	f7ff fa52 	bl	8000a90 <LL_DMA_SetMemoryAddress>
LL_DMA_SetDataLength   (DMA1, LL_DMA_STREAM_1, 2);
 80015ec:	2202      	movs	r2, #2
 80015ee:	2101      	movs	r1, #1
 80015f0:	483d      	ldr	r0, [pc, #244]	; (80016e8 <main+0x1d4>)
 80015f2:	f7ff f9d3 	bl	800099c <LL_DMA_SetDataLength>
LL_DMA_EnableStream    (DMA1, LL_DMA_STREAM_1);
 80015f6:	2101      	movs	r1, #1
 80015f8:	483b      	ldr	r0, [pc, #236]	; (80016e8 <main+0x1d4>)
 80015fa:	f7ff f8a3 	bl	8000744 <LL_DMA_EnableStream>

/*-----------------------------------------------------------
  2) ADC: tryb „unlimited DMA requests”
-----------------------------------------------------------*/
/* Dane z ADC trafiają do bufora przez DMA, w trybie „circular” */
ADC2->CFGR &= ~ADC_CFGR_DMNGT;                            // 00 = DR
 80015fe:	4b3f      	ldr	r3, [pc, #252]	; (80016fc <main+0x1e8>)
 8001600:	68db      	ldr	r3, [r3, #12]
 8001602:	4a3e      	ldr	r2, [pc, #248]	; (80016fc <main+0x1e8>)
 8001604:	f023 0303 	bic.w	r3, r3, #3
 8001608:	60d3      	str	r3, [r2, #12]
ADC2->CFGR |=  (ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1);     // 10 = DMA circular
 800160a:	4b3c      	ldr	r3, [pc, #240]	; (80016fc <main+0x1e8>)
 800160c:	68db      	ldr	r3, [r3, #12]
 800160e:	4a3b      	ldr	r2, [pc, #236]	; (80016fc <main+0x1e8>)
 8001610:	f043 0303 	orr.w	r3, r3, #3
 8001614:	60d3      	str	r3, [r2, #12]


/*-----------------------------------------------------------
  3) START: ADC → TIM3
-----------------------------------------------------------*/
LL_ADC_Enable(ADC2);
 8001616:	4839      	ldr	r0, [pc, #228]	; (80016fc <main+0x1e8>)
 8001618:	f7ff f858 	bl	80006cc <LL_ADC_Enable>
while (!LL_ADC_IsActiveFlag_ADRDY(ADC2)) ;
 800161c:	bf00      	nop
 800161e:	4837      	ldr	r0, [pc, #220]	; (80016fc <main+0x1e8>)
 8001620:	f7ff f87c 	bl	800071c <LL_ADC_IsActiveFlag_ADRDY>
 8001624:	4603      	mov	r3, r0
 8001626:	2b00      	cmp	r3, #0
 8001628:	d0f9      	beq.n	800161e <main+0x10a>
LL_ADC_REG_StartConversion(ADC2);   // rozpocznie się po TRGO
 800162a:	4834      	ldr	r0, [pc, #208]	; (80016fc <main+0x1e8>)
 800162c:	f7ff f862 	bl	80006f4 <LL_ADC_REG_StartConversion>



PI_Init(&pi_regulator, 0.01f, 0.01f, 0.000005f, 0.0f, 1200.0f);  // Ts = 2 µs (500 kHz)
 8001630:	ed9f 2a33 	vldr	s4, [pc, #204]	; 8001700 <main+0x1ec>
 8001634:	eddf 1a33 	vldr	s3, [pc, #204]	; 8001704 <main+0x1f0>
 8001638:	ed9f 1a33 	vldr	s2, [pc, #204]	; 8001708 <main+0x1f4>
 800163c:	eddf 0a33 	vldr	s1, [pc, #204]	; 800170c <main+0x1f8>
 8001640:	ed9f 0a32 	vldr	s0, [pc, #200]	; 800170c <main+0x1f8>
 8001644:	4832      	ldr	r0, [pc, #200]	; (8001710 <main+0x1fc>)
 8001646:	f000 fcb1 	bl	8001fac <PI_Init>



LL_TIM_EnableIT_UPDATE(TIM4);  // zezwolenie na przerwanie od przepełnienia
 800164a:	4832      	ldr	r0, [pc, #200]	; (8001714 <main+0x200>)
 800164c:	f7ff ff2e 	bl	80014ac <LL_TIM_EnableIT_UPDATE>
LL_TIM_EnableCounter(TIM4);    // start timera
 8001650:	4830      	ldr	r0, [pc, #192]	; (8001714 <main+0x200>)
 8001652:	f7ff fdfb 	bl	800124c <LL_TIM_EnableCounter>
  /* USER CODE BEGIN WHILE */
  while (1)
  {


	    start_time = DWT->CYCCNT;
 8001656:	4b30      	ldr	r3, [pc, #192]	; (8001718 <main+0x204>)
 8001658:	685b      	ldr	r3, [r3, #4]
 800165a:	4a30      	ldr	r2, [pc, #192]	; (800171c <main+0x208>)
 800165c:	6013      	str	r3, [r2, #0]


	    current_inductor = adc_to_current_inductor(adc_buffer[0]);
 800165e:	4b23      	ldr	r3, [pc, #140]	; (80016ec <main+0x1d8>)
 8001660:	881b      	ldrh	r3, [r3, #0]
 8001662:	4618      	mov	r0, r3
 8001664:	f000 fc66 	bl	8001f34 <adc_to_current_inductor>
 8001668:	eef0 7a40 	vmov.f32	s15, s0
 800166c:	4b2c      	ldr	r3, [pc, #176]	; (8001720 <main+0x20c>)
 800166e:	edc3 7a00 	vstr	s15, [r3]
	    voltage_out = adc_to_voltage_out(adc_buffer[1]);
 8001672:	4b1e      	ldr	r3, [pc, #120]	; (80016ec <main+0x1d8>)
 8001674:	885b      	ldrh	r3, [r3, #2]
 8001676:	4618      	mov	r0, r3
 8001678:	f000 fc3e 	bl	8001ef8 <adc_to_voltage_out>
 800167c:	eef0 7a40 	vmov.f32	s15, s0
 8001680:	4b28      	ldr	r3, [pc, #160]	; (8001724 <main+0x210>)
 8001682:	edc3 7a00 	vstr	s15, [r3]

	    current_out = adc_to_current_out(adc2_buffer[1]);
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <main+0x1e4>)
 8001688:	885b      	ldrh	r3, [r3, #2]
 800168a:	4618      	mov	r0, r3
 800168c:	f000 fc70 	bl	8001f70 <adc_to_current_out>
 8001690:	eef0 7a40 	vmov.f32	s15, s0
 8001694:	4b24      	ldr	r3, [pc, #144]	; (8001728 <main+0x214>)
 8001696:	edc3 7a00 	vstr	s15, [r3]
	    voltage_in = adc_to_voltage(adc2_buffer[0]);
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <main+0x1e4>)
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	4618      	mov	r0, r3
 80016a0:	f000 fc0c 	bl	8001ebc <adc_to_voltage>
 80016a4:	eef0 7a40 	vmov.f32	s15, s0
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <main+0x218>)
 80016aa:	edc3 7a00 	vstr	s15, [r3]


	    buck_fault = LL_GPIO_IsInputPinSet(GPIOC, LL_GPIO_PIN_2);
 80016ae:	2104      	movs	r1, #4
 80016b0:	481f      	ldr	r0, [pc, #124]	; (8001730 <main+0x21c>)
 80016b2:	f7ff ff0b 	bl	80014cc <LL_GPIO_IsInputPinSet>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b29a      	uxth	r2, r3
 80016ba:	4b1e      	ldr	r3, [pc, #120]	; (8001734 <main+0x220>)
 80016bc:	801a      	strh	r2, [r3, #0]
//	    else
//	    {
//	        LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_6);
//	    }

	    stop_time = DWT->CYCCNT;
 80016be:	4b16      	ldr	r3, [pc, #88]	; (8001718 <main+0x204>)
 80016c0:	685b      	ldr	r3, [r3, #4]
 80016c2:	4a1d      	ldr	r2, [pc, #116]	; (8001738 <main+0x224>)
 80016c4:	6013      	str	r3, [r2, #0]
	    elapsed_time = stop_time - start_time;
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <main+0x224>)
 80016c8:	681a      	ldr	r2, [r3, #0]
 80016ca:	4b14      	ldr	r3, [pc, #80]	; (800171c <main+0x208>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	1ad3      	subs	r3, r2, r3
 80016d0:	4a1a      	ldr	r2, [pc, #104]	; (800173c <main+0x228>)
 80016d2:	6013      	str	r3, [r2, #0]

	    test++;
 80016d4:	4b1a      	ldr	r3, [pc, #104]	; (8001740 <main+0x22c>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	3301      	adds	r3, #1
 80016da:	4a19      	ldr	r2, [pc, #100]	; (8001740 <main+0x22c>)
 80016dc:	6013      	str	r3, [r2, #0]
	    start_time = DWT->CYCCNT;
 80016de:	e7ba      	b.n	8001656 <main+0x142>
 80016e0:	40010000 	.word	0x40010000
 80016e4:	40022040 	.word	0x40022040
 80016e8:	40020000 	.word	0x40020000
 80016ec:	24000004 	.word	0x24000004
 80016f0:	40022000 	.word	0x40022000
 80016f4:	40022140 	.word	0x40022140
 80016f8:	24000008 	.word	0x24000008
 80016fc:	40022100 	.word	0x40022100
 8001700:	44960000 	.word	0x44960000
 8001704:	00000000 	.word	0x00000000
 8001708:	36a7c5ac 	.word	0x36a7c5ac
 800170c:	3c23d70a 	.word	0x3c23d70a
 8001710:	24000054 	.word	0x24000054
 8001714:	40000800 	.word	0x40000800
 8001718:	e0001000 	.word	0xe0001000
 800171c:	24000044 	.word	0x24000044
 8001720:	24000030 	.word	0x24000030
 8001724:	24000038 	.word	0x24000038
 8001728:	24000034 	.word	0x24000034
 800172c:	2400003c 	.word	0x2400003c
 8001730:	58020800 	.word	0x58020800
 8001734:	2400002c 	.word	0x2400002c
 8001738:	24000048 	.word	0x24000048
 800173c:	2400004c 	.word	0x2400004c
 8001740:	24000028 	.word	0x24000028

08001744 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001748:	2004      	movs	r0, #4
 800174a:	f7ff fd21 	bl	8001190 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 800174e:	bf00      	nop
 8001750:	f7ff fd32 	bl	80011b8 <LL_FLASH_GetLatency>
 8001754:	4603      	mov	r3, r0
 8001756:	2b04      	cmp	r3, #4
 8001758:	d1fa      	bne.n	8001750 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_ConfigSupply(LL_PWR_LDO_SUPPLY);
 800175a:	2002      	movs	r0, #2
 800175c:	f7ff fd3a 	bl	80011d4 <LL_PWR_ConfigSupply>
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8001760:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8001764:	f7ff fd4a 	bl	80011fc <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001768:	bf00      	nop
 800176a:	f7ff fd5b 	bl	8001224 <LL_PWR_IsActiveFlag_VOS>
 800176e:	4603      	mov	r3, r0
 8001770:	2b00      	cmp	r3, #0
 8001772:	d0fa      	beq.n	800176a <SystemClock_Config+0x26>
  {
  }
  LL_RCC_HSI_Enable();
 8001774:	f7ff f9c0 	bl	8000af8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001778:	bf00      	nop
 800177a:	f7ff f9cd 	bl	8000b18 <LL_RCC_HSI_IsReady>
 800177e:	4603      	mov	r3, r0
 8001780:	2b01      	cmp	r3, #1
 8001782:	d1fa      	bne.n	800177a <SystemClock_Config+0x36>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(64);
 8001784:	2040      	movs	r0, #64	; 0x40
 8001786:	f7ff f9ed 	bl	8000b64 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_SetDivider(LL_RCC_HSI_DIV1);
 800178a:	2000      	movs	r0, #0
 800178c:	f7ff f9d6 	bl	8000b3c <LL_RCC_HSI_SetDivider>
  LL_RCC_PLL_SetSource(LL_RCC_PLLSOURCE_HSI);
 8001790:	2000      	movs	r0, #0
 8001792:	f7ff fabd 	bl	8000d10 <LL_RCC_PLL_SetSource>
  LL_RCC_PLL1P_Enable();
 8001796:	f7ff faf3 	bl	8000d80 <LL_RCC_PLL1P_Enable>
  LL_RCC_PLL1_SetVCOInputRange(LL_RCC_PLLINPUTRANGE_8_16);
 800179a:	2003      	movs	r0, #3
 800179c:	f7ff fb16 	bl	8000dcc <LL_RCC_PLL1_SetVCOInputRange>
  LL_RCC_PLL1_SetVCOOutputRange(LL_RCC_PLLVCORANGE_WIDE);
 80017a0:	2000      	movs	r0, #0
 80017a2:	f7ff fafd 	bl	8000da0 <LL_RCC_PLL1_SetVCOOutputRange>
  LL_RCC_PLL1_SetM(4);
 80017a6:	2004      	movs	r0, #4
 80017a8:	f7ff fb3e 	bl	8000e28 <LL_RCC_PLL1_SetM>
  LL_RCC_PLL1_SetN(30);
 80017ac:	201e      	movs	r0, #30
 80017ae:	f7ff fb23 	bl	8000df8 <LL_RCC_PLL1_SetN>
  LL_RCC_PLL1_SetP(2);
 80017b2:	2002      	movs	r0, #2
 80017b4:	f7ff fb4e 	bl	8000e54 <LL_RCC_PLL1_SetP>
  LL_RCC_PLL1_SetQ(2);
 80017b8:	2002      	movs	r0, #2
 80017ba:	f7ff fb61 	bl	8000e80 <LL_RCC_PLL1_SetQ>
  LL_RCC_PLL1_SetR(2);
 80017be:	2002      	movs	r0, #2
 80017c0:	f7ff fb74 	bl	8000eac <LL_RCC_PLL1_SetR>
  LL_RCC_PLL1_Enable();
 80017c4:	f7ff fab8 	bl	8000d38 <LL_RCC_PLL1_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL1_IsReady() != 1)
 80017c8:	bf00      	nop
 80017ca:	f7ff fac5 	bl	8000d58 <LL_RCC_PLL1_IsReady>
 80017ce:	4603      	mov	r3, r0
 80017d0:	2b01      	cmp	r3, #1
 80017d2:	d1fa      	bne.n	80017ca <SystemClock_Config+0x86>
  {
  }

   /* Intermediate AHB prescaler 2 when target frequency clock is higher than 80 MHz */
   LL_RCC_SetAHBPrescaler(LL_RCC_AHB_DIV_2);
 80017d4:	2008      	movs	r0, #8
 80017d6:	f7ff fa23 	bl	8000c20 <LL_RCC_SetAHBPrescaler>

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);
 80017da:	2003      	movs	r0, #3
 80017dc:	f7ff f9ea 	bl	8000bb4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1)
 80017e0:	bf00      	nop
 80017e2:	f7ff f9fb 	bl	8000bdc <LL_RCC_GetSysClkSource>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b18      	cmp	r3, #24
 80017ea:	d1fa      	bne.n	80017e2 <SystemClock_Config+0x9e>
  {

  }
  LL_RCC_SetSysPrescaler(LL_RCC_SYSCLK_DIV_1);
 80017ec:	2000      	movs	r0, #0
 80017ee:	f7ff fa03 	bl	8000bf8 <LL_RCC_SetSysPrescaler>
  LL_RCC_SetAHBPrescaler(LL_RCC_AHB_DIV_1);
 80017f2:	2000      	movs	r0, #0
 80017f4:	f7ff fa14 	bl	8000c20 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80017f8:	2040      	movs	r0, #64	; 0x40
 80017fa:	f7ff fa25 	bl	8000c48 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 80017fe:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001802:	f7ff fa35 	bl	8000c70 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetAPB3Prescaler(LL_RCC_APB3_DIV_2);
 8001806:	2040      	movs	r0, #64	; 0x40
 8001808:	f7ff fa46 	bl	8000c98 <LL_RCC_SetAPB3Prescaler>
  LL_RCC_SetAPB4Prescaler(LL_RCC_APB4_DIV_2);
 800180c:	2040      	movs	r0, #64	; 0x40
 800180e:	f7ff fa57 	bl	8000cc0 <LL_RCC_SetAPB4Prescaler>

  LL_Init1msTick(240000000);
 8001812:	4804      	ldr	r0, [pc, #16]	; (8001824 <SystemClock_Config+0xe0>)
 8001814:	f001 fc8a 	bl	800312c <LL_Init1msTick>

  LL_SetSystemCoreClock(240000000);
 8001818:	4802      	ldr	r0, [pc, #8]	; (8001824 <SystemClock_Config+0xe0>)
 800181a:	f001 fc95 	bl	8003148 <LL_SetSystemCoreClock>
}
 800181e:	bf00      	nop
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	0e4e1c00 	.word	0x0e4e1c00

08001828 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  LL_RCC_PLL2P_Enable();
 800182c:	f7ff fb78 	bl	8000f20 <LL_RCC_PLL2P_Enable>
  LL_RCC_PLL2_SetVCOInputRange(LL_RCC_PLLINPUTRANGE_2_4);
 8001830:	2001      	movs	r0, #1
 8001832:	f7ff fb9b 	bl	8000f6c <LL_RCC_PLL2_SetVCOInputRange>
  LL_RCC_PLL2_SetVCOOutputRange(LL_RCC_PLLVCORANGE_WIDE);
 8001836:	2000      	movs	r0, #0
 8001838:	f7ff fb82 	bl	8000f40 <LL_RCC_PLL2_SetVCOOutputRange>
  LL_RCC_PLL2_SetM(32);
 800183c:	2020      	movs	r0, #32
 800183e:	f7ff fbc3 	bl	8000fc8 <LL_RCC_PLL2_SetM>
  LL_RCC_PLL2_SetN(100);
 8001842:	2064      	movs	r0, #100	; 0x64
 8001844:	f7ff fba8 	bl	8000f98 <LL_RCC_PLL2_SetN>
  LL_RCC_PLL2_SetP(4);
 8001848:	2004      	movs	r0, #4
 800184a:	f7ff fbd3 	bl	8000ff4 <LL_RCC_PLL2_SetP>
  LL_RCC_PLL2_SetQ(2);
 800184e:	2002      	movs	r0, #2
 8001850:	f7ff fbe6 	bl	8001020 <LL_RCC_PLL2_SetQ>
  LL_RCC_PLL2_SetR(2);
 8001854:	2002      	movs	r0, #2
 8001856:	f7ff fbf9 	bl	800104c <LL_RCC_PLL2_SetR>
  LL_RCC_PLL2_Enable();
 800185a:	f7ff fb3d 	bl	8000ed8 <LL_RCC_PLL2_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL2_IsReady() != 1)
 800185e:	bf00      	nop
 8001860:	f7ff fb4a 	bl	8000ef8 <LL_RCC_PLL2_IsReady>
 8001864:	4603      	mov	r3, r0
 8001866:	2b01      	cmp	r3, #1
 8001868:	d1fa      	bne.n	8001860 <PeriphCommonClock_Config+0x38>
  {
  }

}
 800186a:	bf00      	nop
 800186c:	bf00      	nop
 800186e:	bd80      	pop	{r7, pc}

08001870 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b094      	sub	sp, #80	; 0x50
 8001874:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001876:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800187a:	2200      	movs	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
 800187e:	605a      	str	r2, [r3, #4]
 8001880:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001882:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001886:	2200      	movs	r2, #0
 8001888:	601a      	str	r2, [r3, #0]
 800188a:	605a      	str	r2, [r3, #4]
 800188c:	609a      	str	r2, [r3, #8]
 800188e:	60da      	str	r2, [r3, #12]
 8001890:	611a      	str	r2, [r3, #16]
 8001892:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 8001894:	f107 031c 	add.w	r3, r7, #28
 8001898:	2200      	movs	r2, #0
 800189a:	601a      	str	r2, [r3, #0]
 800189c:	605a      	str	r2, [r3, #4]
 800189e:	609a      	str	r2, [r3, #8]
 80018a0:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018a2:	1d3b      	adds	r3, r7, #4
 80018a4:	2200      	movs	r2, #0
 80018a6:	601a      	str	r2, [r3, #0]
 80018a8:	605a      	str	r2, [r3, #4]
 80018aa:	609a      	str	r2, [r3, #8]
 80018ac:	60da      	str	r2, [r3, #12]
 80018ae:	611a      	str	r2, [r3, #16]
 80018b0:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_PLL2P);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f7ff fa18 	bl	8000ce8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 80018b8:	2020      	movs	r0, #32
 80018ba:	f7ff fbdd 	bl	8001078 <LL_AHB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 80018be:	2001      	movs	r0, #1
 80018c0:	f7ff fbf6 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 80018c4:	2020      	movs	r0, #32
 80018c6:	f7ff fbf3 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA6   ------> ADC1_INP3
  PA7   ------> ADC1_INN3
  PF11   ------> ADC1_INP2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80018ca:	23c0      	movs	r3, #192	; 0xc0
 80018cc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80018ce:	2303      	movs	r3, #3
 80018d0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018d2:	2300      	movs	r3, #0
 80018d4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018d6:	1d3b      	adds	r3, r7, #4
 80018d8:	4619      	mov	r1, r3
 80018da:	4856      	ldr	r0, [pc, #344]	; (8001a34 <MX_ADC1_Init+0x1c4>)
 80018dc:	f000 fef4 	bl	80026c8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80018e0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018e4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80018e6:	2303      	movs	r3, #3
 80018e8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018ea:	2300      	movs	r3, #0
 80018ec:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018ee:	1d3b      	adds	r3, r7, #4
 80018f0:	4619      	mov	r1, r3
 80018f2:	4851      	ldr	r0, [pc, #324]	; (8001a38 <MX_ADC1_Init+0x1c8>)
 80018f4:	f000 fee8 	bl	80026c8 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_0, LL_DMAMUX1_REQ_ADC1);
 80018f8:	2209      	movs	r2, #9
 80018fa:	2100      	movs	r1, #0
 80018fc:	484f      	ldr	r0, [pc, #316]	; (8001a3c <MX_ADC1_Init+0x1cc>)
 80018fe:	f7ff f875 	bl	80009ec <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001902:	2200      	movs	r2, #0
 8001904:	2100      	movs	r1, #0
 8001906:	484d      	ldr	r0, [pc, #308]	; (8001a3c <MX_ADC1_Init+0x1cc>)
 8001908:	f7fe ff3e 	bl	8000788 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 800190c:	2200      	movs	r2, #0
 800190e:	2100      	movs	r1, #0
 8001910:	484a      	ldr	r0, [pc, #296]	; (8001a3c <MX_ADC1_Init+0x1cc>)
 8001912:	f7ff f81d 	bl	8000950 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 8001916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800191a:	2100      	movs	r1, #0
 800191c:	4847      	ldr	r0, [pc, #284]	; (8001a3c <MX_ADC1_Init+0x1cc>)
 800191e:	f7fe ff59 	bl	80007d4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 8001922:	2200      	movs	r2, #0
 8001924:	2100      	movs	r1, #0
 8001926:	4845      	ldr	r0, [pc, #276]	; (8001a3c <MX_ADC1_Init+0x1cc>)
 8001928:	f7fe ff7a 	bl	8000820 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 800192c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001930:	2100      	movs	r1, #0
 8001932:	4842      	ldr	r0, [pc, #264]	; (8001a3c <MX_ADC1_Init+0x1cc>)
 8001934:	f7fe ff9a 	bl	800086c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 8001938:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800193c:	2100      	movs	r1, #0
 800193e:	483f      	ldr	r0, [pc, #252]	; (8001a3c <MX_ADC1_Init+0x1cc>)
 8001940:	f7fe ffba 	bl	80008b8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 8001944:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001948:	2100      	movs	r1, #0
 800194a:	483c      	ldr	r0, [pc, #240]	; (8001a3c <MX_ADC1_Init+0x1cc>)
 800194c:	f7fe ffda 	bl	8000904 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_0);
 8001950:	2100      	movs	r1, #0
 8001952:	483a      	ldr	r0, [pc, #232]	; (8001a3c <MX_ADC1_Init+0x1cc>)
 8001954:	f7ff f87a 	bl	8000a4c <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8001958:	2100      	movs	r1, #0
 800195a:	4839      	ldr	r0, [pc, #228]	; (8001a40 <MX_ADC1_Init+0x1d0>)
 800195c:	f7fe fe7a 	bl	8000654 <LL_ADC_SetOverSamplingScope>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_16B;
 8001960:	2300      	movs	r3, #0
 8001962:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001964:	2300      	movs	r3, #0
 8001966:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001968:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800196c:	4619      	mov	r1, r3
 800196e:	4834      	ldr	r0, [pc, #208]	; (8001a40 <MX_ADC1_Init+0x1d0>)
 8001970:	f000 fd5a 	bl	8002428 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001974:	2300      	movs	r3, #0
 8001976:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8001978:	2301      	movs	r3, #1
 800197a:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.SequencerDiscont = DISABLE;
 800197c:	2300      	movs	r3, #0
 800197e:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001980:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001984:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001986:	2300      	movs	r3, #0
 8001988:	643b      	str	r3, [r7, #64]	; 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 800198a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800198e:	4619      	mov	r1, r3
 8001990:	482b      	ldr	r0, [pc, #172]	; (8001a40 <MX_ADC1_Init+0x1d0>)
 8001992:	f000 fd75 	bl	8002480 <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 8001996:	2300      	movs	r3, #0
 8001998:	61fb      	str	r3, [r7, #28]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 800199a:	2300      	movs	r3, #0
 800199c:	623b      	str	r3, [r7, #32]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 800199e:	f107 031c 	add.w	r3, r7, #28
 80019a2:	4619      	mov	r1, r3
 80019a4:	4827      	ldr	r0, [pc, #156]	; (8001a44 <MX_ADC1_Init+0x1d4>)
 80019a6:	f000 fce7 	bl	8002378 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 80019aa:	4825      	ldr	r0, [pc, #148]	; (8001a40 <MX_ADC1_Init+0x1d0>)
 80019ac:	f7fe fe68 	bl	8000680 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 80019b0:	4823      	ldr	r0, [pc, #140]	; (8001a40 <MX_ADC1_Init+0x1d0>)
 80019b2:	f7fe fe77 	bl	80006a4 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  __IO uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 80019b6:	4b24      	ldr	r3, [pc, #144]	; (8001a48 <MX_ADC1_Init+0x1d8>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	099b      	lsrs	r3, r3, #6
 80019bc:	4a23      	ldr	r2, [pc, #140]	; (8001a4c <MX_ADC1_Init+0x1dc>)
 80019be:	fba2 2303 	umull	r2, r3, r2, r3
 80019c2:	099a      	lsrs	r2, r3, #6
 80019c4:	4613      	mov	r3, r2
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	005b      	lsls	r3, r3, #1
 80019cc:	461a      	mov	r2, r3
 80019ce:	4b20      	ldr	r3, [pc, #128]	; (8001a50 <MX_ADC1_Init+0x1e0>)
 80019d0:	fba3 2302 	umull	r2, r3, r3, r2
 80019d4:	08db      	lsrs	r3, r3, #3
 80019d6:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 80019d8:	e002      	b.n	80019e0 <MX_ADC1_Init+0x170>
  {
    wait_loop_index--;
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	3b01      	subs	r3, #1
 80019de:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d1f9      	bne.n	80019da <MX_ADC1_Init+0x16a>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 80019e6:	4a1b      	ldr	r2, [pc, #108]	; (8001a54 <MX_ADC1_Init+0x1e4>)
 80019e8:	2106      	movs	r1, #6
 80019ea:	4815      	ldr	r0, [pc, #84]	; (8001a40 <MX_ADC1_Init+0x1d0>)
 80019ec:	f7fe fdb7 	bl	800055e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 80019f0:	2200      	movs	r2, #0
 80019f2:	4918      	ldr	r1, [pc, #96]	; (8001a54 <MX_ADC1_Init+0x1e4>)
 80019f4:	4812      	ldr	r0, [pc, #72]	; (8001a40 <MX_ADC1_Init+0x1d0>)
 80019f6:	f7fe fdde 	bl	80005b6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 80019fa:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80019fe:	4915      	ldr	r1, [pc, #84]	; (8001a54 <MX_ADC1_Init+0x1e4>)
 8001a00:	480f      	ldr	r0, [pc, #60]	; (8001a40 <MX_ADC1_Init+0x1d0>)
 8001a02:	f7fe fe03 	bl	800060c <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */

  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_3);
 8001a06:	4a14      	ldr	r2, [pc, #80]	; (8001a58 <MX_ADC1_Init+0x1e8>)
 8001a08:	210c      	movs	r1, #12
 8001a0a:	480d      	ldr	r0, [pc, #52]	; (8001a40 <MX_ADC1_Init+0x1d0>)
 8001a0c:	f7fe fda7 	bl	800055e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001a10:	2200      	movs	r2, #0
 8001a12:	4911      	ldr	r1, [pc, #68]	; (8001a58 <MX_ADC1_Init+0x1e8>)
 8001a14:	480a      	ldr	r0, [pc, #40]	; (8001a40 <MX_ADC1_Init+0x1d0>)
 8001a16:	f7fe fdce 	bl	80005b6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_DIFFERENTIAL_ENDED);
 8001a1a:	4a10      	ldr	r2, [pc, #64]	; (8001a5c <MX_ADC1_Init+0x1ec>)
 8001a1c:	490e      	ldr	r1, [pc, #56]	; (8001a58 <MX_ADC1_Init+0x1e8>)
 8001a1e:	4808      	ldr	r0, [pc, #32]	; (8001a40 <MX_ADC1_Init+0x1d0>)
 8001a20:	f7fe fdf4 	bl	800060c <LL_ADC_SetChannelSingleDiff>

  /* USER CODE BEGIN ADC1_Init 2 */
  ADC1->PCSEL = (1U << 2) | (1U << 3);
 8001a24:	4b06      	ldr	r3, [pc, #24]	; (8001a40 <MX_ADC1_Init+0x1d0>)
 8001a26:	220c      	movs	r2, #12
 8001a28:	61da      	str	r2, [r3, #28]



  /* USER CODE END ADC1_Init 2 */

}
 8001a2a:	bf00      	nop
 8001a2c:	3750      	adds	r7, #80	; 0x50
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}
 8001a32:	bf00      	nop
 8001a34:	58020000 	.word	0x58020000
 8001a38:	58021400 	.word	0x58021400
 8001a3c:	40020000 	.word	0x40020000
 8001a40:	40022000 	.word	0x40022000
 8001a44:	40022300 	.word	0x40022300
 8001a48:	24000000 	.word	0x24000000
 8001a4c:	053e2d63 	.word	0x053e2d63
 8001a50:	cccccccd 	.word	0xcccccccd
 8001a54:	08600004 	.word	0x08600004
 8001a58:	0c900008 	.word	0x0c900008
 8001a5c:	47ff0000 	.word	0x47ff0000

08001a60 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b090      	sub	sp, #64	; 0x40
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001a66:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	605a      	str	r2, [r3, #4]
 8001a70:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001a72:	f107 031c 	add.w	r3, r7, #28
 8001a76:	2200      	movs	r2, #0
 8001a78:	601a      	str	r2, [r3, #0]
 8001a7a:	605a      	str	r2, [r3, #4]
 8001a7c:	609a      	str	r2, [r3, #8]
 8001a7e:	60da      	str	r2, [r3, #12]
 8001a80:	611a      	str	r2, [r3, #16]
 8001a82:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a84:	1d3b      	adds	r3, r7, #4
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
 8001a90:	611a      	str	r2, [r3, #16]
 8001a92:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_PLL2P);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff f927 	bl	8000ce8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8001a9a:	2020      	movs	r0, #32
 8001a9c:	f7ff faec 	bl	8001078 <LL_AHB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8001aa0:	2004      	movs	r0, #4
 8001aa2:	f7ff fb05 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 8001aa6:	2002      	movs	r0, #2
 8001aa8:	f7ff fb02 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC1   ------> ADC2_INP11
  PB0   ------> ADC2_INN5
  PB1   ------> ADC2_INP5
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001aac:	2302      	movs	r3, #2
 8001aae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ab0:	2303      	movs	r3, #3
 8001ab2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ab8:	1d3b      	adds	r3, r7, #4
 8001aba:	4619      	mov	r1, r3
 8001abc:	4850      	ldr	r0, [pc, #320]	; (8001c00 <MX_ADC2_Init+0x1a0>)
 8001abe:	f000 fe03 	bl	80026c8 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001aca:	2300      	movs	r3, #0
 8001acc:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ace:	1d3b      	adds	r3, r7, #4
 8001ad0:	4619      	mov	r1, r3
 8001ad2:	484c      	ldr	r0, [pc, #304]	; (8001c04 <MX_ADC2_Init+0x1a4>)
 8001ad4:	f000 fdf8 	bl	80026c8 <LL_GPIO_Init>

  /* ADC2 DMA Init */

  /* ADC2 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_1, LL_DMAMUX1_REQ_ADC2);
 8001ad8:	220a      	movs	r2, #10
 8001ada:	2101      	movs	r1, #1
 8001adc:	484a      	ldr	r0, [pc, #296]	; (8001c08 <MX_ADC2_Init+0x1a8>)
 8001ade:	f7fe ff85 	bl	80009ec <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	4848      	ldr	r0, [pc, #288]	; (8001c08 <MX_ADC2_Init+0x1a8>)
 8001ae8:	f7fe fe4e 	bl	8000788 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 8001aec:	2200      	movs	r2, #0
 8001aee:	2101      	movs	r1, #1
 8001af0:	4845      	ldr	r0, [pc, #276]	; (8001c08 <MX_ADC2_Init+0x1a8>)
 8001af2:	f7fe ff2d 	bl	8000950 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 8001af6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001afa:	2101      	movs	r1, #1
 8001afc:	4842      	ldr	r0, [pc, #264]	; (8001c08 <MX_ADC2_Init+0x1a8>)
 8001afe:	f7fe fe69 	bl	80007d4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8001b02:	2200      	movs	r2, #0
 8001b04:	2101      	movs	r1, #1
 8001b06:	4840      	ldr	r0, [pc, #256]	; (8001c08 <MX_ADC2_Init+0x1a8>)
 8001b08:	f7fe fe8a 	bl	8000820 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8001b0c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b10:	2101      	movs	r1, #1
 8001b12:	483d      	ldr	r0, [pc, #244]	; (8001c08 <MX_ADC2_Init+0x1a8>)
 8001b14:	f7fe feaa 	bl	800086c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_HALFWORD);
 8001b18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001b1c:	2101      	movs	r1, #1
 8001b1e:	483a      	ldr	r0, [pc, #232]	; (8001c08 <MX_ADC2_Init+0x1a8>)
 8001b20:	f7fe feca 	bl	80008b8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_HALFWORD);
 8001b24:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b28:	2101      	movs	r1, #1
 8001b2a:	4837      	ldr	r0, [pc, #220]	; (8001c08 <MX_ADC2_Init+0x1a8>)
 8001b2c:	f7fe feea 	bl	8000904 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 8001b30:	2101      	movs	r1, #1
 8001b32:	4835      	ldr	r0, [pc, #212]	; (8001c08 <MX_ADC2_Init+0x1a8>)
 8001b34:	f7fe ff8a 	bl	8000a4c <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  LL_ADC_SetOverSamplingScope(ADC2, LL_ADC_OVS_DISABLE);
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4834      	ldr	r0, [pc, #208]	; (8001c0c <MX_ADC2_Init+0x1ac>)
 8001b3c:	f7fe fd8a 	bl	8000654 <LL_ADC_SetOverSamplingScope>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_16B;
 8001b40:	2300      	movs	r3, #0
 8001b42:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001b44:	2300      	movs	r3, #0
 8001b46:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8001b48:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	482f      	ldr	r0, [pc, #188]	; (8001c0c <MX_ADC2_Init+0x1ac>)
 8001b50:	f000 fc6a 	bl	8002428 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001b54:	2300      	movs	r3, #0
 8001b56:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8001b58:	2301      	movs	r3, #1
 8001b5a:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerDiscont = DISABLE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001b60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b64:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001b66:	2300      	movs	r3, #0
 8001b68:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8001b6a:	f107 031c 	add.w	r3, r7, #28
 8001b6e:	4619      	mov	r1, r3
 8001b70:	4826      	ldr	r0, [pc, #152]	; (8001c0c <MX_ADC2_Init+0x1ac>)
 8001b72:	f000 fc85 	bl	8002480 <LL_ADC_REG_Init>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8001b76:	4825      	ldr	r0, [pc, #148]	; (8001c0c <MX_ADC2_Init+0x1ac>)
 8001b78:	f7fe fd82 	bl	8000680 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8001b7c:	4823      	ldr	r0, [pc, #140]	; (8001c0c <MX_ADC2_Init+0x1ac>)
 8001b7e:	f7fe fd91 	bl	80006a4 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  __IO uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001b82:	4b23      	ldr	r3, [pc, #140]	; (8001c10 <MX_ADC2_Init+0x1b0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	099b      	lsrs	r3, r3, #6
 8001b88:	4a22      	ldr	r2, [pc, #136]	; (8001c14 <MX_ADC2_Init+0x1b4>)
 8001b8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001b8e:	099a      	lsrs	r2, r3, #6
 8001b90:	4613      	mov	r3, r2
 8001b92:	009b      	lsls	r3, r3, #2
 8001b94:	4413      	add	r3, r2
 8001b96:	005b      	lsls	r3, r3, #1
 8001b98:	461a      	mov	r2, r3
 8001b9a:	4b1f      	ldr	r3, [pc, #124]	; (8001c18 <MX_ADC2_Init+0x1b8>)
 8001b9c:	fba3 2302 	umull	r2, r3, r3, r2
 8001ba0:	08db      	lsrs	r3, r3, #3
 8001ba2:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 8001ba4:	e002      	b.n	8001bac <MX_ADC2_Init+0x14c>
  {
    wait_loop_index--;
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	3b01      	subs	r3, #1
 8001baa:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d1f9      	bne.n	8001ba6 <MX_ADC2_Init+0x146>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_5);
 8001bb2:	4a1a      	ldr	r2, [pc, #104]	; (8001c1c <MX_ADC2_Init+0x1bc>)
 8001bb4:	2106      	movs	r1, #6
 8001bb6:	4815      	ldr	r0, [pc, #84]	; (8001c0c <MX_ADC2_Init+0x1ac>)
 8001bb8:	f7fe fcd1 	bl	800055e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	4917      	ldr	r1, [pc, #92]	; (8001c1c <MX_ADC2_Init+0x1bc>)
 8001bc0:	4812      	ldr	r0, [pc, #72]	; (8001c0c <MX_ADC2_Init+0x1ac>)
 8001bc2:	f7fe fcf8 	bl	80005b6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_5, LL_ADC_DIFFERENTIAL_ENDED);
 8001bc6:	4a16      	ldr	r2, [pc, #88]	; (8001c20 <MX_ADC2_Init+0x1c0>)
 8001bc8:	4914      	ldr	r1, [pc, #80]	; (8001c1c <MX_ADC2_Init+0x1bc>)
 8001bca:	4810      	ldr	r0, [pc, #64]	; (8001c0c <MX_ADC2_Init+0x1ac>)
 8001bcc:	f7fe fd1e 	bl	800060c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_11);
 8001bd0:	4a14      	ldr	r2, [pc, #80]	; (8001c24 <MX_ADC2_Init+0x1c4>)
 8001bd2:	210c      	movs	r1, #12
 8001bd4:	480d      	ldr	r0, [pc, #52]	; (8001c0c <MX_ADC2_Init+0x1ac>)
 8001bd6:	f7fe fcc2 	bl	800055e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_1CYCLE_5);
 8001bda:	2200      	movs	r2, #0
 8001bdc:	4911      	ldr	r1, [pc, #68]	; (8001c24 <MX_ADC2_Init+0x1c4>)
 8001bde:	480b      	ldr	r0, [pc, #44]	; (8001c0c <MX_ADC2_Init+0x1ac>)
 8001be0:	f7fe fce9 	bl	80005b6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SINGLE_ENDED);
 8001be4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001be8:	490e      	ldr	r1, [pc, #56]	; (8001c24 <MX_ADC2_Init+0x1c4>)
 8001bea:	4808      	ldr	r0, [pc, #32]	; (8001c0c <MX_ADC2_Init+0x1ac>)
 8001bec:	f7fe fd0e 	bl	800060c <LL_ADC_SetChannelSingleDiff>

  ADC2->PCSEL = (1U << 5) | (1U << 11);
 8001bf0:	4b06      	ldr	r3, [pc, #24]	; (8001c0c <MX_ADC2_Init+0x1ac>)
 8001bf2:	f44f 6202 	mov.w	r2, #2080	; 0x820
 8001bf6:	61da      	str	r2, [r3, #28]
  /* USER CODE END ADC2_Init 2 */

}
 8001bf8:	bf00      	nop
 8001bfa:	3740      	adds	r7, #64	; 0x40
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	bd80      	pop	{r7, pc}
 8001c00:	58020800 	.word	0x58020800
 8001c04:	58020400 	.word	0x58020400
 8001c08:	40020000 	.word	0x40020000
 8001c0c:	40022100 	.word	0x40022100
 8001c10:	24000000 	.word	0x24000000
 8001c14:	053e2d63 	.word	0x053e2d63
 8001c18:	cccccccd 	.word	0xcccccccd
 8001c1c:	14f00020 	.word	0x14f00020
 8001c20:	47ff0000 	.word	0x47ff0000
 8001c24:	2e300800 	.word	0x2e300800

08001c28 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b09e      	sub	sp, #120	; 0x78
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001c2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c32:	2200      	movs	r2, #0
 8001c34:	601a      	str	r2, [r3, #0]
 8001c36:	605a      	str	r2, [r3, #4]
 8001c38:	609a      	str	r2, [r3, #8]
 8001c3a:	60da      	str	r2, [r3, #12]
 8001c3c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001c3e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c42:	2220      	movs	r2, #32
 8001c44:	2100      	movs	r1, #0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f001 fa8e 	bl	8003168 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001c4c:	f107 031c 	add.w	r3, r7, #28
 8001c50:	2228      	movs	r2, #40	; 0x28
 8001c52:	2100      	movs	r1, #0
 8001c54:	4618      	mov	r0, r3
 8001c56:	f001 fa87 	bl	8003168 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c5a:	1d3b      	adds	r3, r7, #4
 8001c5c:	2200      	movs	r2, #0
 8001c5e:	601a      	str	r2, [r3, #0]
 8001c60:	605a      	str	r2, [r3, #4]
 8001c62:	609a      	str	r2, [r3, #8]
 8001c64:	60da      	str	r2, [r3, #12]
 8001c66:	611a      	str	r2, [r3, #16]
 8001c68:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001c6a:	2001      	movs	r0, #1
 8001c6c:	f7ff fa58 	bl	8001120 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001c70:	2300      	movs	r3, #0
 8001c72:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001c76:	2300      	movs	r3, #0
 8001c78:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = 1199;
 8001c7a:	f240 43af 	movw	r3, #1199	; 0x4af
 8001c7e:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001c80:	2300      	movs	r3, #0
 8001c82:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	677b      	str	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001c88:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	4836      	ldr	r0, [pc, #216]	; (8001d68 <MX_TIM1_Init+0x140>)
 8001c90:	f000 fe18 	bl	80028c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001c94:	4834      	ldr	r0, [pc, #208]	; (8001d68 <MX_TIM1_Init+0x140>)
 8001c96:	f7ff fae9 	bl	800126c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001c9a:	2100      	movs	r1, #0
 8001c9c:	4832      	ldr	r0, [pc, #200]	; (8001d68 <MX_TIM1_Init+0x140>)
 8001c9e:	f7ff fba9 	bl	80013f4 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	4830      	ldr	r0, [pc, #192]	; (8001d68 <MX_TIM1_Init+0x140>)
 8001ca6:	f7ff fb55 	bl	8001354 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001caa:	2360      	movs	r3, #96	; 0x60
 8001cac:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 600;
 8001cb6:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001cba:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001ccc:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001cd0:	461a      	mov	r2, r3
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	4824      	ldr	r0, [pc, #144]	; (8001d68 <MX_TIM1_Init+0x140>)
 8001cd6:	f000 fe89 	bl	80029ec <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8001cda:	2101      	movs	r1, #1
 8001cdc:	4822      	ldr	r0, [pc, #136]	; (8001d68 <MX_TIM1_Init+0x140>)
 8001cde:	f7ff fae7 	bl	80012b0 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001ce2:	2100      	movs	r1, #0
 8001ce4:	4820      	ldr	r0, [pc, #128]	; (8001d68 <MX_TIM1_Init+0x140>)
 8001ce6:	f7ff fb9b 	bl	8001420 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8001cea:	2100      	movs	r1, #0
 8001cec:	481e      	ldr	r0, [pc, #120]	; (8001d68 <MX_TIM1_Init+0x140>)
 8001cee:	f7ff fbaa 	bl	8001446 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001cf2:	481d      	ldr	r0, [pc, #116]	; (8001d68 <MX_TIM1_Init+0x140>)
 8001cf4:	f7ff fbba 	bl	800146c <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001cf8:	2300      	movs	r3, #0
 8001cfa:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001cfc:	2300      	movs	r3, #0
 8001cfe:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001d00:	2300      	movs	r3, #0
 8001d02:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 10;
 8001d04:	230a      	movs	r3, #10
 8001d06:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001d0e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d12:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8001d14:	2300      	movs	r3, #0
 8001d16:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8001d18:	2300      	movs	r3, #0
 8001d1a:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8001d1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d20:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8001d22:	2300      	movs	r3, #0
 8001d24:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001d26:	2300      	movs	r3, #0
 8001d28:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001d2a:	f107 031c 	add.w	r3, r7, #28
 8001d2e:	4619      	mov	r1, r3
 8001d30:	480d      	ldr	r0, [pc, #52]	; (8001d68 <MX_TIM1_Init+0x140>)
 8001d32:	f000 febb 	bl	8002aac <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 8001d36:	2010      	movs	r0, #16
 8001d38:	f7ff f9ba 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PE8   ------> TIM1_CH1N
  PE9   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001d3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d40:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d42:	2302      	movs	r3, #2
 8001d44:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d46:	2300      	movs	r3, #0
 8001d48:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001d52:	2301      	movs	r3, #1
 8001d54:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4804      	ldr	r0, [pc, #16]	; (8001d6c <MX_TIM1_Init+0x144>)
 8001d5c:	f000 fcb4 	bl	80026c8 <LL_GPIO_Init>

}
 8001d60:	bf00      	nop
 8001d62:	3778      	adds	r7, #120	; 0x78
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	40010000 	.word	0x40010000
 8001d6c:	58021000 	.word	0x58021000

08001d70 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001d76:	1d3b      	adds	r3, r7, #4
 8001d78:	2200      	movs	r2, #0
 8001d7a:	601a      	str	r2, [r3, #0]
 8001d7c:	605a      	str	r2, [r3, #4]
 8001d7e:	609a      	str	r2, [r3, #8]
 8001d80:	60da      	str	r2, [r3, #12]
 8001d82:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8001d84:	2004      	movs	r0, #4
 8001d86:	f7ff f9af 	bl	80010e8 <LL_APB1_GRP1_EnableClock>

  /* TIM4 interrupt Init */
  NVIC_SetPriority(TIM4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d8a:	f7fe fb5f 	bl	800044c <__NVIC_GetPriorityGrouping>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2200      	movs	r2, #0
 8001d92:	2100      	movs	r1, #0
 8001d94:	4618      	mov	r0, r3
 8001d96:	f7fe fbaf 	bl	80004f8 <NVIC_EncodePriority>
 8001d9a:	4603      	mov	r3, r0
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	201e      	movs	r0, #30
 8001da0:	f7fe fb80 	bl	80004a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(TIM4_IRQn);
 8001da4:	201e      	movs	r0, #30
 8001da6:	f7fe fb5f 	bl	8000468 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001daa:	2300      	movs	r3, #0
 8001dac:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001dae:	2300      	movs	r3, #0
 8001db0:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 1199;
 8001db2:	f240 43af 	movw	r3, #1199	; 0x4af
 8001db6:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 8001dbc:	1d3b      	adds	r3, r7, #4
 8001dbe:	4619      	mov	r1, r3
 8001dc0:	480a      	ldr	r0, [pc, #40]	; (8001dec <MX_TIM4_Init+0x7c>)
 8001dc2:	f000 fd7f 	bl	80028c4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 8001dc6:	4809      	ldr	r0, [pc, #36]	; (8001dec <MX_TIM4_Init+0x7c>)
 8001dc8:	f7ff fa50 	bl	800126c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001dcc:	2100      	movs	r1, #0
 8001dce:	4807      	ldr	r0, [pc, #28]	; (8001dec <MX_TIM4_Init+0x7c>)
 8001dd0:	f7ff fb10 	bl	80013f4 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 8001dd4:	2100      	movs	r1, #0
 8001dd6:	4805      	ldr	r0, [pc, #20]	; (8001dec <MX_TIM4_Init+0x7c>)
 8001dd8:	f7ff fb22 	bl	8001420 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 8001ddc:	4803      	ldr	r0, [pc, #12]	; (8001dec <MX_TIM4_Init+0x7c>)
 8001dde:	f7ff fb45 	bl	800146c <LL_TIM_DisableMasterSlaveMode>
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	40000800 	.word	0x40000800

08001df0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001df4:	2001      	movs	r0, #1
 8001df6:	f7ff f93f 	bl	8001078 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001dfa:	f7fe fb27 	bl	800044c <__NVIC_GetPriorityGrouping>
 8001dfe:	4603      	mov	r3, r0
 8001e00:	2200      	movs	r2, #0
 8001e02:	2100      	movs	r1, #0
 8001e04:	4618      	mov	r0, r3
 8001e06:	f7fe fb77 	bl	80004f8 <NVIC_EncodePriority>
 8001e0a:	4603      	mov	r3, r0
 8001e0c:	4619      	mov	r1, r3
 8001e0e:	200b      	movs	r0, #11
 8001e10:	f7fe fb48 	bl	80004a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001e14:	200b      	movs	r0, #11
 8001e16:	f7fe fb27 	bl	8000468 <__NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001e1a:	f7fe fb17 	bl	800044c <__NVIC_GetPriorityGrouping>
 8001e1e:	4603      	mov	r3, r0
 8001e20:	2200      	movs	r2, #0
 8001e22:	2100      	movs	r1, #0
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7fe fb67 	bl	80004f8 <NVIC_EncodePriority>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	200c      	movs	r0, #12
 8001e30:	f7fe fb38 	bl	80004a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001e34:	200c      	movs	r0, #12
 8001e36:	f7fe fb17 	bl	8000468 <__NVIC_EnableIRQ>

}
 8001e3a:	bf00      	nop
 8001e3c:	bd80      	pop	{r7, pc}
	...

08001e40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b086      	sub	sp, #24
 8001e44:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e46:	463b      	mov	r3, r7
 8001e48:	2200      	movs	r2, #0
 8001e4a:	601a      	str	r2, [r3, #0]
 8001e4c:	605a      	str	r2, [r3, #4]
 8001e4e:	609a      	str	r2, [r3, #8]
 8001e50:	60da      	str	r2, [r3, #12]
 8001e52:	611a      	str	r2, [r3, #16]
 8001e54:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8001e56:	2004      	movs	r0, #4
 8001e58:	f7ff f92a 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8001e5c:	2001      	movs	r0, #1
 8001e5e:	f7ff f927 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 8001e62:	2002      	movs	r0, #2
 8001e64:	f7ff f924 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 8001e68:	2020      	movs	r0, #32
 8001e6a:	f7ff f921 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 8001e6e:	2010      	movs	r0, #16
 8001e70:	f7ff f91e 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_6);
 8001e74:	2140      	movs	r1, #64	; 0x40
 8001e76:	4810      	ldr	r0, [pc, #64]	; (8001eb8 <MX_GPIO_Init+0x78>)
 8001e78:	f7ff fb3d 	bl	80014f6 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2;
 8001e7c:	2304      	movs	r3, #4
 8001e7e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_INPUT;
 8001e80:	2300      	movs	r3, #0
 8001e82:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001e84:	2302      	movs	r3, #2
 8001e86:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e88:	463b      	mov	r3, r7
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	480a      	ldr	r0, [pc, #40]	; (8001eb8 <MX_GPIO_Init+0x78>)
 8001e8e:	f000 fc1b 	bl	80026c8 <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001e92:	2340      	movs	r3, #64	; 0x40
 8001e94:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001e96:	2301      	movs	r3, #1
 8001e98:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001ea2:	2302      	movs	r3, #2
 8001ea4:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea6:	463b      	mov	r3, r7
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	4803      	ldr	r0, [pc, #12]	; (8001eb8 <MX_GPIO_Init+0x78>)
 8001eac:	f000 fc0c 	bl	80026c8 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001eb0:	bf00      	nop
 8001eb2:	3718      	adds	r7, #24
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	58020800 	.word	0x58020800

08001ebc <adc_to_voltage>:

/* USER CODE BEGIN 4 */


float adc_to_voltage(uint16_t adc_val) {
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	4603      	mov	r3, r0
 8001ec4:	80fb      	strh	r3, [r7, #6]
    return 0.0101158f * adc_val - 336.14f;
 8001ec6:	88fb      	ldrh	r3, [r7, #6]
 8001ec8:	ee07 3a90 	vmov	s15, r3
 8001ecc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed0:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001ef0 <adc_to_voltage+0x34>
 8001ed4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ed8:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ef4 <adc_to_voltage+0x38>
 8001edc:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8001ee0:	eeb0 0a67 	vmov.f32	s0, s15
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr
 8001eee:	bf00      	nop
 8001ef0:	3c25bcbe 	.word	0x3c25bcbe
 8001ef4:	43a811ec 	.word	0x43a811ec

08001ef8 <adc_to_voltage_out>:

float adc_to_voltage_out(uint16_t adc_val) {
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	4603      	mov	r3, r0
 8001f00:	80fb      	strh	r3, [r7, #6]
    return 0.008327f * adc_val - 277.34f;
 8001f02:	88fb      	ldrh	r3, [r7, #6]
 8001f04:	ee07 3a90 	vmov	s15, r3
 8001f08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f0c:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001f2c <adc_to_voltage_out+0x34>
 8001f10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f14:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f30 <adc_to_voltage_out+0x38>
 8001f18:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8001f1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f20:	370c      	adds	r7, #12
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
 8001f2a:	bf00      	nop
 8001f2c:	3c086df8 	.word	0x3c086df8
 8001f30:	438aab85 	.word	0x438aab85

08001f34 <adc_to_current_inductor>:

float adc_to_current_inductor(uint16_t adc_val) {
 8001f34:	b480      	push	{r7}
 8001f36:	b083      	sub	sp, #12
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]
    return 0.0005078f * adc_val - 7.06f;
 8001f3e:	88fb      	ldrh	r3, [r7, #6]
 8001f40:	ee07 3a90 	vmov	s15, r3
 8001f44:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f48:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001f68 <adc_to_current_inductor+0x34>
 8001f4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f50:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001f6c <adc_to_current_inductor+0x38>
 8001f54:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8001f58:	eeb0 0a67 	vmov.f32	s0, s15
 8001f5c:	370c      	adds	r7, #12
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f64:	4770      	bx	lr
 8001f66:	bf00      	nop
 8001f68:	3a051de2 	.word	0x3a051de2
 8001f6c:	40e1eb85 	.word	0x40e1eb85

08001f70 <adc_to_current_out>:

float adc_to_current_out(uint16_t adc_val) {
 8001f70:	b480      	push	{r7}
 8001f72:	b083      	sub	sp, #12
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	4603      	mov	r3, r0
 8001f78:	80fb      	strh	r3, [r7, #6]
    return 0.0005119f * adc_val - 7.82f;
 8001f7a:	88fb      	ldrh	r3, [r7, #6]
 8001f7c:	ee07 3a90 	vmov	s15, r3
 8001f80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f84:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001fa4 <adc_to_current_out+0x34>
 8001f88:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f8c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001fa8 <adc_to_current_out+0x38>
 8001f90:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8001f94:	eeb0 0a67 	vmov.f32	s0, s15
 8001f98:	370c      	adds	r7, #12
 8001f9a:	46bd      	mov	sp, r7
 8001f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	3a063107 	.word	0x3a063107
 8001fa8:	40fa3d71 	.word	0x40fa3d71

08001fac <PI_Init>:
 */


#include "pi_controller.h"

void PI_Init(PI_Controller *pi, float Kp, float Ki, float Ts, float out_min, float out_max) {
 8001fac:	b480      	push	{r7}
 8001fae:	b087      	sub	sp, #28
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6178      	str	r0, [r7, #20]
 8001fb4:	ed87 0a04 	vstr	s0, [r7, #16]
 8001fb8:	edc7 0a03 	vstr	s1, [r7, #12]
 8001fbc:	ed87 1a02 	vstr	s2, [r7, #8]
 8001fc0:	edc7 1a01 	vstr	s3, [r7, #4]
 8001fc4:	ed87 2a00 	vstr	s4, [r7]
    pi->Kp = Kp;
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	693a      	ldr	r2, [r7, #16]
 8001fcc:	601a      	str	r2, [r3, #0]
    pi->Ki = Ki;
 8001fce:	697b      	ldr	r3, [r7, #20]
 8001fd0:	68fa      	ldr	r2, [r7, #12]
 8001fd2:	605a      	str	r2, [r3, #4]
    pi->Ts = Ts;
 8001fd4:	697b      	ldr	r3, [r7, #20]
 8001fd6:	68ba      	ldr	r2, [r7, #8]
 8001fd8:	609a      	str	r2, [r3, #8]
    pi->integral = 0.0f;
 8001fda:	697b      	ldr	r3, [r7, #20]
 8001fdc:	f04f 0200 	mov.w	r2, #0
 8001fe0:	60da      	str	r2, [r3, #12]
    pi->out_min = out_min;
 8001fe2:	697b      	ldr	r3, [r7, #20]
 8001fe4:	687a      	ldr	r2, [r7, #4]
 8001fe6:	611a      	str	r2, [r3, #16]
    pi->out_max = out_max;
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	683a      	ldr	r2, [r7, #0]
 8001fec:	615a      	str	r2, [r3, #20]
}
 8001fee:	bf00      	nop
 8001ff0:	371c      	adds	r7, #28
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
	...

08001ffc <PI_Update>:

float PI_Update(PI_Controller *pi, float setpoint, float measurement_voltage, float measurement_current) {
 8001ffc:	b480      	push	{r7}
 8001ffe:	b089      	sub	sp, #36	; 0x24
 8002000:	af00      	add	r7, sp, #0
 8002002:	60f8      	str	r0, [r7, #12]
 8002004:	ed87 0a02 	vstr	s0, [r7, #8]
 8002008:	edc7 0a01 	vstr	s1, [r7, #4]
 800200c:	ed87 1a00 	vstr	s2, [r7]
    float error = setpoint - measurement_voltage;
 8002010:	ed97 7a02 	vldr	s14, [r7, #8]
 8002014:	edd7 7a01 	vldr	s15, [r7, #4]
 8002018:	ee77 7a67 	vsub.f32	s15, s14, s15
 800201c:	edc7 7a06 	vstr	s15, [r7, #24]

    float vin = 180;
 8002020:	4b45      	ldr	r3, [pc, #276]	; (8002138 <PI_Update+0x13c>)
 8002022:	617b      	str	r3, [r7, #20]

    float dff = ( setpoint * pi->out_max ) / vin;
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	ed93 7a05 	vldr	s14, [r3, #20]
 800202a:	edd7 7a02 	vldr	s15, [r7, #8]
 800202e:	ee67 6a27 	vmul.f32	s13, s14, s15
 8002032:	ed97 7a05 	vldr	s14, [r7, #20]
 8002036:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800203a:	edc7 7a04 	vstr	s15, [r7, #16]

    // Człon całkujący
    pi->integral += error * pi->Ts;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	ed93 7a03 	vldr	s14, [r3, #12]
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	edd3 6a02 	vldr	s13, [r3, #8]
 800204a:	edd7 7a06 	vldr	s15, [r7, #24]
 800204e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002052:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	edc3 7a03 	vstr	s15, [r3, #12]

    // Anti-windup
    if (pi->integral * pi->Ki > pi->out_max)
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	ed93 7a03 	vldr	s14, [r3, #12]
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	edd3 7a01 	vldr	s15, [r3, #4]
 8002068:	ee27 7a27 	vmul.f32	s14, s14, s15
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	edd3 7a05 	vldr	s15, [r3, #20]
 8002072:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800207a:	dd0b      	ble.n	8002094 <PI_Update+0x98>
        pi->integral = pi->out_max / pi->Ki;
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	edd3 6a05 	vldr	s13, [r3, #20]
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	ed93 7a01 	vldr	s14, [r3, #4]
 8002088:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	edc3 7a03 	vstr	s15, [r3, #12]
 8002092:	e01a      	b.n	80020ca <PI_Update+0xce>
    else if (pi->integral * pi->Ki < pi->out_min)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	ed93 7a03 	vldr	s14, [r3, #12]
 800209a:	68fb      	ldr	r3, [r7, #12]
 800209c:	edd3 7a01 	vldr	s15, [r3, #4]
 80020a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	edd3 7a04 	vldr	s15, [r3, #16]
 80020aa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80020b2:	d50a      	bpl.n	80020ca <PI_Update+0xce>
        pi->integral = pi->out_min / pi->Ki;
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	edd3 6a04 	vldr	s13, [r3, #16]
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	ed93 7a01 	vldr	s14, [r3, #4]
 80020c0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	edc3 7a03 	vstr	s15, [r3, #12]

    // Wyjście regulatora
    float output = pi->Kp * error + pi->Ki * pi->integral;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	ed93 7a00 	vldr	s14, [r3]
 80020d0:	edd7 7a06 	vldr	s15, [r7, #24]
 80020d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	edd3 6a01 	vldr	s13, [r3, #4]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	edd3 7a03 	vldr	s15, [r3, #12]
 80020e4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80020e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ec:	edc7 7a07 	vstr	s15, [r7, #28]

    // Ograniczenie
    if (output > pi->out_max) output = pi->out_max;
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	edd3 7a05 	vldr	s15, [r3, #20]
 80020f6:	ed97 7a07 	vldr	s14, [r7, #28]
 80020fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80020fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002102:	dd02      	ble.n	800210a <PI_Update+0x10e>
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	61fb      	str	r3, [r7, #28]
    if (output < pi->out_min) output = pi->out_min;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	edd3 7a04 	vldr	s15, [r3, #16]
 8002110:	ed97 7a07 	vldr	s14, [r7, #28]
 8002114:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002118:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800211c:	d502      	bpl.n	8002124 <PI_Update+0x128>
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	691b      	ldr	r3, [r3, #16]
 8002122:	61fb      	str	r3, [r7, #28]
//    if(measurement_current > 10 )
//    {
//    	return 120;
//    }

    return output;
 8002124:	69fb      	ldr	r3, [r7, #28]
 8002126:	ee07 3a90 	vmov	s15, r3
}
 800212a:	eeb0 0a67 	vmov.f32	s0, s15
 800212e:	3724      	adds	r7, #36	; 0x24
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	43340000 	.word	0x43340000

0800213c <LL_TIM_OC_SetCompareCH1>:
{
 800213c:	b480      	push	{r7}
 800213e:	b083      	sub	sp, #12
 8002140:	af00      	add	r7, sp, #0
 8002142:	6078      	str	r0, [r7, #4]
 8002144:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	683a      	ldr	r2, [r7, #0]
 800214a:	635a      	str	r2, [r3, #52]	; 0x34
}
 800214c:	bf00      	nop
 800214e:	370c      	adds	r7, #12
 8002150:	46bd      	mov	sp, r7
 8002152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002156:	4770      	bx	lr

08002158 <LL_TIM_ClearFlag_UPDATE>:
{
 8002158:	b480      	push	{r7}
 800215a:	b083      	sub	sp, #12
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f06f 0201 	mvn.w	r2, #1
 8002166:	611a      	str	r2, [r3, #16]
}
 8002168:	bf00      	nop
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <LL_TIM_IsActiveFlag_UPDATE>:
{
 8002174:	b480      	push	{r7}
 8002176:	b083      	sub	sp, #12
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	691b      	ldr	r3, [r3, #16]
 8002180:	f003 0301 	and.w	r3, r3, #1
 8002184:	2b01      	cmp	r3, #1
 8002186:	d101      	bne.n	800218c <LL_TIM_IsActiveFlag_UPDATE+0x18>
 8002188:	2301      	movs	r3, #1
 800218a:	e000      	b.n	800218e <LL_TIM_IsActiveFlag_UPDATE+0x1a>
 800218c:	2300      	movs	r3, #0
}
 800218e:	4618      	mov	r0, r3
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr

0800219a <LL_GPIO_SetOutputPin>:
{
 800219a:	b480      	push	{r7}
 800219c:	b083      	sub	sp, #12
 800219e:	af00      	add	r7, sp, #0
 80021a0:	6078      	str	r0, [r7, #4]
 80021a2:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	683a      	ldr	r2, [r7, #0]
 80021a8:	619a      	str	r2, [r3, #24]
}
 80021aa:	bf00      	nop
 80021ac:	370c      	adds	r7, #12
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <LL_GPIO_ResetOutputPin>:
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
 80021be:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 80021c0:	683b      	ldr	r3, [r7, #0]
 80021c2:	041a      	lsls	r2, r3, #16
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	619a      	str	r2, [r3, #24]
}
 80021c8:	bf00      	nop
 80021ca:	370c      	adds	r7, #12
 80021cc:	46bd      	mov	sp, r7
 80021ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d2:	4770      	bx	lr

080021d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021d8:	e7fe      	b.n	80021d8 <NMI_Handler+0x4>

080021da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021de:	e7fe      	b.n	80021de <HardFault_Handler+0x4>

080021e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021e4:	e7fe      	b.n	80021e4 <MemManage_Handler+0x4>

080021e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021e6:	b480      	push	{r7}
 80021e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021ea:	e7fe      	b.n	80021ea <BusFault_Handler+0x4>

080021ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021ec:	b480      	push	{r7}
 80021ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f0:	e7fe      	b.n	80021f0 <UsageFault_Handler+0x4>

080021f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021f2:	b480      	push	{r7}
 80021f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021f6:	bf00      	nop
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr

08002200 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002204:	bf00      	nop
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr

0800220e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800220e:	b480      	push	{r7}
 8002210:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	46bd      	mov	sp, r7
 8002216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221a:	4770      	bx	lr

0800221c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800221c:	b480      	push	{r7}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002220:	bf00      	nop
 8002222:	46bd      	mov	sp, r7
 8002224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002228:	4770      	bx	lr

0800222a <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 800222a:	b480      	push	{r7}
 800222c:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream0_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800222e:	bf00      	nop
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr

08002238 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8002238:	b480      	push	{r7}
 800223a:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 800223c:	bf00      	nop
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
	...

08002248 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */
    if (LL_TIM_IsActiveFlag_UPDATE(TIM4)) {
 800224c:	481a      	ldr	r0, [pc, #104]	; (80022b8 <TIM4_IRQHandler+0x70>)
 800224e:	f7ff ff91 	bl	8002174 <LL_TIM_IsActiveFlag_UPDATE>
 8002252:	4603      	mov	r3, r0
 8002254:	2b00      	cmp	r3, #0
 8002256:	d02c      	beq.n	80022b2 <TIM4_IRQHandler+0x6a>
        LL_TIM_ClearFlag_UPDATE(TIM4);
 8002258:	4817      	ldr	r0, [pc, #92]	; (80022b8 <TIM4_IRQHandler+0x70>)
 800225a:	f7ff ff7d 	bl	8002158 <LL_TIM_ClearFlag_UPDATE>

        LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_6);
 800225e:	2140      	movs	r1, #64	; 0x40
 8002260:	4816      	ldr	r0, [pc, #88]	; (80022bc <TIM4_IRQHandler+0x74>)
 8002262:	f7ff ff9a 	bl	800219a <LL_GPIO_SetOutputPin>



		target_duty = (uint16_t) PI_Update(&pi_regulator, setpoint, voltage_out,current_out);
 8002266:	4b16      	ldr	r3, [pc, #88]	; (80022c0 <TIM4_IRQHandler+0x78>)
 8002268:	edd3 7a00 	vldr	s15, [r3]
 800226c:	4b15      	ldr	r3, [pc, #84]	; (80022c4 <TIM4_IRQHandler+0x7c>)
 800226e:	ed93 7a00 	vldr	s14, [r3]
 8002272:	4b15      	ldr	r3, [pc, #84]	; (80022c8 <TIM4_IRQHandler+0x80>)
 8002274:	edd3 6a00 	vldr	s13, [r3]
 8002278:	eeb0 1a66 	vmov.f32	s2, s13
 800227c:	eef0 0a47 	vmov.f32	s1, s14
 8002280:	eeb0 0a67 	vmov.f32	s0, s15
 8002284:	4811      	ldr	r0, [pc, #68]	; (80022cc <TIM4_IRQHandler+0x84>)
 8002286:	f7ff feb9 	bl	8001ffc <PI_Update>
 800228a:	eef0 7a40 	vmov.f32	s15, s0
 800228e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002292:	ee17 3a90 	vmov	r3, s15
 8002296:	b29b      	uxth	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	4b0d      	ldr	r3, [pc, #52]	; (80022d0 <TIM4_IRQHandler+0x88>)
 800229c:	601a      	str	r2, [r3, #0]



		LL_TIM_OC_SetCompareCH1(TIM1, target_duty);
 800229e:	4b0c      	ldr	r3, [pc, #48]	; (80022d0 <TIM4_IRQHandler+0x88>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4619      	mov	r1, r3
 80022a4:	480b      	ldr	r0, [pc, #44]	; (80022d4 <TIM4_IRQHandler+0x8c>)
 80022a6:	f7ff ff49 	bl	800213c <LL_TIM_OC_SetCompareCH1>





        LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_6);
 80022aa:	2140      	movs	r1, #64	; 0x40
 80022ac:	4803      	ldr	r0, [pc, #12]	; (80022bc <TIM4_IRQHandler+0x74>)
 80022ae:	f7ff ff82 	bl	80021b6 <LL_GPIO_ResetOutputPin>
    }
  /* USER CODE END TIM4_IRQn 0 */
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	40000800 	.word	0x40000800
 80022bc:	58020800 	.word	0x58020800
 80022c0:	24000050 	.word	0x24000050
 80022c4:	24000038 	.word	0x24000038
 80022c8:	24000034 	.word	0x24000034
 80022cc:	24000054 	.word	0x24000054
 80022d0:	24000040 	.word	0x24000040
 80022d4:	40010000 	.word	0x40010000

080022d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80022d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002310 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80022dc:	f7fd fffc 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022e0:	480c      	ldr	r0, [pc, #48]	; (8002314 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80022e2:	490d      	ldr	r1, [pc, #52]	; (8002318 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80022e4:	4a0d      	ldr	r2, [pc, #52]	; (800231c <LoopFillZerobss+0x1a>)
  movs r3, #0
 80022e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e8:	e002      	b.n	80022f0 <LoopCopyDataInit>

080022ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022ee:	3304      	adds	r3, #4

080022f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022f4:	d3f9      	bcc.n	80022ea <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022f6:	4a0a      	ldr	r2, [pc, #40]	; (8002320 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80022f8:	4c0a      	ldr	r4, [pc, #40]	; (8002324 <LoopFillZerobss+0x22>)
  movs r3, #0
 80022fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022fc:	e001      	b.n	8002302 <LoopFillZerobss>

080022fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002300:	3204      	adds	r2, #4

08002302 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002302:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002304:	d3fb      	bcc.n	80022fe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002306:	f000 ff37 	bl	8003178 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800230a:	f7ff f903 	bl	8001514 <main>
  bx  lr
 800230e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002310:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8002314:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8002318:	24000004 	.word	0x24000004
  ldr r2, =_sidata
 800231c:	08003200 	.word	0x08003200
  ldr r2, =_sbss
 8002320:	2400000c 	.word	0x2400000c
  ldr r4, =_ebss
 8002324:	2400006c 	.word	0x2400006c

08002328 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002328:	e7fe      	b.n	8002328 <ADC3_IRQHandler>

0800232a <LL_ADC_REG_SetSequencerLength>:
{
 800232a:	b480      	push	{r7}
 800232c:	b083      	sub	sp, #12
 800232e:	af00      	add	r7, sp, #0
 8002330:	6078      	str	r0, [r7, #4]
 8002332:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	f023 020f 	bic.w	r2, r3, #15
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	431a      	orrs	r2, r3
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr

08002350 <LL_ADC_IsEnabled>:
{
 8002350:	b480      	push	{r7}
 8002352:	b083      	sub	sp, #12
 8002354:	af00      	add	r7, sp, #0
 8002356:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	689b      	ldr	r3, [r3, #8]
 800235c:	f003 0301 	and.w	r3, r3, #1
 8002360:	2b01      	cmp	r3, #1
 8002362:	d101      	bne.n	8002368 <LL_ADC_IsEnabled+0x18>
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <LL_ADC_IsEnabled+0x1a>
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002378:	b590      	push	{r4, r7, lr}
 800237a:	b085      	sub	sp, #20
 800237c:	af00      	add	r7, sp, #0
 800237e:	6078      	str	r0, [r7, #4]
 8002380:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002382:	2300      	movs	r3, #0
 8002384:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	4a22      	ldr	r2, [pc, #136]	; (8002414 <LL_ADC_CommonInit+0x9c>)
 800238a:	4293      	cmp	r3, r2
 800238c:	d10e      	bne.n	80023ac <LL_ADC_CommonInit+0x34>
 800238e:	4822      	ldr	r0, [pc, #136]	; (8002418 <LL_ADC_CommonInit+0xa0>)
 8002390:	f7ff ffde 	bl	8002350 <LL_ADC_IsEnabled>
 8002394:	4604      	mov	r4, r0
 8002396:	4821      	ldr	r0, [pc, #132]	; (800241c <LL_ADC_CommonInit+0xa4>)
 8002398:	f7ff ffda 	bl	8002350 <LL_ADC_IsEnabled>
 800239c:	4603      	mov	r3, r0
 800239e:	4323      	orrs	r3, r4
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	bf0c      	ite	eq
 80023a4:	2301      	moveq	r3, #1
 80023a6:	2300      	movne	r3, #0
 80023a8:	b2db      	uxtb	r3, r3
 80023aa:	e008      	b.n	80023be <LL_ADC_CommonInit+0x46>
 80023ac:	481c      	ldr	r0, [pc, #112]	; (8002420 <LL_ADC_CommonInit+0xa8>)
 80023ae:	f7ff ffcf 	bl	8002350 <LL_ADC_IsEnabled>
 80023b2:	4603      	mov	r3, r0
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf0c      	ite	eq
 80023b8:	2301      	moveq	r3, #1
 80023ba:	2300      	movne	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d020      	beq.n	8002404 <LL_ADC_CommonInit+0x8c>
    /*  - multimode (if several ADC instances available on the                */
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d012      	beq.n	80023f0 <LL_ADC_CommonInit+0x78>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	689a      	ldr	r2, [r3, #8]
 80023ce:	4b15      	ldr	r3, [pc, #84]	; (8002424 <LL_ADC_CommonInit+0xac>)
 80023d0:	4013      	ands	r3, r2
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	6811      	ldr	r1, [r2, #0]
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	6852      	ldr	r2, [r2, #4]
 80023da:	4311      	orrs	r1, r2
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	6892      	ldr	r2, [r2, #8]
 80023e0:	4311      	orrs	r1, r2
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	68d2      	ldr	r2, [r2, #12]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	431a      	orrs	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	609a      	str	r2, [r3, #8]
 80023ee:	e00b      	b.n	8002408 <LL_ADC_CommonInit+0x90>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	689a      	ldr	r2, [r3, #8]
 80023f4:	4b0b      	ldr	r3, [pc, #44]	; (8002424 <LL_ADC_CommonInit+0xac>)
 80023f6:	4013      	ands	r3, r2
 80023f8:	683a      	ldr	r2, [r7, #0]
 80023fa:	6812      	ldr	r2, [r2, #0]
 80023fc:	431a      	orrs	r2, r3
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	609a      	str	r2, [r3, #8]
 8002402:	e001      	b.n	8002408 <LL_ADC_CommonInit+0x90>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002408:	7bfb      	ldrb	r3, [r7, #15]
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	bd90      	pop	{r4, r7, pc}
 8002412:	bf00      	nop
 8002414:	40022300 	.word	0x40022300
 8002418:	40022000 	.word	0x40022000
 800241c:	40022100 	.word	0x40022100
 8002420:	58026000 	.word	0x58026000
 8002424:	ffc030e0 	.word	0xffc030e0

08002428 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_LEFT_BIT_SHIFT(ADC_InitStruct->LeftBitShift));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8002436:	6878      	ldr	r0, [r7, #4]
 8002438:	f7ff ff8a 	bl	8002350 <LL_ADC_IsEnabled>
 800243c:	4603      	mov	r3, r0
 800243e:	2b00      	cmp	r3, #0
 8002440:	d115      	bne.n	800246e <LL_ADC_Init+0x46>
               ADC_InitStruct->Resolution
               | ADC_InitStruct->LowPowerMode
              );
    }
#else
    MODIFY_REG(ADCx->CFGR,
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	68da      	ldr	r2, [r3, #12]
 8002446:	4b0d      	ldr	r3, [pc, #52]	; (800247c <LL_ADC_Init+0x54>)
 8002448:	4013      	ands	r3, r2
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	6811      	ldr	r1, [r2, #0]
 800244e:	683a      	ldr	r2, [r7, #0]
 8002450:	6892      	ldr	r2, [r2, #8]
 8002452:	430a      	orrs	r2, r1
 8002454:	431a      	orrs	r2, r3
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->LowPowerMode
              );
#endif

    MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LSHIFT, ADC_InitStruct->LeftBitShift);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	691b      	ldr	r3, [r3, #16]
 800245e:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	431a      	orrs	r2, r3
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	611a      	str	r2, [r3, #16]
 800246c:	e001      	b.n	8002472 <LL_ADC_Init+0x4a>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002472:	7bfb      	ldrb	r3, [r7, #15]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	ffffbfe3 	.word	0xffffbfe3

08002480 <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 8002480:	b580      	push	{r7, lr}
 8002482:	b084      	sub	sp, #16
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800248a:	2300      	movs	r3, #0
 800248c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DATA_TRANSFER_MODE(ADC_REG_InitStruct->DataTransferMode));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	f7ff ff5e 	bl	8002350 <LL_ADC_IsEnabled>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d132      	bne.n	8002500 <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 800249a:	683b      	ldr	r3, [r7, #0]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d015      	beq.n	80024ce <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	68da      	ldr	r2, [r3, #12]
 80024a6:	4b1a      	ldr	r3, [pc, #104]	; (8002510 <LL_ADC_REG_Init+0x90>)
 80024a8:	4013      	ands	r3, r2
 80024aa:	683a      	ldr	r2, [r7, #0]
 80024ac:	6811      	ldr	r1, [r2, #0]
 80024ae:	683a      	ldr	r2, [r7, #0]
 80024b0:	6892      	ldr	r2, [r2, #8]
 80024b2:	4311      	orrs	r1, r2
 80024b4:	683a      	ldr	r2, [r7, #0]
 80024b6:	68d2      	ldr	r2, [r2, #12]
 80024b8:	4311      	orrs	r1, r2
 80024ba:	683a      	ldr	r2, [r7, #0]
 80024bc:	6912      	ldr	r2, [r2, #16]
 80024be:	4311      	orrs	r1, r2
 80024c0:	683a      	ldr	r2, [r7, #0]
 80024c2:	6952      	ldr	r2, [r2, #20]
 80024c4:	430a      	orrs	r2, r1
 80024c6:	431a      	orrs	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	60da      	str	r2, [r3, #12]
 80024cc:	e011      	b.n	80024f2 <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	4b0f      	ldr	r3, [pc, #60]	; (8002510 <LL_ADC_REG_Init+0x90>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	683a      	ldr	r2, [r7, #0]
 80024d8:	6811      	ldr	r1, [r2, #0]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	68d2      	ldr	r2, [r2, #12]
 80024de:	4311      	orrs	r1, r2
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	6912      	ldr	r2, [r2, #16]
 80024e4:	4311      	orrs	r1, r2
 80024e6:	683a      	ldr	r2, [r7, #0]
 80024e8:	6952      	ldr	r2, [r2, #20]
 80024ea:	430a      	orrs	r2, r1
 80024ec:	431a      	orrs	r2, r3
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	4619      	mov	r1, r3
 80024f8:	6878      	ldr	r0, [r7, #4]
 80024fa:	f7ff ff16 	bl	800232a <LL_ADC_REG_SetSequencerLength>
 80024fe:	e001      	b.n	8002504 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 8002504:	7bfb      	ldrb	r3, [r7, #15]
}
 8002506:	4618      	mov	r0, r3
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	fff0c01c 	.word	0xfff0c01c

08002514 <LL_GPIO_SetPinMode>:
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	60f8      	str	r0, [r7, #12]
 800251c:	60b9      	str	r1, [r7, #8]
 800251e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	6819      	ldr	r1, [r3, #0]
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	fb03 f203 	mul.w	r2, r3, r3
 800252a:	4613      	mov	r3, r2
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	4413      	add	r3, r2
 8002530:	43db      	mvns	r3, r3
 8002532:	ea01 0203 	and.w	r2, r1, r3
 8002536:	68bb      	ldr	r3, [r7, #8]
 8002538:	fb03 f303 	mul.w	r3, r3, r3
 800253c:	6879      	ldr	r1, [r7, #4]
 800253e:	fb01 f303 	mul.w	r3, r1, r3
 8002542:	431a      	orrs	r2, r3
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	601a      	str	r2, [r3, #0]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr

08002554 <LL_GPIO_SetPinOutputType>:
{
 8002554:	b480      	push	{r7}
 8002556:	b085      	sub	sp, #20
 8002558:	af00      	add	r7, sp, #0
 800255a:	60f8      	str	r0, [r7, #12]
 800255c:	60b9      	str	r1, [r7, #8]
 800255e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	43db      	mvns	r3, r3
 8002568:	401a      	ands	r2, r3
 800256a:	68bb      	ldr	r3, [r7, #8]
 800256c:	6879      	ldr	r1, [r7, #4]
 800256e:	fb01 f303 	mul.w	r3, r1, r3
 8002572:	431a      	orrs	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	605a      	str	r2, [r3, #4]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr

08002584 <LL_GPIO_SetPinSpeed>:
{
 8002584:	b480      	push	{r7}
 8002586:	b085      	sub	sp, #20
 8002588:	af00      	add	r7, sp, #0
 800258a:	60f8      	str	r0, [r7, #12]
 800258c:	60b9      	str	r1, [r7, #8]
 800258e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	6899      	ldr	r1, [r3, #8]
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	fb03 f203 	mul.w	r2, r3, r3
 800259a:	4613      	mov	r3, r2
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4413      	add	r3, r2
 80025a0:	43db      	mvns	r3, r3
 80025a2:	ea01 0203 	and.w	r2, r1, r3
 80025a6:	68bb      	ldr	r3, [r7, #8]
 80025a8:	fb03 f303 	mul.w	r3, r3, r3
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	fb01 f303 	mul.w	r3, r1, r3
 80025b2:	431a      	orrs	r2, r3
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	609a      	str	r2, [r3, #8]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr

080025c4 <LL_GPIO_SetPinPull>:
{
 80025c4:	b480      	push	{r7}
 80025c6:	b085      	sub	sp, #20
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	60b9      	str	r1, [r7, #8]
 80025ce:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	68d9      	ldr	r1, [r3, #12]
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	fb03 f203 	mul.w	r2, r3, r3
 80025da:	4613      	mov	r3, r2
 80025dc:	005b      	lsls	r3, r3, #1
 80025de:	4413      	add	r3, r2
 80025e0:	43db      	mvns	r3, r3
 80025e2:	ea01 0203 	and.w	r2, r1, r3
 80025e6:	68bb      	ldr	r3, [r7, #8]
 80025e8:	fb03 f303 	mul.w	r3, r3, r3
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	431a      	orrs	r2, r3
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	60da      	str	r2, [r3, #12]
}
 80025f8:	bf00      	nop
 80025fa:	3714      	adds	r7, #20
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <LL_GPIO_SetAFPin_0_7>:
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	6a19      	ldr	r1, [r3, #32]
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	fb03 f303 	mul.w	r3, r3, r3
 800261a:	68ba      	ldr	r2, [r7, #8]
 800261c:	fb02 f303 	mul.w	r3, r2, r3
 8002620:	68ba      	ldr	r2, [r7, #8]
 8002622:	fb03 f202 	mul.w	r2, r3, r2
 8002626:	4613      	mov	r3, r2
 8002628:	011b      	lsls	r3, r3, #4
 800262a:	1a9b      	subs	r3, r3, r2
 800262c:	43db      	mvns	r3, r3
 800262e:	ea01 0203 	and.w	r2, r1, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	fb03 f303 	mul.w	r3, r3, r3
 8002638:	68b9      	ldr	r1, [r7, #8]
 800263a:	fb01 f303 	mul.w	r3, r1, r3
 800263e:	68b9      	ldr	r1, [r7, #8]
 8002640:	fb01 f303 	mul.w	r3, r1, r3
 8002644:	6879      	ldr	r1, [r7, #4]
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	431a      	orrs	r2, r3
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	621a      	str	r2, [r3, #32]
}
 8002650:	bf00      	nop
 8002652:	3714      	adds	r7, #20
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <LL_GPIO_SetAFPin_8_15>:
{
 800265c:	b480      	push	{r7}
 800265e:	b085      	sub	sp, #20
 8002660:	af00      	add	r7, sp, #0
 8002662:	60f8      	str	r0, [r7, #12]
 8002664:	60b9      	str	r1, [r7, #8]
 8002666:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	0a1b      	lsrs	r3, r3, #8
 8002670:	68ba      	ldr	r2, [r7, #8]
 8002672:	0a12      	lsrs	r2, r2, #8
 8002674:	fb02 f303 	mul.w	r3, r2, r3
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	0a12      	lsrs	r2, r2, #8
 800267c:	fb02 f303 	mul.w	r3, r2, r3
 8002680:	68ba      	ldr	r2, [r7, #8]
 8002682:	0a12      	lsrs	r2, r2, #8
 8002684:	fb03 f202 	mul.w	r2, r3, r2
 8002688:	4613      	mov	r3, r2
 800268a:	011b      	lsls	r3, r3, #4
 800268c:	1a9b      	subs	r3, r3, r2
 800268e:	43db      	mvns	r3, r3
 8002690:	ea01 0203 	and.w	r2, r1, r3
 8002694:	68bb      	ldr	r3, [r7, #8]
 8002696:	0a1b      	lsrs	r3, r3, #8
 8002698:	68b9      	ldr	r1, [r7, #8]
 800269a:	0a09      	lsrs	r1, r1, #8
 800269c:	fb01 f303 	mul.w	r3, r1, r3
 80026a0:	68b9      	ldr	r1, [r7, #8]
 80026a2:	0a09      	lsrs	r1, r1, #8
 80026a4:	fb01 f303 	mul.w	r3, r1, r3
 80026a8:	68b9      	ldr	r1, [r7, #8]
 80026aa:	0a09      	lsrs	r1, r1, #8
 80026ac:	fb01 f303 	mul.w	r3, r1, r3
 80026b0:	6879      	ldr	r1, [r7, #4]
 80026b2:	fb01 f303 	mul.w	r3, r1, r3
 80026b6:	431a      	orrs	r2, r3
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	625a      	str	r2, [r3, #36]	; 0x24
}
 80026bc:	bf00      	nop
 80026be:	3714      	adds	r7, #20
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b088      	sub	sp, #32
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d8:	693b      	ldr	r3, [r7, #16]
 80026da:	fa93 f3a3 	rbit	r3, r3
 80026de:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80026e4:	697b      	ldr	r3, [r7, #20]
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d101      	bne.n	80026ee <LL_GPIO_Init+0x26>
  {
    return 32U;
 80026ea:	2320      	movs	r3, #32
 80026ec:	e003      	b.n	80026f6 <LL_GPIO_Init+0x2e>
  }
  return __builtin_clz(value);
 80026ee:	697b      	ldr	r3, [r7, #20]
 80026f0:	fab3 f383 	clz	r3, r3
 80026f4:	b2db      	uxtb	r3, r3
 80026f6:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80026f8:	e048      	b.n	800278c <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	681a      	ldr	r2, [r3, #0]
 80026fe:	2101      	movs	r1, #1
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	fa01 f303 	lsl.w	r3, r1, r3
 8002706:	4013      	ands	r3, r2
 8002708:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 800270a:	69bb      	ldr	r3, [r7, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d03a      	beq.n	8002786 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	2b01      	cmp	r3, #1
 8002716:	d003      	beq.n	8002720 <LL_GPIO_Init+0x58>
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	2b02      	cmp	r3, #2
 800271e:	d10e      	bne.n	800273e <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	461a      	mov	r2, r3
 8002726:	69b9      	ldr	r1, [r7, #24]
 8002728:	6878      	ldr	r0, [r7, #4]
 800272a:	f7ff ff2b 	bl	8002584 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	6819      	ldr	r1, [r3, #0]
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	461a      	mov	r2, r3
 8002738:	6878      	ldr	r0, [r7, #4]
 800273a:	f7ff ff0b 	bl	8002554 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	691b      	ldr	r3, [r3, #16]
 8002742:	461a      	mov	r2, r3
 8002744:	69b9      	ldr	r1, [r7, #24]
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f7ff ff3c 	bl	80025c4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800274c:	683b      	ldr	r3, [r7, #0]
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d111      	bne.n	8002778 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002754:	69bb      	ldr	r3, [r7, #24]
 8002756:	2bff      	cmp	r3, #255	; 0xff
 8002758:	d807      	bhi.n	800276a <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	695b      	ldr	r3, [r3, #20]
 800275e:	461a      	mov	r2, r3
 8002760:	69b9      	ldr	r1, [r7, #24]
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f7ff ff4e 	bl	8002604 <LL_GPIO_SetAFPin_0_7>
 8002768:	e006      	b.n	8002778 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800276a:	683b      	ldr	r3, [r7, #0]
 800276c:	695b      	ldr	r3, [r3, #20]
 800276e:	461a      	mov	r2, r3
 8002770:	69b9      	ldr	r1, [r7, #24]
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f7ff ff72 	bl	800265c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	685b      	ldr	r3, [r3, #4]
 800277c:	461a      	mov	r2, r3
 800277e:	69b9      	ldr	r1, [r7, #24]
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f7ff fec7 	bl	8002514 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002786:	69fb      	ldr	r3, [r7, #28]
 8002788:	3301      	adds	r3, #1
 800278a:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 800278c:	683b      	ldr	r3, [r7, #0]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	fa22 f303 	lsr.w	r3, r2, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d1af      	bne.n	80026fa <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	3720      	adds	r7, #32
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bd80      	pop	{r7, pc}

080027a4 <LL_TIM_SetPrescaler>:
{
 80027a4:	b480      	push	{r7}
 80027a6:	b083      	sub	sp, #12
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
 80027ac:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80027b4:	bf00      	nop
 80027b6:	370c      	adds	r7, #12
 80027b8:	46bd      	mov	sp, r7
 80027ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027be:	4770      	bx	lr

080027c0 <LL_TIM_SetAutoReload>:
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_TIM_SetRepetitionCounter>:
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	683a      	ldr	r2, [r7, #0]
 80027ea:	631a      	str	r2, [r3, #48]	; 0x30
}
 80027ec:	bf00      	nop
 80027ee:	370c      	adds	r7, #12
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <LL_TIM_OC_SetCompareCH1>:
{
 80027f8:	b480      	push	{r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	683a      	ldr	r2, [r7, #0]
 8002806:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002808:	bf00      	nop
 800280a:	370c      	adds	r7, #12
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <LL_TIM_OC_SetCompareCH2>:
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	683a      	ldr	r2, [r7, #0]
 8002822:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002824:	bf00      	nop
 8002826:	370c      	adds	r7, #12
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <LL_TIM_OC_SetCompareCH3>:
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
 8002838:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	683a      	ldr	r2, [r7, #0]
 800283e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8002840:	bf00      	nop
 8002842:	370c      	adds	r7, #12
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr

0800284c <LL_TIM_OC_SetCompareCH4>:
{
 800284c:	b480      	push	{r7}
 800284e:	b083      	sub	sp, #12
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
 8002854:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	683a      	ldr	r2, [r7, #0]
 800285a:	641a      	str	r2, [r3, #64]	; 0x40
}
 800285c:	bf00      	nop
 800285e:	370c      	adds	r7, #12
 8002860:	46bd      	mov	sp, r7
 8002862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002866:	4770      	bx	lr

08002868 <LL_TIM_OC_SetCompareCH5>:
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	683a      	ldr	r2, [r7, #0]
 800287a:	659a      	str	r2, [r3, #88]	; 0x58
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <LL_TIM_OC_SetCompareCH6>:
{
 8002888:	b480      	push	{r7}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
 8002890:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	683a      	ldr	r2, [r7, #0]
 8002896:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002898:	bf00      	nop
 800289a:	370c      	adds	r7, #12
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr

080028a4 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b083      	sub	sp, #12
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	695b      	ldr	r3, [r3, #20]
 80028b0:	f043 0201 	orr.w	r2, r3, #1
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	615a      	str	r2, [r3, #20]
}
 80028b8:	bf00      	nop
 80028ba:	370c      	adds	r7, #12
 80028bc:	46bd      	mov	sp, r7
 80028be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c2:	4770      	bx	lr

080028c4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b084      	sub	sp, #16
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
 80028cc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	4a3d      	ldr	r2, [pc, #244]	; (80029cc <LL_TIM_Init+0x108>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d013      	beq.n	8002904 <LL_TIM_Init+0x40>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028e2:	d00f      	beq.n	8002904 <LL_TIM_Init+0x40>
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	4a3a      	ldr	r2, [pc, #232]	; (80029d0 <LL_TIM_Init+0x10c>)
 80028e8:	4293      	cmp	r3, r2
 80028ea:	d00b      	beq.n	8002904 <LL_TIM_Init+0x40>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4a39      	ldr	r2, [pc, #228]	; (80029d4 <LL_TIM_Init+0x110>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d007      	beq.n	8002904 <LL_TIM_Init+0x40>
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a38      	ldr	r2, [pc, #224]	; (80029d8 <LL_TIM_Init+0x114>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d003      	beq.n	8002904 <LL_TIM_Init+0x40>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	4a37      	ldr	r2, [pc, #220]	; (80029dc <LL_TIM_Init+0x118>)
 8002900:	4293      	cmp	r3, r2
 8002902:	d106      	bne.n	8002912 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	685b      	ldr	r3, [r3, #4]
 800290e:	4313      	orrs	r3, r2
 8002910:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a2d      	ldr	r2, [pc, #180]	; (80029cc <LL_TIM_Init+0x108>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d01f      	beq.n	800295a <LL_TIM_Init+0x96>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002920:	d01b      	beq.n	800295a <LL_TIM_Init+0x96>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a2a      	ldr	r2, [pc, #168]	; (80029d0 <LL_TIM_Init+0x10c>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d017      	beq.n	800295a <LL_TIM_Init+0x96>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a29      	ldr	r2, [pc, #164]	; (80029d4 <LL_TIM_Init+0x110>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d013      	beq.n	800295a <LL_TIM_Init+0x96>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a28      	ldr	r2, [pc, #160]	; (80029d8 <LL_TIM_Init+0x114>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d00f      	beq.n	800295a <LL_TIM_Init+0x96>
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	4a27      	ldr	r2, [pc, #156]	; (80029dc <LL_TIM_Init+0x118>)
 800293e:	4293      	cmp	r3, r2
 8002940:	d00b      	beq.n	800295a <LL_TIM_Init+0x96>
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	4a26      	ldr	r2, [pc, #152]	; (80029e0 <LL_TIM_Init+0x11c>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d007      	beq.n	800295a <LL_TIM_Init+0x96>
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	4a25      	ldr	r2, [pc, #148]	; (80029e4 <LL_TIM_Init+0x120>)
 800294e:	4293      	cmp	r3, r2
 8002950:	d003      	beq.n	800295a <LL_TIM_Init+0x96>
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	4a24      	ldr	r2, [pc, #144]	; (80029e8 <LL_TIM_Init+0x124>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d106      	bne.n	8002968 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800295a:	68fb      	ldr	r3, [r7, #12]
 800295c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	68db      	ldr	r3, [r3, #12]
 8002964:	4313      	orrs	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	68fa      	ldr	r2, [r7, #12]
 800296c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800296e:	683b      	ldr	r3, [r7, #0]
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	4619      	mov	r1, r3
 8002974:	6878      	ldr	r0, [r7, #4]
 8002976:	f7ff ff23 	bl	80027c0 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	881b      	ldrh	r3, [r3, #0]
 800297e:	4619      	mov	r1, r3
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff ff0f 	bl	80027a4 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a10      	ldr	r2, [pc, #64]	; (80029cc <LL_TIM_Init+0x108>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00f      	beq.n	80029ae <LL_TIM_Init+0xea>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a12      	ldr	r2, [pc, #72]	; (80029dc <LL_TIM_Init+0x118>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00b      	beq.n	80029ae <LL_TIM_Init+0xea>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a11      	ldr	r2, [pc, #68]	; (80029e0 <LL_TIM_Init+0x11c>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d007      	beq.n	80029ae <LL_TIM_Init+0xea>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a10      	ldr	r2, [pc, #64]	; (80029e4 <LL_TIM_Init+0x120>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d003      	beq.n	80029ae <LL_TIM_Init+0xea>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a0f      	ldr	r2, [pc, #60]	; (80029e8 <LL_TIM_Init+0x124>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d105      	bne.n	80029ba <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	691b      	ldr	r3, [r3, #16]
 80029b2:	4619      	mov	r1, r3
 80029b4:	6878      	ldr	r0, [r7, #4]
 80029b6:	f7ff ff11 	bl	80027dc <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80029ba:	6878      	ldr	r0, [r7, #4]
 80029bc:	f7ff ff72 	bl	80028a4 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80029c0:	2300      	movs	r3, #0
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
 80029ca:	bf00      	nop
 80029cc:	40010000 	.word	0x40010000
 80029d0:	40000400 	.word	0x40000400
 80029d4:	40000800 	.word	0x40000800
 80029d8:	40000c00 	.word	0x40000c00
 80029dc:	40010400 	.word	0x40010400
 80029e0:	40014000 	.word	0x40014000
 80029e4:	40014400 	.word	0x40014400
 80029e8:	40014800 	.word	0x40014800

080029ec <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80029ec:	b580      	push	{r7, lr}
 80029ee:	b086      	sub	sp, #24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80029f8:	2301      	movs	r3, #1
 80029fa:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80029fc:	68bb      	ldr	r3, [r7, #8]
 80029fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a02:	d045      	beq.n	8002a90 <LL_TIM_OC_Init+0xa4>
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a0a:	d848      	bhi.n	8002a9e <LL_TIM_OC_Init+0xb2>
 8002a0c:	68bb      	ldr	r3, [r7, #8]
 8002a0e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a12:	d036      	beq.n	8002a82 <LL_TIM_OC_Init+0x96>
 8002a14:	68bb      	ldr	r3, [r7, #8]
 8002a16:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002a1a:	d840      	bhi.n	8002a9e <LL_TIM_OC_Init+0xb2>
 8002a1c:	68bb      	ldr	r3, [r7, #8]
 8002a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a22:	d027      	beq.n	8002a74 <LL_TIM_OC_Init+0x88>
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a2a:	d838      	bhi.n	8002a9e <LL_TIM_OC_Init+0xb2>
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a32:	d018      	beq.n	8002a66 <LL_TIM_OC_Init+0x7a>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a3a:	d830      	bhi.n	8002a9e <LL_TIM_OC_Init+0xb2>
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d003      	beq.n	8002a4a <LL_TIM_OC_Init+0x5e>
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b10      	cmp	r3, #16
 8002a46:	d007      	beq.n	8002a58 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002a48:	e029      	b.n	8002a9e <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002a4a:	6879      	ldr	r1, [r7, #4]
 8002a4c:	68f8      	ldr	r0, [r7, #12]
 8002a4e:	f000 f897 	bl	8002b80 <OC1Config>
 8002a52:	4603      	mov	r3, r0
 8002a54:	75fb      	strb	r3, [r7, #23]
      break;
 8002a56:	e023      	b.n	8002aa0 <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002a58:	6879      	ldr	r1, [r7, #4]
 8002a5a:	68f8      	ldr	r0, [r7, #12]
 8002a5c:	f000 f910 	bl	8002c80 <OC2Config>
 8002a60:	4603      	mov	r3, r0
 8002a62:	75fb      	strb	r3, [r7, #23]
      break;
 8002a64:	e01c      	b.n	8002aa0 <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002a66:	6879      	ldr	r1, [r7, #4]
 8002a68:	68f8      	ldr	r0, [r7, #12]
 8002a6a:	f000 f98d 	bl	8002d88 <OC3Config>
 8002a6e:	4603      	mov	r3, r0
 8002a70:	75fb      	strb	r3, [r7, #23]
      break;
 8002a72:	e015      	b.n	8002aa0 <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002a74:	6879      	ldr	r1, [r7, #4]
 8002a76:	68f8      	ldr	r0, [r7, #12]
 8002a78:	f000 fa0a 	bl	8002e90 <OC4Config>
 8002a7c:	4603      	mov	r3, r0
 8002a7e:	75fb      	strb	r3, [r7, #23]
      break;
 8002a80:	e00e      	b.n	8002aa0 <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	68f8      	ldr	r0, [r7, #12]
 8002a86:	f000 fa6f 	bl	8002f68 <OC5Config>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	75fb      	strb	r3, [r7, #23]
      break;
 8002a8e:	e007      	b.n	8002aa0 <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8002a90:	6879      	ldr	r1, [r7, #4]
 8002a92:	68f8      	ldr	r0, [r7, #12]
 8002a94:	f000 facc 	bl	8003030 <OC6Config>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	75fb      	strb	r3, [r7, #23]
      break;
 8002a9c:	e000      	b.n	8002aa0 <LL_TIM_OC_Init+0xb4>
      break;
 8002a9e:	bf00      	nop
  }

  return result;
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	3718      	adds	r7, #24
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}
	...

08002aac <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002aac:	b480      	push	{r7}
 8002aae:	b085      	sub	sp, #20
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
 8002ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ac0:	683a      	ldr	r2, [r7, #0]
 8002ac2:	7b12      	ldrb	r2, [r2, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4313      	orrs	r3, r2
 8002af0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002af8:	683a      	ldr	r2, [r7, #0]
 8002afa:	89d2      	ldrh	r2, [r2, #14]
 8002afc:	4313      	orrs	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b06:	683b      	ldr	r3, [r7, #0]
 8002b08:	691b      	ldr	r3, [r3, #16]
 8002b0a:	4313      	orrs	r3, r2
 8002b0c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	4313      	orrs	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8002b22:	683b      	ldr	r3, [r7, #0]
 8002b24:	695b      	ldr	r3, [r3, #20]
 8002b26:	4313      	orrs	r3, r2
 8002b28:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
#endif /*TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	4a12      	ldr	r2, [pc, #72]	; (8002b78 <LL_TIM_BDTR_Init+0xcc>)
 8002b2e:	4293      	cmp	r3, r2
 8002b30:	d003      	beq.n	8002b3a <LL_TIM_BDTR_Init+0x8e>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4a11      	ldr	r2, [pc, #68]	; (8002b7c <LL_TIM_BDTR_Init+0xd0>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	d114      	bne.n	8002b64 <LL_TIM_BDTR_Init+0xb8>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));
#endif /*TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	6a1b      	ldr	r3, [r3, #32]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	699b      	ldr	r3, [r3, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	69db      	ldr	r3, [r3, #28]
 8002b60:	4313      	orrs	r3, r2
 8002b62:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
#endif /*TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68fa      	ldr	r2, [r7, #12]
 8002b68:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002b6a:	2300      	movs	r3, #0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	3714      	adds	r7, #20
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr
 8002b78:	40010000 	.word	0x40010000
 8002b7c:	40010400 	.word	0x40010400

08002b80 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b086      	sub	sp, #24
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6a1b      	ldr	r3, [r3, #32]
 8002b8e:	f023 0201 	bic.w	r2, r3, #1
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6a1b      	ldr	r3, [r3, #32]
 8002b9a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685b      	ldr	r3, [r3, #4]
 8002ba0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	699b      	ldr	r3, [r3, #24]
 8002ba6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0303 	bic.w	r3, r3, #3
 8002bae:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 8002bb0:	68fa      	ldr	r2, [r7, #12]
 8002bb2:	4b2d      	ldr	r3, [pc, #180]	; (8002c68 <OC1Config+0xe8>)
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	683a      	ldr	r2, [r7, #0]
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	4313      	orrs	r3, r2
 8002bbc:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	f023 0202 	bic.w	r2, r3, #2
 8002bc4:	683b      	ldr	r3, [r7, #0]
 8002bc6:	691b      	ldr	r3, [r3, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	f023 0201 	bic.w	r2, r3, #1
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	4313      	orrs	r3, r2
 8002bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	4a23      	ldr	r2, [pc, #140]	; (8002c6c <OC1Config+0xec>)
 8002bde:	4293      	cmp	r3, r2
 8002be0:	d00f      	beq.n	8002c02 <OC1Config+0x82>
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	4a22      	ldr	r2, [pc, #136]	; (8002c70 <OC1Config+0xf0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d00b      	beq.n	8002c02 <OC1Config+0x82>
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	4a21      	ldr	r2, [pc, #132]	; (8002c74 <OC1Config+0xf4>)
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d007      	beq.n	8002c02 <OC1Config+0x82>
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	4a20      	ldr	r2, [pc, #128]	; (8002c78 <OC1Config+0xf8>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d003      	beq.n	8002c02 <OC1Config+0x82>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a1f      	ldr	r2, [pc, #124]	; (8002c7c <OC1Config+0xfc>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d11e      	bne.n	8002c40 <OC1Config+0xc0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8002c02:	697b      	ldr	r3, [r7, #20]
 8002c04:	f023 0208 	bic.w	r2, r3, #8
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	695b      	ldr	r3, [r3, #20]
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	4313      	orrs	r3, r2
 8002c10:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	f023 0204 	bic.w	r2, r3, #4
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	009b      	lsls	r3, r3, #2
 8002c1e:	4313      	orrs	r3, r2
 8002c20:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c28:	683b      	ldr	r3, [r7, #0]
 8002c2a:	699b      	ldr	r3, [r3, #24]
 8002c2c:	4313      	orrs	r3, r2
 8002c2e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	69db      	ldr	r3, [r3, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	4313      	orrs	r3, r2
 8002c3e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	693a      	ldr	r2, [r7, #16]
 8002c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	68fa      	ldr	r2, [r7, #12]
 8002c4a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	4619      	mov	r1, r3
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7ff fdd0 	bl	80027f8 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	697a      	ldr	r2, [r7, #20]
 8002c5c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c5e:	2300      	movs	r3, #0
}
 8002c60:	4618      	mov	r0, r3
 8002c62:	3718      	adds	r7, #24
 8002c64:	46bd      	mov	sp, r7
 8002c66:	bd80      	pop	{r7, pc}
 8002c68:	fffeff8f 	.word	0xfffeff8f
 8002c6c:	40010000 	.word	0x40010000
 8002c70:	40010400 	.word	0x40010400
 8002c74:	40014000 	.word	0x40014000
 8002c78:	40014400 	.word	0x40014400
 8002c7c:	40014800 	.word	0x40014800

08002c80 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b086      	sub	sp, #24
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6a1b      	ldr	r3, [r3, #32]
 8002c8e:	f023 0210 	bic.w	r2, r3, #16
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a1b      	ldr	r3, [r3, #32]
 8002c9a:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	685b      	ldr	r3, [r3, #4]
 8002ca0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 8002cb0:	68fa      	ldr	r2, [r7, #12]
 8002cb2:	4b2f      	ldr	r3, [pc, #188]	; (8002d70 <OC2Config+0xf0>)
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	683a      	ldr	r2, [r7, #0]
 8002cb8:	6812      	ldr	r2, [r2, #0]
 8002cba:	0212      	lsls	r2, r2, #8
 8002cbc:	4313      	orrs	r3, r2
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8002cc0:	697b      	ldr	r3, [r7, #20]
 8002cc2:	f023 0220 	bic.w	r2, r3, #32
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	011b      	lsls	r3, r3, #4
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8002cd0:	697b      	ldr	r3, [r7, #20]
 8002cd2:	f023 0210 	bic.w	r2, r3, #16
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	011b      	lsls	r3, r3, #4
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a24      	ldr	r2, [pc, #144]	; (8002d74 <OC2Config+0xf4>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d00f      	beq.n	8002d08 <OC2Config+0x88>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a23      	ldr	r2, [pc, #140]	; (8002d78 <OC2Config+0xf8>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00b      	beq.n	8002d08 <OC2Config+0x88>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a22      	ldr	r2, [pc, #136]	; (8002d7c <OC2Config+0xfc>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d007      	beq.n	8002d08 <OC2Config+0x88>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a21      	ldr	r2, [pc, #132]	; (8002d80 <OC2Config+0x100>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d003      	beq.n	8002d08 <OC2Config+0x88>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a20      	ldr	r2, [pc, #128]	; (8002d84 <OC2Config+0x104>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d11f      	bne.n	8002d48 <OC2Config+0xc8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8002d08:	697b      	ldr	r3, [r7, #20]
 8002d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	695b      	ldr	r3, [r3, #20]
 8002d12:	019b      	lsls	r3, r3, #6
 8002d14:	4313      	orrs	r3, r2
 8002d16:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8002d18:	697b      	ldr	r3, [r7, #20]
 8002d1a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	689b      	ldr	r3, [r3, #8]
 8002d22:	019b      	lsls	r3, r3, #6
 8002d24:	4313      	orrs	r3, r2
 8002d26:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002d28:	693b      	ldr	r3, [r7, #16]
 8002d2a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	699b      	ldr	r3, [r3, #24]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002d38:	693b      	ldr	r3, [r7, #16]
 8002d3a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	69db      	ldr	r3, [r3, #28]
 8002d42:	00db      	lsls	r3, r3, #3
 8002d44:	4313      	orrs	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	693a      	ldr	r2, [r7, #16]
 8002d4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	68fa      	ldr	r2, [r7, #12]
 8002d52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	68db      	ldr	r3, [r3, #12]
 8002d58:	4619      	mov	r1, r3
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f7ff fd5a 	bl	8002814 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	697a      	ldr	r2, [r7, #20]
 8002d64:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002d66:	2300      	movs	r3, #0
}
 8002d68:	4618      	mov	r0, r3
 8002d6a:	3718      	adds	r7, #24
 8002d6c:	46bd      	mov	sp, r7
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	feff8fff 	.word	0xfeff8fff
 8002d74:	40010000 	.word	0x40010000
 8002d78:	40010400 	.word	0x40010400
 8002d7c:	40014000 	.word	0x40014000
 8002d80:	40014400 	.word	0x40014400
 8002d84:	40014800 	.word	0x40014800

08002d88 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b086      	sub	sp, #24
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
 8002d90:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6a1b      	ldr	r3, [r3, #32]
 8002d96:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	6a1b      	ldr	r3, [r3, #32]
 8002da2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	69db      	ldr	r3, [r3, #28]
 8002dae:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	f023 0303 	bic.w	r3, r3, #3
 8002db6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002db8:	68fa      	ldr	r2, [r7, #12]
 8002dba:	4b2f      	ldr	r3, [pc, #188]	; (8002e78 <OC3Config+0xf0>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	683a      	ldr	r2, [r7, #0]
 8002dc0:	6812      	ldr	r2, [r2, #0]
 8002dc2:	4313      	orrs	r3, r2
 8002dc4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002dc6:	697b      	ldr	r3, [r7, #20]
 8002dc8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	021b      	lsls	r3, r3, #8
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002dd6:	697b      	ldr	r3, [r7, #20]
 8002dd8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	021b      	lsls	r3, r3, #8
 8002de2:	4313      	orrs	r3, r2
 8002de4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	4a24      	ldr	r2, [pc, #144]	; (8002e7c <OC3Config+0xf4>)
 8002dea:	4293      	cmp	r3, r2
 8002dec:	d00f      	beq.n	8002e0e <OC3Config+0x86>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	4a23      	ldr	r2, [pc, #140]	; (8002e80 <OC3Config+0xf8>)
 8002df2:	4293      	cmp	r3, r2
 8002df4:	d00b      	beq.n	8002e0e <OC3Config+0x86>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a22      	ldr	r2, [pc, #136]	; (8002e84 <OC3Config+0xfc>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d007      	beq.n	8002e0e <OC3Config+0x86>
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4a21      	ldr	r2, [pc, #132]	; (8002e88 <OC3Config+0x100>)
 8002e02:	4293      	cmp	r3, r2
 8002e04:	d003      	beq.n	8002e0e <OC3Config+0x86>
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	4a20      	ldr	r2, [pc, #128]	; (8002e8c <OC3Config+0x104>)
 8002e0a:	4293      	cmp	r3, r2
 8002e0c:	d11f      	bne.n	8002e4e <OC3Config+0xc6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	695b      	ldr	r3, [r3, #20]
 8002e18:	029b      	lsls	r3, r3, #10
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	029b      	lsls	r3, r3, #10
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	699b      	ldr	r3, [r3, #24]
 8002e38:	011b      	lsls	r3, r3, #4
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	69db      	ldr	r3, [r3, #28]
 8002e48:	015b      	lsls	r3, r3, #5
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	4619      	mov	r1, r3
 8002e60:	6878      	ldr	r0, [r7, #4]
 8002e62:	f7ff fce5 	bl	8002830 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	697a      	ldr	r2, [r7, #20]
 8002e6a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002e6c:	2300      	movs	r3, #0
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	fffeff8f 	.word	0xfffeff8f
 8002e7c:	40010000 	.word	0x40010000
 8002e80:	40010400 	.word	0x40010400
 8002e84:	40014000 	.word	0x40014000
 8002e88:	40014400 	.word	0x40014400
 8002e8c:	40014800 	.word	0x40014800

08002e90 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	b086      	sub	sp, #24
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6078      	str	r0, [r7, #4]
 8002e98:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6a1b      	ldr	r3, [r3, #32]
 8002e9e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	6a1b      	ldr	r3, [r3, #32]
 8002eaa:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	69db      	ldr	r3, [r3, #28]
 8002eb6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ebe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002ec0:	68fa      	ldr	r2, [r7, #12]
 8002ec2:	4b23      	ldr	r3, [pc, #140]	; (8002f50 <OC4Config+0xc0>)
 8002ec4:	4013      	ands	r3, r2
 8002ec6:	683a      	ldr	r2, [r7, #0]
 8002ec8:	6812      	ldr	r2, [r2, #0]
 8002eca:	0212      	lsls	r2, r2, #8
 8002ecc:	4313      	orrs	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002ed6:	683b      	ldr	r3, [r7, #0]
 8002ed8:	691b      	ldr	r3, [r3, #16]
 8002eda:	031b      	lsls	r3, r3, #12
 8002edc:	4313      	orrs	r3, r2
 8002ede:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	685b      	ldr	r3, [r3, #4]
 8002eea:	031b      	lsls	r3, r3, #12
 8002eec:	4313      	orrs	r3, r2
 8002eee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	4a18      	ldr	r2, [pc, #96]	; (8002f54 <OC4Config+0xc4>)
 8002ef4:	4293      	cmp	r3, r2
 8002ef6:	d00f      	beq.n	8002f18 <OC4Config+0x88>
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	4a17      	ldr	r2, [pc, #92]	; (8002f58 <OC4Config+0xc8>)
 8002efc:	4293      	cmp	r3, r2
 8002efe:	d00b      	beq.n	8002f18 <OC4Config+0x88>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	4a16      	ldr	r2, [pc, #88]	; (8002f5c <OC4Config+0xcc>)
 8002f04:	4293      	cmp	r3, r2
 8002f06:	d007      	beq.n	8002f18 <OC4Config+0x88>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a15      	ldr	r2, [pc, #84]	; (8002f60 <OC4Config+0xd0>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d003      	beq.n	8002f18 <OC4Config+0x88>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a14      	ldr	r2, [pc, #80]	; (8002f64 <OC4Config+0xd4>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d107      	bne.n	8002f28 <OC4Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	699b      	ldr	r3, [r3, #24]
 8002f22:	019b      	lsls	r3, r3, #6
 8002f24:	4313      	orrs	r3, r2
 8002f26:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	697a      	ldr	r2, [r7, #20]
 8002f2c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	68fa      	ldr	r2, [r7, #12]
 8002f32:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	4619      	mov	r1, r3
 8002f3a:	6878      	ldr	r0, [r7, #4]
 8002f3c:	f7ff fc86 	bl	800284c <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	693a      	ldr	r2, [r7, #16]
 8002f44:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002f46:	2300      	movs	r3, #0
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	3718      	adds	r7, #24
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	bd80      	pop	{r7, pc}
 8002f50:	feff8fff 	.word	0xfeff8fff
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40010400 	.word	0x40010400
 8002f5c:	40014000 	.word	0x40014000
 8002f60:	40014400 	.word	0x40014400
 8002f64:	40014800 	.word	0x40014800

08002f68 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b084      	sub	sp, #16
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6a1b      	ldr	r3, [r3, #32]
 8002f76:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6a1b      	ldr	r3, [r3, #32]
 8002f82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f88:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002f8a:	68ba      	ldr	r2, [r7, #8]
 8002f8c:	4b22      	ldr	r3, [pc, #136]	; (8003018 <OC5Config+0xb0>)
 8002f8e:	4013      	ands	r3, r2
 8002f90:	683a      	ldr	r2, [r7, #0]
 8002f92:	6812      	ldr	r2, [r2, #0]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	041b      	lsls	r3, r3, #16
 8002fa4:	4313      	orrs	r3, r2
 8002fa6:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fae:	683b      	ldr	r3, [r7, #0]
 8002fb0:	685b      	ldr	r3, [r3, #4]
 8002fb2:	041b      	lsls	r3, r3, #16
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	4a18      	ldr	r2, [pc, #96]	; (800301c <OC5Config+0xb4>)
 8002fbc:	4293      	cmp	r3, r2
 8002fbe:	d00f      	beq.n	8002fe0 <OC5Config+0x78>
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	4a17      	ldr	r2, [pc, #92]	; (8003020 <OC5Config+0xb8>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d00b      	beq.n	8002fe0 <OC5Config+0x78>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	4a16      	ldr	r2, [pc, #88]	; (8003024 <OC5Config+0xbc>)
 8002fcc:	4293      	cmp	r3, r2
 8002fce:	d007      	beq.n	8002fe0 <OC5Config+0x78>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a15      	ldr	r2, [pc, #84]	; (8003028 <OC5Config+0xc0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d003      	beq.n	8002fe0 <OC5Config+0x78>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a14      	ldr	r2, [pc, #80]	; (800302c <OC5Config+0xc4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d109      	bne.n	8002ff4 <OC5Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	021b      	lsls	r3, r3, #8
 8002fee:	431a      	orrs	r2, r3
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	68ba      	ldr	r2, [r7, #8]
 8002ff8:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	68db      	ldr	r3, [r3, #12]
 8002ffe:	4619      	mov	r1, r3
 8003000:	6878      	ldr	r0, [r7, #4]
 8003002:	f7ff fc31 	bl	8002868 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	68fa      	ldr	r2, [r7, #12]
 800300a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	fffeff8f 	.word	0xfffeff8f
 800301c:	40010000 	.word	0x40010000
 8003020:	40010400 	.word	0x40010400
 8003024:	40014000 	.word	0x40014000
 8003028:	40014400 	.word	0x40014400
 800302c:	40014800 	.word	0x40014800

08003030 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b084      	sub	sp, #16
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
 8003038:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a1b      	ldr	r3, [r3, #32]
 800303e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6a1b      	ldr	r3, [r3, #32]
 800304a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003050:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8003052:	68ba      	ldr	r2, [r7, #8]
 8003054:	4b22      	ldr	r3, [pc, #136]	; (80030e0 <OC6Config+0xb0>)
 8003056:	4013      	ands	r3, r2
 8003058:	683a      	ldr	r2, [r7, #0]
 800305a:	6812      	ldr	r2, [r2, #0]
 800305c:	0212      	lsls	r2, r2, #8
 800305e:	4313      	orrs	r3, r2
 8003060:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003068:	683b      	ldr	r3, [r7, #0]
 800306a:	691b      	ldr	r3, [r3, #16]
 800306c:	051b      	lsls	r3, r3, #20
 800306e:	4313      	orrs	r3, r2
 8003070:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	051b      	lsls	r3, r3, #20
 800307e:	4313      	orrs	r3, r2
 8003080:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a17      	ldr	r2, [pc, #92]	; (80030e4 <OC6Config+0xb4>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d00f      	beq.n	80030aa <OC6Config+0x7a>
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	4a16      	ldr	r2, [pc, #88]	; (80030e8 <OC6Config+0xb8>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d00b      	beq.n	80030aa <OC6Config+0x7a>
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	4a15      	ldr	r2, [pc, #84]	; (80030ec <OC6Config+0xbc>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d007      	beq.n	80030aa <OC6Config+0x7a>
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	4a14      	ldr	r2, [pc, #80]	; (80030f0 <OC6Config+0xc0>)
 800309e:	4293      	cmp	r3, r2
 80030a0:	d003      	beq.n	80030aa <OC6Config+0x7a>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	4a13      	ldr	r2, [pc, #76]	; (80030f4 <OC6Config+0xc4>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d109      	bne.n	80030be <OC6Config+0x8e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	029b      	lsls	r3, r3, #10
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	68ba      	ldr	r2, [r7, #8]
 80030c2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	68db      	ldr	r3, [r3, #12]
 80030c8:	4619      	mov	r1, r3
 80030ca:	6878      	ldr	r0, [r7, #4]
 80030cc:	f7ff fbdc 	bl	8002888 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	68fa      	ldr	r2, [r7, #12]
 80030d4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80030d6:	2300      	movs	r3, #0
}
 80030d8:	4618      	mov	r0, r3
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	feff8fff 	.word	0xfeff8fff
 80030e4:	40010000 	.word	0x40010000
 80030e8:	40010400 	.word	0x40010400
 80030ec:	40014000 	.word	0x40014000
 80030f0:	40014400 	.word	0x40014400
 80030f4:	40014800 	.word	0x40014800

080030f8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003102:	687a      	ldr	r2, [r7, #4]
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	fbb2 f3f3 	udiv	r3, r2, r3
 800310a:	4a07      	ldr	r2, [pc, #28]	; (8003128 <LL_InitTick+0x30>)
 800310c:	3b01      	subs	r3, #1
 800310e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003110:	4b05      	ldr	r3, [pc, #20]	; (8003128 <LL_InitTick+0x30>)
 8003112:	2200      	movs	r2, #0
 8003114:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003116:	4b04      	ldr	r3, [pc, #16]	; (8003128 <LL_InitTick+0x30>)
 8003118:	2205      	movs	r2, #5
 800311a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800311c:	bf00      	nop
 800311e:	370c      	adds	r7, #12
 8003120:	46bd      	mov	sp, r7
 8003122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003126:	4770      	bx	lr
 8003128:	e000e010 	.word	0xe000e010

0800312c <LL_Init1msTick>:
  *         @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
#endif /* DUAL_CORE */
void LL_Init1msTick(uint32_t CPU_Frequency)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b082      	sub	sp, #8
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(CPU_Frequency, 1000U);
 8003134:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003138:	6878      	ldr	r0, [r7, #4]
 800313a:	f7ff ffdd 	bl	80030f8 <LL_InitTick>
}
 800313e:	bf00      	nop
 8003140:	3708      	adds	r7, #8
 8003142:	46bd      	mov	sp, r7
 8003144:	bd80      	pop	{r7, pc}
	...

08003148 <LL_SetSystemCoreClock>:
  *         @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
#endif /* DUAL_CORE */
void LL_SetSystemCoreClock(uint32_t CPU_Frequency)
{
 8003148:	b480      	push	{r7}
 800314a:	b083      	sub	sp, #12
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = CPU_Frequency;
 8003150:	4a04      	ldr	r2, [pc, #16]	; (8003164 <LL_SetSystemCoreClock+0x1c>)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6013      	str	r3, [r2, #0]
}
 8003156:	bf00      	nop
 8003158:	370c      	adds	r7, #12
 800315a:	46bd      	mov	sp, r7
 800315c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003160:	4770      	bx	lr
 8003162:	bf00      	nop
 8003164:	24000000 	.word	0x24000000

08003168 <memset>:
 8003168:	4402      	add	r2, r0
 800316a:	4603      	mov	r3, r0
 800316c:	4293      	cmp	r3, r2
 800316e:	d100      	bne.n	8003172 <memset+0xa>
 8003170:	4770      	bx	lr
 8003172:	f803 1b01 	strb.w	r1, [r3], #1
 8003176:	e7f9      	b.n	800316c <memset+0x4>

08003178 <__libc_init_array>:
 8003178:	b570      	push	{r4, r5, r6, lr}
 800317a:	4d0d      	ldr	r5, [pc, #52]	; (80031b0 <__libc_init_array+0x38>)
 800317c:	4c0d      	ldr	r4, [pc, #52]	; (80031b4 <__libc_init_array+0x3c>)
 800317e:	1b64      	subs	r4, r4, r5
 8003180:	10a4      	asrs	r4, r4, #2
 8003182:	2600      	movs	r6, #0
 8003184:	42a6      	cmp	r6, r4
 8003186:	d109      	bne.n	800319c <__libc_init_array+0x24>
 8003188:	4d0b      	ldr	r5, [pc, #44]	; (80031b8 <__libc_init_array+0x40>)
 800318a:	4c0c      	ldr	r4, [pc, #48]	; (80031bc <__libc_init_array+0x44>)
 800318c:	f000 f818 	bl	80031c0 <_init>
 8003190:	1b64      	subs	r4, r4, r5
 8003192:	10a4      	asrs	r4, r4, #2
 8003194:	2600      	movs	r6, #0
 8003196:	42a6      	cmp	r6, r4
 8003198:	d105      	bne.n	80031a6 <__libc_init_array+0x2e>
 800319a:	bd70      	pop	{r4, r5, r6, pc}
 800319c:	f855 3b04 	ldr.w	r3, [r5], #4
 80031a0:	4798      	blx	r3
 80031a2:	3601      	adds	r6, #1
 80031a4:	e7ee      	b.n	8003184 <__libc_init_array+0xc>
 80031a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80031aa:	4798      	blx	r3
 80031ac:	3601      	adds	r6, #1
 80031ae:	e7f2      	b.n	8003196 <__libc_init_array+0x1e>
 80031b0:	080031f8 	.word	0x080031f8
 80031b4:	080031f8 	.word	0x080031f8
 80031b8:	080031f8 	.word	0x080031f8
 80031bc:	080031fc 	.word	0x080031fc

080031c0 <_init>:
 80031c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031c2:	bf00      	nop
 80031c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031c6:	bc08      	pop	{r3}
 80031c8:	469e      	mov	lr, r3
 80031ca:	4770      	bx	lr

080031cc <_fini>:
 80031cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031ce:	bf00      	nop
 80031d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80031d2:	bc08      	pop	{r3}
 80031d4:	469e      	mov	lr, r3
 80031d6:	4770      	bx	lr
