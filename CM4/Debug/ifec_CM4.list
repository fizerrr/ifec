
ifec_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000063cc  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08106664  08106664  00016664  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  081066dc  081066dc  000166dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  081066e4  081066e4  000166e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  081066e8  081066e8  000166e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000014  10000000  081066ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00000118  10000014  08106700  00020014  2**2
                  ALLOC
  8 ._user_heap_stack 00000604  1000012c  08106700  0002012c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 10 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 11 .debug_info   00013133  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 00002418  00000000  00000000  000331ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00000c00  00000000  00000000  000355d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00000938  00000000  00000000  000361d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  00039e1f  00000000  00000000  00036b10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   000123d0  00000000  00000000  0007092f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    0017e6bc  00000000  00000000  00082cff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_frame  0000310c  00000000  00000000  002013bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line_str 00000064  00000000  00000000  002044c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000014 	.word	0x10000014
 81002b4:	00000000 	.word	0x00000000
 81002b8:	0810664c 	.word	0x0810664c

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000018 	.word	0x10000018
 81002d4:	0810664c 	.word	0x0810664c

081002d8 <strlen>:
 81002d8:	4603      	mov	r3, r0
 81002da:	f813 2b01 	ldrb.w	r2, [r3], #1
 81002de:	2a00      	cmp	r2, #0
 81002e0:	d1fb      	bne.n	81002da <strlen+0x2>
 81002e2:	1a18      	subs	r0, r3, r0
 81002e4:	3801      	subs	r0, #1
 81002e6:	4770      	bx	lr

081002e8 <__aeabi_uldivmod>:
 81002e8:	b953      	cbnz	r3, 8100300 <__aeabi_uldivmod+0x18>
 81002ea:	b94a      	cbnz	r2, 8100300 <__aeabi_uldivmod+0x18>
 81002ec:	2900      	cmp	r1, #0
 81002ee:	bf08      	it	eq
 81002f0:	2800      	cmpeq	r0, #0
 81002f2:	bf1c      	itt	ne
 81002f4:	f04f 31ff 	movne.w	r1, #4294967295
 81002f8:	f04f 30ff 	movne.w	r0, #4294967295
 81002fc:	f000 b970 	b.w	81005e0 <__aeabi_idiv0>
 8100300:	f1ad 0c08 	sub.w	ip, sp, #8
 8100304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8100308:	f000 f806 	bl	8100318 <__udivmoddi4>
 810030c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8100310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8100314:	b004      	add	sp, #16
 8100316:	4770      	bx	lr

08100318 <__udivmoddi4>:
 8100318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 810031c:	9e08      	ldr	r6, [sp, #32]
 810031e:	460d      	mov	r5, r1
 8100320:	4604      	mov	r4, r0
 8100322:	460f      	mov	r7, r1
 8100324:	2b00      	cmp	r3, #0
 8100326:	d14a      	bne.n	81003be <__udivmoddi4+0xa6>
 8100328:	428a      	cmp	r2, r1
 810032a:	4694      	mov	ip, r2
 810032c:	d965      	bls.n	81003fa <__udivmoddi4+0xe2>
 810032e:	fab2 f382 	clz	r3, r2
 8100332:	b143      	cbz	r3, 8100346 <__udivmoddi4+0x2e>
 8100334:	fa02 fc03 	lsl.w	ip, r2, r3
 8100338:	f1c3 0220 	rsb	r2, r3, #32
 810033c:	409f      	lsls	r7, r3
 810033e:	fa20 f202 	lsr.w	r2, r0, r2
 8100342:	4317      	orrs	r7, r2
 8100344:	409c      	lsls	r4, r3
 8100346:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 810034a:	fa1f f58c 	uxth.w	r5, ip
 810034e:	fbb7 f1fe 	udiv	r1, r7, lr
 8100352:	0c22      	lsrs	r2, r4, #16
 8100354:	fb0e 7711 	mls	r7, lr, r1, r7
 8100358:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 810035c:	fb01 f005 	mul.w	r0, r1, r5
 8100360:	4290      	cmp	r0, r2
 8100362:	d90a      	bls.n	810037a <__udivmoddi4+0x62>
 8100364:	eb1c 0202 	adds.w	r2, ip, r2
 8100368:	f101 37ff 	add.w	r7, r1, #4294967295
 810036c:	f080 811c 	bcs.w	81005a8 <__udivmoddi4+0x290>
 8100370:	4290      	cmp	r0, r2
 8100372:	f240 8119 	bls.w	81005a8 <__udivmoddi4+0x290>
 8100376:	3902      	subs	r1, #2
 8100378:	4462      	add	r2, ip
 810037a:	1a12      	subs	r2, r2, r0
 810037c:	b2a4      	uxth	r4, r4
 810037e:	fbb2 f0fe 	udiv	r0, r2, lr
 8100382:	fb0e 2210 	mls	r2, lr, r0, r2
 8100386:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810038a:	fb00 f505 	mul.w	r5, r0, r5
 810038e:	42a5      	cmp	r5, r4
 8100390:	d90a      	bls.n	81003a8 <__udivmoddi4+0x90>
 8100392:	eb1c 0404 	adds.w	r4, ip, r4
 8100396:	f100 32ff 	add.w	r2, r0, #4294967295
 810039a:	f080 8107 	bcs.w	81005ac <__udivmoddi4+0x294>
 810039e:	42a5      	cmp	r5, r4
 81003a0:	f240 8104 	bls.w	81005ac <__udivmoddi4+0x294>
 81003a4:	4464      	add	r4, ip
 81003a6:	3802      	subs	r0, #2
 81003a8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 81003ac:	1b64      	subs	r4, r4, r5
 81003ae:	2100      	movs	r1, #0
 81003b0:	b11e      	cbz	r6, 81003ba <__udivmoddi4+0xa2>
 81003b2:	40dc      	lsrs	r4, r3
 81003b4:	2300      	movs	r3, #0
 81003b6:	e9c6 4300 	strd	r4, r3, [r6]
 81003ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003be:	428b      	cmp	r3, r1
 81003c0:	d908      	bls.n	81003d4 <__udivmoddi4+0xbc>
 81003c2:	2e00      	cmp	r6, #0
 81003c4:	f000 80ed 	beq.w	81005a2 <__udivmoddi4+0x28a>
 81003c8:	2100      	movs	r1, #0
 81003ca:	e9c6 0500 	strd	r0, r5, [r6]
 81003ce:	4608      	mov	r0, r1
 81003d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 81003d4:	fab3 f183 	clz	r1, r3
 81003d8:	2900      	cmp	r1, #0
 81003da:	d149      	bne.n	8100470 <__udivmoddi4+0x158>
 81003dc:	42ab      	cmp	r3, r5
 81003de:	d302      	bcc.n	81003e6 <__udivmoddi4+0xce>
 81003e0:	4282      	cmp	r2, r0
 81003e2:	f200 80f8 	bhi.w	81005d6 <__udivmoddi4+0x2be>
 81003e6:	1a84      	subs	r4, r0, r2
 81003e8:	eb65 0203 	sbc.w	r2, r5, r3
 81003ec:	2001      	movs	r0, #1
 81003ee:	4617      	mov	r7, r2
 81003f0:	2e00      	cmp	r6, #0
 81003f2:	d0e2      	beq.n	81003ba <__udivmoddi4+0xa2>
 81003f4:	e9c6 4700 	strd	r4, r7, [r6]
 81003f8:	e7df      	b.n	81003ba <__udivmoddi4+0xa2>
 81003fa:	b902      	cbnz	r2, 81003fe <__udivmoddi4+0xe6>
 81003fc:	deff      	udf	#255	; 0xff
 81003fe:	fab2 f382 	clz	r3, r2
 8100402:	2b00      	cmp	r3, #0
 8100404:	f040 8090 	bne.w	8100528 <__udivmoddi4+0x210>
 8100408:	1a8a      	subs	r2, r1, r2
 810040a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 810040e:	fa1f fe8c 	uxth.w	lr, ip
 8100412:	2101      	movs	r1, #1
 8100414:	fbb2 f5f7 	udiv	r5, r2, r7
 8100418:	fb07 2015 	mls	r0, r7, r5, r2
 810041c:	0c22      	lsrs	r2, r4, #16
 810041e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8100422:	fb0e f005 	mul.w	r0, lr, r5
 8100426:	4290      	cmp	r0, r2
 8100428:	d908      	bls.n	810043c <__udivmoddi4+0x124>
 810042a:	eb1c 0202 	adds.w	r2, ip, r2
 810042e:	f105 38ff 	add.w	r8, r5, #4294967295
 8100432:	d202      	bcs.n	810043a <__udivmoddi4+0x122>
 8100434:	4290      	cmp	r0, r2
 8100436:	f200 80cb 	bhi.w	81005d0 <__udivmoddi4+0x2b8>
 810043a:	4645      	mov	r5, r8
 810043c:	1a12      	subs	r2, r2, r0
 810043e:	b2a4      	uxth	r4, r4
 8100440:	fbb2 f0f7 	udiv	r0, r2, r7
 8100444:	fb07 2210 	mls	r2, r7, r0, r2
 8100448:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 810044c:	fb0e fe00 	mul.w	lr, lr, r0
 8100450:	45a6      	cmp	lr, r4
 8100452:	d908      	bls.n	8100466 <__udivmoddi4+0x14e>
 8100454:	eb1c 0404 	adds.w	r4, ip, r4
 8100458:	f100 32ff 	add.w	r2, r0, #4294967295
 810045c:	d202      	bcs.n	8100464 <__udivmoddi4+0x14c>
 810045e:	45a6      	cmp	lr, r4
 8100460:	f200 80bb 	bhi.w	81005da <__udivmoddi4+0x2c2>
 8100464:	4610      	mov	r0, r2
 8100466:	eba4 040e 	sub.w	r4, r4, lr
 810046a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 810046e:	e79f      	b.n	81003b0 <__udivmoddi4+0x98>
 8100470:	f1c1 0720 	rsb	r7, r1, #32
 8100474:	408b      	lsls	r3, r1
 8100476:	fa22 fc07 	lsr.w	ip, r2, r7
 810047a:	ea4c 0c03 	orr.w	ip, ip, r3
 810047e:	fa05 f401 	lsl.w	r4, r5, r1
 8100482:	fa20 f307 	lsr.w	r3, r0, r7
 8100486:	40fd      	lsrs	r5, r7
 8100488:	ea4f 491c 	mov.w	r9, ip, lsr #16
 810048c:	4323      	orrs	r3, r4
 810048e:	fbb5 f8f9 	udiv	r8, r5, r9
 8100492:	fa1f fe8c 	uxth.w	lr, ip
 8100496:	fb09 5518 	mls	r5, r9, r8, r5
 810049a:	0c1c      	lsrs	r4, r3, #16
 810049c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 81004a0:	fb08 f50e 	mul.w	r5, r8, lr
 81004a4:	42a5      	cmp	r5, r4
 81004a6:	fa02 f201 	lsl.w	r2, r2, r1
 81004aa:	fa00 f001 	lsl.w	r0, r0, r1
 81004ae:	d90b      	bls.n	81004c8 <__udivmoddi4+0x1b0>
 81004b0:	eb1c 0404 	adds.w	r4, ip, r4
 81004b4:	f108 3aff 	add.w	sl, r8, #4294967295
 81004b8:	f080 8088 	bcs.w	81005cc <__udivmoddi4+0x2b4>
 81004bc:	42a5      	cmp	r5, r4
 81004be:	f240 8085 	bls.w	81005cc <__udivmoddi4+0x2b4>
 81004c2:	f1a8 0802 	sub.w	r8, r8, #2
 81004c6:	4464      	add	r4, ip
 81004c8:	1b64      	subs	r4, r4, r5
 81004ca:	b29d      	uxth	r5, r3
 81004cc:	fbb4 f3f9 	udiv	r3, r4, r9
 81004d0:	fb09 4413 	mls	r4, r9, r3, r4
 81004d4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 81004d8:	fb03 fe0e 	mul.w	lr, r3, lr
 81004dc:	45a6      	cmp	lr, r4
 81004de:	d908      	bls.n	81004f2 <__udivmoddi4+0x1da>
 81004e0:	eb1c 0404 	adds.w	r4, ip, r4
 81004e4:	f103 35ff 	add.w	r5, r3, #4294967295
 81004e8:	d26c      	bcs.n	81005c4 <__udivmoddi4+0x2ac>
 81004ea:	45a6      	cmp	lr, r4
 81004ec:	d96a      	bls.n	81005c4 <__udivmoddi4+0x2ac>
 81004ee:	3b02      	subs	r3, #2
 81004f0:	4464      	add	r4, ip
 81004f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 81004f6:	fba3 9502 	umull	r9, r5, r3, r2
 81004fa:	eba4 040e 	sub.w	r4, r4, lr
 81004fe:	42ac      	cmp	r4, r5
 8100500:	46c8      	mov	r8, r9
 8100502:	46ae      	mov	lr, r5
 8100504:	d356      	bcc.n	81005b4 <__udivmoddi4+0x29c>
 8100506:	d053      	beq.n	81005b0 <__udivmoddi4+0x298>
 8100508:	b156      	cbz	r6, 8100520 <__udivmoddi4+0x208>
 810050a:	ebb0 0208 	subs.w	r2, r0, r8
 810050e:	eb64 040e 	sbc.w	r4, r4, lr
 8100512:	fa04 f707 	lsl.w	r7, r4, r7
 8100516:	40ca      	lsrs	r2, r1
 8100518:	40cc      	lsrs	r4, r1
 810051a:	4317      	orrs	r7, r2
 810051c:	e9c6 7400 	strd	r7, r4, [r6]
 8100520:	4618      	mov	r0, r3
 8100522:	2100      	movs	r1, #0
 8100524:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8100528:	f1c3 0120 	rsb	r1, r3, #32
 810052c:	fa02 fc03 	lsl.w	ip, r2, r3
 8100530:	fa20 f201 	lsr.w	r2, r0, r1
 8100534:	fa25 f101 	lsr.w	r1, r5, r1
 8100538:	409d      	lsls	r5, r3
 810053a:	432a      	orrs	r2, r5
 810053c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8100540:	fa1f fe8c 	uxth.w	lr, ip
 8100544:	fbb1 f0f7 	udiv	r0, r1, r7
 8100548:	fb07 1510 	mls	r5, r7, r0, r1
 810054c:	0c11      	lsrs	r1, r2, #16
 810054e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8100552:	fb00 f50e 	mul.w	r5, r0, lr
 8100556:	428d      	cmp	r5, r1
 8100558:	fa04 f403 	lsl.w	r4, r4, r3
 810055c:	d908      	bls.n	8100570 <__udivmoddi4+0x258>
 810055e:	eb1c 0101 	adds.w	r1, ip, r1
 8100562:	f100 38ff 	add.w	r8, r0, #4294967295
 8100566:	d22f      	bcs.n	81005c8 <__udivmoddi4+0x2b0>
 8100568:	428d      	cmp	r5, r1
 810056a:	d92d      	bls.n	81005c8 <__udivmoddi4+0x2b0>
 810056c:	3802      	subs	r0, #2
 810056e:	4461      	add	r1, ip
 8100570:	1b49      	subs	r1, r1, r5
 8100572:	b292      	uxth	r2, r2
 8100574:	fbb1 f5f7 	udiv	r5, r1, r7
 8100578:	fb07 1115 	mls	r1, r7, r5, r1
 810057c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8100580:	fb05 f10e 	mul.w	r1, r5, lr
 8100584:	4291      	cmp	r1, r2
 8100586:	d908      	bls.n	810059a <__udivmoddi4+0x282>
 8100588:	eb1c 0202 	adds.w	r2, ip, r2
 810058c:	f105 38ff 	add.w	r8, r5, #4294967295
 8100590:	d216      	bcs.n	81005c0 <__udivmoddi4+0x2a8>
 8100592:	4291      	cmp	r1, r2
 8100594:	d914      	bls.n	81005c0 <__udivmoddi4+0x2a8>
 8100596:	3d02      	subs	r5, #2
 8100598:	4462      	add	r2, ip
 810059a:	1a52      	subs	r2, r2, r1
 810059c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 81005a0:	e738      	b.n	8100414 <__udivmoddi4+0xfc>
 81005a2:	4631      	mov	r1, r6
 81005a4:	4630      	mov	r0, r6
 81005a6:	e708      	b.n	81003ba <__udivmoddi4+0xa2>
 81005a8:	4639      	mov	r1, r7
 81005aa:	e6e6      	b.n	810037a <__udivmoddi4+0x62>
 81005ac:	4610      	mov	r0, r2
 81005ae:	e6fb      	b.n	81003a8 <__udivmoddi4+0x90>
 81005b0:	4548      	cmp	r0, r9
 81005b2:	d2a9      	bcs.n	8100508 <__udivmoddi4+0x1f0>
 81005b4:	ebb9 0802 	subs.w	r8, r9, r2
 81005b8:	eb65 0e0c 	sbc.w	lr, r5, ip
 81005bc:	3b01      	subs	r3, #1
 81005be:	e7a3      	b.n	8100508 <__udivmoddi4+0x1f0>
 81005c0:	4645      	mov	r5, r8
 81005c2:	e7ea      	b.n	810059a <__udivmoddi4+0x282>
 81005c4:	462b      	mov	r3, r5
 81005c6:	e794      	b.n	81004f2 <__udivmoddi4+0x1da>
 81005c8:	4640      	mov	r0, r8
 81005ca:	e7d1      	b.n	8100570 <__udivmoddi4+0x258>
 81005cc:	46d0      	mov	r8, sl
 81005ce:	e77b      	b.n	81004c8 <__udivmoddi4+0x1b0>
 81005d0:	3d02      	subs	r5, #2
 81005d2:	4462      	add	r2, ip
 81005d4:	e732      	b.n	810043c <__udivmoddi4+0x124>
 81005d6:	4608      	mov	r0, r1
 81005d8:	e70a      	b.n	81003f0 <__udivmoddi4+0xd8>
 81005da:	4464      	add	r4, ip
 81005dc:	3802      	subs	r0, #2
 81005de:	e742      	b.n	8100466 <__udivmoddi4+0x14e>

081005e0 <__aeabi_idiv0>:
 81005e0:	4770      	bx	lr
 81005e2:	bf00      	nop

081005e4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81005e4:	b480      	push	{r7}
 81005e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81005e8:	4b09      	ldr	r3, [pc, #36]	; (8100610 <SystemInit+0x2c>)
 81005ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81005ee:	4a08      	ldr	r2, [pc, #32]	; (8100610 <SystemInit+0x2c>)
 81005f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81005f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81005f8:	4b05      	ldr	r3, [pc, #20]	; (8100610 <SystemInit+0x2c>)
 81005fa:	691b      	ldr	r3, [r3, #16]
 81005fc:	4a04      	ldr	r2, [pc, #16]	; (8100610 <SystemInit+0x2c>)
 81005fe:	f043 0310 	orr.w	r3, r3, #16
 8100602:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100604:	bf00      	nop
 8100606:	46bd      	mov	sp, r7
 8100608:	f85d 7b04 	ldr.w	r7, [sp], #4
 810060c:	4770      	bx	lr
 810060e:	bf00      	nop
 8100610:	e000ed00 	.word	0xe000ed00

08100614 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100614:	b580      	push	{r7, lr}
 8100616:	b082      	sub	sp, #8
 8100618:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810061a:	4b24      	ldr	r3, [pc, #144]	; (81006ac <main+0x98>)
 810061c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100620:	4a22      	ldr	r2, [pc, #136]	; (81006ac <main+0x98>)
 8100622:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100626:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810062a:	4b20      	ldr	r3, [pc, #128]	; (81006ac <main+0x98>)
 810062c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100634:	607b      	str	r3, [r7, #4]
 8100636:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100638:	2001      	movs	r0, #1
 810063a:	f001 fb19 	bl	8101c70 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 810063e:	f001 fba3 	bl	8101d88 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100642:	2201      	movs	r2, #1
 8100644:	2102      	movs	r1, #2
 8100646:	2000      	movs	r0, #0
 8100648:	f001 fb24 	bl	8101c94 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810064c:	4b18      	ldr	r3, [pc, #96]	; (81006b0 <main+0x9c>)
 810064e:	681b      	ldr	r3, [r3, #0]
 8100650:	091b      	lsrs	r3, r3, #4
 8100652:	f003 030f 	and.w	r3, r3, #15
 8100656:	2b07      	cmp	r3, #7
 8100658:	d108      	bne.n	810066c <main+0x58>
 810065a:	4b16      	ldr	r3, [pc, #88]	; (81006b4 <main+0xa0>)
 810065c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100660:	4a14      	ldr	r2, [pc, #80]	; (81006b4 <main+0xa0>)
 8100662:	f043 0301 	orr.w	r3, r3, #1
 8100666:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810066a:	e007      	b.n	810067c <main+0x68>
 810066c:	4b11      	ldr	r3, [pc, #68]	; (81006b4 <main+0xa0>)
 810066e:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100672:	4a10      	ldr	r2, [pc, #64]	; (81006b4 <main+0xa0>)
 8100674:	f043 0301 	orr.w	r3, r3, #1
 8100678:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 810067c:	f000 fa0c 	bl	8100a98 <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100680:	f000 f822 	bl	81006c8 <MX_GPIO_Init>
  huart4.Instance = UART4;
 8100684:	4b0c      	ldr	r3, [pc, #48]	; (81006b8 <main+0xa4>)
 8100686:	4a0d      	ldr	r2, [pc, #52]	; (81006bc <main+0xa8>)
 8100688:	601a      	str	r2, [r3, #0]

  UART_Init(&huart4, 115200);
 810068a:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 810068e:	480a      	ldr	r0, [pc, #40]	; (81006b8 <main+0xa4>)
 8100690:	f000 f924 	bl	81008dc <UART_Init>
  UART_Receive_IT(&huart4, rxBuffer, RX_BUFFER_SIZE);
 8100694:	2264      	movs	r2, #100	; 0x64
 8100696:	490a      	ldr	r1, [pc, #40]	; (81006c0 <main+0xac>)
 8100698:	4807      	ldr	r0, [pc, #28]	; (81006b8 <main+0xa4>)
 810069a:	f000 f984 	bl	81009a6 <UART_Receive_IT>
  {
    /* USER CODE END WHILE */
//	  UART_Transmit(&huart4, "XD");

    /* USER CODE BEGIN 3 */
	  count++;
 810069e:	4b09      	ldr	r3, [pc, #36]	; (81006c4 <main+0xb0>)
 81006a0:	681b      	ldr	r3, [r3, #0]
 81006a2:	3301      	adds	r3, #1
 81006a4:	4a07      	ldr	r2, [pc, #28]	; (81006c4 <main+0xb0>)
 81006a6:	6013      	str	r3, [r2, #0]
 81006a8:	e7f9      	b.n	810069e <main+0x8a>
 81006aa:	bf00      	nop
 81006ac:	58024400 	.word	0x58024400
 81006b0:	e000ed00 	.word	0xe000ed00
 81006b4:	58026400 	.word	0x58026400
 81006b8:	10000030 	.word	0x10000030
 81006bc:	40004c00 	.word	0x40004c00
 81006c0:	100000c4 	.word	0x100000c4
 81006c4:	10000008 	.word	0x10000008

081006c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 81006c8:	b480      	push	{r7}
 81006ca:	b083      	sub	sp, #12
 81006cc:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 81006ce:	4b0a      	ldr	r3, [pc, #40]	; (81006f8 <MX_GPIO_Init+0x30>)
 81006d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006d4:	4a08      	ldr	r2, [pc, #32]	; (81006f8 <MX_GPIO_Init+0x30>)
 81006d6:	f043 0302 	orr.w	r3, r3, #2
 81006da:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81006de:	4b06      	ldr	r3, [pc, #24]	; (81006f8 <MX_GPIO_Init+0x30>)
 81006e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81006e4:	f003 0302 	and.w	r3, r3, #2
 81006e8:	607b      	str	r3, [r7, #4]
 81006ea:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 81006ec:	bf00      	nop
 81006ee:	370c      	adds	r7, #12
 81006f0:	46bd      	mov	sp, r7
 81006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006f6:	4770      	bx	lr
 81006f8:	58024400 	.word	0x58024400

081006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 81006fc:	b480      	push	{r7}
 81006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8100700:	b672      	cpsid	i
}
 8100702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8100704:	e7fe      	b.n	8100704 <Error_Handler+0x8>
	...

08100708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100708:	b480      	push	{r7}
 810070a:	b083      	sub	sp, #12
 810070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810070e:	4b0a      	ldr	r3, [pc, #40]	; (8100738 <HAL_MspInit+0x30>)
 8100710:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100714:	4a08      	ldr	r2, [pc, #32]	; (8100738 <HAL_MspInit+0x30>)
 8100716:	f043 0302 	orr.w	r3, r3, #2
 810071a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810071e:	4b06      	ldr	r3, [pc, #24]	; (8100738 <HAL_MspInit+0x30>)
 8100720:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8100724:	f003 0302 	and.w	r3, r3, #2
 8100728:	607b      	str	r3, [r7, #4]
 810072a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 810072c:	bf00      	nop
 810072e:	370c      	adds	r7, #12
 8100730:	46bd      	mov	sp, r7
 8100732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100736:	4770      	bx	lr
 8100738:	58024400 	.word	0x58024400

0810073c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 810073c:	b580      	push	{r7, lr}
 810073e:	b0bc      	sub	sp, #240	; 0xf0
 8100740:	af00      	add	r7, sp, #0
 8100742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100744:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8100748:	2200      	movs	r2, #0
 810074a:	601a      	str	r2, [r3, #0]
 810074c:	605a      	str	r2, [r3, #4]
 810074e:	609a      	str	r2, [r3, #8]
 8100750:	60da      	str	r2, [r3, #12]
 8100752:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100754:	f107 0318 	add.w	r3, r7, #24
 8100758:	22c0      	movs	r2, #192	; 0xc0
 810075a:	2100      	movs	r1, #0
 810075c:	4618      	mov	r0, r3
 810075e:	f005 ff49 	bl	81065f4 <memset>
  if(huart->Instance==UART4)
 8100762:	687b      	ldr	r3, [r7, #4]
 8100764:	681b      	ldr	r3, [r3, #0]
 8100766:	4a3f      	ldr	r2, [pc, #252]	; (8100864 <HAL_UART_MspInit+0x128>)
 8100768:	4293      	cmp	r3, r2
 810076a:	d14f      	bne.n	810080c <HAL_UART_MspInit+0xd0>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 810076c:	f04f 0202 	mov.w	r2, #2
 8100770:	f04f 0300 	mov.w	r3, #0
 8100774:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8100778:	2300      	movs	r3, #0
 810077a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 810077e:	f107 0318 	add.w	r3, r7, #24
 8100782:	4618      	mov	r0, r3
 8100784:	f001 fce6 	bl	8102154 <HAL_RCCEx_PeriphCLKConfig>
 8100788:	4603      	mov	r3, r0
 810078a:	2b00      	cmp	r3, #0
 810078c:	d001      	beq.n	8100792 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 810078e:	f7ff ffb5 	bl	81006fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8100792:	4b35      	ldr	r3, [pc, #212]	; (8100868 <HAL_UART_MspInit+0x12c>)
 8100794:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100798:	4a33      	ldr	r2, [pc, #204]	; (8100868 <HAL_UART_MspInit+0x12c>)
 810079a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 810079e:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 81007a2:	4b31      	ldr	r3, [pc, #196]	; (8100868 <HAL_UART_MspInit+0x12c>)
 81007a4:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 81007a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81007ac:	617b      	str	r3, [r7, #20]
 81007ae:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 81007b0:	4b2d      	ldr	r3, [pc, #180]	; (8100868 <HAL_UART_MspInit+0x12c>)
 81007b2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007b6:	4a2c      	ldr	r2, [pc, #176]	; (8100868 <HAL_UART_MspInit+0x12c>)
 81007b8:	f043 0302 	orr.w	r3, r3, #2
 81007bc:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81007c0:	4b29      	ldr	r3, [pc, #164]	; (8100868 <HAL_UART_MspInit+0x12c>)
 81007c2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81007c6:	f003 0302 	and.w	r3, r3, #2
 81007ca:	613b      	str	r3, [r7, #16]
 81007cc:	693b      	ldr	r3, [r7, #16]
    /**UART4 GPIO Configuration
    PB8     ------> UART4_RX
    PB9     ------> UART4_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 81007ce:	f44f 7340 	mov.w	r3, #768	; 0x300
 81007d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81007d6:	2302      	movs	r3, #2
 81007d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81007dc:	2300      	movs	r3, #0
 81007de:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81007e2:	2300      	movs	r3, #0
 81007e4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 81007e8:	2308      	movs	r3, #8
 81007ea:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 81007ee:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 81007f2:	4619      	mov	r1, r3
 81007f4:	481d      	ldr	r0, [pc, #116]	; (810086c <HAL_UART_MspInit+0x130>)
 81007f6:	f001 f88b 	bl	8101910 <HAL_GPIO_Init>

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 81007fa:	2200      	movs	r2, #0
 81007fc:	2100      	movs	r1, #0
 81007fe:	2034      	movs	r0, #52	; 0x34
 8100800:	f000 fad9 	bl	8100db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8100804:	2034      	movs	r0, #52	; 0x34
 8100806:	f000 faf0 	bl	8100dea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 810080a:	e026      	b.n	810085a <HAL_UART_MspInit+0x11e>
  else if(huart->Instance==USART3)
 810080c:	687b      	ldr	r3, [r7, #4]
 810080e:	681b      	ldr	r3, [r3, #0]
 8100810:	4a17      	ldr	r2, [pc, #92]	; (8100870 <HAL_UART_MspInit+0x134>)
 8100812:	4293      	cmp	r3, r2
 8100814:	d121      	bne.n	810085a <HAL_UART_MspInit+0x11e>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8100816:	f04f 0202 	mov.w	r2, #2
 810081a:	f04f 0300 	mov.w	r3, #0
 810081e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8100822:	2300      	movs	r3, #0
 8100824:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100828:	f107 0318 	add.w	r3, r7, #24
 810082c:	4618      	mov	r0, r3
 810082e:	f001 fc91 	bl	8102154 <HAL_RCCEx_PeriphCLKConfig>
 8100832:	4603      	mov	r3, r0
 8100834:	2b00      	cmp	r3, #0
 8100836:	d001      	beq.n	810083c <HAL_UART_MspInit+0x100>
      Error_Handler();
 8100838:	f7ff ff60 	bl	81006fc <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 810083c:	4b0a      	ldr	r3, [pc, #40]	; (8100868 <HAL_UART_MspInit+0x12c>)
 810083e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100842:	4a09      	ldr	r2, [pc, #36]	; (8100868 <HAL_UART_MspInit+0x12c>)
 8100844:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8100848:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810084c:	4b06      	ldr	r3, [pc, #24]	; (8100868 <HAL_UART_MspInit+0x12c>)
 810084e:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8100852:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8100856:	60fb      	str	r3, [r7, #12]
 8100858:	68fb      	ldr	r3, [r7, #12]
}
 810085a:	bf00      	nop
 810085c:	37f0      	adds	r7, #240	; 0xf0
 810085e:	46bd      	mov	sp, r7
 8100860:	bd80      	pop	{r7, pc}
 8100862:	bf00      	nop
 8100864:	40004c00 	.word	0x40004c00
 8100868:	58024400 	.word	0x58024400
 810086c:	58020400 	.word	0x58020400
 8100870:	40004800 	.word	0x40004800

08100874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8100874:	b480      	push	{r7}
 8100876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8100878:	e7fe      	b.n	8100878 <NMI_Handler+0x4>

0810087a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 810087a:	b480      	push	{r7}
 810087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 810087e:	e7fe      	b.n	810087e <HardFault_Handler+0x4>

08100880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8100880:	b480      	push	{r7}
 8100882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8100884:	e7fe      	b.n	8100884 <MemManage_Handler+0x4>

08100886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8100886:	b480      	push	{r7}
 8100888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 810088a:	e7fe      	b.n	810088a <BusFault_Handler+0x4>

0810088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 810088c:	b480      	push	{r7}
 810088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8100890:	e7fe      	b.n	8100890 <UsageFault_Handler+0x4>

08100892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8100892:	b480      	push	{r7}
 8100894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8100896:	bf00      	nop
 8100898:	46bd      	mov	sp, r7
 810089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810089e:	4770      	bx	lr

081008a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81008a0:	b480      	push	{r7}
 81008a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81008a4:	bf00      	nop
 81008a6:	46bd      	mov	sp, r7
 81008a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008ac:	4770      	bx	lr

081008ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81008ae:	b480      	push	{r7}
 81008b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81008b2:	bf00      	nop
 81008b4:	46bd      	mov	sp, r7
 81008b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81008ba:	4770      	bx	lr

081008bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 81008bc:	b580      	push	{r7, lr}
 81008be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 81008c0:	f000 f97e 	bl	8100bc0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 81008c4:	bf00      	nop
 81008c6:	bd80      	pop	{r7, pc}

081008c8 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 81008c8:	b580      	push	{r7, lr}
 81008ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 81008cc:	4802      	ldr	r0, [pc, #8]	; (81008d8 <UART4_IRQHandler+0x10>)
 81008ce:	f003 fb97 	bl	8104000 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 81008d2:	bf00      	nop
 81008d4:	bd80      	pop	{r7, pc}
 81008d6:	bf00      	nop
 81008d8:	10000030 	.word	0x10000030

081008dc <UART_Init>:
 * @brief  Inicjalizuje dany UART z wybraną konfiguracją.
 * @param  huart: Wskaźnik na obiekt UART_HandleTypeDef.
 * @param  baudRate: Żądana prędkość transmisji UART (w bitach na sekundę).
 */
void UART_Init(UART_HandleTypeDef *huart, uint32_t baudRate)
{
 81008dc:	b580      	push	{r7, lr}
 81008de:	b082      	sub	sp, #8
 81008e0:	af00      	add	r7, sp, #0
 81008e2:	6078      	str	r0, [r7, #4]
 81008e4:	6039      	str	r1, [r7, #0]
    huart->Init.BaudRate = baudRate;
 81008e6:	687b      	ldr	r3, [r7, #4]
 81008e8:	683a      	ldr	r2, [r7, #0]
 81008ea:	605a      	str	r2, [r3, #4]
    huart->Init.WordLength = UART_WORDLENGTH_8B;
 81008ec:	687b      	ldr	r3, [r7, #4]
 81008ee:	2200      	movs	r2, #0
 81008f0:	609a      	str	r2, [r3, #8]
    huart->Init.StopBits = UART_STOPBITS_1;
 81008f2:	687b      	ldr	r3, [r7, #4]
 81008f4:	2200      	movs	r2, #0
 81008f6:	60da      	str	r2, [r3, #12]
    huart->Init.Parity = UART_PARITY_NONE;
 81008f8:	687b      	ldr	r3, [r7, #4]
 81008fa:	2200      	movs	r2, #0
 81008fc:	611a      	str	r2, [r3, #16]
    huart->Init.Mode = UART_MODE_TX_RX;
 81008fe:	687b      	ldr	r3, [r7, #4]
 8100900:	220c      	movs	r2, #12
 8100902:	615a      	str	r2, [r3, #20]
    huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8100904:	687b      	ldr	r3, [r7, #4]
 8100906:	2200      	movs	r2, #0
 8100908:	619a      	str	r2, [r3, #24]
    huart->Init.OverSampling = UART_OVERSAMPLING_16;
 810090a:	687b      	ldr	r3, [r7, #4]
 810090c:	2200      	movs	r2, #0
 810090e:	61da      	str	r2, [r3, #28]
    huart->Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8100910:	687b      	ldr	r3, [r7, #4]
 8100912:	2200      	movs	r2, #0
 8100914:	621a      	str	r2, [r3, #32]
    huart->Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8100916:	687b      	ldr	r3, [r7, #4]
 8100918:	2200      	movs	r2, #0
 810091a:	625a      	str	r2, [r3, #36]	; 0x24
    huart->AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 810091c:	687b      	ldr	r3, [r7, #4]
 810091e:	2200      	movs	r2, #0
 8100920:	629a      	str	r2, [r3, #40]	; 0x28

    if (HAL_UART_Init(huart) != HAL_OK)
 8100922:	6878      	ldr	r0, [r7, #4]
 8100924:	f003 fa42 	bl	8103dac <HAL_UART_Init>
 8100928:	4603      	mov	r3, r0
 810092a:	2b00      	cmp	r3, #0
 810092c:	d001      	beq.n	8100932 <UART_Init+0x56>
    {
        Error_Handler();
 810092e:	f7ff fee5 	bl	81006fc <Error_Handler>
    }

    if (HAL_UARTEx_SetTxFifoThreshold(huart, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100932:	2100      	movs	r1, #0
 8100934:	6878      	ldr	r0, [r7, #4]
 8100936:	f005 fd92 	bl	810645e <HAL_UARTEx_SetTxFifoThreshold>
 810093a:	4603      	mov	r3, r0
 810093c:	2b00      	cmp	r3, #0
 810093e:	d001      	beq.n	8100944 <UART_Init+0x68>
    {
        Error_Handler();
 8100940:	f7ff fedc 	bl	81006fc <Error_Handler>
    }

    if (HAL_UARTEx_SetRxFifoThreshold(huart, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8100944:	2100      	movs	r1, #0
 8100946:	6878      	ldr	r0, [r7, #4]
 8100948:	f005 fdc7 	bl	81064da <HAL_UARTEx_SetRxFifoThreshold>
 810094c:	4603      	mov	r3, r0
 810094e:	2b00      	cmp	r3, #0
 8100950:	d001      	beq.n	8100956 <UART_Init+0x7a>
    {
        Error_Handler();
 8100952:	f7ff fed3 	bl	81006fc <Error_Handler>
    }

    if (HAL_UARTEx_DisableFifoMode(huart) != HAL_OK)
 8100956:	6878      	ldr	r0, [r7, #4]
 8100958:	f005 fd48 	bl	81063ec <HAL_UARTEx_DisableFifoMode>
 810095c:	4603      	mov	r3, r0
 810095e:	2b00      	cmp	r3, #0
 8100960:	d001      	beq.n	8100966 <UART_Init+0x8a>
    {
        Error_Handler();
 8100962:	f7ff fecb 	bl	81006fc <Error_Handler>
    }


    HAL_NVIC_SetPriority(UART4_IRQn, 0, 1);
 8100966:	2201      	movs	r2, #1
 8100968:	2100      	movs	r1, #0
 810096a:	2034      	movs	r0, #52	; 0x34
 810096c:	f000 fa23 	bl	8100db6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8100970:	2034      	movs	r0, #52	; 0x34
 8100972:	f000 fa3a 	bl	8100dea <HAL_NVIC_EnableIRQ>

}
 8100976:	bf00      	nop
 8100978:	3708      	adds	r7, #8
 810097a:	46bd      	mov	sp, r7
 810097c:	bd80      	pop	{r7, pc}

0810097e <UART_Transmit>:
 * @brief  Wysyła tekst przez wybrany UART.
 * @param  huart: Wskaźnik na obiekt UART_HandleTypeDef.
 * @param  string: Wskaźnik na bufor z tekstem do wysłania.
 */
void UART_Transmit(UART_HandleTypeDef *huart, char *string)
{
 810097e:	b580      	push	{r7, lr}
 8100980:	b082      	sub	sp, #8
 8100982:	af00      	add	r7, sp, #0
 8100984:	6078      	str	r0, [r7, #4]
 8100986:	6039      	str	r1, [r7, #0]
    HAL_UART_Transmit(huart, (uint8_t *)string, strlen(string), HAL_MAX_DELAY);
 8100988:	6838      	ldr	r0, [r7, #0]
 810098a:	f7ff fca5 	bl	81002d8 <strlen>
 810098e:	4603      	mov	r3, r0
 8100990:	b29a      	uxth	r2, r3
 8100992:	f04f 33ff 	mov.w	r3, #4294967295
 8100996:	6839      	ldr	r1, [r7, #0]
 8100998:	6878      	ldr	r0, [r7, #4]
 810099a:	f003 fa57 	bl	8103e4c <HAL_UART_Transmit>
}
 810099e:	bf00      	nop
 81009a0:	3708      	adds	r7, #8
 81009a2:	46bd      	mov	sp, r7
 81009a4:	bd80      	pop	{r7, pc}

081009a6 <UART_Receive_IT>:
 * @param  huart: Wskaźnik na obiekt UART_HandleTypeDef.
 * @param  buffer: Wskaźnik na bufor, gdzie zapisane zostaną odebrane dane.
 * @param  size: Rozmiar bufora.
 */
void UART_Receive_IT(UART_HandleTypeDef *huart, char *buffer, uint16_t size)
{
 81009a6:	b580      	push	{r7, lr}
 81009a8:	b084      	sub	sp, #16
 81009aa:	af00      	add	r7, sp, #0
 81009ac:	60f8      	str	r0, [r7, #12]
 81009ae:	60b9      	str	r1, [r7, #8]
 81009b0:	4613      	mov	r3, r2
 81009b2:	80fb      	strh	r3, [r7, #6]
    if (HAL_UART_Receive_IT(huart, (uint8_t *)buffer, size) != HAL_OK)
 81009b4:	88fb      	ldrh	r3, [r7, #6]
 81009b6:	461a      	mov	r2, r3
 81009b8:	68b9      	ldr	r1, [r7, #8]
 81009ba:	68f8      	ldr	r0, [r7, #12]
 81009bc:	f003 fad4 	bl	8103f68 <HAL_UART_Receive_IT>
 81009c0:	4603      	mov	r3, r0
 81009c2:	2b00      	cmp	r3, #0
 81009c4:	d001      	beq.n	81009ca <UART_Receive_IT+0x24>
    {
        Error_Handler();
 81009c6:	f7ff fe99 	bl	81006fc <Error_Handler>
    }
}
 81009ca:	bf00      	nop
 81009cc:	3710      	adds	r7, #16
 81009ce:	46bd      	mov	sp, r7
 81009d0:	bd80      	pop	{r7, pc}
	...

081009d4 <HAL_UART_RxCpltCallback>:
 * @param  huart: Wskaźnik na obiekt UART_HandleTypeDef.
 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 81009d4:	b580      	push	{r7, lr}
 81009d6:	b082      	sub	sp, #8
 81009d8:	af00      	add	r7, sp, #0
 81009da:	6078      	str	r0, [r7, #4]


    if (huart == &huart4) // Sprawdź, czy dotyczy UART4
 81009dc:	687b      	ldr	r3, [r7, #4]
 81009de:	4a0f      	ldr	r2, [pc, #60]	; (8100a1c <HAL_UART_RxCpltCallback+0x48>)
 81009e0:	4293      	cmp	r3, r2
 81009e2:	d117      	bne.n	8100a14 <HAL_UART_RxCpltCallback+0x40>
    {
        // Wyświetl odebrane dane (lub wykonaj przetwarzanie)
        UART_Transmit(&huart4, "Odebrano dane: ");
 81009e4:	490e      	ldr	r1, [pc, #56]	; (8100a20 <HAL_UART_RxCpltCallback+0x4c>)
 81009e6:	480d      	ldr	r0, [pc, #52]	; (8100a1c <HAL_UART_RxCpltCallback+0x48>)
 81009e8:	f7ff ffc9 	bl	810097e <UART_Transmit>
        UART_Transmit(&huart4, rxBuffer);
 81009ec:	490d      	ldr	r1, [pc, #52]	; (8100a24 <HAL_UART_RxCpltCallback+0x50>)
 81009ee:	480b      	ldr	r0, [pc, #44]	; (8100a1c <HAL_UART_RxCpltCallback+0x48>)
 81009f0:	f7ff ffc5 	bl	810097e <UART_Transmit>
        UART_Transmit(&huart4, "\r\n");
 81009f4:	490c      	ldr	r1, [pc, #48]	; (8100a28 <HAL_UART_RxCpltCallback+0x54>)
 81009f6:	4809      	ldr	r0, [pc, #36]	; (8100a1c <HAL_UART_RxCpltCallback+0x48>)
 81009f8:	f7ff ffc1 	bl	810097e <UART_Transmit>

        // Zainicjuj ponownie odbiór danych
        if (HAL_UART_Receive_IT(&huart4, (uint8_t *)rxBuffer, RX_BUFFER_SIZE) != HAL_OK)
 81009fc:	2264      	movs	r2, #100	; 0x64
 81009fe:	4909      	ldr	r1, [pc, #36]	; (8100a24 <HAL_UART_RxCpltCallback+0x50>)
 8100a00:	4806      	ldr	r0, [pc, #24]	; (8100a1c <HAL_UART_RxCpltCallback+0x48>)
 8100a02:	f003 fab1 	bl	8103f68 <HAL_UART_Receive_IT>
 8100a06:	4603      	mov	r3, r0
 8100a08:	2b00      	cmp	r3, #0
 8100a0a:	d003      	beq.n	8100a14 <HAL_UART_RxCpltCallback+0x40>
        {
            UART_Transmit(&huart4, "Błąd przy ponownym uruchomieniu odbioru\r\n");
 8100a0c:	4907      	ldr	r1, [pc, #28]	; (8100a2c <HAL_UART_RxCpltCallback+0x58>)
 8100a0e:	4803      	ldr	r0, [pc, #12]	; (8100a1c <HAL_UART_RxCpltCallback+0x48>)
 8100a10:	f7ff ffb5 	bl	810097e <UART_Transmit>
        }
    }
}
 8100a14:	bf00      	nop
 8100a16:	3708      	adds	r7, #8
 8100a18:	46bd      	mov	sp, r7
 8100a1a:	bd80      	pop	{r7, pc}
 8100a1c:	10000030 	.word	0x10000030
 8100a20:	08106664 	.word	0x08106664
 8100a24:	100000c4 	.word	0x100000c4
 8100a28:	08106674 	.word	0x08106674
 8100a2c:	08106678 	.word	0x08106678

08100a30 <HAL_UART_ErrorCallback>:
/**
 * @brief  Funkcja obsługi błędów UART.
 * @param  huart: Wskaźnik na obiekt UART_HandleTypeDef.
 */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8100a30:	b480      	push	{r7}
 8100a32:	b083      	sub	sp, #12
 8100a34:	af00      	add	r7, sp, #0
 8100a36:	6078      	str	r0, [r7, #4]
    // Obsługa błędów UART
    // np. ponowne uruchomienie odbioru
}
 8100a38:	bf00      	nop
 8100a3a:	370c      	adds	r7, #12
 8100a3c:	46bd      	mov	sp, r7
 8100a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a42:	4770      	bx	lr

08100a44 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100a44:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100a7c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100a48:	f7ff fdcc 	bl	81005e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100a4c:	480c      	ldr	r0, [pc, #48]	; (8100a80 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8100a4e:	490d      	ldr	r1, [pc, #52]	; (8100a84 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8100a50:	4a0d      	ldr	r2, [pc, #52]	; (8100a88 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8100a52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100a54:	e002      	b.n	8100a5c <LoopCopyDataInit>

08100a56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100a56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100a58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100a5a:	3304      	adds	r3, #4

08100a5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100a5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8100a5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8100a60:	d3f9      	bcc.n	8100a56 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8100a62:	4a0a      	ldr	r2, [pc, #40]	; (8100a8c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100a64:	4c0a      	ldr	r4, [pc, #40]	; (8100a90 <LoopFillZerobss+0x22>)
  movs r3, #0
 8100a66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100a68:	e001      	b.n	8100a6e <LoopFillZerobss>

08100a6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100a6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100a6c:	3204      	adds	r2, #4

08100a6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8100a6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8100a70:	d3fb      	bcc.n	8100a6a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8100a72:	f005 fdc7 	bl	8106604 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100a76:	f7ff fdcd 	bl	8100614 <main>
  bx  lr
 8100a7a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100a7c:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8100a80:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100a84:	10000014 	.word	0x10000014
  ldr r2, =_sidata
 8100a88:	081066ec 	.word	0x081066ec
  ldr r2, =_sbss
 8100a8c:	10000014 	.word	0x10000014
  ldr r4, =_ebss
 8100a90:	1000012c 	.word	0x1000012c

08100a94 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100a94:	e7fe      	b.n	8100a94 <ADC3_IRQHandler>
	...

08100a98 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100a98:	b580      	push	{r7, lr}
 8100a9a:	b082      	sub	sp, #8
 8100a9c:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8100a9e:	4b28      	ldr	r3, [pc, #160]	; (8100b40 <HAL_Init+0xa8>)
 8100aa0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100aa4:	4a26      	ldr	r2, [pc, #152]	; (8100b40 <HAL_Init+0xa8>)
 8100aa6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100aaa:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100aae:	4b24      	ldr	r3, [pc, #144]	; (8100b40 <HAL_Init+0xa8>)
 8100ab0:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100ab4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100ab8:	603b      	str	r3, [r7, #0]
 8100aba:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100abc:	4b21      	ldr	r3, [pc, #132]	; (8100b44 <HAL_Init+0xac>)
 8100abe:	681b      	ldr	r3, [r3, #0]
 8100ac0:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8100ac4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8100ac8:	4a1e      	ldr	r2, [pc, #120]	; (8100b44 <HAL_Init+0xac>)
 8100aca:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8100ace:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8100ad0:	4b1c      	ldr	r3, [pc, #112]	; (8100b44 <HAL_Init+0xac>)
 8100ad2:	681b      	ldr	r3, [r3, #0]
 8100ad4:	4a1b      	ldr	r2, [pc, #108]	; (8100b44 <HAL_Init+0xac>)
 8100ad6:	f043 0301 	orr.w	r3, r3, #1
 8100ada:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8100adc:	2003      	movs	r0, #3
 8100ade:	f000 f95f 	bl	8100da0 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8100ae2:	f001 f95f 	bl	8101da4 <HAL_RCC_GetSysClockFreq>
 8100ae6:	4602      	mov	r2, r0
 8100ae8:	4b15      	ldr	r3, [pc, #84]	; (8100b40 <HAL_Init+0xa8>)
 8100aea:	699b      	ldr	r3, [r3, #24]
 8100aec:	0a1b      	lsrs	r3, r3, #8
 8100aee:	f003 030f 	and.w	r3, r3, #15
 8100af2:	4915      	ldr	r1, [pc, #84]	; (8100b48 <HAL_Init+0xb0>)
 8100af4:	5ccb      	ldrb	r3, [r1, r3]
 8100af6:	f003 031f 	and.w	r3, r3, #31
 8100afa:	fa22 f303 	lsr.w	r3, r2, r3
 8100afe:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8100b00:	4b0f      	ldr	r3, [pc, #60]	; (8100b40 <HAL_Init+0xa8>)
 8100b02:	699b      	ldr	r3, [r3, #24]
 8100b04:	f003 030f 	and.w	r3, r3, #15
 8100b08:	4a0f      	ldr	r2, [pc, #60]	; (8100b48 <HAL_Init+0xb0>)
 8100b0a:	5cd3      	ldrb	r3, [r2, r3]
 8100b0c:	f003 031f 	and.w	r3, r3, #31
 8100b10:	687a      	ldr	r2, [r7, #4]
 8100b12:	fa22 f303 	lsr.w	r3, r2, r3
 8100b16:	4a0d      	ldr	r2, [pc, #52]	; (8100b4c <HAL_Init+0xb4>)
 8100b18:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8100b1a:	4b0c      	ldr	r3, [pc, #48]	; (8100b4c <HAL_Init+0xb4>)
 8100b1c:	681b      	ldr	r3, [r3, #0]
 8100b1e:	4a0c      	ldr	r2, [pc, #48]	; (8100b50 <HAL_Init+0xb8>)
 8100b20:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8100b22:	2000      	movs	r0, #0
 8100b24:	f000 f816 	bl	8100b54 <HAL_InitTick>
 8100b28:	4603      	mov	r3, r0
 8100b2a:	2b00      	cmp	r3, #0
 8100b2c:	d001      	beq.n	8100b32 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 8100b2e:	2301      	movs	r3, #1
 8100b30:	e002      	b.n	8100b38 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8100b32:	f7ff fde9 	bl	8100708 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100b36:	2300      	movs	r3, #0
}
 8100b38:	4618      	mov	r0, r3
 8100b3a:	3708      	adds	r7, #8
 8100b3c:	46bd      	mov	sp, r7
 8100b3e:	bd80      	pop	{r7, pc}
 8100b40:	58024400 	.word	0x58024400
 8100b44:	40024400 	.word	0x40024400
 8100b48:	081066a4 	.word	0x081066a4
 8100b4c:	10000004 	.word	0x10000004
 8100b50:	10000000 	.word	0x10000000

08100b54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100b54:	b580      	push	{r7, lr}
 8100b56:	b082      	sub	sp, #8
 8100b58:	af00      	add	r7, sp, #0
 8100b5a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100b5c:	4b15      	ldr	r3, [pc, #84]	; (8100bb4 <HAL_InitTick+0x60>)
 8100b5e:	781b      	ldrb	r3, [r3, #0]
 8100b60:	2b00      	cmp	r3, #0
 8100b62:	d101      	bne.n	8100b68 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100b64:	2301      	movs	r3, #1
 8100b66:	e021      	b.n	8100bac <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100b68:	4b13      	ldr	r3, [pc, #76]	; (8100bb8 <HAL_InitTick+0x64>)
 8100b6a:	681a      	ldr	r2, [r3, #0]
 8100b6c:	4b11      	ldr	r3, [pc, #68]	; (8100bb4 <HAL_InitTick+0x60>)
 8100b6e:	781b      	ldrb	r3, [r3, #0]
 8100b70:	4619      	mov	r1, r3
 8100b72:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100b76:	fbb3 f3f1 	udiv	r3, r3, r1
 8100b7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8100b7e:	4618      	mov	r0, r3
 8100b80:	f000 f941 	bl	8100e06 <HAL_SYSTICK_Config>
 8100b84:	4603      	mov	r3, r0
 8100b86:	2b00      	cmp	r3, #0
 8100b88:	d001      	beq.n	8100b8e <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100b8a:	2301      	movs	r3, #1
 8100b8c:	e00e      	b.n	8100bac <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8100b8e:	687b      	ldr	r3, [r7, #4]
 8100b90:	2b0f      	cmp	r3, #15
 8100b92:	d80a      	bhi.n	8100baa <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100b94:	2200      	movs	r2, #0
 8100b96:	6879      	ldr	r1, [r7, #4]
 8100b98:	f04f 30ff 	mov.w	r0, #4294967295
 8100b9c:	f000 f90b 	bl	8100db6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8100ba0:	4a06      	ldr	r2, [pc, #24]	; (8100bbc <HAL_InitTick+0x68>)
 8100ba2:	687b      	ldr	r3, [r7, #4]
 8100ba4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100ba6:	2300      	movs	r3, #0
 8100ba8:	e000      	b.n	8100bac <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100baa:	2301      	movs	r3, #1
}
 8100bac:	4618      	mov	r0, r3
 8100bae:	3708      	adds	r7, #8
 8100bb0:	46bd      	mov	sp, r7
 8100bb2:	bd80      	pop	{r7, pc}
 8100bb4:	10000010 	.word	0x10000010
 8100bb8:	10000000 	.word	0x10000000
 8100bbc:	1000000c 	.word	0x1000000c

08100bc0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8100bc0:	b480      	push	{r7}
 8100bc2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8100bc4:	4b06      	ldr	r3, [pc, #24]	; (8100be0 <HAL_IncTick+0x20>)
 8100bc6:	781b      	ldrb	r3, [r3, #0]
 8100bc8:	461a      	mov	r2, r3
 8100bca:	4b06      	ldr	r3, [pc, #24]	; (8100be4 <HAL_IncTick+0x24>)
 8100bcc:	681b      	ldr	r3, [r3, #0]
 8100bce:	4413      	add	r3, r2
 8100bd0:	4a04      	ldr	r2, [pc, #16]	; (8100be4 <HAL_IncTick+0x24>)
 8100bd2:	6013      	str	r3, [r2, #0]
}
 8100bd4:	bf00      	nop
 8100bd6:	46bd      	mov	sp, r7
 8100bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bdc:	4770      	bx	lr
 8100bde:	bf00      	nop
 8100be0:	10000010 	.word	0x10000010
 8100be4:	10000128 	.word	0x10000128

08100be8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8100be8:	b480      	push	{r7}
 8100bea:	af00      	add	r7, sp, #0
  return uwTick;
 8100bec:	4b03      	ldr	r3, [pc, #12]	; (8100bfc <HAL_GetTick+0x14>)
 8100bee:	681b      	ldr	r3, [r3, #0]
}
 8100bf0:	4618      	mov	r0, r3
 8100bf2:	46bd      	mov	sp, r7
 8100bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100bf8:	4770      	bx	lr
 8100bfa:	bf00      	nop
 8100bfc:	10000128 	.word	0x10000128

08100c00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100c00:	b480      	push	{r7}
 8100c02:	b085      	sub	sp, #20
 8100c04:	af00      	add	r7, sp, #0
 8100c06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8100c08:	687b      	ldr	r3, [r7, #4]
 8100c0a:	f003 0307 	and.w	r3, r3, #7
 8100c0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100c10:	4b0c      	ldr	r3, [pc, #48]	; (8100c44 <__NVIC_SetPriorityGrouping+0x44>)
 8100c12:	68db      	ldr	r3, [r3, #12]
 8100c14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8100c16:	68ba      	ldr	r2, [r7, #8]
 8100c18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100c1c:	4013      	ands	r3, r2
 8100c1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100c20:	68fb      	ldr	r3, [r7, #12]
 8100c22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100c24:	68bb      	ldr	r3, [r7, #8]
 8100c26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8100c28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100c2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100c30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100c32:	4a04      	ldr	r2, [pc, #16]	; (8100c44 <__NVIC_SetPriorityGrouping+0x44>)
 8100c34:	68bb      	ldr	r3, [r7, #8]
 8100c36:	60d3      	str	r3, [r2, #12]
}
 8100c38:	bf00      	nop
 8100c3a:	3714      	adds	r7, #20
 8100c3c:	46bd      	mov	sp, r7
 8100c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c42:	4770      	bx	lr
 8100c44:	e000ed00 	.word	0xe000ed00

08100c48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8100c48:	b480      	push	{r7}
 8100c4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100c4c:	4b04      	ldr	r3, [pc, #16]	; (8100c60 <__NVIC_GetPriorityGrouping+0x18>)
 8100c4e:	68db      	ldr	r3, [r3, #12]
 8100c50:	0a1b      	lsrs	r3, r3, #8
 8100c52:	f003 0307 	and.w	r3, r3, #7
}
 8100c56:	4618      	mov	r0, r3
 8100c58:	46bd      	mov	sp, r7
 8100c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c5e:	4770      	bx	lr
 8100c60:	e000ed00 	.word	0xe000ed00

08100c64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100c64:	b480      	push	{r7}
 8100c66:	b083      	sub	sp, #12
 8100c68:	af00      	add	r7, sp, #0
 8100c6a:	4603      	mov	r3, r0
 8100c6c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100c6e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100c72:	2b00      	cmp	r3, #0
 8100c74:	db0b      	blt.n	8100c8e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8100c76:	88fb      	ldrh	r3, [r7, #6]
 8100c78:	f003 021f 	and.w	r2, r3, #31
 8100c7c:	4907      	ldr	r1, [pc, #28]	; (8100c9c <__NVIC_EnableIRQ+0x38>)
 8100c7e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100c82:	095b      	lsrs	r3, r3, #5
 8100c84:	2001      	movs	r0, #1
 8100c86:	fa00 f202 	lsl.w	r2, r0, r2
 8100c8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8100c8e:	bf00      	nop
 8100c90:	370c      	adds	r7, #12
 8100c92:	46bd      	mov	sp, r7
 8100c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c98:	4770      	bx	lr
 8100c9a:	bf00      	nop
 8100c9c:	e000e100 	.word	0xe000e100

08100ca0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100ca0:	b480      	push	{r7}
 8100ca2:	b083      	sub	sp, #12
 8100ca4:	af00      	add	r7, sp, #0
 8100ca6:	4603      	mov	r3, r0
 8100ca8:	6039      	str	r1, [r7, #0]
 8100caa:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100cac:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100cb0:	2b00      	cmp	r3, #0
 8100cb2:	db0a      	blt.n	8100cca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100cb4:	683b      	ldr	r3, [r7, #0]
 8100cb6:	b2da      	uxtb	r2, r3
 8100cb8:	490c      	ldr	r1, [pc, #48]	; (8100cec <__NVIC_SetPriority+0x4c>)
 8100cba:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100cbe:	0112      	lsls	r2, r2, #4
 8100cc0:	b2d2      	uxtb	r2, r2
 8100cc2:	440b      	add	r3, r1
 8100cc4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8100cc8:	e00a      	b.n	8100ce0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8100cca:	683b      	ldr	r3, [r7, #0]
 8100ccc:	b2da      	uxtb	r2, r3
 8100cce:	4908      	ldr	r1, [pc, #32]	; (8100cf0 <__NVIC_SetPriority+0x50>)
 8100cd0:	88fb      	ldrh	r3, [r7, #6]
 8100cd2:	f003 030f 	and.w	r3, r3, #15
 8100cd6:	3b04      	subs	r3, #4
 8100cd8:	0112      	lsls	r2, r2, #4
 8100cda:	b2d2      	uxtb	r2, r2
 8100cdc:	440b      	add	r3, r1
 8100cde:	761a      	strb	r2, [r3, #24]
}
 8100ce0:	bf00      	nop
 8100ce2:	370c      	adds	r7, #12
 8100ce4:	46bd      	mov	sp, r7
 8100ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100cea:	4770      	bx	lr
 8100cec:	e000e100 	.word	0xe000e100
 8100cf0:	e000ed00 	.word	0xe000ed00

08100cf4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100cf4:	b480      	push	{r7}
 8100cf6:	b089      	sub	sp, #36	; 0x24
 8100cf8:	af00      	add	r7, sp, #0
 8100cfa:	60f8      	str	r0, [r7, #12]
 8100cfc:	60b9      	str	r1, [r7, #8]
 8100cfe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8100d00:	68fb      	ldr	r3, [r7, #12]
 8100d02:	f003 0307 	and.w	r3, r3, #7
 8100d06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8100d08:	69fb      	ldr	r3, [r7, #28]
 8100d0a:	f1c3 0307 	rsb	r3, r3, #7
 8100d0e:	2b04      	cmp	r3, #4
 8100d10:	bf28      	it	cs
 8100d12:	2304      	movcs	r3, #4
 8100d14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8100d16:	69fb      	ldr	r3, [r7, #28]
 8100d18:	3304      	adds	r3, #4
 8100d1a:	2b06      	cmp	r3, #6
 8100d1c:	d902      	bls.n	8100d24 <NVIC_EncodePriority+0x30>
 8100d1e:	69fb      	ldr	r3, [r7, #28]
 8100d20:	3b03      	subs	r3, #3
 8100d22:	e000      	b.n	8100d26 <NVIC_EncodePriority+0x32>
 8100d24:	2300      	movs	r3, #0
 8100d26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100d28:	f04f 32ff 	mov.w	r2, #4294967295
 8100d2c:	69bb      	ldr	r3, [r7, #24]
 8100d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8100d32:	43da      	mvns	r2, r3
 8100d34:	68bb      	ldr	r3, [r7, #8]
 8100d36:	401a      	ands	r2, r3
 8100d38:	697b      	ldr	r3, [r7, #20]
 8100d3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100d3c:	f04f 31ff 	mov.w	r1, #4294967295
 8100d40:	697b      	ldr	r3, [r7, #20]
 8100d42:	fa01 f303 	lsl.w	r3, r1, r3
 8100d46:	43d9      	mvns	r1, r3
 8100d48:	687b      	ldr	r3, [r7, #4]
 8100d4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100d4c:	4313      	orrs	r3, r2
         );
}
 8100d4e:	4618      	mov	r0, r3
 8100d50:	3724      	adds	r7, #36	; 0x24
 8100d52:	46bd      	mov	sp, r7
 8100d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100d58:	4770      	bx	lr
	...

08100d5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100d5c:	b580      	push	{r7, lr}
 8100d5e:	b082      	sub	sp, #8
 8100d60:	af00      	add	r7, sp, #0
 8100d62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8100d64:	687b      	ldr	r3, [r7, #4]
 8100d66:	3b01      	subs	r3, #1
 8100d68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100d6c:	d301      	bcc.n	8100d72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100d6e:	2301      	movs	r3, #1
 8100d70:	e00f      	b.n	8100d92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8100d72:	4a0a      	ldr	r2, [pc, #40]	; (8100d9c <SysTick_Config+0x40>)
 8100d74:	687b      	ldr	r3, [r7, #4]
 8100d76:	3b01      	subs	r3, #1
 8100d78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100d7a:	210f      	movs	r1, #15
 8100d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8100d80:	f7ff ff8e 	bl	8100ca0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8100d84:	4b05      	ldr	r3, [pc, #20]	; (8100d9c <SysTick_Config+0x40>)
 8100d86:	2200      	movs	r2, #0
 8100d88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100d8a:	4b04      	ldr	r3, [pc, #16]	; (8100d9c <SysTick_Config+0x40>)
 8100d8c:	2207      	movs	r2, #7
 8100d8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100d90:	2300      	movs	r3, #0
}
 8100d92:	4618      	mov	r0, r3
 8100d94:	3708      	adds	r7, #8
 8100d96:	46bd      	mov	sp, r7
 8100d98:	bd80      	pop	{r7, pc}
 8100d9a:	bf00      	nop
 8100d9c:	e000e010 	.word	0xe000e010

08100da0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100da0:	b580      	push	{r7, lr}
 8100da2:	b082      	sub	sp, #8
 8100da4:	af00      	add	r7, sp, #0
 8100da6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100da8:	6878      	ldr	r0, [r7, #4]
 8100daa:	f7ff ff29 	bl	8100c00 <__NVIC_SetPriorityGrouping>
}
 8100dae:	bf00      	nop
 8100db0:	3708      	adds	r7, #8
 8100db2:	46bd      	mov	sp, r7
 8100db4:	bd80      	pop	{r7, pc}

08100db6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8100db6:	b580      	push	{r7, lr}
 8100db8:	b086      	sub	sp, #24
 8100dba:	af00      	add	r7, sp, #0
 8100dbc:	4603      	mov	r3, r0
 8100dbe:	60b9      	str	r1, [r7, #8]
 8100dc0:	607a      	str	r2, [r7, #4]
 8100dc2:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8100dc4:	f7ff ff40 	bl	8100c48 <__NVIC_GetPriorityGrouping>
 8100dc8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8100dca:	687a      	ldr	r2, [r7, #4]
 8100dcc:	68b9      	ldr	r1, [r7, #8]
 8100dce:	6978      	ldr	r0, [r7, #20]
 8100dd0:	f7ff ff90 	bl	8100cf4 <NVIC_EncodePriority>
 8100dd4:	4602      	mov	r2, r0
 8100dd6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8100dda:	4611      	mov	r1, r2
 8100ddc:	4618      	mov	r0, r3
 8100dde:	f7ff ff5f 	bl	8100ca0 <__NVIC_SetPriority>
}
 8100de2:	bf00      	nop
 8100de4:	3718      	adds	r7, #24
 8100de6:	46bd      	mov	sp, r7
 8100de8:	bd80      	pop	{r7, pc}

08100dea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8100dea:	b580      	push	{r7, lr}
 8100dec:	b082      	sub	sp, #8
 8100dee:	af00      	add	r7, sp, #0
 8100df0:	4603      	mov	r3, r0
 8100df2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8100df4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100df8:	4618      	mov	r0, r3
 8100dfa:	f7ff ff33 	bl	8100c64 <__NVIC_EnableIRQ>
}
 8100dfe:	bf00      	nop
 8100e00:	3708      	adds	r7, #8
 8100e02:	46bd      	mov	sp, r7
 8100e04:	bd80      	pop	{r7, pc}

08100e06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8100e06:	b580      	push	{r7, lr}
 8100e08:	b082      	sub	sp, #8
 8100e0a:	af00      	add	r7, sp, #0
 8100e0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8100e0e:	6878      	ldr	r0, [r7, #4]
 8100e10:	f7ff ffa4 	bl	8100d5c <SysTick_Config>
 8100e14:	4603      	mov	r3, r0
}
 8100e16:	4618      	mov	r0, r3
 8100e18:	3708      	adds	r7, #8
 8100e1a:	46bd      	mov	sp, r7
 8100e1c:	bd80      	pop	{r7, pc}
	...

08100e20 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8100e20:	b480      	push	{r7}
 8100e22:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8100e24:	4b07      	ldr	r3, [pc, #28]	; (8100e44 <HAL_GetCurrentCPUID+0x24>)
 8100e26:	681b      	ldr	r3, [r3, #0]
 8100e28:	091b      	lsrs	r3, r3, #4
 8100e2a:	f003 030f 	and.w	r3, r3, #15
 8100e2e:	2b07      	cmp	r3, #7
 8100e30:	d101      	bne.n	8100e36 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 8100e32:	2303      	movs	r3, #3
 8100e34:	e000      	b.n	8100e38 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100e36:	2301      	movs	r3, #1
  }
}
 8100e38:	4618      	mov	r0, r3
 8100e3a:	46bd      	mov	sp, r7
 8100e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e40:	4770      	bx	lr
 8100e42:	bf00      	nop
 8100e44:	e000ed00 	.word	0xe000ed00

08100e48 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8100e48:	b580      	push	{r7, lr}
 8100e4a:	b086      	sub	sp, #24
 8100e4c:	af00      	add	r7, sp, #0
 8100e4e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8100e50:	f7ff feca 	bl	8100be8 <HAL_GetTick>
 8100e54:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8100e56:	687b      	ldr	r3, [r7, #4]
 8100e58:	2b00      	cmp	r3, #0
 8100e5a:	d101      	bne.n	8100e60 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8100e5c:	2301      	movs	r3, #1
 8100e5e:	e2dc      	b.n	810141a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8100e60:	687b      	ldr	r3, [r7, #4]
 8100e62:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8100e66:	b2db      	uxtb	r3, r3
 8100e68:	2b02      	cmp	r3, #2
 8100e6a:	d008      	beq.n	8100e7e <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8100e6c:	687b      	ldr	r3, [r7, #4]
 8100e6e:	2280      	movs	r2, #128	; 0x80
 8100e70:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8100e72:	687b      	ldr	r3, [r7, #4]
 8100e74:	2200      	movs	r2, #0
 8100e76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 8100e7a:	2301      	movs	r3, #1
 8100e7c:	e2cd      	b.n	810141a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8100e7e:	687b      	ldr	r3, [r7, #4]
 8100e80:	681b      	ldr	r3, [r3, #0]
 8100e82:	4a76      	ldr	r2, [pc, #472]	; (810105c <HAL_DMA_Abort+0x214>)
 8100e84:	4293      	cmp	r3, r2
 8100e86:	d04a      	beq.n	8100f1e <HAL_DMA_Abort+0xd6>
 8100e88:	687b      	ldr	r3, [r7, #4]
 8100e8a:	681b      	ldr	r3, [r3, #0]
 8100e8c:	4a74      	ldr	r2, [pc, #464]	; (8101060 <HAL_DMA_Abort+0x218>)
 8100e8e:	4293      	cmp	r3, r2
 8100e90:	d045      	beq.n	8100f1e <HAL_DMA_Abort+0xd6>
 8100e92:	687b      	ldr	r3, [r7, #4]
 8100e94:	681b      	ldr	r3, [r3, #0]
 8100e96:	4a73      	ldr	r2, [pc, #460]	; (8101064 <HAL_DMA_Abort+0x21c>)
 8100e98:	4293      	cmp	r3, r2
 8100e9a:	d040      	beq.n	8100f1e <HAL_DMA_Abort+0xd6>
 8100e9c:	687b      	ldr	r3, [r7, #4]
 8100e9e:	681b      	ldr	r3, [r3, #0]
 8100ea0:	4a71      	ldr	r2, [pc, #452]	; (8101068 <HAL_DMA_Abort+0x220>)
 8100ea2:	4293      	cmp	r3, r2
 8100ea4:	d03b      	beq.n	8100f1e <HAL_DMA_Abort+0xd6>
 8100ea6:	687b      	ldr	r3, [r7, #4]
 8100ea8:	681b      	ldr	r3, [r3, #0]
 8100eaa:	4a70      	ldr	r2, [pc, #448]	; (810106c <HAL_DMA_Abort+0x224>)
 8100eac:	4293      	cmp	r3, r2
 8100eae:	d036      	beq.n	8100f1e <HAL_DMA_Abort+0xd6>
 8100eb0:	687b      	ldr	r3, [r7, #4]
 8100eb2:	681b      	ldr	r3, [r3, #0]
 8100eb4:	4a6e      	ldr	r2, [pc, #440]	; (8101070 <HAL_DMA_Abort+0x228>)
 8100eb6:	4293      	cmp	r3, r2
 8100eb8:	d031      	beq.n	8100f1e <HAL_DMA_Abort+0xd6>
 8100eba:	687b      	ldr	r3, [r7, #4]
 8100ebc:	681b      	ldr	r3, [r3, #0]
 8100ebe:	4a6d      	ldr	r2, [pc, #436]	; (8101074 <HAL_DMA_Abort+0x22c>)
 8100ec0:	4293      	cmp	r3, r2
 8100ec2:	d02c      	beq.n	8100f1e <HAL_DMA_Abort+0xd6>
 8100ec4:	687b      	ldr	r3, [r7, #4]
 8100ec6:	681b      	ldr	r3, [r3, #0]
 8100ec8:	4a6b      	ldr	r2, [pc, #428]	; (8101078 <HAL_DMA_Abort+0x230>)
 8100eca:	4293      	cmp	r3, r2
 8100ecc:	d027      	beq.n	8100f1e <HAL_DMA_Abort+0xd6>
 8100ece:	687b      	ldr	r3, [r7, #4]
 8100ed0:	681b      	ldr	r3, [r3, #0]
 8100ed2:	4a6a      	ldr	r2, [pc, #424]	; (810107c <HAL_DMA_Abort+0x234>)
 8100ed4:	4293      	cmp	r3, r2
 8100ed6:	d022      	beq.n	8100f1e <HAL_DMA_Abort+0xd6>
 8100ed8:	687b      	ldr	r3, [r7, #4]
 8100eda:	681b      	ldr	r3, [r3, #0]
 8100edc:	4a68      	ldr	r2, [pc, #416]	; (8101080 <HAL_DMA_Abort+0x238>)
 8100ede:	4293      	cmp	r3, r2
 8100ee0:	d01d      	beq.n	8100f1e <HAL_DMA_Abort+0xd6>
 8100ee2:	687b      	ldr	r3, [r7, #4]
 8100ee4:	681b      	ldr	r3, [r3, #0]
 8100ee6:	4a67      	ldr	r2, [pc, #412]	; (8101084 <HAL_DMA_Abort+0x23c>)
 8100ee8:	4293      	cmp	r3, r2
 8100eea:	d018      	beq.n	8100f1e <HAL_DMA_Abort+0xd6>
 8100eec:	687b      	ldr	r3, [r7, #4]
 8100eee:	681b      	ldr	r3, [r3, #0]
 8100ef0:	4a65      	ldr	r2, [pc, #404]	; (8101088 <HAL_DMA_Abort+0x240>)
 8100ef2:	4293      	cmp	r3, r2
 8100ef4:	d013      	beq.n	8100f1e <HAL_DMA_Abort+0xd6>
 8100ef6:	687b      	ldr	r3, [r7, #4]
 8100ef8:	681b      	ldr	r3, [r3, #0]
 8100efa:	4a64      	ldr	r2, [pc, #400]	; (810108c <HAL_DMA_Abort+0x244>)
 8100efc:	4293      	cmp	r3, r2
 8100efe:	d00e      	beq.n	8100f1e <HAL_DMA_Abort+0xd6>
 8100f00:	687b      	ldr	r3, [r7, #4]
 8100f02:	681b      	ldr	r3, [r3, #0]
 8100f04:	4a62      	ldr	r2, [pc, #392]	; (8101090 <HAL_DMA_Abort+0x248>)
 8100f06:	4293      	cmp	r3, r2
 8100f08:	d009      	beq.n	8100f1e <HAL_DMA_Abort+0xd6>
 8100f0a:	687b      	ldr	r3, [r7, #4]
 8100f0c:	681b      	ldr	r3, [r3, #0]
 8100f0e:	4a61      	ldr	r2, [pc, #388]	; (8101094 <HAL_DMA_Abort+0x24c>)
 8100f10:	4293      	cmp	r3, r2
 8100f12:	d004      	beq.n	8100f1e <HAL_DMA_Abort+0xd6>
 8100f14:	687b      	ldr	r3, [r7, #4]
 8100f16:	681b      	ldr	r3, [r3, #0]
 8100f18:	4a5f      	ldr	r2, [pc, #380]	; (8101098 <HAL_DMA_Abort+0x250>)
 8100f1a:	4293      	cmp	r3, r2
 8100f1c:	d101      	bne.n	8100f22 <HAL_DMA_Abort+0xda>
 8100f1e:	2301      	movs	r3, #1
 8100f20:	e000      	b.n	8100f24 <HAL_DMA_Abort+0xdc>
 8100f22:	2300      	movs	r3, #0
 8100f24:	2b00      	cmp	r3, #0
 8100f26:	d013      	beq.n	8100f50 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8100f28:	687b      	ldr	r3, [r7, #4]
 8100f2a:	681b      	ldr	r3, [r3, #0]
 8100f2c:	681a      	ldr	r2, [r3, #0]
 8100f2e:	687b      	ldr	r3, [r7, #4]
 8100f30:	681b      	ldr	r3, [r3, #0]
 8100f32:	f022 021e 	bic.w	r2, r2, #30
 8100f36:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8100f38:	687b      	ldr	r3, [r7, #4]
 8100f3a:	681b      	ldr	r3, [r3, #0]
 8100f3c:	695a      	ldr	r2, [r3, #20]
 8100f3e:	687b      	ldr	r3, [r7, #4]
 8100f40:	681b      	ldr	r3, [r3, #0]
 8100f42:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8100f46:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8100f48:	687b      	ldr	r3, [r7, #4]
 8100f4a:	681b      	ldr	r3, [r3, #0]
 8100f4c:	617b      	str	r3, [r7, #20]
 8100f4e:	e00a      	b.n	8100f66 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8100f50:	687b      	ldr	r3, [r7, #4]
 8100f52:	681b      	ldr	r3, [r3, #0]
 8100f54:	681a      	ldr	r2, [r3, #0]
 8100f56:	687b      	ldr	r3, [r7, #4]
 8100f58:	681b      	ldr	r3, [r3, #0]
 8100f5a:	f022 020e 	bic.w	r2, r2, #14
 8100f5e:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8100f60:	687b      	ldr	r3, [r7, #4]
 8100f62:	681b      	ldr	r3, [r3, #0]
 8100f64:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8100f66:	687b      	ldr	r3, [r7, #4]
 8100f68:	681b      	ldr	r3, [r3, #0]
 8100f6a:	4a3c      	ldr	r2, [pc, #240]	; (810105c <HAL_DMA_Abort+0x214>)
 8100f6c:	4293      	cmp	r3, r2
 8100f6e:	d072      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8100f70:	687b      	ldr	r3, [r7, #4]
 8100f72:	681b      	ldr	r3, [r3, #0]
 8100f74:	4a3a      	ldr	r2, [pc, #232]	; (8101060 <HAL_DMA_Abort+0x218>)
 8100f76:	4293      	cmp	r3, r2
 8100f78:	d06d      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8100f7a:	687b      	ldr	r3, [r7, #4]
 8100f7c:	681b      	ldr	r3, [r3, #0]
 8100f7e:	4a39      	ldr	r2, [pc, #228]	; (8101064 <HAL_DMA_Abort+0x21c>)
 8100f80:	4293      	cmp	r3, r2
 8100f82:	d068      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8100f84:	687b      	ldr	r3, [r7, #4]
 8100f86:	681b      	ldr	r3, [r3, #0]
 8100f88:	4a37      	ldr	r2, [pc, #220]	; (8101068 <HAL_DMA_Abort+0x220>)
 8100f8a:	4293      	cmp	r3, r2
 8100f8c:	d063      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8100f8e:	687b      	ldr	r3, [r7, #4]
 8100f90:	681b      	ldr	r3, [r3, #0]
 8100f92:	4a36      	ldr	r2, [pc, #216]	; (810106c <HAL_DMA_Abort+0x224>)
 8100f94:	4293      	cmp	r3, r2
 8100f96:	d05e      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8100f98:	687b      	ldr	r3, [r7, #4]
 8100f9a:	681b      	ldr	r3, [r3, #0]
 8100f9c:	4a34      	ldr	r2, [pc, #208]	; (8101070 <HAL_DMA_Abort+0x228>)
 8100f9e:	4293      	cmp	r3, r2
 8100fa0:	d059      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8100fa2:	687b      	ldr	r3, [r7, #4]
 8100fa4:	681b      	ldr	r3, [r3, #0]
 8100fa6:	4a33      	ldr	r2, [pc, #204]	; (8101074 <HAL_DMA_Abort+0x22c>)
 8100fa8:	4293      	cmp	r3, r2
 8100faa:	d054      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8100fac:	687b      	ldr	r3, [r7, #4]
 8100fae:	681b      	ldr	r3, [r3, #0]
 8100fb0:	4a31      	ldr	r2, [pc, #196]	; (8101078 <HAL_DMA_Abort+0x230>)
 8100fb2:	4293      	cmp	r3, r2
 8100fb4:	d04f      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8100fb6:	687b      	ldr	r3, [r7, #4]
 8100fb8:	681b      	ldr	r3, [r3, #0]
 8100fba:	4a30      	ldr	r2, [pc, #192]	; (810107c <HAL_DMA_Abort+0x234>)
 8100fbc:	4293      	cmp	r3, r2
 8100fbe:	d04a      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8100fc0:	687b      	ldr	r3, [r7, #4]
 8100fc2:	681b      	ldr	r3, [r3, #0]
 8100fc4:	4a2e      	ldr	r2, [pc, #184]	; (8101080 <HAL_DMA_Abort+0x238>)
 8100fc6:	4293      	cmp	r3, r2
 8100fc8:	d045      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8100fca:	687b      	ldr	r3, [r7, #4]
 8100fcc:	681b      	ldr	r3, [r3, #0]
 8100fce:	4a2d      	ldr	r2, [pc, #180]	; (8101084 <HAL_DMA_Abort+0x23c>)
 8100fd0:	4293      	cmp	r3, r2
 8100fd2:	d040      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8100fd4:	687b      	ldr	r3, [r7, #4]
 8100fd6:	681b      	ldr	r3, [r3, #0]
 8100fd8:	4a2b      	ldr	r2, [pc, #172]	; (8101088 <HAL_DMA_Abort+0x240>)
 8100fda:	4293      	cmp	r3, r2
 8100fdc:	d03b      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8100fde:	687b      	ldr	r3, [r7, #4]
 8100fe0:	681b      	ldr	r3, [r3, #0]
 8100fe2:	4a2a      	ldr	r2, [pc, #168]	; (810108c <HAL_DMA_Abort+0x244>)
 8100fe4:	4293      	cmp	r3, r2
 8100fe6:	d036      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8100fe8:	687b      	ldr	r3, [r7, #4]
 8100fea:	681b      	ldr	r3, [r3, #0]
 8100fec:	4a28      	ldr	r2, [pc, #160]	; (8101090 <HAL_DMA_Abort+0x248>)
 8100fee:	4293      	cmp	r3, r2
 8100ff0:	d031      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8100ff2:	687b      	ldr	r3, [r7, #4]
 8100ff4:	681b      	ldr	r3, [r3, #0]
 8100ff6:	4a27      	ldr	r2, [pc, #156]	; (8101094 <HAL_DMA_Abort+0x24c>)
 8100ff8:	4293      	cmp	r3, r2
 8100ffa:	d02c      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8100ffc:	687b      	ldr	r3, [r7, #4]
 8100ffe:	681b      	ldr	r3, [r3, #0]
 8101000:	4a25      	ldr	r2, [pc, #148]	; (8101098 <HAL_DMA_Abort+0x250>)
 8101002:	4293      	cmp	r3, r2
 8101004:	d027      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8101006:	687b      	ldr	r3, [r7, #4]
 8101008:	681b      	ldr	r3, [r3, #0]
 810100a:	4a24      	ldr	r2, [pc, #144]	; (810109c <HAL_DMA_Abort+0x254>)
 810100c:	4293      	cmp	r3, r2
 810100e:	d022      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8101010:	687b      	ldr	r3, [r7, #4]
 8101012:	681b      	ldr	r3, [r3, #0]
 8101014:	4a22      	ldr	r2, [pc, #136]	; (81010a0 <HAL_DMA_Abort+0x258>)
 8101016:	4293      	cmp	r3, r2
 8101018:	d01d      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 810101a:	687b      	ldr	r3, [r7, #4]
 810101c:	681b      	ldr	r3, [r3, #0]
 810101e:	4a21      	ldr	r2, [pc, #132]	; (81010a4 <HAL_DMA_Abort+0x25c>)
 8101020:	4293      	cmp	r3, r2
 8101022:	d018      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8101024:	687b      	ldr	r3, [r7, #4]
 8101026:	681b      	ldr	r3, [r3, #0]
 8101028:	4a1f      	ldr	r2, [pc, #124]	; (81010a8 <HAL_DMA_Abort+0x260>)
 810102a:	4293      	cmp	r3, r2
 810102c:	d013      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 810102e:	687b      	ldr	r3, [r7, #4]
 8101030:	681b      	ldr	r3, [r3, #0]
 8101032:	4a1e      	ldr	r2, [pc, #120]	; (81010ac <HAL_DMA_Abort+0x264>)
 8101034:	4293      	cmp	r3, r2
 8101036:	d00e      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8101038:	687b      	ldr	r3, [r7, #4]
 810103a:	681b      	ldr	r3, [r3, #0]
 810103c:	4a1c      	ldr	r2, [pc, #112]	; (81010b0 <HAL_DMA_Abort+0x268>)
 810103e:	4293      	cmp	r3, r2
 8101040:	d009      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 8101042:	687b      	ldr	r3, [r7, #4]
 8101044:	681b      	ldr	r3, [r3, #0]
 8101046:	4a1b      	ldr	r2, [pc, #108]	; (81010b4 <HAL_DMA_Abort+0x26c>)
 8101048:	4293      	cmp	r3, r2
 810104a:	d004      	beq.n	8101056 <HAL_DMA_Abort+0x20e>
 810104c:	687b      	ldr	r3, [r7, #4]
 810104e:	681b      	ldr	r3, [r3, #0]
 8101050:	4a19      	ldr	r2, [pc, #100]	; (81010b8 <HAL_DMA_Abort+0x270>)
 8101052:	4293      	cmp	r3, r2
 8101054:	d132      	bne.n	81010bc <HAL_DMA_Abort+0x274>
 8101056:	2301      	movs	r3, #1
 8101058:	e031      	b.n	81010be <HAL_DMA_Abort+0x276>
 810105a:	bf00      	nop
 810105c:	40020010 	.word	0x40020010
 8101060:	40020028 	.word	0x40020028
 8101064:	40020040 	.word	0x40020040
 8101068:	40020058 	.word	0x40020058
 810106c:	40020070 	.word	0x40020070
 8101070:	40020088 	.word	0x40020088
 8101074:	400200a0 	.word	0x400200a0
 8101078:	400200b8 	.word	0x400200b8
 810107c:	40020410 	.word	0x40020410
 8101080:	40020428 	.word	0x40020428
 8101084:	40020440 	.word	0x40020440
 8101088:	40020458 	.word	0x40020458
 810108c:	40020470 	.word	0x40020470
 8101090:	40020488 	.word	0x40020488
 8101094:	400204a0 	.word	0x400204a0
 8101098:	400204b8 	.word	0x400204b8
 810109c:	58025408 	.word	0x58025408
 81010a0:	5802541c 	.word	0x5802541c
 81010a4:	58025430 	.word	0x58025430
 81010a8:	58025444 	.word	0x58025444
 81010ac:	58025458 	.word	0x58025458
 81010b0:	5802546c 	.word	0x5802546c
 81010b4:	58025480 	.word	0x58025480
 81010b8:	58025494 	.word	0x58025494
 81010bc:	2300      	movs	r3, #0
 81010be:	2b00      	cmp	r3, #0
 81010c0:	d007      	beq.n	81010d2 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 81010c2:	687b      	ldr	r3, [r7, #4]
 81010c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81010c6:	681a      	ldr	r2, [r3, #0]
 81010c8:	687b      	ldr	r3, [r7, #4]
 81010ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81010cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81010d0:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 81010d2:	687b      	ldr	r3, [r7, #4]
 81010d4:	681b      	ldr	r3, [r3, #0]
 81010d6:	4a6d      	ldr	r2, [pc, #436]	; (810128c <HAL_DMA_Abort+0x444>)
 81010d8:	4293      	cmp	r3, r2
 81010da:	d04a      	beq.n	8101172 <HAL_DMA_Abort+0x32a>
 81010dc:	687b      	ldr	r3, [r7, #4]
 81010de:	681b      	ldr	r3, [r3, #0]
 81010e0:	4a6b      	ldr	r2, [pc, #428]	; (8101290 <HAL_DMA_Abort+0x448>)
 81010e2:	4293      	cmp	r3, r2
 81010e4:	d045      	beq.n	8101172 <HAL_DMA_Abort+0x32a>
 81010e6:	687b      	ldr	r3, [r7, #4]
 81010e8:	681b      	ldr	r3, [r3, #0]
 81010ea:	4a6a      	ldr	r2, [pc, #424]	; (8101294 <HAL_DMA_Abort+0x44c>)
 81010ec:	4293      	cmp	r3, r2
 81010ee:	d040      	beq.n	8101172 <HAL_DMA_Abort+0x32a>
 81010f0:	687b      	ldr	r3, [r7, #4]
 81010f2:	681b      	ldr	r3, [r3, #0]
 81010f4:	4a68      	ldr	r2, [pc, #416]	; (8101298 <HAL_DMA_Abort+0x450>)
 81010f6:	4293      	cmp	r3, r2
 81010f8:	d03b      	beq.n	8101172 <HAL_DMA_Abort+0x32a>
 81010fa:	687b      	ldr	r3, [r7, #4]
 81010fc:	681b      	ldr	r3, [r3, #0]
 81010fe:	4a67      	ldr	r2, [pc, #412]	; (810129c <HAL_DMA_Abort+0x454>)
 8101100:	4293      	cmp	r3, r2
 8101102:	d036      	beq.n	8101172 <HAL_DMA_Abort+0x32a>
 8101104:	687b      	ldr	r3, [r7, #4]
 8101106:	681b      	ldr	r3, [r3, #0]
 8101108:	4a65      	ldr	r2, [pc, #404]	; (81012a0 <HAL_DMA_Abort+0x458>)
 810110a:	4293      	cmp	r3, r2
 810110c:	d031      	beq.n	8101172 <HAL_DMA_Abort+0x32a>
 810110e:	687b      	ldr	r3, [r7, #4]
 8101110:	681b      	ldr	r3, [r3, #0]
 8101112:	4a64      	ldr	r2, [pc, #400]	; (81012a4 <HAL_DMA_Abort+0x45c>)
 8101114:	4293      	cmp	r3, r2
 8101116:	d02c      	beq.n	8101172 <HAL_DMA_Abort+0x32a>
 8101118:	687b      	ldr	r3, [r7, #4]
 810111a:	681b      	ldr	r3, [r3, #0]
 810111c:	4a62      	ldr	r2, [pc, #392]	; (81012a8 <HAL_DMA_Abort+0x460>)
 810111e:	4293      	cmp	r3, r2
 8101120:	d027      	beq.n	8101172 <HAL_DMA_Abort+0x32a>
 8101122:	687b      	ldr	r3, [r7, #4]
 8101124:	681b      	ldr	r3, [r3, #0]
 8101126:	4a61      	ldr	r2, [pc, #388]	; (81012ac <HAL_DMA_Abort+0x464>)
 8101128:	4293      	cmp	r3, r2
 810112a:	d022      	beq.n	8101172 <HAL_DMA_Abort+0x32a>
 810112c:	687b      	ldr	r3, [r7, #4]
 810112e:	681b      	ldr	r3, [r3, #0]
 8101130:	4a5f      	ldr	r2, [pc, #380]	; (81012b0 <HAL_DMA_Abort+0x468>)
 8101132:	4293      	cmp	r3, r2
 8101134:	d01d      	beq.n	8101172 <HAL_DMA_Abort+0x32a>
 8101136:	687b      	ldr	r3, [r7, #4]
 8101138:	681b      	ldr	r3, [r3, #0]
 810113a:	4a5e      	ldr	r2, [pc, #376]	; (81012b4 <HAL_DMA_Abort+0x46c>)
 810113c:	4293      	cmp	r3, r2
 810113e:	d018      	beq.n	8101172 <HAL_DMA_Abort+0x32a>
 8101140:	687b      	ldr	r3, [r7, #4]
 8101142:	681b      	ldr	r3, [r3, #0]
 8101144:	4a5c      	ldr	r2, [pc, #368]	; (81012b8 <HAL_DMA_Abort+0x470>)
 8101146:	4293      	cmp	r3, r2
 8101148:	d013      	beq.n	8101172 <HAL_DMA_Abort+0x32a>
 810114a:	687b      	ldr	r3, [r7, #4]
 810114c:	681b      	ldr	r3, [r3, #0]
 810114e:	4a5b      	ldr	r2, [pc, #364]	; (81012bc <HAL_DMA_Abort+0x474>)
 8101150:	4293      	cmp	r3, r2
 8101152:	d00e      	beq.n	8101172 <HAL_DMA_Abort+0x32a>
 8101154:	687b      	ldr	r3, [r7, #4]
 8101156:	681b      	ldr	r3, [r3, #0]
 8101158:	4a59      	ldr	r2, [pc, #356]	; (81012c0 <HAL_DMA_Abort+0x478>)
 810115a:	4293      	cmp	r3, r2
 810115c:	d009      	beq.n	8101172 <HAL_DMA_Abort+0x32a>
 810115e:	687b      	ldr	r3, [r7, #4]
 8101160:	681b      	ldr	r3, [r3, #0]
 8101162:	4a58      	ldr	r2, [pc, #352]	; (81012c4 <HAL_DMA_Abort+0x47c>)
 8101164:	4293      	cmp	r3, r2
 8101166:	d004      	beq.n	8101172 <HAL_DMA_Abort+0x32a>
 8101168:	687b      	ldr	r3, [r7, #4]
 810116a:	681b      	ldr	r3, [r3, #0]
 810116c:	4a56      	ldr	r2, [pc, #344]	; (81012c8 <HAL_DMA_Abort+0x480>)
 810116e:	4293      	cmp	r3, r2
 8101170:	d108      	bne.n	8101184 <HAL_DMA_Abort+0x33c>
 8101172:	687b      	ldr	r3, [r7, #4]
 8101174:	681b      	ldr	r3, [r3, #0]
 8101176:	681a      	ldr	r2, [r3, #0]
 8101178:	687b      	ldr	r3, [r7, #4]
 810117a:	681b      	ldr	r3, [r3, #0]
 810117c:	f022 0201 	bic.w	r2, r2, #1
 8101180:	601a      	str	r2, [r3, #0]
 8101182:	e007      	b.n	8101194 <HAL_DMA_Abort+0x34c>
 8101184:	687b      	ldr	r3, [r7, #4]
 8101186:	681b      	ldr	r3, [r3, #0]
 8101188:	681a      	ldr	r2, [r3, #0]
 810118a:	687b      	ldr	r3, [r7, #4]
 810118c:	681b      	ldr	r3, [r3, #0]
 810118e:	f022 0201 	bic.w	r2, r2, #1
 8101192:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8101194:	e013      	b.n	81011be <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8101196:	f7ff fd27 	bl	8100be8 <HAL_GetTick>
 810119a:	4602      	mov	r2, r0
 810119c:	693b      	ldr	r3, [r7, #16]
 810119e:	1ad3      	subs	r3, r2, r3
 81011a0:	2b05      	cmp	r3, #5
 81011a2:	d90c      	bls.n	81011be <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 81011a4:	687b      	ldr	r3, [r7, #4]
 81011a6:	2220      	movs	r2, #32
 81011a8:	655a      	str	r2, [r3, #84]	; 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 81011aa:	687b      	ldr	r3, [r7, #4]
 81011ac:	2203      	movs	r2, #3
 81011ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 81011b2:	687b      	ldr	r3, [r7, #4]
 81011b4:	2200      	movs	r2, #0
 81011b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_ERROR;
 81011ba:	2301      	movs	r3, #1
 81011bc:	e12d      	b.n	810141a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 81011be:	697b      	ldr	r3, [r7, #20]
 81011c0:	681b      	ldr	r3, [r3, #0]
 81011c2:	f003 0301 	and.w	r3, r3, #1
 81011c6:	2b00      	cmp	r3, #0
 81011c8:	d1e5      	bne.n	8101196 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81011ca:	687b      	ldr	r3, [r7, #4]
 81011cc:	681b      	ldr	r3, [r3, #0]
 81011ce:	4a2f      	ldr	r2, [pc, #188]	; (810128c <HAL_DMA_Abort+0x444>)
 81011d0:	4293      	cmp	r3, r2
 81011d2:	d04a      	beq.n	810126a <HAL_DMA_Abort+0x422>
 81011d4:	687b      	ldr	r3, [r7, #4]
 81011d6:	681b      	ldr	r3, [r3, #0]
 81011d8:	4a2d      	ldr	r2, [pc, #180]	; (8101290 <HAL_DMA_Abort+0x448>)
 81011da:	4293      	cmp	r3, r2
 81011dc:	d045      	beq.n	810126a <HAL_DMA_Abort+0x422>
 81011de:	687b      	ldr	r3, [r7, #4]
 81011e0:	681b      	ldr	r3, [r3, #0]
 81011e2:	4a2c      	ldr	r2, [pc, #176]	; (8101294 <HAL_DMA_Abort+0x44c>)
 81011e4:	4293      	cmp	r3, r2
 81011e6:	d040      	beq.n	810126a <HAL_DMA_Abort+0x422>
 81011e8:	687b      	ldr	r3, [r7, #4]
 81011ea:	681b      	ldr	r3, [r3, #0]
 81011ec:	4a2a      	ldr	r2, [pc, #168]	; (8101298 <HAL_DMA_Abort+0x450>)
 81011ee:	4293      	cmp	r3, r2
 81011f0:	d03b      	beq.n	810126a <HAL_DMA_Abort+0x422>
 81011f2:	687b      	ldr	r3, [r7, #4]
 81011f4:	681b      	ldr	r3, [r3, #0]
 81011f6:	4a29      	ldr	r2, [pc, #164]	; (810129c <HAL_DMA_Abort+0x454>)
 81011f8:	4293      	cmp	r3, r2
 81011fa:	d036      	beq.n	810126a <HAL_DMA_Abort+0x422>
 81011fc:	687b      	ldr	r3, [r7, #4]
 81011fe:	681b      	ldr	r3, [r3, #0]
 8101200:	4a27      	ldr	r2, [pc, #156]	; (81012a0 <HAL_DMA_Abort+0x458>)
 8101202:	4293      	cmp	r3, r2
 8101204:	d031      	beq.n	810126a <HAL_DMA_Abort+0x422>
 8101206:	687b      	ldr	r3, [r7, #4]
 8101208:	681b      	ldr	r3, [r3, #0]
 810120a:	4a26      	ldr	r2, [pc, #152]	; (81012a4 <HAL_DMA_Abort+0x45c>)
 810120c:	4293      	cmp	r3, r2
 810120e:	d02c      	beq.n	810126a <HAL_DMA_Abort+0x422>
 8101210:	687b      	ldr	r3, [r7, #4]
 8101212:	681b      	ldr	r3, [r3, #0]
 8101214:	4a24      	ldr	r2, [pc, #144]	; (81012a8 <HAL_DMA_Abort+0x460>)
 8101216:	4293      	cmp	r3, r2
 8101218:	d027      	beq.n	810126a <HAL_DMA_Abort+0x422>
 810121a:	687b      	ldr	r3, [r7, #4]
 810121c:	681b      	ldr	r3, [r3, #0]
 810121e:	4a23      	ldr	r2, [pc, #140]	; (81012ac <HAL_DMA_Abort+0x464>)
 8101220:	4293      	cmp	r3, r2
 8101222:	d022      	beq.n	810126a <HAL_DMA_Abort+0x422>
 8101224:	687b      	ldr	r3, [r7, #4]
 8101226:	681b      	ldr	r3, [r3, #0]
 8101228:	4a21      	ldr	r2, [pc, #132]	; (81012b0 <HAL_DMA_Abort+0x468>)
 810122a:	4293      	cmp	r3, r2
 810122c:	d01d      	beq.n	810126a <HAL_DMA_Abort+0x422>
 810122e:	687b      	ldr	r3, [r7, #4]
 8101230:	681b      	ldr	r3, [r3, #0]
 8101232:	4a20      	ldr	r2, [pc, #128]	; (81012b4 <HAL_DMA_Abort+0x46c>)
 8101234:	4293      	cmp	r3, r2
 8101236:	d018      	beq.n	810126a <HAL_DMA_Abort+0x422>
 8101238:	687b      	ldr	r3, [r7, #4]
 810123a:	681b      	ldr	r3, [r3, #0]
 810123c:	4a1e      	ldr	r2, [pc, #120]	; (81012b8 <HAL_DMA_Abort+0x470>)
 810123e:	4293      	cmp	r3, r2
 8101240:	d013      	beq.n	810126a <HAL_DMA_Abort+0x422>
 8101242:	687b      	ldr	r3, [r7, #4]
 8101244:	681b      	ldr	r3, [r3, #0]
 8101246:	4a1d      	ldr	r2, [pc, #116]	; (81012bc <HAL_DMA_Abort+0x474>)
 8101248:	4293      	cmp	r3, r2
 810124a:	d00e      	beq.n	810126a <HAL_DMA_Abort+0x422>
 810124c:	687b      	ldr	r3, [r7, #4]
 810124e:	681b      	ldr	r3, [r3, #0]
 8101250:	4a1b      	ldr	r2, [pc, #108]	; (81012c0 <HAL_DMA_Abort+0x478>)
 8101252:	4293      	cmp	r3, r2
 8101254:	d009      	beq.n	810126a <HAL_DMA_Abort+0x422>
 8101256:	687b      	ldr	r3, [r7, #4]
 8101258:	681b      	ldr	r3, [r3, #0]
 810125a:	4a1a      	ldr	r2, [pc, #104]	; (81012c4 <HAL_DMA_Abort+0x47c>)
 810125c:	4293      	cmp	r3, r2
 810125e:	d004      	beq.n	810126a <HAL_DMA_Abort+0x422>
 8101260:	687b      	ldr	r3, [r7, #4]
 8101262:	681b      	ldr	r3, [r3, #0]
 8101264:	4a18      	ldr	r2, [pc, #96]	; (81012c8 <HAL_DMA_Abort+0x480>)
 8101266:	4293      	cmp	r3, r2
 8101268:	d101      	bne.n	810126e <HAL_DMA_Abort+0x426>
 810126a:	2301      	movs	r3, #1
 810126c:	e000      	b.n	8101270 <HAL_DMA_Abort+0x428>
 810126e:	2300      	movs	r3, #0
 8101270:	2b00      	cmp	r3, #0
 8101272:	d02b      	beq.n	81012cc <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8101274:	687b      	ldr	r3, [r7, #4]
 8101276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101278:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 810127a:	687b      	ldr	r3, [r7, #4]
 810127c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810127e:	f003 031f 	and.w	r3, r3, #31
 8101282:	223f      	movs	r2, #63	; 0x3f
 8101284:	409a      	lsls	r2, r3
 8101286:	68bb      	ldr	r3, [r7, #8]
 8101288:	609a      	str	r2, [r3, #8]
 810128a:	e02a      	b.n	81012e2 <HAL_DMA_Abort+0x49a>
 810128c:	40020010 	.word	0x40020010
 8101290:	40020028 	.word	0x40020028
 8101294:	40020040 	.word	0x40020040
 8101298:	40020058 	.word	0x40020058
 810129c:	40020070 	.word	0x40020070
 81012a0:	40020088 	.word	0x40020088
 81012a4:	400200a0 	.word	0x400200a0
 81012a8:	400200b8 	.word	0x400200b8
 81012ac:	40020410 	.word	0x40020410
 81012b0:	40020428 	.word	0x40020428
 81012b4:	40020440 	.word	0x40020440
 81012b8:	40020458 	.word	0x40020458
 81012bc:	40020470 	.word	0x40020470
 81012c0:	40020488 	.word	0x40020488
 81012c4:	400204a0 	.word	0x400204a0
 81012c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81012cc:	687b      	ldr	r3, [r7, #4]
 81012ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81012d0:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81012d2:	687b      	ldr	r3, [r7, #4]
 81012d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81012d6:	f003 031f 	and.w	r3, r3, #31
 81012da:	2201      	movs	r2, #1
 81012dc:	409a      	lsls	r2, r3
 81012de:	68fb      	ldr	r3, [r7, #12]
 81012e0:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 81012e2:	687b      	ldr	r3, [r7, #4]
 81012e4:	681b      	ldr	r3, [r3, #0]
 81012e6:	4a4f      	ldr	r2, [pc, #316]	; (8101424 <HAL_DMA_Abort+0x5dc>)
 81012e8:	4293      	cmp	r3, r2
 81012ea:	d072      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 81012ec:	687b      	ldr	r3, [r7, #4]
 81012ee:	681b      	ldr	r3, [r3, #0]
 81012f0:	4a4d      	ldr	r2, [pc, #308]	; (8101428 <HAL_DMA_Abort+0x5e0>)
 81012f2:	4293      	cmp	r3, r2
 81012f4:	d06d      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 81012f6:	687b      	ldr	r3, [r7, #4]
 81012f8:	681b      	ldr	r3, [r3, #0]
 81012fa:	4a4c      	ldr	r2, [pc, #304]	; (810142c <HAL_DMA_Abort+0x5e4>)
 81012fc:	4293      	cmp	r3, r2
 81012fe:	d068      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 8101300:	687b      	ldr	r3, [r7, #4]
 8101302:	681b      	ldr	r3, [r3, #0]
 8101304:	4a4a      	ldr	r2, [pc, #296]	; (8101430 <HAL_DMA_Abort+0x5e8>)
 8101306:	4293      	cmp	r3, r2
 8101308:	d063      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 810130a:	687b      	ldr	r3, [r7, #4]
 810130c:	681b      	ldr	r3, [r3, #0]
 810130e:	4a49      	ldr	r2, [pc, #292]	; (8101434 <HAL_DMA_Abort+0x5ec>)
 8101310:	4293      	cmp	r3, r2
 8101312:	d05e      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 8101314:	687b      	ldr	r3, [r7, #4]
 8101316:	681b      	ldr	r3, [r3, #0]
 8101318:	4a47      	ldr	r2, [pc, #284]	; (8101438 <HAL_DMA_Abort+0x5f0>)
 810131a:	4293      	cmp	r3, r2
 810131c:	d059      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 810131e:	687b      	ldr	r3, [r7, #4]
 8101320:	681b      	ldr	r3, [r3, #0]
 8101322:	4a46      	ldr	r2, [pc, #280]	; (810143c <HAL_DMA_Abort+0x5f4>)
 8101324:	4293      	cmp	r3, r2
 8101326:	d054      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 8101328:	687b      	ldr	r3, [r7, #4]
 810132a:	681b      	ldr	r3, [r3, #0]
 810132c:	4a44      	ldr	r2, [pc, #272]	; (8101440 <HAL_DMA_Abort+0x5f8>)
 810132e:	4293      	cmp	r3, r2
 8101330:	d04f      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 8101332:	687b      	ldr	r3, [r7, #4]
 8101334:	681b      	ldr	r3, [r3, #0]
 8101336:	4a43      	ldr	r2, [pc, #268]	; (8101444 <HAL_DMA_Abort+0x5fc>)
 8101338:	4293      	cmp	r3, r2
 810133a:	d04a      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 810133c:	687b      	ldr	r3, [r7, #4]
 810133e:	681b      	ldr	r3, [r3, #0]
 8101340:	4a41      	ldr	r2, [pc, #260]	; (8101448 <HAL_DMA_Abort+0x600>)
 8101342:	4293      	cmp	r3, r2
 8101344:	d045      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 8101346:	687b      	ldr	r3, [r7, #4]
 8101348:	681b      	ldr	r3, [r3, #0]
 810134a:	4a40      	ldr	r2, [pc, #256]	; (810144c <HAL_DMA_Abort+0x604>)
 810134c:	4293      	cmp	r3, r2
 810134e:	d040      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 8101350:	687b      	ldr	r3, [r7, #4]
 8101352:	681b      	ldr	r3, [r3, #0]
 8101354:	4a3e      	ldr	r2, [pc, #248]	; (8101450 <HAL_DMA_Abort+0x608>)
 8101356:	4293      	cmp	r3, r2
 8101358:	d03b      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 810135a:	687b      	ldr	r3, [r7, #4]
 810135c:	681b      	ldr	r3, [r3, #0]
 810135e:	4a3d      	ldr	r2, [pc, #244]	; (8101454 <HAL_DMA_Abort+0x60c>)
 8101360:	4293      	cmp	r3, r2
 8101362:	d036      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 8101364:	687b      	ldr	r3, [r7, #4]
 8101366:	681b      	ldr	r3, [r3, #0]
 8101368:	4a3b      	ldr	r2, [pc, #236]	; (8101458 <HAL_DMA_Abort+0x610>)
 810136a:	4293      	cmp	r3, r2
 810136c:	d031      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 810136e:	687b      	ldr	r3, [r7, #4]
 8101370:	681b      	ldr	r3, [r3, #0]
 8101372:	4a3a      	ldr	r2, [pc, #232]	; (810145c <HAL_DMA_Abort+0x614>)
 8101374:	4293      	cmp	r3, r2
 8101376:	d02c      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 8101378:	687b      	ldr	r3, [r7, #4]
 810137a:	681b      	ldr	r3, [r3, #0]
 810137c:	4a38      	ldr	r2, [pc, #224]	; (8101460 <HAL_DMA_Abort+0x618>)
 810137e:	4293      	cmp	r3, r2
 8101380:	d027      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 8101382:	687b      	ldr	r3, [r7, #4]
 8101384:	681b      	ldr	r3, [r3, #0]
 8101386:	4a37      	ldr	r2, [pc, #220]	; (8101464 <HAL_DMA_Abort+0x61c>)
 8101388:	4293      	cmp	r3, r2
 810138a:	d022      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 810138c:	687b      	ldr	r3, [r7, #4]
 810138e:	681b      	ldr	r3, [r3, #0]
 8101390:	4a35      	ldr	r2, [pc, #212]	; (8101468 <HAL_DMA_Abort+0x620>)
 8101392:	4293      	cmp	r3, r2
 8101394:	d01d      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 8101396:	687b      	ldr	r3, [r7, #4]
 8101398:	681b      	ldr	r3, [r3, #0]
 810139a:	4a34      	ldr	r2, [pc, #208]	; (810146c <HAL_DMA_Abort+0x624>)
 810139c:	4293      	cmp	r3, r2
 810139e:	d018      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 81013a0:	687b      	ldr	r3, [r7, #4]
 81013a2:	681b      	ldr	r3, [r3, #0]
 81013a4:	4a32      	ldr	r2, [pc, #200]	; (8101470 <HAL_DMA_Abort+0x628>)
 81013a6:	4293      	cmp	r3, r2
 81013a8:	d013      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 81013aa:	687b      	ldr	r3, [r7, #4]
 81013ac:	681b      	ldr	r3, [r3, #0]
 81013ae:	4a31      	ldr	r2, [pc, #196]	; (8101474 <HAL_DMA_Abort+0x62c>)
 81013b0:	4293      	cmp	r3, r2
 81013b2:	d00e      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 81013b4:	687b      	ldr	r3, [r7, #4]
 81013b6:	681b      	ldr	r3, [r3, #0]
 81013b8:	4a2f      	ldr	r2, [pc, #188]	; (8101478 <HAL_DMA_Abort+0x630>)
 81013ba:	4293      	cmp	r3, r2
 81013bc:	d009      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 81013be:	687b      	ldr	r3, [r7, #4]
 81013c0:	681b      	ldr	r3, [r3, #0]
 81013c2:	4a2e      	ldr	r2, [pc, #184]	; (810147c <HAL_DMA_Abort+0x634>)
 81013c4:	4293      	cmp	r3, r2
 81013c6:	d004      	beq.n	81013d2 <HAL_DMA_Abort+0x58a>
 81013c8:	687b      	ldr	r3, [r7, #4]
 81013ca:	681b      	ldr	r3, [r3, #0]
 81013cc:	4a2c      	ldr	r2, [pc, #176]	; (8101480 <HAL_DMA_Abort+0x638>)
 81013ce:	4293      	cmp	r3, r2
 81013d0:	d101      	bne.n	81013d6 <HAL_DMA_Abort+0x58e>
 81013d2:	2301      	movs	r3, #1
 81013d4:	e000      	b.n	81013d8 <HAL_DMA_Abort+0x590>
 81013d6:	2300      	movs	r3, #0
 81013d8:	2b00      	cmp	r3, #0
 81013da:	d015      	beq.n	8101408 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81013dc:	687b      	ldr	r3, [r7, #4]
 81013de:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81013e0:	687a      	ldr	r2, [r7, #4]
 81013e2:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81013e4:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 81013e6:	687b      	ldr	r3, [r7, #4]
 81013e8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81013ea:	2b00      	cmp	r3, #0
 81013ec:	d00c      	beq.n	8101408 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81013ee:	687b      	ldr	r3, [r7, #4]
 81013f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81013f2:	681a      	ldr	r2, [r3, #0]
 81013f4:	687b      	ldr	r3, [r7, #4]
 81013f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81013f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81013fc:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81013fe:	687b      	ldr	r3, [r7, #4]
 8101400:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101402:	687a      	ldr	r2, [r7, #4]
 8101404:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8101406:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8101408:	687b      	ldr	r3, [r7, #4]
 810140a:	2201      	movs	r2, #1
 810140c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8101410:	687b      	ldr	r3, [r7, #4]
 8101412:	2200      	movs	r2, #0
 8101414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }

  return HAL_OK;
 8101418:	2300      	movs	r3, #0
}
 810141a:	4618      	mov	r0, r3
 810141c:	3718      	adds	r7, #24
 810141e:	46bd      	mov	sp, r7
 8101420:	bd80      	pop	{r7, pc}
 8101422:	bf00      	nop
 8101424:	40020010 	.word	0x40020010
 8101428:	40020028 	.word	0x40020028
 810142c:	40020040 	.word	0x40020040
 8101430:	40020058 	.word	0x40020058
 8101434:	40020070 	.word	0x40020070
 8101438:	40020088 	.word	0x40020088
 810143c:	400200a0 	.word	0x400200a0
 8101440:	400200b8 	.word	0x400200b8
 8101444:	40020410 	.word	0x40020410
 8101448:	40020428 	.word	0x40020428
 810144c:	40020440 	.word	0x40020440
 8101450:	40020458 	.word	0x40020458
 8101454:	40020470 	.word	0x40020470
 8101458:	40020488 	.word	0x40020488
 810145c:	400204a0 	.word	0x400204a0
 8101460:	400204b8 	.word	0x400204b8
 8101464:	58025408 	.word	0x58025408
 8101468:	5802541c 	.word	0x5802541c
 810146c:	58025430 	.word	0x58025430
 8101470:	58025444 	.word	0x58025444
 8101474:	58025458 	.word	0x58025458
 8101478:	5802546c 	.word	0x5802546c
 810147c:	58025480 	.word	0x58025480
 8101480:	58025494 	.word	0x58025494

08101484 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8101484:	b580      	push	{r7, lr}
 8101486:	b084      	sub	sp, #16
 8101488:	af00      	add	r7, sp, #0
 810148a:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 810148c:	687b      	ldr	r3, [r7, #4]
 810148e:	2b00      	cmp	r3, #0
 8101490:	d101      	bne.n	8101496 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8101492:	2301      	movs	r3, #1
 8101494:	e237      	b.n	8101906 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8101496:	687b      	ldr	r3, [r7, #4]
 8101498:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 810149c:	b2db      	uxtb	r3, r3
 810149e:	2b02      	cmp	r3, #2
 81014a0:	d004      	beq.n	81014ac <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 81014a2:	687b      	ldr	r3, [r7, #4]
 81014a4:	2280      	movs	r2, #128	; 0x80
 81014a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 81014a8:	2301      	movs	r3, #1
 81014aa:	e22c      	b.n	8101906 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 81014ac:	687b      	ldr	r3, [r7, #4]
 81014ae:	681b      	ldr	r3, [r3, #0]
 81014b0:	4a5c      	ldr	r2, [pc, #368]	; (8101624 <HAL_DMA_Abort_IT+0x1a0>)
 81014b2:	4293      	cmp	r3, r2
 81014b4:	d04a      	beq.n	810154c <HAL_DMA_Abort_IT+0xc8>
 81014b6:	687b      	ldr	r3, [r7, #4]
 81014b8:	681b      	ldr	r3, [r3, #0]
 81014ba:	4a5b      	ldr	r2, [pc, #364]	; (8101628 <HAL_DMA_Abort_IT+0x1a4>)
 81014bc:	4293      	cmp	r3, r2
 81014be:	d045      	beq.n	810154c <HAL_DMA_Abort_IT+0xc8>
 81014c0:	687b      	ldr	r3, [r7, #4]
 81014c2:	681b      	ldr	r3, [r3, #0]
 81014c4:	4a59      	ldr	r2, [pc, #356]	; (810162c <HAL_DMA_Abort_IT+0x1a8>)
 81014c6:	4293      	cmp	r3, r2
 81014c8:	d040      	beq.n	810154c <HAL_DMA_Abort_IT+0xc8>
 81014ca:	687b      	ldr	r3, [r7, #4]
 81014cc:	681b      	ldr	r3, [r3, #0]
 81014ce:	4a58      	ldr	r2, [pc, #352]	; (8101630 <HAL_DMA_Abort_IT+0x1ac>)
 81014d0:	4293      	cmp	r3, r2
 81014d2:	d03b      	beq.n	810154c <HAL_DMA_Abort_IT+0xc8>
 81014d4:	687b      	ldr	r3, [r7, #4]
 81014d6:	681b      	ldr	r3, [r3, #0]
 81014d8:	4a56      	ldr	r2, [pc, #344]	; (8101634 <HAL_DMA_Abort_IT+0x1b0>)
 81014da:	4293      	cmp	r3, r2
 81014dc:	d036      	beq.n	810154c <HAL_DMA_Abort_IT+0xc8>
 81014de:	687b      	ldr	r3, [r7, #4]
 81014e0:	681b      	ldr	r3, [r3, #0]
 81014e2:	4a55      	ldr	r2, [pc, #340]	; (8101638 <HAL_DMA_Abort_IT+0x1b4>)
 81014e4:	4293      	cmp	r3, r2
 81014e6:	d031      	beq.n	810154c <HAL_DMA_Abort_IT+0xc8>
 81014e8:	687b      	ldr	r3, [r7, #4]
 81014ea:	681b      	ldr	r3, [r3, #0]
 81014ec:	4a53      	ldr	r2, [pc, #332]	; (810163c <HAL_DMA_Abort_IT+0x1b8>)
 81014ee:	4293      	cmp	r3, r2
 81014f0:	d02c      	beq.n	810154c <HAL_DMA_Abort_IT+0xc8>
 81014f2:	687b      	ldr	r3, [r7, #4]
 81014f4:	681b      	ldr	r3, [r3, #0]
 81014f6:	4a52      	ldr	r2, [pc, #328]	; (8101640 <HAL_DMA_Abort_IT+0x1bc>)
 81014f8:	4293      	cmp	r3, r2
 81014fa:	d027      	beq.n	810154c <HAL_DMA_Abort_IT+0xc8>
 81014fc:	687b      	ldr	r3, [r7, #4]
 81014fe:	681b      	ldr	r3, [r3, #0]
 8101500:	4a50      	ldr	r2, [pc, #320]	; (8101644 <HAL_DMA_Abort_IT+0x1c0>)
 8101502:	4293      	cmp	r3, r2
 8101504:	d022      	beq.n	810154c <HAL_DMA_Abort_IT+0xc8>
 8101506:	687b      	ldr	r3, [r7, #4]
 8101508:	681b      	ldr	r3, [r3, #0]
 810150a:	4a4f      	ldr	r2, [pc, #316]	; (8101648 <HAL_DMA_Abort_IT+0x1c4>)
 810150c:	4293      	cmp	r3, r2
 810150e:	d01d      	beq.n	810154c <HAL_DMA_Abort_IT+0xc8>
 8101510:	687b      	ldr	r3, [r7, #4]
 8101512:	681b      	ldr	r3, [r3, #0]
 8101514:	4a4d      	ldr	r2, [pc, #308]	; (810164c <HAL_DMA_Abort_IT+0x1c8>)
 8101516:	4293      	cmp	r3, r2
 8101518:	d018      	beq.n	810154c <HAL_DMA_Abort_IT+0xc8>
 810151a:	687b      	ldr	r3, [r7, #4]
 810151c:	681b      	ldr	r3, [r3, #0]
 810151e:	4a4c      	ldr	r2, [pc, #304]	; (8101650 <HAL_DMA_Abort_IT+0x1cc>)
 8101520:	4293      	cmp	r3, r2
 8101522:	d013      	beq.n	810154c <HAL_DMA_Abort_IT+0xc8>
 8101524:	687b      	ldr	r3, [r7, #4]
 8101526:	681b      	ldr	r3, [r3, #0]
 8101528:	4a4a      	ldr	r2, [pc, #296]	; (8101654 <HAL_DMA_Abort_IT+0x1d0>)
 810152a:	4293      	cmp	r3, r2
 810152c:	d00e      	beq.n	810154c <HAL_DMA_Abort_IT+0xc8>
 810152e:	687b      	ldr	r3, [r7, #4]
 8101530:	681b      	ldr	r3, [r3, #0]
 8101532:	4a49      	ldr	r2, [pc, #292]	; (8101658 <HAL_DMA_Abort_IT+0x1d4>)
 8101534:	4293      	cmp	r3, r2
 8101536:	d009      	beq.n	810154c <HAL_DMA_Abort_IT+0xc8>
 8101538:	687b      	ldr	r3, [r7, #4]
 810153a:	681b      	ldr	r3, [r3, #0]
 810153c:	4a47      	ldr	r2, [pc, #284]	; (810165c <HAL_DMA_Abort_IT+0x1d8>)
 810153e:	4293      	cmp	r3, r2
 8101540:	d004      	beq.n	810154c <HAL_DMA_Abort_IT+0xc8>
 8101542:	687b      	ldr	r3, [r7, #4]
 8101544:	681b      	ldr	r3, [r3, #0]
 8101546:	4a46      	ldr	r2, [pc, #280]	; (8101660 <HAL_DMA_Abort_IT+0x1dc>)
 8101548:	4293      	cmp	r3, r2
 810154a:	d101      	bne.n	8101550 <HAL_DMA_Abort_IT+0xcc>
 810154c:	2301      	movs	r3, #1
 810154e:	e000      	b.n	8101552 <HAL_DMA_Abort_IT+0xce>
 8101550:	2300      	movs	r3, #0
 8101552:	2b00      	cmp	r3, #0
 8101554:	f000 8086 	beq.w	8101664 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8101558:	687b      	ldr	r3, [r7, #4]
 810155a:	2204      	movs	r2, #4
 810155c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8101560:	687b      	ldr	r3, [r7, #4]
 8101562:	681b      	ldr	r3, [r3, #0]
 8101564:	4a2f      	ldr	r2, [pc, #188]	; (8101624 <HAL_DMA_Abort_IT+0x1a0>)
 8101566:	4293      	cmp	r3, r2
 8101568:	d04a      	beq.n	8101600 <HAL_DMA_Abort_IT+0x17c>
 810156a:	687b      	ldr	r3, [r7, #4]
 810156c:	681b      	ldr	r3, [r3, #0]
 810156e:	4a2e      	ldr	r2, [pc, #184]	; (8101628 <HAL_DMA_Abort_IT+0x1a4>)
 8101570:	4293      	cmp	r3, r2
 8101572:	d045      	beq.n	8101600 <HAL_DMA_Abort_IT+0x17c>
 8101574:	687b      	ldr	r3, [r7, #4]
 8101576:	681b      	ldr	r3, [r3, #0]
 8101578:	4a2c      	ldr	r2, [pc, #176]	; (810162c <HAL_DMA_Abort_IT+0x1a8>)
 810157a:	4293      	cmp	r3, r2
 810157c:	d040      	beq.n	8101600 <HAL_DMA_Abort_IT+0x17c>
 810157e:	687b      	ldr	r3, [r7, #4]
 8101580:	681b      	ldr	r3, [r3, #0]
 8101582:	4a2b      	ldr	r2, [pc, #172]	; (8101630 <HAL_DMA_Abort_IT+0x1ac>)
 8101584:	4293      	cmp	r3, r2
 8101586:	d03b      	beq.n	8101600 <HAL_DMA_Abort_IT+0x17c>
 8101588:	687b      	ldr	r3, [r7, #4]
 810158a:	681b      	ldr	r3, [r3, #0]
 810158c:	4a29      	ldr	r2, [pc, #164]	; (8101634 <HAL_DMA_Abort_IT+0x1b0>)
 810158e:	4293      	cmp	r3, r2
 8101590:	d036      	beq.n	8101600 <HAL_DMA_Abort_IT+0x17c>
 8101592:	687b      	ldr	r3, [r7, #4]
 8101594:	681b      	ldr	r3, [r3, #0]
 8101596:	4a28      	ldr	r2, [pc, #160]	; (8101638 <HAL_DMA_Abort_IT+0x1b4>)
 8101598:	4293      	cmp	r3, r2
 810159a:	d031      	beq.n	8101600 <HAL_DMA_Abort_IT+0x17c>
 810159c:	687b      	ldr	r3, [r7, #4]
 810159e:	681b      	ldr	r3, [r3, #0]
 81015a0:	4a26      	ldr	r2, [pc, #152]	; (810163c <HAL_DMA_Abort_IT+0x1b8>)
 81015a2:	4293      	cmp	r3, r2
 81015a4:	d02c      	beq.n	8101600 <HAL_DMA_Abort_IT+0x17c>
 81015a6:	687b      	ldr	r3, [r7, #4]
 81015a8:	681b      	ldr	r3, [r3, #0]
 81015aa:	4a25      	ldr	r2, [pc, #148]	; (8101640 <HAL_DMA_Abort_IT+0x1bc>)
 81015ac:	4293      	cmp	r3, r2
 81015ae:	d027      	beq.n	8101600 <HAL_DMA_Abort_IT+0x17c>
 81015b0:	687b      	ldr	r3, [r7, #4]
 81015b2:	681b      	ldr	r3, [r3, #0]
 81015b4:	4a23      	ldr	r2, [pc, #140]	; (8101644 <HAL_DMA_Abort_IT+0x1c0>)
 81015b6:	4293      	cmp	r3, r2
 81015b8:	d022      	beq.n	8101600 <HAL_DMA_Abort_IT+0x17c>
 81015ba:	687b      	ldr	r3, [r7, #4]
 81015bc:	681b      	ldr	r3, [r3, #0]
 81015be:	4a22      	ldr	r2, [pc, #136]	; (8101648 <HAL_DMA_Abort_IT+0x1c4>)
 81015c0:	4293      	cmp	r3, r2
 81015c2:	d01d      	beq.n	8101600 <HAL_DMA_Abort_IT+0x17c>
 81015c4:	687b      	ldr	r3, [r7, #4]
 81015c6:	681b      	ldr	r3, [r3, #0]
 81015c8:	4a20      	ldr	r2, [pc, #128]	; (810164c <HAL_DMA_Abort_IT+0x1c8>)
 81015ca:	4293      	cmp	r3, r2
 81015cc:	d018      	beq.n	8101600 <HAL_DMA_Abort_IT+0x17c>
 81015ce:	687b      	ldr	r3, [r7, #4]
 81015d0:	681b      	ldr	r3, [r3, #0]
 81015d2:	4a1f      	ldr	r2, [pc, #124]	; (8101650 <HAL_DMA_Abort_IT+0x1cc>)
 81015d4:	4293      	cmp	r3, r2
 81015d6:	d013      	beq.n	8101600 <HAL_DMA_Abort_IT+0x17c>
 81015d8:	687b      	ldr	r3, [r7, #4]
 81015da:	681b      	ldr	r3, [r3, #0]
 81015dc:	4a1d      	ldr	r2, [pc, #116]	; (8101654 <HAL_DMA_Abort_IT+0x1d0>)
 81015de:	4293      	cmp	r3, r2
 81015e0:	d00e      	beq.n	8101600 <HAL_DMA_Abort_IT+0x17c>
 81015e2:	687b      	ldr	r3, [r7, #4]
 81015e4:	681b      	ldr	r3, [r3, #0]
 81015e6:	4a1c      	ldr	r2, [pc, #112]	; (8101658 <HAL_DMA_Abort_IT+0x1d4>)
 81015e8:	4293      	cmp	r3, r2
 81015ea:	d009      	beq.n	8101600 <HAL_DMA_Abort_IT+0x17c>
 81015ec:	687b      	ldr	r3, [r7, #4]
 81015ee:	681b      	ldr	r3, [r3, #0]
 81015f0:	4a1a      	ldr	r2, [pc, #104]	; (810165c <HAL_DMA_Abort_IT+0x1d8>)
 81015f2:	4293      	cmp	r3, r2
 81015f4:	d004      	beq.n	8101600 <HAL_DMA_Abort_IT+0x17c>
 81015f6:	687b      	ldr	r3, [r7, #4]
 81015f8:	681b      	ldr	r3, [r3, #0]
 81015fa:	4a19      	ldr	r2, [pc, #100]	; (8101660 <HAL_DMA_Abort_IT+0x1dc>)
 81015fc:	4293      	cmp	r3, r2
 81015fe:	d108      	bne.n	8101612 <HAL_DMA_Abort_IT+0x18e>
 8101600:	687b      	ldr	r3, [r7, #4]
 8101602:	681b      	ldr	r3, [r3, #0]
 8101604:	681a      	ldr	r2, [r3, #0]
 8101606:	687b      	ldr	r3, [r7, #4]
 8101608:	681b      	ldr	r3, [r3, #0]
 810160a:	f022 0201 	bic.w	r2, r2, #1
 810160e:	601a      	str	r2, [r3, #0]
 8101610:	e178      	b.n	8101904 <HAL_DMA_Abort_IT+0x480>
 8101612:	687b      	ldr	r3, [r7, #4]
 8101614:	681b      	ldr	r3, [r3, #0]
 8101616:	681a      	ldr	r2, [r3, #0]
 8101618:	687b      	ldr	r3, [r7, #4]
 810161a:	681b      	ldr	r3, [r3, #0]
 810161c:	f022 0201 	bic.w	r2, r2, #1
 8101620:	601a      	str	r2, [r3, #0]
 8101622:	e16f      	b.n	8101904 <HAL_DMA_Abort_IT+0x480>
 8101624:	40020010 	.word	0x40020010
 8101628:	40020028 	.word	0x40020028
 810162c:	40020040 	.word	0x40020040
 8101630:	40020058 	.word	0x40020058
 8101634:	40020070 	.word	0x40020070
 8101638:	40020088 	.word	0x40020088
 810163c:	400200a0 	.word	0x400200a0
 8101640:	400200b8 	.word	0x400200b8
 8101644:	40020410 	.word	0x40020410
 8101648:	40020428 	.word	0x40020428
 810164c:	40020440 	.word	0x40020440
 8101650:	40020458 	.word	0x40020458
 8101654:	40020470 	.word	0x40020470
 8101658:	40020488 	.word	0x40020488
 810165c:	400204a0 	.word	0x400204a0
 8101660:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8101664:	687b      	ldr	r3, [r7, #4]
 8101666:	681b      	ldr	r3, [r3, #0]
 8101668:	681a      	ldr	r2, [r3, #0]
 810166a:	687b      	ldr	r3, [r7, #4]
 810166c:	681b      	ldr	r3, [r3, #0]
 810166e:	f022 020e 	bic.w	r2, r2, #14
 8101672:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8101674:	687b      	ldr	r3, [r7, #4]
 8101676:	681b      	ldr	r3, [r3, #0]
 8101678:	4a6c      	ldr	r2, [pc, #432]	; (810182c <HAL_DMA_Abort_IT+0x3a8>)
 810167a:	4293      	cmp	r3, r2
 810167c:	d04a      	beq.n	8101714 <HAL_DMA_Abort_IT+0x290>
 810167e:	687b      	ldr	r3, [r7, #4]
 8101680:	681b      	ldr	r3, [r3, #0]
 8101682:	4a6b      	ldr	r2, [pc, #428]	; (8101830 <HAL_DMA_Abort_IT+0x3ac>)
 8101684:	4293      	cmp	r3, r2
 8101686:	d045      	beq.n	8101714 <HAL_DMA_Abort_IT+0x290>
 8101688:	687b      	ldr	r3, [r7, #4]
 810168a:	681b      	ldr	r3, [r3, #0]
 810168c:	4a69      	ldr	r2, [pc, #420]	; (8101834 <HAL_DMA_Abort_IT+0x3b0>)
 810168e:	4293      	cmp	r3, r2
 8101690:	d040      	beq.n	8101714 <HAL_DMA_Abort_IT+0x290>
 8101692:	687b      	ldr	r3, [r7, #4]
 8101694:	681b      	ldr	r3, [r3, #0]
 8101696:	4a68      	ldr	r2, [pc, #416]	; (8101838 <HAL_DMA_Abort_IT+0x3b4>)
 8101698:	4293      	cmp	r3, r2
 810169a:	d03b      	beq.n	8101714 <HAL_DMA_Abort_IT+0x290>
 810169c:	687b      	ldr	r3, [r7, #4]
 810169e:	681b      	ldr	r3, [r3, #0]
 81016a0:	4a66      	ldr	r2, [pc, #408]	; (810183c <HAL_DMA_Abort_IT+0x3b8>)
 81016a2:	4293      	cmp	r3, r2
 81016a4:	d036      	beq.n	8101714 <HAL_DMA_Abort_IT+0x290>
 81016a6:	687b      	ldr	r3, [r7, #4]
 81016a8:	681b      	ldr	r3, [r3, #0]
 81016aa:	4a65      	ldr	r2, [pc, #404]	; (8101840 <HAL_DMA_Abort_IT+0x3bc>)
 81016ac:	4293      	cmp	r3, r2
 81016ae:	d031      	beq.n	8101714 <HAL_DMA_Abort_IT+0x290>
 81016b0:	687b      	ldr	r3, [r7, #4]
 81016b2:	681b      	ldr	r3, [r3, #0]
 81016b4:	4a63      	ldr	r2, [pc, #396]	; (8101844 <HAL_DMA_Abort_IT+0x3c0>)
 81016b6:	4293      	cmp	r3, r2
 81016b8:	d02c      	beq.n	8101714 <HAL_DMA_Abort_IT+0x290>
 81016ba:	687b      	ldr	r3, [r7, #4]
 81016bc:	681b      	ldr	r3, [r3, #0]
 81016be:	4a62      	ldr	r2, [pc, #392]	; (8101848 <HAL_DMA_Abort_IT+0x3c4>)
 81016c0:	4293      	cmp	r3, r2
 81016c2:	d027      	beq.n	8101714 <HAL_DMA_Abort_IT+0x290>
 81016c4:	687b      	ldr	r3, [r7, #4]
 81016c6:	681b      	ldr	r3, [r3, #0]
 81016c8:	4a60      	ldr	r2, [pc, #384]	; (810184c <HAL_DMA_Abort_IT+0x3c8>)
 81016ca:	4293      	cmp	r3, r2
 81016cc:	d022      	beq.n	8101714 <HAL_DMA_Abort_IT+0x290>
 81016ce:	687b      	ldr	r3, [r7, #4]
 81016d0:	681b      	ldr	r3, [r3, #0]
 81016d2:	4a5f      	ldr	r2, [pc, #380]	; (8101850 <HAL_DMA_Abort_IT+0x3cc>)
 81016d4:	4293      	cmp	r3, r2
 81016d6:	d01d      	beq.n	8101714 <HAL_DMA_Abort_IT+0x290>
 81016d8:	687b      	ldr	r3, [r7, #4]
 81016da:	681b      	ldr	r3, [r3, #0]
 81016dc:	4a5d      	ldr	r2, [pc, #372]	; (8101854 <HAL_DMA_Abort_IT+0x3d0>)
 81016de:	4293      	cmp	r3, r2
 81016e0:	d018      	beq.n	8101714 <HAL_DMA_Abort_IT+0x290>
 81016e2:	687b      	ldr	r3, [r7, #4]
 81016e4:	681b      	ldr	r3, [r3, #0]
 81016e6:	4a5c      	ldr	r2, [pc, #368]	; (8101858 <HAL_DMA_Abort_IT+0x3d4>)
 81016e8:	4293      	cmp	r3, r2
 81016ea:	d013      	beq.n	8101714 <HAL_DMA_Abort_IT+0x290>
 81016ec:	687b      	ldr	r3, [r7, #4]
 81016ee:	681b      	ldr	r3, [r3, #0]
 81016f0:	4a5a      	ldr	r2, [pc, #360]	; (810185c <HAL_DMA_Abort_IT+0x3d8>)
 81016f2:	4293      	cmp	r3, r2
 81016f4:	d00e      	beq.n	8101714 <HAL_DMA_Abort_IT+0x290>
 81016f6:	687b      	ldr	r3, [r7, #4]
 81016f8:	681b      	ldr	r3, [r3, #0]
 81016fa:	4a59      	ldr	r2, [pc, #356]	; (8101860 <HAL_DMA_Abort_IT+0x3dc>)
 81016fc:	4293      	cmp	r3, r2
 81016fe:	d009      	beq.n	8101714 <HAL_DMA_Abort_IT+0x290>
 8101700:	687b      	ldr	r3, [r7, #4]
 8101702:	681b      	ldr	r3, [r3, #0]
 8101704:	4a57      	ldr	r2, [pc, #348]	; (8101864 <HAL_DMA_Abort_IT+0x3e0>)
 8101706:	4293      	cmp	r3, r2
 8101708:	d004      	beq.n	8101714 <HAL_DMA_Abort_IT+0x290>
 810170a:	687b      	ldr	r3, [r7, #4]
 810170c:	681b      	ldr	r3, [r3, #0]
 810170e:	4a56      	ldr	r2, [pc, #344]	; (8101868 <HAL_DMA_Abort_IT+0x3e4>)
 8101710:	4293      	cmp	r3, r2
 8101712:	d108      	bne.n	8101726 <HAL_DMA_Abort_IT+0x2a2>
 8101714:	687b      	ldr	r3, [r7, #4]
 8101716:	681b      	ldr	r3, [r3, #0]
 8101718:	681a      	ldr	r2, [r3, #0]
 810171a:	687b      	ldr	r3, [r7, #4]
 810171c:	681b      	ldr	r3, [r3, #0]
 810171e:	f022 0201 	bic.w	r2, r2, #1
 8101722:	601a      	str	r2, [r3, #0]
 8101724:	e007      	b.n	8101736 <HAL_DMA_Abort_IT+0x2b2>
 8101726:	687b      	ldr	r3, [r7, #4]
 8101728:	681b      	ldr	r3, [r3, #0]
 810172a:	681a      	ldr	r2, [r3, #0]
 810172c:	687b      	ldr	r3, [r7, #4]
 810172e:	681b      	ldr	r3, [r3, #0]
 8101730:	f022 0201 	bic.w	r2, r2, #1
 8101734:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8101736:	687b      	ldr	r3, [r7, #4]
 8101738:	681b      	ldr	r3, [r3, #0]
 810173a:	4a3c      	ldr	r2, [pc, #240]	; (810182c <HAL_DMA_Abort_IT+0x3a8>)
 810173c:	4293      	cmp	r3, r2
 810173e:	d072      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 8101740:	687b      	ldr	r3, [r7, #4]
 8101742:	681b      	ldr	r3, [r3, #0]
 8101744:	4a3a      	ldr	r2, [pc, #232]	; (8101830 <HAL_DMA_Abort_IT+0x3ac>)
 8101746:	4293      	cmp	r3, r2
 8101748:	d06d      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 810174a:	687b      	ldr	r3, [r7, #4]
 810174c:	681b      	ldr	r3, [r3, #0]
 810174e:	4a39      	ldr	r2, [pc, #228]	; (8101834 <HAL_DMA_Abort_IT+0x3b0>)
 8101750:	4293      	cmp	r3, r2
 8101752:	d068      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 8101754:	687b      	ldr	r3, [r7, #4]
 8101756:	681b      	ldr	r3, [r3, #0]
 8101758:	4a37      	ldr	r2, [pc, #220]	; (8101838 <HAL_DMA_Abort_IT+0x3b4>)
 810175a:	4293      	cmp	r3, r2
 810175c:	d063      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 810175e:	687b      	ldr	r3, [r7, #4]
 8101760:	681b      	ldr	r3, [r3, #0]
 8101762:	4a36      	ldr	r2, [pc, #216]	; (810183c <HAL_DMA_Abort_IT+0x3b8>)
 8101764:	4293      	cmp	r3, r2
 8101766:	d05e      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 8101768:	687b      	ldr	r3, [r7, #4]
 810176a:	681b      	ldr	r3, [r3, #0]
 810176c:	4a34      	ldr	r2, [pc, #208]	; (8101840 <HAL_DMA_Abort_IT+0x3bc>)
 810176e:	4293      	cmp	r3, r2
 8101770:	d059      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 8101772:	687b      	ldr	r3, [r7, #4]
 8101774:	681b      	ldr	r3, [r3, #0]
 8101776:	4a33      	ldr	r2, [pc, #204]	; (8101844 <HAL_DMA_Abort_IT+0x3c0>)
 8101778:	4293      	cmp	r3, r2
 810177a:	d054      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 810177c:	687b      	ldr	r3, [r7, #4]
 810177e:	681b      	ldr	r3, [r3, #0]
 8101780:	4a31      	ldr	r2, [pc, #196]	; (8101848 <HAL_DMA_Abort_IT+0x3c4>)
 8101782:	4293      	cmp	r3, r2
 8101784:	d04f      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 8101786:	687b      	ldr	r3, [r7, #4]
 8101788:	681b      	ldr	r3, [r3, #0]
 810178a:	4a30      	ldr	r2, [pc, #192]	; (810184c <HAL_DMA_Abort_IT+0x3c8>)
 810178c:	4293      	cmp	r3, r2
 810178e:	d04a      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 8101790:	687b      	ldr	r3, [r7, #4]
 8101792:	681b      	ldr	r3, [r3, #0]
 8101794:	4a2e      	ldr	r2, [pc, #184]	; (8101850 <HAL_DMA_Abort_IT+0x3cc>)
 8101796:	4293      	cmp	r3, r2
 8101798:	d045      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 810179a:	687b      	ldr	r3, [r7, #4]
 810179c:	681b      	ldr	r3, [r3, #0]
 810179e:	4a2d      	ldr	r2, [pc, #180]	; (8101854 <HAL_DMA_Abort_IT+0x3d0>)
 81017a0:	4293      	cmp	r3, r2
 81017a2:	d040      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 81017a4:	687b      	ldr	r3, [r7, #4]
 81017a6:	681b      	ldr	r3, [r3, #0]
 81017a8:	4a2b      	ldr	r2, [pc, #172]	; (8101858 <HAL_DMA_Abort_IT+0x3d4>)
 81017aa:	4293      	cmp	r3, r2
 81017ac:	d03b      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 81017ae:	687b      	ldr	r3, [r7, #4]
 81017b0:	681b      	ldr	r3, [r3, #0]
 81017b2:	4a2a      	ldr	r2, [pc, #168]	; (810185c <HAL_DMA_Abort_IT+0x3d8>)
 81017b4:	4293      	cmp	r3, r2
 81017b6:	d036      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 81017b8:	687b      	ldr	r3, [r7, #4]
 81017ba:	681b      	ldr	r3, [r3, #0]
 81017bc:	4a28      	ldr	r2, [pc, #160]	; (8101860 <HAL_DMA_Abort_IT+0x3dc>)
 81017be:	4293      	cmp	r3, r2
 81017c0:	d031      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 81017c2:	687b      	ldr	r3, [r7, #4]
 81017c4:	681b      	ldr	r3, [r3, #0]
 81017c6:	4a27      	ldr	r2, [pc, #156]	; (8101864 <HAL_DMA_Abort_IT+0x3e0>)
 81017c8:	4293      	cmp	r3, r2
 81017ca:	d02c      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 81017cc:	687b      	ldr	r3, [r7, #4]
 81017ce:	681b      	ldr	r3, [r3, #0]
 81017d0:	4a25      	ldr	r2, [pc, #148]	; (8101868 <HAL_DMA_Abort_IT+0x3e4>)
 81017d2:	4293      	cmp	r3, r2
 81017d4:	d027      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 81017d6:	687b      	ldr	r3, [r7, #4]
 81017d8:	681b      	ldr	r3, [r3, #0]
 81017da:	4a24      	ldr	r2, [pc, #144]	; (810186c <HAL_DMA_Abort_IT+0x3e8>)
 81017dc:	4293      	cmp	r3, r2
 81017de:	d022      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 81017e0:	687b      	ldr	r3, [r7, #4]
 81017e2:	681b      	ldr	r3, [r3, #0]
 81017e4:	4a22      	ldr	r2, [pc, #136]	; (8101870 <HAL_DMA_Abort_IT+0x3ec>)
 81017e6:	4293      	cmp	r3, r2
 81017e8:	d01d      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 81017ea:	687b      	ldr	r3, [r7, #4]
 81017ec:	681b      	ldr	r3, [r3, #0]
 81017ee:	4a21      	ldr	r2, [pc, #132]	; (8101874 <HAL_DMA_Abort_IT+0x3f0>)
 81017f0:	4293      	cmp	r3, r2
 81017f2:	d018      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 81017f4:	687b      	ldr	r3, [r7, #4]
 81017f6:	681b      	ldr	r3, [r3, #0]
 81017f8:	4a1f      	ldr	r2, [pc, #124]	; (8101878 <HAL_DMA_Abort_IT+0x3f4>)
 81017fa:	4293      	cmp	r3, r2
 81017fc:	d013      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 81017fe:	687b      	ldr	r3, [r7, #4]
 8101800:	681b      	ldr	r3, [r3, #0]
 8101802:	4a1e      	ldr	r2, [pc, #120]	; (810187c <HAL_DMA_Abort_IT+0x3f8>)
 8101804:	4293      	cmp	r3, r2
 8101806:	d00e      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 8101808:	687b      	ldr	r3, [r7, #4]
 810180a:	681b      	ldr	r3, [r3, #0]
 810180c:	4a1c      	ldr	r2, [pc, #112]	; (8101880 <HAL_DMA_Abort_IT+0x3fc>)
 810180e:	4293      	cmp	r3, r2
 8101810:	d009      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 8101812:	687b      	ldr	r3, [r7, #4]
 8101814:	681b      	ldr	r3, [r3, #0]
 8101816:	4a1b      	ldr	r2, [pc, #108]	; (8101884 <HAL_DMA_Abort_IT+0x400>)
 8101818:	4293      	cmp	r3, r2
 810181a:	d004      	beq.n	8101826 <HAL_DMA_Abort_IT+0x3a2>
 810181c:	687b      	ldr	r3, [r7, #4]
 810181e:	681b      	ldr	r3, [r3, #0]
 8101820:	4a19      	ldr	r2, [pc, #100]	; (8101888 <HAL_DMA_Abort_IT+0x404>)
 8101822:	4293      	cmp	r3, r2
 8101824:	d132      	bne.n	810188c <HAL_DMA_Abort_IT+0x408>
 8101826:	2301      	movs	r3, #1
 8101828:	e031      	b.n	810188e <HAL_DMA_Abort_IT+0x40a>
 810182a:	bf00      	nop
 810182c:	40020010 	.word	0x40020010
 8101830:	40020028 	.word	0x40020028
 8101834:	40020040 	.word	0x40020040
 8101838:	40020058 	.word	0x40020058
 810183c:	40020070 	.word	0x40020070
 8101840:	40020088 	.word	0x40020088
 8101844:	400200a0 	.word	0x400200a0
 8101848:	400200b8 	.word	0x400200b8
 810184c:	40020410 	.word	0x40020410
 8101850:	40020428 	.word	0x40020428
 8101854:	40020440 	.word	0x40020440
 8101858:	40020458 	.word	0x40020458
 810185c:	40020470 	.word	0x40020470
 8101860:	40020488 	.word	0x40020488
 8101864:	400204a0 	.word	0x400204a0
 8101868:	400204b8 	.word	0x400204b8
 810186c:	58025408 	.word	0x58025408
 8101870:	5802541c 	.word	0x5802541c
 8101874:	58025430 	.word	0x58025430
 8101878:	58025444 	.word	0x58025444
 810187c:	58025458 	.word	0x58025458
 8101880:	5802546c 	.word	0x5802546c
 8101884:	58025480 	.word	0x58025480
 8101888:	58025494 	.word	0x58025494
 810188c:	2300      	movs	r3, #0
 810188e:	2b00      	cmp	r3, #0
 8101890:	d028      	beq.n	81018e4 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8101892:	687b      	ldr	r3, [r7, #4]
 8101894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8101896:	681a      	ldr	r2, [r3, #0]
 8101898:	687b      	ldr	r3, [r7, #4]
 810189a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810189c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81018a0:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 81018a2:	687b      	ldr	r3, [r7, #4]
 81018a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81018a6:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 81018a8:	687b      	ldr	r3, [r7, #4]
 81018aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81018ac:	f003 031f 	and.w	r3, r3, #31
 81018b0:	2201      	movs	r2, #1
 81018b2:	409a      	lsls	r2, r3
 81018b4:	68fb      	ldr	r3, [r7, #12]
 81018b6:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 81018b8:	687b      	ldr	r3, [r7, #4]
 81018ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81018bc:	687a      	ldr	r2, [r7, #4]
 81018be:	6e92      	ldr	r2, [r2, #104]	; 0x68
 81018c0:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 81018c2:	687b      	ldr	r3, [r7, #4]
 81018c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81018c6:	2b00      	cmp	r3, #0
 81018c8:	d00c      	beq.n	81018e4 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 81018ca:	687b      	ldr	r3, [r7, #4]
 81018cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81018ce:	681a      	ldr	r2, [r3, #0]
 81018d0:	687b      	ldr	r3, [r7, #4]
 81018d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81018d4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 81018d8:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 81018da:	687b      	ldr	r3, [r7, #4]
 81018dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81018de:	687a      	ldr	r2, [r7, #4]
 81018e0:	6f52      	ldr	r2, [r2, #116]	; 0x74
 81018e2:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 81018e4:	687b      	ldr	r3, [r7, #4]
 81018e6:	2201      	movs	r2, #1
 81018e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 81018ec:	687b      	ldr	r3, [r7, #4]
 81018ee:	2200      	movs	r2, #0
 81018f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 81018f4:	687b      	ldr	r3, [r7, #4]
 81018f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81018f8:	2b00      	cmp	r3, #0
 81018fa:	d003      	beq.n	8101904 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 81018fc:	687b      	ldr	r3, [r7, #4]
 81018fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8101900:	6878      	ldr	r0, [r7, #4]
 8101902:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8101904:	2300      	movs	r3, #0
}
 8101906:	4618      	mov	r0, r3
 8101908:	3710      	adds	r7, #16
 810190a:	46bd      	mov	sp, r7
 810190c:	bd80      	pop	{r7, pc}
 810190e:	bf00      	nop

08101910 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8101910:	b480      	push	{r7}
 8101912:	b089      	sub	sp, #36	; 0x24
 8101914:	af00      	add	r7, sp, #0
 8101916:	6078      	str	r0, [r7, #4]
 8101918:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 810191a:	2300      	movs	r3, #0
 810191c:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 810191e:	4b89      	ldr	r3, [pc, #548]	; (8101b44 <HAL_GPIO_Init+0x234>)
 8101920:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101922:	e194      	b.n	8101c4e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8101924:	683b      	ldr	r3, [r7, #0]
 8101926:	681a      	ldr	r2, [r3, #0]
 8101928:	2101      	movs	r1, #1
 810192a:	69fb      	ldr	r3, [r7, #28]
 810192c:	fa01 f303 	lsl.w	r3, r1, r3
 8101930:	4013      	ands	r3, r2
 8101932:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8101934:	693b      	ldr	r3, [r7, #16]
 8101936:	2b00      	cmp	r3, #0
 8101938:	f000 8186 	beq.w	8101c48 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 810193c:	683b      	ldr	r3, [r7, #0]
 810193e:	685b      	ldr	r3, [r3, #4]
 8101940:	f003 0303 	and.w	r3, r3, #3
 8101944:	2b01      	cmp	r3, #1
 8101946:	d005      	beq.n	8101954 <HAL_GPIO_Init+0x44>
 8101948:	683b      	ldr	r3, [r7, #0]
 810194a:	685b      	ldr	r3, [r3, #4]
 810194c:	f003 0303 	and.w	r3, r3, #3
 8101950:	2b02      	cmp	r3, #2
 8101952:	d130      	bne.n	81019b6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8101954:	687b      	ldr	r3, [r7, #4]
 8101956:	689b      	ldr	r3, [r3, #8]
 8101958:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 810195a:	69fb      	ldr	r3, [r7, #28]
 810195c:	005b      	lsls	r3, r3, #1
 810195e:	2203      	movs	r2, #3
 8101960:	fa02 f303 	lsl.w	r3, r2, r3
 8101964:	43db      	mvns	r3, r3
 8101966:	69ba      	ldr	r2, [r7, #24]
 8101968:	4013      	ands	r3, r2
 810196a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 810196c:	683b      	ldr	r3, [r7, #0]
 810196e:	68da      	ldr	r2, [r3, #12]
 8101970:	69fb      	ldr	r3, [r7, #28]
 8101972:	005b      	lsls	r3, r3, #1
 8101974:	fa02 f303 	lsl.w	r3, r2, r3
 8101978:	69ba      	ldr	r2, [r7, #24]
 810197a:	4313      	orrs	r3, r2
 810197c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810197e:	687b      	ldr	r3, [r7, #4]
 8101980:	69ba      	ldr	r2, [r7, #24]
 8101982:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8101984:	687b      	ldr	r3, [r7, #4]
 8101986:	685b      	ldr	r3, [r3, #4]
 8101988:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 810198a:	2201      	movs	r2, #1
 810198c:	69fb      	ldr	r3, [r7, #28]
 810198e:	fa02 f303 	lsl.w	r3, r2, r3
 8101992:	43db      	mvns	r3, r3
 8101994:	69ba      	ldr	r2, [r7, #24]
 8101996:	4013      	ands	r3, r2
 8101998:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 810199a:	683b      	ldr	r3, [r7, #0]
 810199c:	685b      	ldr	r3, [r3, #4]
 810199e:	091b      	lsrs	r3, r3, #4
 81019a0:	f003 0201 	and.w	r2, r3, #1
 81019a4:	69fb      	ldr	r3, [r7, #28]
 81019a6:	fa02 f303 	lsl.w	r3, r2, r3
 81019aa:	69ba      	ldr	r2, [r7, #24]
 81019ac:	4313      	orrs	r3, r2
 81019ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 81019b0:	687b      	ldr	r3, [r7, #4]
 81019b2:	69ba      	ldr	r2, [r7, #24]
 81019b4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 81019b6:	683b      	ldr	r3, [r7, #0]
 81019b8:	685b      	ldr	r3, [r3, #4]
 81019ba:	f003 0303 	and.w	r3, r3, #3
 81019be:	2b03      	cmp	r3, #3
 81019c0:	d017      	beq.n	81019f2 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 81019c2:	687b      	ldr	r3, [r7, #4]
 81019c4:	68db      	ldr	r3, [r3, #12]
 81019c6:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 81019c8:	69fb      	ldr	r3, [r7, #28]
 81019ca:	005b      	lsls	r3, r3, #1
 81019cc:	2203      	movs	r2, #3
 81019ce:	fa02 f303 	lsl.w	r3, r2, r3
 81019d2:	43db      	mvns	r3, r3
 81019d4:	69ba      	ldr	r2, [r7, #24]
 81019d6:	4013      	ands	r3, r2
 81019d8:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 81019da:	683b      	ldr	r3, [r7, #0]
 81019dc:	689a      	ldr	r2, [r3, #8]
 81019de:	69fb      	ldr	r3, [r7, #28]
 81019e0:	005b      	lsls	r3, r3, #1
 81019e2:	fa02 f303 	lsl.w	r3, r2, r3
 81019e6:	69ba      	ldr	r2, [r7, #24]
 81019e8:	4313      	orrs	r3, r2
 81019ea:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 81019ec:	687b      	ldr	r3, [r7, #4]
 81019ee:	69ba      	ldr	r2, [r7, #24]
 81019f0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 81019f2:	683b      	ldr	r3, [r7, #0]
 81019f4:	685b      	ldr	r3, [r3, #4]
 81019f6:	f003 0303 	and.w	r3, r3, #3
 81019fa:	2b02      	cmp	r3, #2
 81019fc:	d123      	bne.n	8101a46 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 81019fe:	69fb      	ldr	r3, [r7, #28]
 8101a00:	08da      	lsrs	r2, r3, #3
 8101a02:	687b      	ldr	r3, [r7, #4]
 8101a04:	3208      	adds	r2, #8
 8101a06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8101a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8101a0c:	69fb      	ldr	r3, [r7, #28]
 8101a0e:	f003 0307 	and.w	r3, r3, #7
 8101a12:	009b      	lsls	r3, r3, #2
 8101a14:	220f      	movs	r2, #15
 8101a16:	fa02 f303 	lsl.w	r3, r2, r3
 8101a1a:	43db      	mvns	r3, r3
 8101a1c:	69ba      	ldr	r2, [r7, #24]
 8101a1e:	4013      	ands	r3, r2
 8101a20:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8101a22:	683b      	ldr	r3, [r7, #0]
 8101a24:	691a      	ldr	r2, [r3, #16]
 8101a26:	69fb      	ldr	r3, [r7, #28]
 8101a28:	f003 0307 	and.w	r3, r3, #7
 8101a2c:	009b      	lsls	r3, r3, #2
 8101a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8101a32:	69ba      	ldr	r2, [r7, #24]
 8101a34:	4313      	orrs	r3, r2
 8101a36:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8101a38:	69fb      	ldr	r3, [r7, #28]
 8101a3a:	08da      	lsrs	r2, r3, #3
 8101a3c:	687b      	ldr	r3, [r7, #4]
 8101a3e:	3208      	adds	r2, #8
 8101a40:	69b9      	ldr	r1, [r7, #24]
 8101a42:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8101a46:	687b      	ldr	r3, [r7, #4]
 8101a48:	681b      	ldr	r3, [r3, #0]
 8101a4a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8101a4c:	69fb      	ldr	r3, [r7, #28]
 8101a4e:	005b      	lsls	r3, r3, #1
 8101a50:	2203      	movs	r2, #3
 8101a52:	fa02 f303 	lsl.w	r3, r2, r3
 8101a56:	43db      	mvns	r3, r3
 8101a58:	69ba      	ldr	r2, [r7, #24]
 8101a5a:	4013      	ands	r3, r2
 8101a5c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8101a5e:	683b      	ldr	r3, [r7, #0]
 8101a60:	685b      	ldr	r3, [r3, #4]
 8101a62:	f003 0203 	and.w	r2, r3, #3
 8101a66:	69fb      	ldr	r3, [r7, #28]
 8101a68:	005b      	lsls	r3, r3, #1
 8101a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8101a6e:	69ba      	ldr	r2, [r7, #24]
 8101a70:	4313      	orrs	r3, r2
 8101a72:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8101a74:	687b      	ldr	r3, [r7, #4]
 8101a76:	69ba      	ldr	r2, [r7, #24]
 8101a78:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8101a7a:	683b      	ldr	r3, [r7, #0]
 8101a7c:	685b      	ldr	r3, [r3, #4]
 8101a7e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8101a82:	2b00      	cmp	r3, #0
 8101a84:	f000 80e0 	beq.w	8101c48 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8101a88:	4b2f      	ldr	r3, [pc, #188]	; (8101b48 <HAL_GPIO_Init+0x238>)
 8101a8a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101a8e:	4a2e      	ldr	r2, [pc, #184]	; (8101b48 <HAL_GPIO_Init+0x238>)
 8101a90:	f043 0302 	orr.w	r3, r3, #2
 8101a94:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8101a98:	4b2b      	ldr	r3, [pc, #172]	; (8101b48 <HAL_GPIO_Init+0x238>)
 8101a9a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101a9e:	f003 0302 	and.w	r3, r3, #2
 8101aa2:	60fb      	str	r3, [r7, #12]
 8101aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8101aa6:	4a29      	ldr	r2, [pc, #164]	; (8101b4c <HAL_GPIO_Init+0x23c>)
 8101aa8:	69fb      	ldr	r3, [r7, #28]
 8101aaa:	089b      	lsrs	r3, r3, #2
 8101aac:	3302      	adds	r3, #2
 8101aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8101ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8101ab4:	69fb      	ldr	r3, [r7, #28]
 8101ab6:	f003 0303 	and.w	r3, r3, #3
 8101aba:	009b      	lsls	r3, r3, #2
 8101abc:	220f      	movs	r2, #15
 8101abe:	fa02 f303 	lsl.w	r3, r2, r3
 8101ac2:	43db      	mvns	r3, r3
 8101ac4:	69ba      	ldr	r2, [r7, #24]
 8101ac6:	4013      	ands	r3, r2
 8101ac8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8101aca:	687b      	ldr	r3, [r7, #4]
 8101acc:	4a20      	ldr	r2, [pc, #128]	; (8101b50 <HAL_GPIO_Init+0x240>)
 8101ace:	4293      	cmp	r3, r2
 8101ad0:	d052      	beq.n	8101b78 <HAL_GPIO_Init+0x268>
 8101ad2:	687b      	ldr	r3, [r7, #4]
 8101ad4:	4a1f      	ldr	r2, [pc, #124]	; (8101b54 <HAL_GPIO_Init+0x244>)
 8101ad6:	4293      	cmp	r3, r2
 8101ad8:	d031      	beq.n	8101b3e <HAL_GPIO_Init+0x22e>
 8101ada:	687b      	ldr	r3, [r7, #4]
 8101adc:	4a1e      	ldr	r2, [pc, #120]	; (8101b58 <HAL_GPIO_Init+0x248>)
 8101ade:	4293      	cmp	r3, r2
 8101ae0:	d02b      	beq.n	8101b3a <HAL_GPIO_Init+0x22a>
 8101ae2:	687b      	ldr	r3, [r7, #4]
 8101ae4:	4a1d      	ldr	r2, [pc, #116]	; (8101b5c <HAL_GPIO_Init+0x24c>)
 8101ae6:	4293      	cmp	r3, r2
 8101ae8:	d025      	beq.n	8101b36 <HAL_GPIO_Init+0x226>
 8101aea:	687b      	ldr	r3, [r7, #4]
 8101aec:	4a1c      	ldr	r2, [pc, #112]	; (8101b60 <HAL_GPIO_Init+0x250>)
 8101aee:	4293      	cmp	r3, r2
 8101af0:	d01f      	beq.n	8101b32 <HAL_GPIO_Init+0x222>
 8101af2:	687b      	ldr	r3, [r7, #4]
 8101af4:	4a1b      	ldr	r2, [pc, #108]	; (8101b64 <HAL_GPIO_Init+0x254>)
 8101af6:	4293      	cmp	r3, r2
 8101af8:	d019      	beq.n	8101b2e <HAL_GPIO_Init+0x21e>
 8101afa:	687b      	ldr	r3, [r7, #4]
 8101afc:	4a1a      	ldr	r2, [pc, #104]	; (8101b68 <HAL_GPIO_Init+0x258>)
 8101afe:	4293      	cmp	r3, r2
 8101b00:	d013      	beq.n	8101b2a <HAL_GPIO_Init+0x21a>
 8101b02:	687b      	ldr	r3, [r7, #4]
 8101b04:	4a19      	ldr	r2, [pc, #100]	; (8101b6c <HAL_GPIO_Init+0x25c>)
 8101b06:	4293      	cmp	r3, r2
 8101b08:	d00d      	beq.n	8101b26 <HAL_GPIO_Init+0x216>
 8101b0a:	687b      	ldr	r3, [r7, #4]
 8101b0c:	4a18      	ldr	r2, [pc, #96]	; (8101b70 <HAL_GPIO_Init+0x260>)
 8101b0e:	4293      	cmp	r3, r2
 8101b10:	d007      	beq.n	8101b22 <HAL_GPIO_Init+0x212>
 8101b12:	687b      	ldr	r3, [r7, #4]
 8101b14:	4a17      	ldr	r2, [pc, #92]	; (8101b74 <HAL_GPIO_Init+0x264>)
 8101b16:	4293      	cmp	r3, r2
 8101b18:	d101      	bne.n	8101b1e <HAL_GPIO_Init+0x20e>
 8101b1a:	2309      	movs	r3, #9
 8101b1c:	e02d      	b.n	8101b7a <HAL_GPIO_Init+0x26a>
 8101b1e:	230a      	movs	r3, #10
 8101b20:	e02b      	b.n	8101b7a <HAL_GPIO_Init+0x26a>
 8101b22:	2308      	movs	r3, #8
 8101b24:	e029      	b.n	8101b7a <HAL_GPIO_Init+0x26a>
 8101b26:	2307      	movs	r3, #7
 8101b28:	e027      	b.n	8101b7a <HAL_GPIO_Init+0x26a>
 8101b2a:	2306      	movs	r3, #6
 8101b2c:	e025      	b.n	8101b7a <HAL_GPIO_Init+0x26a>
 8101b2e:	2305      	movs	r3, #5
 8101b30:	e023      	b.n	8101b7a <HAL_GPIO_Init+0x26a>
 8101b32:	2304      	movs	r3, #4
 8101b34:	e021      	b.n	8101b7a <HAL_GPIO_Init+0x26a>
 8101b36:	2303      	movs	r3, #3
 8101b38:	e01f      	b.n	8101b7a <HAL_GPIO_Init+0x26a>
 8101b3a:	2302      	movs	r3, #2
 8101b3c:	e01d      	b.n	8101b7a <HAL_GPIO_Init+0x26a>
 8101b3e:	2301      	movs	r3, #1
 8101b40:	e01b      	b.n	8101b7a <HAL_GPIO_Init+0x26a>
 8101b42:	bf00      	nop
 8101b44:	580000c0 	.word	0x580000c0
 8101b48:	58024400 	.word	0x58024400
 8101b4c:	58000400 	.word	0x58000400
 8101b50:	58020000 	.word	0x58020000
 8101b54:	58020400 	.word	0x58020400
 8101b58:	58020800 	.word	0x58020800
 8101b5c:	58020c00 	.word	0x58020c00
 8101b60:	58021000 	.word	0x58021000
 8101b64:	58021400 	.word	0x58021400
 8101b68:	58021800 	.word	0x58021800
 8101b6c:	58021c00 	.word	0x58021c00
 8101b70:	58022000 	.word	0x58022000
 8101b74:	58022400 	.word	0x58022400
 8101b78:	2300      	movs	r3, #0
 8101b7a:	69fa      	ldr	r2, [r7, #28]
 8101b7c:	f002 0203 	and.w	r2, r2, #3
 8101b80:	0092      	lsls	r2, r2, #2
 8101b82:	4093      	lsls	r3, r2
 8101b84:	69ba      	ldr	r2, [r7, #24]
 8101b86:	4313      	orrs	r3, r2
 8101b88:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8101b8a:	4938      	ldr	r1, [pc, #224]	; (8101c6c <HAL_GPIO_Init+0x35c>)
 8101b8c:	69fb      	ldr	r3, [r7, #28]
 8101b8e:	089b      	lsrs	r3, r3, #2
 8101b90:	3302      	adds	r3, #2
 8101b92:	69ba      	ldr	r2, [r7, #24]
 8101b94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8101b98:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101b9c:	681b      	ldr	r3, [r3, #0]
 8101b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101ba0:	693b      	ldr	r3, [r7, #16]
 8101ba2:	43db      	mvns	r3, r3
 8101ba4:	69ba      	ldr	r2, [r7, #24]
 8101ba6:	4013      	ands	r3, r2
 8101ba8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8101baa:	683b      	ldr	r3, [r7, #0]
 8101bac:	685b      	ldr	r3, [r3, #4]
 8101bae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8101bb2:	2b00      	cmp	r3, #0
 8101bb4:	d003      	beq.n	8101bbe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8101bb6:	69ba      	ldr	r2, [r7, #24]
 8101bb8:	693b      	ldr	r3, [r7, #16]
 8101bba:	4313      	orrs	r3, r2
 8101bbc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8101bbe:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101bc2:	69bb      	ldr	r3, [r7, #24]
 8101bc4:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8101bc6:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8101bca:	685b      	ldr	r3, [r3, #4]
 8101bcc:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101bce:	693b      	ldr	r3, [r7, #16]
 8101bd0:	43db      	mvns	r3, r3
 8101bd2:	69ba      	ldr	r2, [r7, #24]
 8101bd4:	4013      	ands	r3, r2
 8101bd6:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8101bd8:	683b      	ldr	r3, [r7, #0]
 8101bda:	685b      	ldr	r3, [r3, #4]
 8101bdc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101be0:	2b00      	cmp	r3, #0
 8101be2:	d003      	beq.n	8101bec <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8101be4:	69ba      	ldr	r2, [r7, #24]
 8101be6:	693b      	ldr	r3, [r7, #16]
 8101be8:	4313      	orrs	r3, r2
 8101bea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8101bec:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8101bf0:	69bb      	ldr	r3, [r7, #24]
 8101bf2:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8101bf4:	697b      	ldr	r3, [r7, #20]
 8101bf6:	685b      	ldr	r3, [r3, #4]
 8101bf8:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101bfa:	693b      	ldr	r3, [r7, #16]
 8101bfc:	43db      	mvns	r3, r3
 8101bfe:	69ba      	ldr	r2, [r7, #24]
 8101c00:	4013      	ands	r3, r2
 8101c02:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8101c04:	683b      	ldr	r3, [r7, #0]
 8101c06:	685b      	ldr	r3, [r3, #4]
 8101c08:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101c0c:	2b00      	cmp	r3, #0
 8101c0e:	d003      	beq.n	8101c18 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8101c10:	69ba      	ldr	r2, [r7, #24]
 8101c12:	693b      	ldr	r3, [r7, #16]
 8101c14:	4313      	orrs	r3, r2
 8101c16:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8101c18:	697b      	ldr	r3, [r7, #20]
 8101c1a:	69ba      	ldr	r2, [r7, #24]
 8101c1c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8101c1e:	697b      	ldr	r3, [r7, #20]
 8101c20:	681b      	ldr	r3, [r3, #0]
 8101c22:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8101c24:	693b      	ldr	r3, [r7, #16]
 8101c26:	43db      	mvns	r3, r3
 8101c28:	69ba      	ldr	r2, [r7, #24]
 8101c2a:	4013      	ands	r3, r2
 8101c2c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8101c2e:	683b      	ldr	r3, [r7, #0]
 8101c30:	685b      	ldr	r3, [r3, #4]
 8101c32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8101c36:	2b00      	cmp	r3, #0
 8101c38:	d003      	beq.n	8101c42 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8101c3a:	69ba      	ldr	r2, [r7, #24]
 8101c3c:	693b      	ldr	r3, [r7, #16]
 8101c3e:	4313      	orrs	r3, r2
 8101c40:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8101c42:	697b      	ldr	r3, [r7, #20]
 8101c44:	69ba      	ldr	r2, [r7, #24]
 8101c46:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8101c48:	69fb      	ldr	r3, [r7, #28]
 8101c4a:	3301      	adds	r3, #1
 8101c4c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8101c4e:	683b      	ldr	r3, [r7, #0]
 8101c50:	681a      	ldr	r2, [r3, #0]
 8101c52:	69fb      	ldr	r3, [r7, #28]
 8101c54:	fa22 f303 	lsr.w	r3, r2, r3
 8101c58:	2b00      	cmp	r3, #0
 8101c5a:	f47f ae63 	bne.w	8101924 <HAL_GPIO_Init+0x14>
  }
}
 8101c5e:	bf00      	nop
 8101c60:	bf00      	nop
 8101c62:	3724      	adds	r7, #36	; 0x24
 8101c64:	46bd      	mov	sp, r7
 8101c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c6a:	4770      	bx	lr
 8101c6c:	58000400 	.word	0x58000400

08101c70 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8101c70:	b480      	push	{r7}
 8101c72:	b083      	sub	sp, #12
 8101c74:	af00      	add	r7, sp, #0
 8101c76:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8101c78:	4b05      	ldr	r3, [pc, #20]	; (8101c90 <HAL_HSEM_ActivateNotification+0x20>)
 8101c7a:	681a      	ldr	r2, [r3, #0]
 8101c7c:	4904      	ldr	r1, [pc, #16]	; (8101c90 <HAL_HSEM_ActivateNotification+0x20>)
 8101c7e:	687b      	ldr	r3, [r7, #4]
 8101c80:	4313      	orrs	r3, r2
 8101c82:	600b      	str	r3, [r1, #0]
#endif
}
 8101c84:	bf00      	nop
 8101c86:	370c      	adds	r7, #12
 8101c88:	46bd      	mov	sp, r7
 8101c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c8e:	4770      	bx	lr
 8101c90:	58026510 	.word	0x58026510

08101c94 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8101c94:	b580      	push	{r7, lr}
 8101c96:	b084      	sub	sp, #16
 8101c98:	af00      	add	r7, sp, #0
 8101c9a:	60f8      	str	r0, [r7, #12]
 8101c9c:	460b      	mov	r3, r1
 8101c9e:	607a      	str	r2, [r7, #4]
 8101ca0:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8101ca2:	4b37      	ldr	r3, [pc, #220]	; (8101d80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101ca4:	681b      	ldr	r3, [r3, #0]
 8101ca6:	f023 0201 	bic.w	r2, r3, #1
 8101caa:	4935      	ldr	r1, [pc, #212]	; (8101d80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101cac:	68fb      	ldr	r3, [r7, #12]
 8101cae:	4313      	orrs	r3, r2
 8101cb0:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8101cb2:	687b      	ldr	r3, [r7, #4]
 8101cb4:	2b00      	cmp	r3, #0
 8101cb6:	d123      	bne.n	8101d00 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8101cb8:	f7ff f8b2 	bl	8100e20 <HAL_GetCurrentCPUID>
 8101cbc:	4603      	mov	r3, r0
 8101cbe:	2b03      	cmp	r3, #3
 8101cc0:	d158      	bne.n	8101d74 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8101cc2:	4b2f      	ldr	r3, [pc, #188]	; (8101d80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101cc4:	691b      	ldr	r3, [r3, #16]
 8101cc6:	4a2e      	ldr	r2, [pc, #184]	; (8101d80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101cc8:	f023 0301 	bic.w	r3, r3, #1
 8101ccc:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101cce:	4b2d      	ldr	r3, [pc, #180]	; (8101d84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101cd0:	691b      	ldr	r3, [r3, #16]
 8101cd2:	4a2c      	ldr	r2, [pc, #176]	; (8101d84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101cd4:	f043 0304 	orr.w	r3, r3, #4
 8101cd8:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8101cda:	f3bf 8f4f 	dsb	sy
}
 8101cde:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101ce0:	f3bf 8f6f 	isb	sy
}
 8101ce4:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101ce6:	7afb      	ldrb	r3, [r7, #11]
 8101ce8:	2b01      	cmp	r3, #1
 8101cea:	d101      	bne.n	8101cf0 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101cec:	bf30      	wfi
 8101cee:	e000      	b.n	8101cf2 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101cf0:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101cf2:	4b24      	ldr	r3, [pc, #144]	; (8101d84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101cf4:	691b      	ldr	r3, [r3, #16]
 8101cf6:	4a23      	ldr	r2, [pc, #140]	; (8101d84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101cf8:	f023 0304 	bic.w	r3, r3, #4
 8101cfc:	6113      	str	r3, [r2, #16]
 8101cfe:	e03c      	b.n	8101d7a <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 8101d00:	687b      	ldr	r3, [r7, #4]
 8101d02:	2b01      	cmp	r3, #1
 8101d04:	d123      	bne.n	8101d4e <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 8101d06:	f7ff f88b 	bl	8100e20 <HAL_GetCurrentCPUID>
 8101d0a:	4603      	mov	r3, r0
 8101d0c:	2b01      	cmp	r3, #1
 8101d0e:	d133      	bne.n	8101d78 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 8101d10:	4b1b      	ldr	r3, [pc, #108]	; (8101d80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d12:	695b      	ldr	r3, [r3, #20]
 8101d14:	4a1a      	ldr	r2, [pc, #104]	; (8101d80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d16:	f023 0302 	bic.w	r3, r3, #2
 8101d1a:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101d1c:	4b19      	ldr	r3, [pc, #100]	; (8101d84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d1e:	691b      	ldr	r3, [r3, #16]
 8101d20:	4a18      	ldr	r2, [pc, #96]	; (8101d84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d22:	f043 0304 	orr.w	r3, r3, #4
 8101d26:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8101d28:	f3bf 8f4f 	dsb	sy
}
 8101d2c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8101d2e:	f3bf 8f6f 	isb	sy
}
 8101d32:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 8101d34:	7afb      	ldrb	r3, [r7, #11]
 8101d36:	2b01      	cmp	r3, #1
 8101d38:	d101      	bne.n	8101d3e <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8101d3a:	bf30      	wfi
 8101d3c:	e000      	b.n	8101d40 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8101d3e:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8101d40:	4b10      	ldr	r3, [pc, #64]	; (8101d84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d42:	691b      	ldr	r3, [r3, #16]
 8101d44:	4a0f      	ldr	r2, [pc, #60]	; (8101d84 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8101d46:	f023 0304 	bic.w	r3, r3, #4
 8101d4a:	6113      	str	r3, [r2, #16]
 8101d4c:	e015      	b.n	8101d7a <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101d4e:	f7ff f867 	bl	8100e20 <HAL_GetCurrentCPUID>
 8101d52:	4603      	mov	r3, r0
 8101d54:	2b03      	cmp	r3, #3
 8101d56:	d106      	bne.n	8101d66 <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8101d58:	4b09      	ldr	r3, [pc, #36]	; (8101d80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d5a:	691b      	ldr	r3, [r3, #16]
 8101d5c:	4a08      	ldr	r2, [pc, #32]	; (8101d80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d5e:	f023 0304 	bic.w	r3, r3, #4
 8101d62:	6113      	str	r3, [r2, #16]
 8101d64:	e009      	b.n	8101d7a <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 8101d66:	4b06      	ldr	r3, [pc, #24]	; (8101d80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d68:	695b      	ldr	r3, [r3, #20]
 8101d6a:	4a05      	ldr	r2, [pc, #20]	; (8101d80 <HAL_PWREx_EnterSTOPMode+0xec>)
 8101d6c:	f023 0304 	bic.w	r3, r3, #4
 8101d70:	6153      	str	r3, [r2, #20]
 8101d72:	e002      	b.n	8101d7a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101d74:	bf00      	nop
 8101d76:	e000      	b.n	8101d7a <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8101d78:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8101d7a:	3710      	adds	r7, #16
 8101d7c:	46bd      	mov	sp, r7
 8101d7e:	bd80      	pop	{r7, pc}
 8101d80:	58024800 	.word	0x58024800
 8101d84:	e000ed00 	.word	0xe000ed00

08101d88 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8101d88:	b580      	push	{r7, lr}
 8101d8a:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8101d8c:	f7ff f848 	bl	8100e20 <HAL_GetCurrentCPUID>
 8101d90:	4603      	mov	r3, r0
 8101d92:	2b03      	cmp	r3, #3
 8101d94:	d101      	bne.n	8101d9a <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 8101d96:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8101d98:	e001      	b.n	8101d9e <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8101d9a:	bf40      	sev
    __WFE ();
 8101d9c:	bf20      	wfe
}
 8101d9e:	bf00      	nop
 8101da0:	bd80      	pop	{r7, pc}
	...

08101da4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8101da4:	b480      	push	{r7}
 8101da6:	b089      	sub	sp, #36	; 0x24
 8101da8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8101daa:	4bb3      	ldr	r3, [pc, #716]	; (8102078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101dac:	691b      	ldr	r3, [r3, #16]
 8101dae:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8101db2:	2b18      	cmp	r3, #24
 8101db4:	f200 8155 	bhi.w	8102062 <HAL_RCC_GetSysClockFreq+0x2be>
 8101db8:	a201      	add	r2, pc, #4	; (adr r2, 8101dc0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8101dba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8101dbe:	bf00      	nop
 8101dc0:	08101e25 	.word	0x08101e25
 8101dc4:	08102063 	.word	0x08102063
 8101dc8:	08102063 	.word	0x08102063
 8101dcc:	08102063 	.word	0x08102063
 8101dd0:	08102063 	.word	0x08102063
 8101dd4:	08102063 	.word	0x08102063
 8101dd8:	08102063 	.word	0x08102063
 8101ddc:	08102063 	.word	0x08102063
 8101de0:	08101e4b 	.word	0x08101e4b
 8101de4:	08102063 	.word	0x08102063
 8101de8:	08102063 	.word	0x08102063
 8101dec:	08102063 	.word	0x08102063
 8101df0:	08102063 	.word	0x08102063
 8101df4:	08102063 	.word	0x08102063
 8101df8:	08102063 	.word	0x08102063
 8101dfc:	08102063 	.word	0x08102063
 8101e00:	08101e51 	.word	0x08101e51
 8101e04:	08102063 	.word	0x08102063
 8101e08:	08102063 	.word	0x08102063
 8101e0c:	08102063 	.word	0x08102063
 8101e10:	08102063 	.word	0x08102063
 8101e14:	08102063 	.word	0x08102063
 8101e18:	08102063 	.word	0x08102063
 8101e1c:	08102063 	.word	0x08102063
 8101e20:	08101e57 	.word	0x08101e57
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101e24:	4b94      	ldr	r3, [pc, #592]	; (8102078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e26:	681b      	ldr	r3, [r3, #0]
 8101e28:	f003 0320 	and.w	r3, r3, #32
 8101e2c:	2b00      	cmp	r3, #0
 8101e2e:	d009      	beq.n	8101e44 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101e30:	4b91      	ldr	r3, [pc, #580]	; (8102078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e32:	681b      	ldr	r3, [r3, #0]
 8101e34:	08db      	lsrs	r3, r3, #3
 8101e36:	f003 0303 	and.w	r3, r3, #3
 8101e3a:	4a90      	ldr	r2, [pc, #576]	; (810207c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101e3c:	fa22 f303 	lsr.w	r3, r2, r3
 8101e40:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8101e42:	e111      	b.n	8102068 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8101e44:	4b8d      	ldr	r3, [pc, #564]	; (810207c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101e46:	61bb      	str	r3, [r7, #24]
      break;
 8101e48:	e10e      	b.n	8102068 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8101e4a:	4b8d      	ldr	r3, [pc, #564]	; (8102080 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8101e4c:	61bb      	str	r3, [r7, #24]
      break;
 8101e4e:	e10b      	b.n	8102068 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8101e50:	4b8c      	ldr	r3, [pc, #560]	; (8102084 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8101e52:	61bb      	str	r3, [r7, #24]
      break;
 8101e54:	e108      	b.n	8102068 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8101e56:	4b88      	ldr	r3, [pc, #544]	; (8102078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101e5a:	f003 0303 	and.w	r3, r3, #3
 8101e5e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8101e60:	4b85      	ldr	r3, [pc, #532]	; (8102078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e62:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101e64:	091b      	lsrs	r3, r3, #4
 8101e66:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8101e6a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8101e6c:	4b82      	ldr	r3, [pc, #520]	; (8102078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8101e70:	f003 0301 	and.w	r3, r3, #1
 8101e74:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8101e76:	4b80      	ldr	r3, [pc, #512]	; (8102078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101e78:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8101e7a:	08db      	lsrs	r3, r3, #3
 8101e7c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8101e80:	68fa      	ldr	r2, [r7, #12]
 8101e82:	fb02 f303 	mul.w	r3, r2, r3
 8101e86:	ee07 3a90 	vmov	s15, r3
 8101e8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101e8e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8101e92:	693b      	ldr	r3, [r7, #16]
 8101e94:	2b00      	cmp	r3, #0
 8101e96:	f000 80e1 	beq.w	810205c <HAL_RCC_GetSysClockFreq+0x2b8>
 8101e9a:	697b      	ldr	r3, [r7, #20]
 8101e9c:	2b02      	cmp	r3, #2
 8101e9e:	f000 8083 	beq.w	8101fa8 <HAL_RCC_GetSysClockFreq+0x204>
 8101ea2:	697b      	ldr	r3, [r7, #20]
 8101ea4:	2b02      	cmp	r3, #2
 8101ea6:	f200 80a1 	bhi.w	8101fec <HAL_RCC_GetSysClockFreq+0x248>
 8101eaa:	697b      	ldr	r3, [r7, #20]
 8101eac:	2b00      	cmp	r3, #0
 8101eae:	d003      	beq.n	8101eb8 <HAL_RCC_GetSysClockFreq+0x114>
 8101eb0:	697b      	ldr	r3, [r7, #20]
 8101eb2:	2b01      	cmp	r3, #1
 8101eb4:	d056      	beq.n	8101f64 <HAL_RCC_GetSysClockFreq+0x1c0>
 8101eb6:	e099      	b.n	8101fec <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8101eb8:	4b6f      	ldr	r3, [pc, #444]	; (8102078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101eba:	681b      	ldr	r3, [r3, #0]
 8101ebc:	f003 0320 	and.w	r3, r3, #32
 8101ec0:	2b00      	cmp	r3, #0
 8101ec2:	d02d      	beq.n	8101f20 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8101ec4:	4b6c      	ldr	r3, [pc, #432]	; (8102078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ec6:	681b      	ldr	r3, [r3, #0]
 8101ec8:	08db      	lsrs	r3, r3, #3
 8101eca:	f003 0303 	and.w	r3, r3, #3
 8101ece:	4a6b      	ldr	r2, [pc, #428]	; (810207c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8101ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8101ed4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101ed6:	687b      	ldr	r3, [r7, #4]
 8101ed8:	ee07 3a90 	vmov	s15, r3
 8101edc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101ee0:	693b      	ldr	r3, [r7, #16]
 8101ee2:	ee07 3a90 	vmov	s15, r3
 8101ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101eea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101eee:	4b62      	ldr	r3, [pc, #392]	; (8102078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101ef0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101ef2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101ef6:	ee07 3a90 	vmov	s15, r3
 8101efa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101efe:	ed97 6a02 	vldr	s12, [r7, #8]
 8101f02:	eddf 5a61 	vldr	s11, [pc, #388]	; 8102088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101f06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101f0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101f0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101f12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101f16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101f1a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8101f1e:	e087      	b.n	8102030 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101f20:	693b      	ldr	r3, [r7, #16]
 8101f22:	ee07 3a90 	vmov	s15, r3
 8101f26:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f2a:	eddf 6a58 	vldr	s13, [pc, #352]	; 810208c <HAL_RCC_GetSysClockFreq+0x2e8>
 8101f2e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f32:	4b51      	ldr	r3, [pc, #324]	; (8102078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101f36:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101f3a:	ee07 3a90 	vmov	s15, r3
 8101f3e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101f42:	ed97 6a02 	vldr	s12, [r7, #8]
 8101f46:	eddf 5a50 	vldr	s11, [pc, #320]	; 8102088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101f4a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101f4e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101f52:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101f56:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101f5a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101f5e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101f62:	e065      	b.n	8102030 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101f64:	693b      	ldr	r3, [r7, #16]
 8101f66:	ee07 3a90 	vmov	s15, r3
 8101f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101f6e:	eddf 6a48 	vldr	s13, [pc, #288]	; 8102090 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101f72:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101f76:	4b40      	ldr	r3, [pc, #256]	; (8102078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101f7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101f7e:	ee07 3a90 	vmov	s15, r3
 8101f82:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101f86:	ed97 6a02 	vldr	s12, [r7, #8]
 8101f8a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8102088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101f8e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101f92:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101f96:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101f9a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101f9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101fa2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101fa6:	e043      	b.n	8102030 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101fa8:	693b      	ldr	r3, [r7, #16]
 8101faa:	ee07 3a90 	vmov	s15, r3
 8101fae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101fb2:	eddf 6a38 	vldr	s13, [pc, #224]	; 8102094 <HAL_RCC_GetSysClockFreq+0x2f0>
 8101fb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101fba:	4b2f      	ldr	r3, [pc, #188]	; (8102078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8101fbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101fbe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8101fc2:	ee07 3a90 	vmov	s15, r3
 8101fc6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8101fca:	ed97 6a02 	vldr	s12, [r7, #8]
 8101fce:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8102088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8101fd2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8101fd6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8101fda:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8101fde:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8101fe2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8101fe6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8101fea:	e021      	b.n	8102030 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8101fec:	693b      	ldr	r3, [r7, #16]
 8101fee:	ee07 3a90 	vmov	s15, r3
 8101ff2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8101ff6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8102090 <HAL_RCC_GetSysClockFreq+0x2ec>
 8101ffa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8101ffe:	4b1e      	ldr	r3, [pc, #120]	; (8102078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102006:	ee07 3a90 	vmov	s15, r3
 810200a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810200e:	ed97 6a02 	vldr	s12, [r7, #8]
 8102012:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8102088 <HAL_RCC_GetSysClockFreq+0x2e4>
 8102016:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810201a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810201e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8102022:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8102026:	ee67 7a27 	vmul.f32	s15, s14, s15
 810202a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 810202e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8102030:	4b11      	ldr	r3, [pc, #68]	; (8102078 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8102032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102034:	0a5b      	lsrs	r3, r3, #9
 8102036:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810203a:	3301      	adds	r3, #1
 810203c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 810203e:	683b      	ldr	r3, [r7, #0]
 8102040:	ee07 3a90 	vmov	s15, r3
 8102044:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102048:	edd7 6a07 	vldr	s13, [r7, #28]
 810204c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102050:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102054:	ee17 3a90 	vmov	r3, s15
 8102058:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 810205a:	e005      	b.n	8102068 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 810205c:	2300      	movs	r3, #0
 810205e:	61bb      	str	r3, [r7, #24]
      break;
 8102060:	e002      	b.n	8102068 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8102062:	4b07      	ldr	r3, [pc, #28]	; (8102080 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8102064:	61bb      	str	r3, [r7, #24]
      break;
 8102066:	bf00      	nop
  }

  return sysclockfreq;
 8102068:	69bb      	ldr	r3, [r7, #24]
}
 810206a:	4618      	mov	r0, r3
 810206c:	3724      	adds	r7, #36	; 0x24
 810206e:	46bd      	mov	sp, r7
 8102070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102074:	4770      	bx	lr
 8102076:	bf00      	nop
 8102078:	58024400 	.word	0x58024400
 810207c:	03d09000 	.word	0x03d09000
 8102080:	003d0900 	.word	0x003d0900
 8102084:	007a1200 	.word	0x007a1200
 8102088:	46000000 	.word	0x46000000
 810208c:	4c742400 	.word	0x4c742400
 8102090:	4a742400 	.word	0x4a742400
 8102094:	4af42400 	.word	0x4af42400

08102098 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8102098:	b580      	push	{r7, lr}
 810209a:	b082      	sub	sp, #8
 810209c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 810209e:	f7ff fe81 	bl	8101da4 <HAL_RCC_GetSysClockFreq>
 81020a2:	4602      	mov	r2, r0
 81020a4:	4b11      	ldr	r3, [pc, #68]	; (81020ec <HAL_RCC_GetHCLKFreq+0x54>)
 81020a6:	699b      	ldr	r3, [r3, #24]
 81020a8:	0a1b      	lsrs	r3, r3, #8
 81020aa:	f003 030f 	and.w	r3, r3, #15
 81020ae:	4910      	ldr	r1, [pc, #64]	; (81020f0 <HAL_RCC_GetHCLKFreq+0x58>)
 81020b0:	5ccb      	ldrb	r3, [r1, r3]
 81020b2:	f003 031f 	and.w	r3, r3, #31
 81020b6:	fa22 f303 	lsr.w	r3, r2, r3
 81020ba:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81020bc:	4b0b      	ldr	r3, [pc, #44]	; (81020ec <HAL_RCC_GetHCLKFreq+0x54>)
 81020be:	699b      	ldr	r3, [r3, #24]
 81020c0:	f003 030f 	and.w	r3, r3, #15
 81020c4:	4a0a      	ldr	r2, [pc, #40]	; (81020f0 <HAL_RCC_GetHCLKFreq+0x58>)
 81020c6:	5cd3      	ldrb	r3, [r2, r3]
 81020c8:	f003 031f 	and.w	r3, r3, #31
 81020cc:	687a      	ldr	r2, [r7, #4]
 81020ce:	fa22 f303 	lsr.w	r3, r2, r3
 81020d2:	4a08      	ldr	r2, [pc, #32]	; (81020f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81020d4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE) >> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81020d6:	4b07      	ldr	r3, [pc, #28]	; (81020f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81020d8:	681b      	ldr	r3, [r3, #0]
 81020da:	4a07      	ldr	r2, [pc, #28]	; (81020f8 <HAL_RCC_GetHCLKFreq+0x60>)
 81020dc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 81020de:	4b05      	ldr	r3, [pc, #20]	; (81020f4 <HAL_RCC_GetHCLKFreq+0x5c>)
 81020e0:	681b      	ldr	r3, [r3, #0]
}
 81020e2:	4618      	mov	r0, r3
 81020e4:	3708      	adds	r7, #8
 81020e6:	46bd      	mov	sp, r7
 81020e8:	bd80      	pop	{r7, pc}
 81020ea:	bf00      	nop
 81020ec:	58024400 	.word	0x58024400
 81020f0:	081066a4 	.word	0x081066a4
 81020f4:	10000004 	.word	0x10000004
 81020f8:	10000000 	.word	0x10000000

081020fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 81020fc:	b580      	push	{r7, lr}
 81020fe:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8102100:	f7ff ffca 	bl	8102098 <HAL_RCC_GetHCLKFreq>
 8102104:	4602      	mov	r2, r0
 8102106:	4b06      	ldr	r3, [pc, #24]	; (8102120 <HAL_RCC_GetPCLK1Freq+0x24>)
 8102108:	69db      	ldr	r3, [r3, #28]
 810210a:	091b      	lsrs	r3, r3, #4
 810210c:	f003 0307 	and.w	r3, r3, #7
 8102110:	4904      	ldr	r1, [pc, #16]	; (8102124 <HAL_RCC_GetPCLK1Freq+0x28>)
 8102112:	5ccb      	ldrb	r3, [r1, r3]
 8102114:	f003 031f 	and.w	r3, r3, #31
 8102118:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 810211c:	4618      	mov	r0, r3
 810211e:	bd80      	pop	{r7, pc}
 8102120:	58024400 	.word	0x58024400
 8102124:	081066a4 	.word	0x081066a4

08102128 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8102128:	b580      	push	{r7, lr}
 810212a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 810212c:	f7ff ffb4 	bl	8102098 <HAL_RCC_GetHCLKFreq>
 8102130:	4602      	mov	r2, r0
 8102132:	4b06      	ldr	r3, [pc, #24]	; (810214c <HAL_RCC_GetPCLK2Freq+0x24>)
 8102134:	69db      	ldr	r3, [r3, #28]
 8102136:	0a1b      	lsrs	r3, r3, #8
 8102138:	f003 0307 	and.w	r3, r3, #7
 810213c:	4904      	ldr	r1, [pc, #16]	; (8102150 <HAL_RCC_GetPCLK2Freq+0x28>)
 810213e:	5ccb      	ldrb	r3, [r1, r3]
 8102140:	f003 031f 	and.w	r3, r3, #31
 8102144:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8102148:	4618      	mov	r0, r3
 810214a:	bd80      	pop	{r7, pc}
 810214c:	58024400 	.word	0x58024400
 8102150:	081066a4 	.word	0x081066a4

08102154 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8102154:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8102158:	b0ca      	sub	sp, #296	; 0x128
 810215a:	af00      	add	r7, sp, #0
 810215c:	f8c7 0114 	str.w	r0, [r7, #276]	; 0x114
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8102160:	2300      	movs	r3, #0
 8102162:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8102166:	2300      	movs	r3, #0
 8102168:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 810216c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102170:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102174:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8102178:	2500      	movs	r5, #0
 810217a:	ea54 0305 	orrs.w	r3, r4, r5
 810217e:	d049      	beq.n	8102214 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8102180:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102184:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102186:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 810218a:	d02f      	beq.n	81021ec <HAL_RCCEx_PeriphCLKConfig+0x98>
 810218c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8102190:	d828      	bhi.n	81021e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8102192:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102196:	d01a      	beq.n	81021ce <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8102198:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 810219c:	d822      	bhi.n	81021e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
 810219e:	2b00      	cmp	r3, #0
 81021a0:	d003      	beq.n	81021aa <HAL_RCCEx_PeriphCLKConfig+0x56>
 81021a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81021a6:	d007      	beq.n	81021b8 <HAL_RCCEx_PeriphCLKConfig+0x64>
 81021a8:	e01c      	b.n	81021e4 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81021aa:	4bb8      	ldr	r3, [pc, #736]	; (810248c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81021ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81021ae:	4ab7      	ldr	r2, [pc, #732]	; (810248c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81021b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81021b4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81021b6:	e01a      	b.n	81021ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81021b8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81021bc:	3308      	adds	r3, #8
 81021be:	2102      	movs	r1, #2
 81021c0:	4618      	mov	r0, r3
 81021c2:	f001 fc8f 	bl	8103ae4 <RCCEx_PLL2_Config>
 81021c6:	4603      	mov	r3, r0
 81021c8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81021cc:	e00f      	b.n	81021ee <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 81021ce:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81021d2:	3328      	adds	r3, #40	; 0x28
 81021d4:	2102      	movs	r1, #2
 81021d6:	4618      	mov	r0, r3
 81021d8:	f001 fd36 	bl	8103c48 <RCCEx_PLL3_Config>
 81021dc:	4603      	mov	r3, r0
 81021de:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 81021e2:	e004      	b.n	81021ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81021e4:	2301      	movs	r3, #1
 81021e6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81021ea:	e000      	b.n	81021ee <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 81021ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 81021ee:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81021f2:	2b00      	cmp	r3, #0
 81021f4:	d10a      	bne.n	810220c <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 81021f6:	4ba5      	ldr	r3, [pc, #660]	; (810248c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81021f8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81021fa:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 81021fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102202:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102204:	4aa1      	ldr	r2, [pc, #644]	; (810248c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102206:	430b      	orrs	r3, r1
 8102208:	6513      	str	r3, [r2, #80]	; 0x50
 810220a:	e003      	b.n	8102214 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810220c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102210:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8102214:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102218:	e9d3 2300 	ldrd	r2, r3, [r3]
 810221c:	f402 7880 	and.w	r8, r2, #256	; 0x100
 8102220:	f04f 0900 	mov.w	r9, #0
 8102224:	ea58 0309 	orrs.w	r3, r8, r9
 8102228:	d047      	beq.n	81022ba <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 810222a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810222e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102230:	2b04      	cmp	r3, #4
 8102232:	d82a      	bhi.n	810228a <HAL_RCCEx_PeriphCLKConfig+0x136>
 8102234:	a201      	add	r2, pc, #4	; (adr r2, 810223c <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8102236:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810223a:	bf00      	nop
 810223c:	08102251 	.word	0x08102251
 8102240:	0810225f 	.word	0x0810225f
 8102244:	08102275 	.word	0x08102275
 8102248:	08102293 	.word	0x08102293
 810224c:	08102293 	.word	0x08102293
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102250:	4b8e      	ldr	r3, [pc, #568]	; (810248c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102252:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102254:	4a8d      	ldr	r2, [pc, #564]	; (810248c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102256:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810225a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810225c:	e01a      	b.n	8102294 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810225e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102262:	3308      	adds	r3, #8
 8102264:	2100      	movs	r1, #0
 8102266:	4618      	mov	r0, r3
 8102268:	f001 fc3c 	bl	8103ae4 <RCCEx_PLL2_Config>
 810226c:	4603      	mov	r3, r0
 810226e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102272:	e00f      	b.n	8102294 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102274:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102278:	3328      	adds	r3, #40	; 0x28
 810227a:	2100      	movs	r1, #0
 810227c:	4618      	mov	r0, r3
 810227e:	f001 fce3 	bl	8103c48 <RCCEx_PLL3_Config>
 8102282:	4603      	mov	r3, r0
 8102284:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8102288:	e004      	b.n	8102294 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810228a:	2301      	movs	r3, #1
 810228c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102290:	e000      	b.n	8102294 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8102292:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102294:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102298:	2b00      	cmp	r3, #0
 810229a:	d10a      	bne.n	81022b2 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 810229c:	4b7b      	ldr	r3, [pc, #492]	; (810248c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810229e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81022a0:	f023 0107 	bic.w	r1, r3, #7
 81022a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81022a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81022aa:	4a78      	ldr	r2, [pc, #480]	; (810248c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81022ac:	430b      	orrs	r3, r1
 81022ae:	6513      	str	r3, [r2, #80]	; 0x50
 81022b0:	e003      	b.n	81022ba <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81022b2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81022b6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 81022ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81022be:	e9d3 2300 	ldrd	r2, r3, [r3]
 81022c2:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 81022c6:	f04f 0b00 	mov.w	fp, #0
 81022ca:	ea5a 030b 	orrs.w	r3, sl, fp
 81022ce:	d04c      	beq.n	810236a <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 81022d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81022d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81022d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81022da:	d030      	beq.n	810233e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 81022dc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81022e0:	d829      	bhi.n	8102336 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81022e2:	2bc0      	cmp	r3, #192	; 0xc0
 81022e4:	d02d      	beq.n	8102342 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 81022e6:	2bc0      	cmp	r3, #192	; 0xc0
 81022e8:	d825      	bhi.n	8102336 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81022ea:	2b80      	cmp	r3, #128	; 0x80
 81022ec:	d018      	beq.n	8102320 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 81022ee:	2b80      	cmp	r3, #128	; 0x80
 81022f0:	d821      	bhi.n	8102336 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 81022f2:	2b00      	cmp	r3, #0
 81022f4:	d002      	beq.n	81022fc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 81022f6:	2b40      	cmp	r3, #64	; 0x40
 81022f8:	d007      	beq.n	810230a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 81022fa:	e01c      	b.n	8102336 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81022fc:	4b63      	ldr	r3, [pc, #396]	; (810248c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81022fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102300:	4a62      	ldr	r2, [pc, #392]	; (810248c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102302:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102306:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102308:	e01c      	b.n	8102344 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810230a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810230e:	3308      	adds	r3, #8
 8102310:	2100      	movs	r1, #0
 8102312:	4618      	mov	r0, r3
 8102314:	f001 fbe6 	bl	8103ae4 <RCCEx_PLL2_Config>
 8102318:	4603      	mov	r3, r0
 810231a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 810231e:	e011      	b.n	8102344 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102320:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102324:	3328      	adds	r3, #40	; 0x28
 8102326:	2100      	movs	r1, #0
 8102328:	4618      	mov	r0, r3
 810232a:	f001 fc8d 	bl	8103c48 <RCCEx_PLL3_Config>
 810232e:	4603      	mov	r3, r0
 8102330:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8102334:	e006      	b.n	8102344 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102336:	2301      	movs	r3, #1
 8102338:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810233c:	e002      	b.n	8102344 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 810233e:	bf00      	nop
 8102340:	e000      	b.n	8102344 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 8102342:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102344:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102348:	2b00      	cmp	r3, #0
 810234a:	d10a      	bne.n	8102362 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 810234c:	4b4f      	ldr	r3, [pc, #316]	; (810248c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810234e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102350:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8102354:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 810235a:	4a4c      	ldr	r2, [pc, #304]	; (810248c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 810235c:	430b      	orrs	r3, r1
 810235e:	6513      	str	r3, [r2, #80]	; 0x50
 8102360:	e003      	b.n	810236a <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102362:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102366:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 810236a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810236e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102372:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8102376:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 810237a:	2300      	movs	r3, #0
 810237c:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8102380:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8102384:	460b      	mov	r3, r1
 8102386:	4313      	orrs	r3, r2
 8102388:	d053      	beq.n	8102432 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 810238a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810238e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102392:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102396:	d035      	beq.n	8102404 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8102398:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 810239c:	d82e      	bhi.n	81023fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 810239e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81023a2:	d031      	beq.n	8102408 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 81023a4:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 81023a8:	d828      	bhi.n	81023fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81023aa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81023ae:	d01a      	beq.n	81023e6 <HAL_RCCEx_PeriphCLKConfig+0x292>
 81023b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 81023b4:	d822      	bhi.n	81023fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 81023b6:	2b00      	cmp	r3, #0
 81023b8:	d003      	beq.n	81023c2 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 81023ba:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81023be:	d007      	beq.n	81023d0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 81023c0:	e01c      	b.n	81023fc <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81023c2:	4b32      	ldr	r3, [pc, #200]	; (810248c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81023c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81023c6:	4a31      	ldr	r2, [pc, #196]	; (810248c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 81023c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81023cc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81023ce:	e01c      	b.n	810240a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81023d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81023d4:	3308      	adds	r3, #8
 81023d6:	2100      	movs	r1, #0
 81023d8:	4618      	mov	r0, r3
 81023da:	f001 fb83 	bl	8103ae4 <RCCEx_PLL2_Config>
 81023de:	4603      	mov	r3, r0
 81023e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81023e4:	e011      	b.n	810240a <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81023e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81023ea:	3328      	adds	r3, #40	; 0x28
 81023ec:	2100      	movs	r1, #0
 81023ee:	4618      	mov	r0, r3
 81023f0:	f001 fc2a 	bl	8103c48 <RCCEx_PLL3_Config>
 81023f4:	4603      	mov	r3, r0
 81023f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81023fa:	e006      	b.n	810240a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81023fc:	2301      	movs	r3, #1
 81023fe:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102402:	e002      	b.n	810240a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102404:	bf00      	nop
 8102406:	e000      	b.n	810240a <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8102408:	bf00      	nop
    }

    if (ret == HAL_OK)
 810240a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810240e:	2b00      	cmp	r3, #0
 8102410:	d10b      	bne.n	810242a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8102412:	4b1e      	ldr	r3, [pc, #120]	; (810248c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102414:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102416:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 810241a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810241e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8102422:	4a1a      	ldr	r2, [pc, #104]	; (810248c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8102424:	430b      	orrs	r3, r1
 8102426:	6593      	str	r3, [r2, #88]	; 0x58
 8102428:	e003      	b.n	8102432 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810242a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810242e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8102432:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102436:	e9d3 2300 	ldrd	r2, r3, [r3]
 810243a:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 810243e:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 8102442:	2300      	movs	r3, #0
 8102444:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8102448:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 810244c:	460b      	mov	r3, r1
 810244e:	4313      	orrs	r3, r2
 8102450:	d056      	beq.n	8102500 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 8102452:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102456:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 810245a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 810245e:	d038      	beq.n	81024d2 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8102460:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8102464:	d831      	bhi.n	81024ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102466:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 810246a:	d034      	beq.n	81024d6 <HAL_RCCEx_PeriphCLKConfig+0x382>
 810246c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8102470:	d82b      	bhi.n	81024ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 8102472:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8102476:	d01d      	beq.n	81024b4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8102478:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 810247c:	d825      	bhi.n	81024ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 810247e:	2b00      	cmp	r3, #0
 8102480:	d006      	beq.n	8102490 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8102482:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102486:	d00a      	beq.n	810249e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8102488:	e01f      	b.n	81024ca <HAL_RCCEx_PeriphCLKConfig+0x376>
 810248a:	bf00      	nop
 810248c:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102490:	4ba2      	ldr	r3, [pc, #648]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102492:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102494:	4aa1      	ldr	r2, [pc, #644]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102496:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810249a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 810249c:	e01c      	b.n	81024d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 810249e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81024a2:	3308      	adds	r3, #8
 81024a4:	2100      	movs	r1, #0
 81024a6:	4618      	mov	r0, r3
 81024a8:	f001 fb1c 	bl	8103ae4 <RCCEx_PLL2_Config>
 81024ac:	4603      	mov	r3, r0
 81024ae:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 81024b2:	e011      	b.n	81024d8 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81024b4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81024b8:	3328      	adds	r3, #40	; 0x28
 81024ba:	2100      	movs	r1, #0
 81024bc:	4618      	mov	r0, r3
 81024be:	f001 fbc3 	bl	8103c48 <RCCEx_PLL3_Config>
 81024c2:	4603      	mov	r3, r0
 81024c4:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 81024c8:	e006      	b.n	81024d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 81024ca:	2301      	movs	r3, #1
 81024cc:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81024d0:	e002      	b.n	81024d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81024d2:	bf00      	nop
 81024d4:	e000      	b.n	81024d8 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 81024d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 81024d8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81024dc:	2b00      	cmp	r3, #0
 81024de:	d10b      	bne.n	81024f8 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 81024e0:	4b8e      	ldr	r3, [pc, #568]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81024e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81024e4:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 81024e8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81024ec:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 81024f0:	4a8a      	ldr	r2, [pc, #552]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81024f2:	430b      	orrs	r3, r1
 81024f4:	6593      	str	r3, [r2, #88]	; 0x58
 81024f6:	e003      	b.n	8102500 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81024f8:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81024fc:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8102500:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102508:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 810250c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 8102510:	2300      	movs	r3, #0
 8102512:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8102516:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 810251a:	460b      	mov	r3, r1
 810251c:	4313      	orrs	r3, r2
 810251e:	d03a      	beq.n	8102596 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 8102520:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102524:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102526:	2b30      	cmp	r3, #48	; 0x30
 8102528:	d01f      	beq.n	810256a <HAL_RCCEx_PeriphCLKConfig+0x416>
 810252a:	2b30      	cmp	r3, #48	; 0x30
 810252c:	d819      	bhi.n	8102562 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 810252e:	2b20      	cmp	r3, #32
 8102530:	d00c      	beq.n	810254c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 8102532:	2b20      	cmp	r3, #32
 8102534:	d815      	bhi.n	8102562 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8102536:	2b00      	cmp	r3, #0
 8102538:	d019      	beq.n	810256e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 810253a:	2b10      	cmp	r3, #16
 810253c:	d111      	bne.n	8102562 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810253e:	4b77      	ldr	r3, [pc, #476]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102542:	4a76      	ldr	r2, [pc, #472]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102544:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8102548:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 810254a:	e011      	b.n	8102570 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810254c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102550:	3308      	adds	r3, #8
 8102552:	2102      	movs	r1, #2
 8102554:	4618      	mov	r0, r3
 8102556:	f001 fac5 	bl	8103ae4 <RCCEx_PLL2_Config>
 810255a:	4603      	mov	r3, r0
 810255c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8102560:	e006      	b.n	8102570 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8102562:	2301      	movs	r3, #1
 8102564:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102568:	e002      	b.n	8102570 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810256a:	bf00      	nop
 810256c:	e000      	b.n	8102570 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 810256e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102570:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102574:	2b00      	cmp	r3, #0
 8102576:	d10a      	bne.n	810258e <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8102578:	4b68      	ldr	r3, [pc, #416]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810257a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810257c:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 8102580:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8102586:	4a65      	ldr	r2, [pc, #404]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102588:	430b      	orrs	r3, r1
 810258a:	64d3      	str	r3, [r2, #76]	; 0x4c
 810258c:	e003      	b.n	8102596 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810258e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102592:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8102596:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810259a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810259e:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 81025a2:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 81025a6:	2300      	movs	r3, #0
 81025a8:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 81025ac:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 81025b0:	460b      	mov	r3, r1
 81025b2:	4313      	orrs	r3, r2
 81025b4:	d051      	beq.n	810265a <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 81025b6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81025ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81025bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81025c0:	d035      	beq.n	810262e <HAL_RCCEx_PeriphCLKConfig+0x4da>
 81025c2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81025c6:	d82e      	bhi.n	8102626 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81025c8:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81025cc:	d031      	beq.n	8102632 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 81025ce:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 81025d2:	d828      	bhi.n	8102626 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81025d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81025d8:	d01a      	beq.n	8102610 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 81025da:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81025de:	d822      	bhi.n	8102626 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 81025e0:	2b00      	cmp	r3, #0
 81025e2:	d003      	beq.n	81025ec <HAL_RCCEx_PeriphCLKConfig+0x498>
 81025e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81025e8:	d007      	beq.n	81025fa <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 81025ea:	e01c      	b.n	8102626 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81025ec:	4b4b      	ldr	r3, [pc, #300]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81025ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81025f0:	4a4a      	ldr	r2, [pc, #296]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 81025f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81025f6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 81025f8:	e01c      	b.n	8102634 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81025fa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81025fe:	3308      	adds	r3, #8
 8102600:	2100      	movs	r1, #0
 8102602:	4618      	mov	r0, r3
 8102604:	f001 fa6e 	bl	8103ae4 <RCCEx_PLL2_Config>
 8102608:	4603      	mov	r3, r0
 810260a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 810260e:	e011      	b.n	8102634 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8102610:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102614:	3328      	adds	r3, #40	; 0x28
 8102616:	2100      	movs	r1, #0
 8102618:	4618      	mov	r0, r3
 810261a:	f001 fb15 	bl	8103c48 <RCCEx_PLL3_Config>
 810261e:	4603      	mov	r3, r0
 8102620:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8102624:	e006      	b.n	8102634 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102626:	2301      	movs	r3, #1
 8102628:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810262c:	e002      	b.n	8102634 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 810262e:	bf00      	nop
 8102630:	e000      	b.n	8102634 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8102632:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102634:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102638:	2b00      	cmp	r3, #0
 810263a:	d10a      	bne.n	8102652 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 810263c:	4b37      	ldr	r3, [pc, #220]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810263e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102640:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8102644:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102648:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 810264a:	4a34      	ldr	r2, [pc, #208]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 810264c:	430b      	orrs	r3, r1
 810264e:	6513      	str	r3, [r2, #80]	; 0x50
 8102650:	e003      	b.n	810265a <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102652:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102656:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 810265a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810265e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102662:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8102666:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 810266a:	2300      	movs	r3, #0
 810266c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8102670:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 8102674:	460b      	mov	r3, r1
 8102676:	4313      	orrs	r3, r2
 8102678:	d056      	beq.n	8102728 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 810267a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810267e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102680:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8102684:	d033      	beq.n	81026ee <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8102686:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 810268a:	d82c      	bhi.n	81026e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 810268c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102690:	d02f      	beq.n	81026f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8102692:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102696:	d826      	bhi.n	81026e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8102698:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 810269c:	d02b      	beq.n	81026f6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 810269e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81026a2:	d820      	bhi.n	81026e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81026a4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81026a8:	d012      	beq.n	81026d0 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 81026aa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81026ae:	d81a      	bhi.n	81026e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
 81026b0:	2b00      	cmp	r3, #0
 81026b2:	d022      	beq.n	81026fa <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 81026b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81026b8:	d115      	bne.n	81026e6 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 81026ba:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81026be:	3308      	adds	r3, #8
 81026c0:	2101      	movs	r1, #1
 81026c2:	4618      	mov	r0, r3
 81026c4:	f001 fa0e 	bl	8103ae4 <RCCEx_PLL2_Config>
 81026c8:	4603      	mov	r3, r0
 81026ca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81026ce:	e015      	b.n	81026fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81026d0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81026d4:	3328      	adds	r3, #40	; 0x28
 81026d6:	2101      	movs	r1, #1
 81026d8:	4618      	mov	r0, r3
 81026da:	f001 fab5 	bl	8103c48 <RCCEx_PLL3_Config>
 81026de:	4603      	mov	r3, r0
 81026e0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 81026e4:	e00a      	b.n	81026fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 81026e6:	2301      	movs	r3, #1
 81026e8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81026ec:	e006      	b.n	81026fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81026ee:	bf00      	nop
 81026f0:	e004      	b.n	81026fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81026f2:	bf00      	nop
 81026f4:	e002      	b.n	81026fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81026f6:	bf00      	nop
 81026f8:	e000      	b.n	81026fc <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 81026fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81026fc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102700:	2b00      	cmp	r3, #0
 8102702:	d10d      	bne.n	8102720 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8102704:	4b05      	ldr	r3, [pc, #20]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102706:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8102708:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 810270c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102710:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8102712:	4a02      	ldr	r2, [pc, #8]	; (810271c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8102714:	430b      	orrs	r3, r1
 8102716:	6513      	str	r3, [r2, #80]	; 0x50
 8102718:	e006      	b.n	8102728 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 810271a:	bf00      	nop
 810271c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102720:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102724:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8102728:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810272c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102730:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8102734:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8102738:	2300      	movs	r3, #0
 810273a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 810273e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 8102742:	460b      	mov	r3, r1
 8102744:	4313      	orrs	r3, r2
 8102746:	d055      	beq.n	81027f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8102748:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810274c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8102750:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102754:	d033      	beq.n	81027be <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8102756:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810275a:	d82c      	bhi.n	81027b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 810275c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102760:	d02f      	beq.n	81027c2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8102762:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102766:	d826      	bhi.n	81027b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102768:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810276c:	d02b      	beq.n	81027c6 <HAL_RCCEx_PeriphCLKConfig+0x672>
 810276e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102772:	d820      	bhi.n	81027b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102774:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102778:	d012      	beq.n	81027a0 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 810277a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810277e:	d81a      	bhi.n	81027b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8102780:	2b00      	cmp	r3, #0
 8102782:	d022      	beq.n	81027ca <HAL_RCCEx_PeriphCLKConfig+0x676>
 8102784:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102788:	d115      	bne.n	81027b6 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810278a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810278e:	3308      	adds	r3, #8
 8102790:	2101      	movs	r1, #1
 8102792:	4618      	mov	r0, r3
 8102794:	f001 f9a6 	bl	8103ae4 <RCCEx_PLL2_Config>
 8102798:	4603      	mov	r3, r0
 810279a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 810279e:	e015      	b.n	81027cc <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81027a0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81027a4:	3328      	adds	r3, #40	; 0x28
 81027a6:	2101      	movs	r1, #1
 81027a8:	4618      	mov	r0, r3
 81027aa:	f001 fa4d 	bl	8103c48 <RCCEx_PLL3_Config>
 81027ae:	4603      	mov	r3, r0
 81027b0:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 81027b4:	e00a      	b.n	81027cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 81027b6:	2301      	movs	r3, #1
 81027b8:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81027bc:	e006      	b.n	81027cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81027be:	bf00      	nop
 81027c0:	e004      	b.n	81027cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81027c2:	bf00      	nop
 81027c4:	e002      	b.n	81027cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81027c6:	bf00      	nop
 81027c8:	e000      	b.n	81027cc <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 81027ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 81027cc:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81027d0:	2b00      	cmp	r3, #0
 81027d2:	d10b      	bne.n	81027ec <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81027d4:	4ba4      	ldr	r3, [pc, #656]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81027d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81027d8:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 81027dc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81027e0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81027e4:	4aa0      	ldr	r2, [pc, #640]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81027e6:	430b      	orrs	r3, r1
 81027e8:	6593      	str	r3, [r2, #88]	; 0x58
 81027ea:	e003      	b.n	81027f4 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81027ec:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81027f0:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 81027f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81027f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 81027fc:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8102800:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8102804:	2300      	movs	r3, #0
 8102806:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 810280a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 810280e:	460b      	mov	r3, r1
 8102810:	4313      	orrs	r3, r2
 8102812:	d037      	beq.n	8102884 <HAL_RCCEx_PeriphCLKConfig+0x730>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8102814:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810281a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810281e:	d00e      	beq.n	810283e <HAL_RCCEx_PeriphCLKConfig+0x6ea>
 8102820:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102824:	d816      	bhi.n	8102854 <HAL_RCCEx_PeriphCLKConfig+0x700>
 8102826:	2b00      	cmp	r3, #0
 8102828:	d018      	beq.n	810285c <HAL_RCCEx_PeriphCLKConfig+0x708>
 810282a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810282e:	d111      	bne.n	8102854 <HAL_RCCEx_PeriphCLKConfig+0x700>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8102830:	4b8d      	ldr	r3, [pc, #564]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102832:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102834:	4a8c      	ldr	r2, [pc, #560]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102836:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810283a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 810283c:	e00f      	b.n	810285e <HAL_RCCEx_PeriphCLKConfig+0x70a>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 810283e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102842:	3308      	adds	r3, #8
 8102844:	2101      	movs	r1, #1
 8102846:	4618      	mov	r0, r3
 8102848:	f001 f94c 	bl	8103ae4 <RCCEx_PLL2_Config>
 810284c:	4603      	mov	r3, r0
 810284e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8102852:	e004      	b.n	810285e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102854:	2301      	movs	r3, #1
 8102856:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 810285a:	e000      	b.n	810285e <HAL_RCCEx_PeriphCLKConfig+0x70a>
        break;
 810285c:	bf00      	nop
    }

    if (ret == HAL_OK)
 810285e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102862:	2b00      	cmp	r3, #0
 8102864:	d10a      	bne.n	810287c <HAL_RCCEx_PeriphCLKConfig+0x728>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8102866:	4b80      	ldr	r3, [pc, #512]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102868:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810286a:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 810286e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102874:	4a7c      	ldr	r2, [pc, #496]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102876:	430b      	orrs	r3, r1
 8102878:	6513      	str	r3, [r2, #80]	; 0x50
 810287a:	e003      	b.n	8102884 <HAL_RCCEx_PeriphCLKConfig+0x730>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810287c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102880:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8102884:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102888:	e9d3 2300 	ldrd	r2, r3, [r3]
 810288c:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8102890:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8102894:	2300      	movs	r3, #0
 8102896:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 810289a:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 810289e:	460b      	mov	r3, r1
 81028a0:	4313      	orrs	r3, r2
 81028a2:	d039      	beq.n	8102918 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
  {
    switch (PeriphClkInit->FmcClockSelection)
 81028a4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81028a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 81028aa:	2b03      	cmp	r3, #3
 81028ac:	d81c      	bhi.n	81028e8 <HAL_RCCEx_PeriphCLKConfig+0x794>
 81028ae:	a201      	add	r2, pc, #4	; (adr r2, 81028b4 <HAL_RCCEx_PeriphCLKConfig+0x760>)
 81028b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81028b4:	081028f1 	.word	0x081028f1
 81028b8:	081028c5 	.word	0x081028c5
 81028bc:	081028d3 	.word	0x081028d3
 81028c0:	081028f1 	.word	0x081028f1
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81028c4:	4b68      	ldr	r3, [pc, #416]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81028c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81028c8:	4a67      	ldr	r2, [pc, #412]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81028ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81028ce:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 81028d0:	e00f      	b.n	81028f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 81028d2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81028d6:	3308      	adds	r3, #8
 81028d8:	2102      	movs	r1, #2
 81028da:	4618      	mov	r0, r3
 81028dc:	f001 f902 	bl	8103ae4 <RCCEx_PLL2_Config>
 81028e0:	4603      	mov	r3, r0
 81028e2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* FMC clock source configuration done later after clock selection check */
        break;
 81028e6:	e004      	b.n	81028f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 81028e8:	2301      	movs	r3, #1
 81028ea:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81028ee:	e000      	b.n	81028f2 <HAL_RCCEx_PeriphCLKConfig+0x79e>
        break;
 81028f0:	bf00      	nop
    }

    if (ret == HAL_OK)
 81028f2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81028f6:	2b00      	cmp	r3, #0
 81028f8:	d10a      	bne.n	8102910 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81028fa:	4b5b      	ldr	r3, [pc, #364]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81028fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81028fe:	f023 0103 	bic.w	r1, r3, #3
 8102902:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102906:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8102908:	4a57      	ldr	r2, [pc, #348]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810290a:	430b      	orrs	r3, r1
 810290c:	64d3      	str	r3, [r2, #76]	; 0x4c
 810290e:	e003      	b.n	8102918 <HAL_RCCEx_PeriphCLKConfig+0x7c4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102910:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102914:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8102918:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810291c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102920:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 8102924:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8102928:	2300      	movs	r3, #0
 810292a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 810292e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 8102932:	460b      	mov	r3, r1
 8102934:	4313      	orrs	r3, r2
 8102936:	f000 809f 	beq.w	8102a78 <HAL_RCCEx_PeriphCLKConfig+0x924>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 810293a:	4b4c      	ldr	r3, [pc, #304]	; (8102a6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810293c:	681b      	ldr	r3, [r3, #0]
 810293e:	4a4b      	ldr	r2, [pc, #300]	; (8102a6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 8102940:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8102944:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8102946:	f7fe f94f 	bl	8100be8 <HAL_GetTick>
 810294a:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 810294e:	e00b      	b.n	8102968 <HAL_RCCEx_PeriphCLKConfig+0x814>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8102950:	f7fe f94a 	bl	8100be8 <HAL_GetTick>
 8102954:	4602      	mov	r2, r0
 8102956:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 810295a:	1ad3      	subs	r3, r2, r3
 810295c:	2b64      	cmp	r3, #100	; 0x64
 810295e:	d903      	bls.n	8102968 <HAL_RCCEx_PeriphCLKConfig+0x814>
      {
        ret = HAL_TIMEOUT;
 8102960:	2303      	movs	r3, #3
 8102962:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102966:	e005      	b.n	8102974 <HAL_RCCEx_PeriphCLKConfig+0x820>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8102968:	4b40      	ldr	r3, [pc, #256]	; (8102a6c <HAL_RCCEx_PeriphCLKConfig+0x918>)
 810296a:	681b      	ldr	r3, [r3, #0]
 810296c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102970:	2b00      	cmp	r3, #0
 8102972:	d0ed      	beq.n	8102950 <HAL_RCCEx_PeriphCLKConfig+0x7fc>
      }
    }

    if (ret == HAL_OK)
 8102974:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102978:	2b00      	cmp	r3, #0
 810297a:	d179      	bne.n	8102a70 <HAL_RCCEx_PeriphCLKConfig+0x91c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810297c:	4b3a      	ldr	r3, [pc, #232]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 810297e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8102980:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102984:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8102988:	4053      	eors	r3, r2
 810298a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810298e:	2b00      	cmp	r3, #0
 8102990:	d015      	beq.n	81029be <HAL_RCCEx_PeriphCLKConfig+0x86a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8102992:	4b35      	ldr	r3, [pc, #212]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102994:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8102996:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 810299a:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 810299e:	4b32      	ldr	r3, [pc, #200]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81029a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81029a2:	4a31      	ldr	r2, [pc, #196]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81029a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 81029a8:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 81029aa:	4b2f      	ldr	r3, [pc, #188]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81029ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81029ae:	4a2e      	ldr	r2, [pc, #184]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81029b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 81029b4:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 81029b6:	4a2c      	ldr	r2, [pc, #176]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81029b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 81029bc:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 81029be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81029c2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 81029c6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81029ca:	d118      	bne.n	81029fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 81029cc:	f7fe f90c 	bl	8100be8 <HAL_GetTick>
 81029d0:	f8c7 0120 	str.w	r0, [r7, #288]	; 0x120

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81029d4:	e00d      	b.n	81029f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 81029d6:	f7fe f907 	bl	8100be8 <HAL_GetTick>
 81029da:	4602      	mov	r2, r0
 81029dc:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 81029e0:	1ad2      	subs	r2, r2, r3
 81029e2:	f241 3388 	movw	r3, #5000	; 0x1388
 81029e6:	429a      	cmp	r2, r3
 81029e8:	d903      	bls.n	81029f2 <HAL_RCCEx_PeriphCLKConfig+0x89e>
          {
            ret = HAL_TIMEOUT;
 81029ea:	2303      	movs	r3, #3
 81029ec:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
            break;
 81029f0:	e005      	b.n	81029fe <HAL_RCCEx_PeriphCLKConfig+0x8aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81029f2:	4b1d      	ldr	r3, [pc, #116]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 81029f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81029f6:	f003 0302 	and.w	r3, r3, #2
 81029fa:	2b00      	cmp	r3, #0
 81029fc:	d0eb      	beq.n	81029d6 <HAL_RCCEx_PeriphCLKConfig+0x882>
          }
        }
      }

      if (ret == HAL_OK)
 81029fe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102a02:	2b00      	cmp	r3, #0
 8102a04:	d12b      	bne.n	8102a5e <HAL_RCCEx_PeriphCLKConfig+0x90a>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8102a06:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102a0a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8102a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8102a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8102a16:	d110      	bne.n	8102a3a <HAL_RCCEx_PeriphCLKConfig+0x8e6>
 8102a18:	4b13      	ldr	r3, [pc, #76]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102a1a:	691b      	ldr	r3, [r3, #16]
 8102a1c:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8102a20:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102a24:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8102a28:	091b      	lsrs	r3, r3, #4
 8102a2a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8102a2e:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8102a32:	4a0d      	ldr	r2, [pc, #52]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102a34:	430b      	orrs	r3, r1
 8102a36:	6113      	str	r3, [r2, #16]
 8102a38:	e005      	b.n	8102a46 <HAL_RCCEx_PeriphCLKConfig+0x8f2>
 8102a3a:	4b0b      	ldr	r3, [pc, #44]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102a3c:	691b      	ldr	r3, [r3, #16]
 8102a3e:	4a0a      	ldr	r2, [pc, #40]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102a40:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8102a44:	6113      	str	r3, [r2, #16]
 8102a46:	4b08      	ldr	r3, [pc, #32]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102a48:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8102a4a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102a4e:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8102a52:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8102a56:	4a04      	ldr	r2, [pc, #16]	; (8102a68 <HAL_RCCEx_PeriphCLKConfig+0x914>)
 8102a58:	430b      	orrs	r3, r1
 8102a5a:	6713      	str	r3, [r2, #112]	; 0x70
 8102a5c:	e00c      	b.n	8102a78 <HAL_RCCEx_PeriphCLKConfig+0x924>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8102a5e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102a62:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
 8102a66:	e007      	b.n	8102a78 <HAL_RCCEx_PeriphCLKConfig+0x924>
 8102a68:	58024400 	.word	0x58024400
 8102a6c:	58024800 	.word	0x58024800
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102a70:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102a74:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8102a78:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102a80:	f002 0301 	and.w	r3, r2, #1
 8102a84:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8102a88:	2300      	movs	r3, #0
 8102a8a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8102a8e:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8102a92:	460b      	mov	r3, r1
 8102a94:	4313      	orrs	r3, r2
 8102a96:	f000 8089 	beq.w	8102bac <HAL_RCCEx_PeriphCLKConfig+0xa58>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8102a9a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102a9e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102aa0:	2b28      	cmp	r3, #40	; 0x28
 8102aa2:	d86b      	bhi.n	8102b7c <HAL_RCCEx_PeriphCLKConfig+0xa28>
 8102aa4:	a201      	add	r2, pc, #4	; (adr r2, 8102aac <HAL_RCCEx_PeriphCLKConfig+0x958>)
 8102aa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102aaa:	bf00      	nop
 8102aac:	08102b85 	.word	0x08102b85
 8102ab0:	08102b7d 	.word	0x08102b7d
 8102ab4:	08102b7d 	.word	0x08102b7d
 8102ab8:	08102b7d 	.word	0x08102b7d
 8102abc:	08102b7d 	.word	0x08102b7d
 8102ac0:	08102b7d 	.word	0x08102b7d
 8102ac4:	08102b7d 	.word	0x08102b7d
 8102ac8:	08102b7d 	.word	0x08102b7d
 8102acc:	08102b51 	.word	0x08102b51
 8102ad0:	08102b7d 	.word	0x08102b7d
 8102ad4:	08102b7d 	.word	0x08102b7d
 8102ad8:	08102b7d 	.word	0x08102b7d
 8102adc:	08102b7d 	.word	0x08102b7d
 8102ae0:	08102b7d 	.word	0x08102b7d
 8102ae4:	08102b7d 	.word	0x08102b7d
 8102ae8:	08102b7d 	.word	0x08102b7d
 8102aec:	08102b67 	.word	0x08102b67
 8102af0:	08102b7d 	.word	0x08102b7d
 8102af4:	08102b7d 	.word	0x08102b7d
 8102af8:	08102b7d 	.word	0x08102b7d
 8102afc:	08102b7d 	.word	0x08102b7d
 8102b00:	08102b7d 	.word	0x08102b7d
 8102b04:	08102b7d 	.word	0x08102b7d
 8102b08:	08102b7d 	.word	0x08102b7d
 8102b0c:	08102b85 	.word	0x08102b85
 8102b10:	08102b7d 	.word	0x08102b7d
 8102b14:	08102b7d 	.word	0x08102b7d
 8102b18:	08102b7d 	.word	0x08102b7d
 8102b1c:	08102b7d 	.word	0x08102b7d
 8102b20:	08102b7d 	.word	0x08102b7d
 8102b24:	08102b7d 	.word	0x08102b7d
 8102b28:	08102b7d 	.word	0x08102b7d
 8102b2c:	08102b85 	.word	0x08102b85
 8102b30:	08102b7d 	.word	0x08102b7d
 8102b34:	08102b7d 	.word	0x08102b7d
 8102b38:	08102b7d 	.word	0x08102b7d
 8102b3c:	08102b7d 	.word	0x08102b7d
 8102b40:	08102b7d 	.word	0x08102b7d
 8102b44:	08102b7d 	.word	0x08102b7d
 8102b48:	08102b7d 	.word	0x08102b7d
 8102b4c:	08102b85 	.word	0x08102b85
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102b50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102b54:	3308      	adds	r3, #8
 8102b56:	2101      	movs	r1, #1
 8102b58:	4618      	mov	r0, r3
 8102b5a:	f000 ffc3 	bl	8103ae4 <RCCEx_PLL2_Config>
 8102b5e:	4603      	mov	r3, r0
 8102b60:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102b64:	e00f      	b.n	8102b86 <HAL_RCCEx_PeriphCLKConfig+0xa32>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102b66:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102b6a:	3328      	adds	r3, #40	; 0x28
 8102b6c:	2101      	movs	r1, #1
 8102b6e:	4618      	mov	r0, r3
 8102b70:	f001 f86a 	bl	8103c48 <RCCEx_PLL3_Config>
 8102b74:	4603      	mov	r3, r0
 8102b76:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8102b7a:	e004      	b.n	8102b86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102b7c:	2301      	movs	r3, #1
 8102b7e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102b82:	e000      	b.n	8102b86 <HAL_RCCEx_PeriphCLKConfig+0xa32>
        break;
 8102b84:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102b86:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102b8a:	2b00      	cmp	r3, #0
 8102b8c:	d10a      	bne.n	8102ba4 <HAL_RCCEx_PeriphCLKConfig+0xa50>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8102b8e:	4bbf      	ldr	r3, [pc, #764]	; (8102e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102b92:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8102b96:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102b9a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8102b9c:	4abb      	ldr	r2, [pc, #748]	; (8102e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102b9e:	430b      	orrs	r3, r1
 8102ba0:	6553      	str	r3, [r2, #84]	; 0x54
 8102ba2:	e003      	b.n	8102bac <HAL_RCCEx_PeriphCLKConfig+0xa58>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102ba4:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102ba8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8102bac:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102bb4:	f002 0302 	and.w	r3, r2, #2
 8102bb8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8102bbc:	2300      	movs	r3, #0
 8102bbe:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8102bc2:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8102bc6:	460b      	mov	r3, r1
 8102bc8:	4313      	orrs	r3, r2
 8102bca:	d041      	beq.n	8102c50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8102bcc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102bd0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8102bd2:	2b05      	cmp	r3, #5
 8102bd4:	d824      	bhi.n	8102c20 <HAL_RCCEx_PeriphCLKConfig+0xacc>
 8102bd6:	a201      	add	r2, pc, #4	; (adr r2, 8102bdc <HAL_RCCEx_PeriphCLKConfig+0xa88>)
 8102bd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102bdc:	08102c29 	.word	0x08102c29
 8102be0:	08102bf5 	.word	0x08102bf5
 8102be4:	08102c0b 	.word	0x08102c0b
 8102be8:	08102c29 	.word	0x08102c29
 8102bec:	08102c29 	.word	0x08102c29
 8102bf0:	08102c29 	.word	0x08102c29
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102bf4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102bf8:	3308      	adds	r3, #8
 8102bfa:	2101      	movs	r1, #1
 8102bfc:	4618      	mov	r0, r3
 8102bfe:	f000 ff71 	bl	8103ae4 <RCCEx_PLL2_Config>
 8102c02:	4603      	mov	r3, r0
 8102c04:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102c08:	e00f      	b.n	8102c2a <HAL_RCCEx_PeriphCLKConfig+0xad6>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102c0a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102c0e:	3328      	adds	r3, #40	; 0x28
 8102c10:	2101      	movs	r1, #1
 8102c12:	4618      	mov	r0, r3
 8102c14:	f001 f818 	bl	8103c48 <RCCEx_PLL3_Config>
 8102c18:	4603      	mov	r3, r0
 8102c1a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8102c1e:	e004      	b.n	8102c2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102c20:	2301      	movs	r3, #1
 8102c22:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102c26:	e000      	b.n	8102c2a <HAL_RCCEx_PeriphCLKConfig+0xad6>
        break;
 8102c28:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102c2a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102c2e:	2b00      	cmp	r3, #0
 8102c30:	d10a      	bne.n	8102c48 <HAL_RCCEx_PeriphCLKConfig+0xaf4>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8102c32:	4b96      	ldr	r3, [pc, #600]	; (8102e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102c34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102c36:	f023 0107 	bic.w	r1, r3, #7
 8102c3a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102c3e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8102c40:	4a92      	ldr	r2, [pc, #584]	; (8102e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102c42:	430b      	orrs	r3, r1
 8102c44:	6553      	str	r3, [r2, #84]	; 0x54
 8102c46:	e003      	b.n	8102c50 <HAL_RCCEx_PeriphCLKConfig+0xafc>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102c48:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102c4c:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8102c50:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102c54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102c58:	f002 0304 	and.w	r3, r2, #4
 8102c5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8102c60:	2300      	movs	r3, #0
 8102c62:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8102c66:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8102c6a:	460b      	mov	r3, r1
 8102c6c:	4313      	orrs	r3, r2
 8102c6e:	d044      	beq.n	8102cfa <HAL_RCCEx_PeriphCLKConfig+0xba6>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8102c70:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102c74:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102c78:	2b05      	cmp	r3, #5
 8102c7a:	d825      	bhi.n	8102cc8 <HAL_RCCEx_PeriphCLKConfig+0xb74>
 8102c7c:	a201      	add	r2, pc, #4	; (adr r2, 8102c84 <HAL_RCCEx_PeriphCLKConfig+0xb30>)
 8102c7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102c82:	bf00      	nop
 8102c84:	08102cd1 	.word	0x08102cd1
 8102c88:	08102c9d 	.word	0x08102c9d
 8102c8c:	08102cb3 	.word	0x08102cb3
 8102c90:	08102cd1 	.word	0x08102cd1
 8102c94:	08102cd1 	.word	0x08102cd1
 8102c98:	08102cd1 	.word	0x08102cd1
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8102c9c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102ca0:	3308      	adds	r3, #8
 8102ca2:	2101      	movs	r1, #1
 8102ca4:	4618      	mov	r0, r3
 8102ca6:	f000 ff1d 	bl	8103ae4 <RCCEx_PLL2_Config>
 8102caa:	4603      	mov	r3, r0
 8102cac:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102cb0:	e00f      	b.n	8102cd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8102cb2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102cb6:	3328      	adds	r3, #40	; 0x28
 8102cb8:	2101      	movs	r1, #1
 8102cba:	4618      	mov	r0, r3
 8102cbc:	f000 ffc4 	bl	8103c48 <RCCEx_PLL3_Config>
 8102cc0:	4603      	mov	r3, r0
 8102cc2:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8102cc6:	e004      	b.n	8102cd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102cc8:	2301      	movs	r3, #1
 8102cca:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102cce:	e000      	b.n	8102cd2 <HAL_RCCEx_PeriphCLKConfig+0xb7e>
        break;
 8102cd0:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102cd2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102cd6:	2b00      	cmp	r3, #0
 8102cd8:	d10b      	bne.n	8102cf2 <HAL_RCCEx_PeriphCLKConfig+0xb9e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8102cda:	4b6c      	ldr	r3, [pc, #432]	; (8102e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102cdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102cde:	f023 0107 	bic.w	r1, r3, #7
 8102ce2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8102cea:	4a68      	ldr	r2, [pc, #416]	; (8102e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102cec:	430b      	orrs	r3, r1
 8102cee:	6593      	str	r3, [r2, #88]	; 0x58
 8102cf0:	e003      	b.n	8102cfa <HAL_RCCEx_PeriphCLKConfig+0xba6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102cf2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102cf6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8102cfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102d02:	f002 0320 	and.w	r3, r2, #32
 8102d06:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8102d0a:	2300      	movs	r3, #0
 8102d0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8102d10:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8102d14:	460b      	mov	r3, r1
 8102d16:	4313      	orrs	r3, r2
 8102d18:	d055      	beq.n	8102dc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8102d1a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102d22:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102d26:	d033      	beq.n	8102d90 <HAL_RCCEx_PeriphCLKConfig+0xc3c>
 8102d28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8102d2c:	d82c      	bhi.n	8102d88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102d2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102d32:	d02f      	beq.n	8102d94 <HAL_RCCEx_PeriphCLKConfig+0xc40>
 8102d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8102d38:	d826      	bhi.n	8102d88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102d3a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102d3e:	d02b      	beq.n	8102d98 <HAL_RCCEx_PeriphCLKConfig+0xc44>
 8102d40:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8102d44:	d820      	bhi.n	8102d88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102d46:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102d4a:	d012      	beq.n	8102d72 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
 8102d4c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8102d50:	d81a      	bhi.n	8102d88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
 8102d52:	2b00      	cmp	r3, #0
 8102d54:	d022      	beq.n	8102d9c <HAL_RCCEx_PeriphCLKConfig+0xc48>
 8102d56:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102d5a:	d115      	bne.n	8102d88 <HAL_RCCEx_PeriphCLKConfig+0xc34>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102d5c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102d60:	3308      	adds	r3, #8
 8102d62:	2100      	movs	r1, #0
 8102d64:	4618      	mov	r0, r3
 8102d66:	f000 febd 	bl	8103ae4 <RCCEx_PLL2_Config>
 8102d6a:	4603      	mov	r3, r0
 8102d6c:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102d70:	e015      	b.n	8102d9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102d72:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102d76:	3328      	adds	r3, #40	; 0x28
 8102d78:	2102      	movs	r1, #2
 8102d7a:	4618      	mov	r0, r3
 8102d7c:	f000 ff64 	bl	8103c48 <RCCEx_PLL3_Config>
 8102d80:	4603      	mov	r3, r0
 8102d82:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8102d86:	e00a      	b.n	8102d9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102d88:	2301      	movs	r3, #1
 8102d8a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102d8e:	e006      	b.n	8102d9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102d90:	bf00      	nop
 8102d92:	e004      	b.n	8102d9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102d94:	bf00      	nop
 8102d96:	e002      	b.n	8102d9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102d98:	bf00      	nop
 8102d9a:	e000      	b.n	8102d9e <HAL_RCCEx_PeriphCLKConfig+0xc4a>
        break;
 8102d9c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102d9e:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102da2:	2b00      	cmp	r3, #0
 8102da4:	d10b      	bne.n	8102dbe <HAL_RCCEx_PeriphCLKConfig+0xc6a>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8102da6:	4b39      	ldr	r3, [pc, #228]	; (8102e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102daa:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8102dae:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102db2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8102db6:	4a35      	ldr	r2, [pc, #212]	; (8102e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102db8:	430b      	orrs	r3, r1
 8102dba:	6553      	str	r3, [r2, #84]	; 0x54
 8102dbc:	e003      	b.n	8102dc6 <HAL_RCCEx_PeriphCLKConfig+0xc72>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102dbe:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102dc2:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8102dc6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102dce:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8102dd2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8102dd6:	2300      	movs	r3, #0
 8102dd8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8102ddc:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8102de0:	460b      	mov	r3, r1
 8102de2:	4313      	orrs	r3, r2
 8102de4:	d058      	beq.n	8102e98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8102de6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102dea:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102dee:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102df2:	d033      	beq.n	8102e5c <HAL_RCCEx_PeriphCLKConfig+0xd08>
 8102df4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8102df8:	d82c      	bhi.n	8102e54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102dfa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102dfe:	d02f      	beq.n	8102e60 <HAL_RCCEx_PeriphCLKConfig+0xd0c>
 8102e00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102e04:	d826      	bhi.n	8102e54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102e06:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102e0a:	d02b      	beq.n	8102e64 <HAL_RCCEx_PeriphCLKConfig+0xd10>
 8102e0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8102e10:	d820      	bhi.n	8102e54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102e12:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102e16:	d012      	beq.n	8102e3e <HAL_RCCEx_PeriphCLKConfig+0xcea>
 8102e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8102e1c:	d81a      	bhi.n	8102e54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
 8102e1e:	2b00      	cmp	r3, #0
 8102e20:	d022      	beq.n	8102e68 <HAL_RCCEx_PeriphCLKConfig+0xd14>
 8102e22:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8102e26:	d115      	bne.n	8102e54 <HAL_RCCEx_PeriphCLKConfig+0xd00>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102e28:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102e2c:	3308      	adds	r3, #8
 8102e2e:	2100      	movs	r1, #0
 8102e30:	4618      	mov	r0, r3
 8102e32:	f000 fe57 	bl	8103ae4 <RCCEx_PLL2_Config>
 8102e36:	4603      	mov	r3, r0
 8102e38:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102e3c:	e015      	b.n	8102e6a <HAL_RCCEx_PeriphCLKConfig+0xd16>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102e3e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102e42:	3328      	adds	r3, #40	; 0x28
 8102e44:	2102      	movs	r1, #2
 8102e46:	4618      	mov	r0, r3
 8102e48:	f000 fefe 	bl	8103c48 <RCCEx_PLL3_Config>
 8102e4c:	4603      	mov	r3, r0
 8102e4e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8102e52:	e00a      	b.n	8102e6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102e54:	2301      	movs	r3, #1
 8102e56:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102e5a:	e006      	b.n	8102e6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102e5c:	bf00      	nop
 8102e5e:	e004      	b.n	8102e6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102e60:	bf00      	nop
 8102e62:	e002      	b.n	8102e6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102e64:	bf00      	nop
 8102e66:	e000      	b.n	8102e6a <HAL_RCCEx_PeriphCLKConfig+0xd16>
        break;
 8102e68:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102e6a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102e6e:	2b00      	cmp	r3, #0
 8102e70:	d10e      	bne.n	8102e90 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8102e72:	4b06      	ldr	r3, [pc, #24]	; (8102e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102e76:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8102e7a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102e7e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8102e82:	4a02      	ldr	r2, [pc, #8]	; (8102e8c <HAL_RCCEx_PeriphCLKConfig+0xd38>)
 8102e84:	430b      	orrs	r3, r1
 8102e86:	6593      	str	r3, [r2, #88]	; 0x58
 8102e88:	e006      	b.n	8102e98 <HAL_RCCEx_PeriphCLKConfig+0xd44>
 8102e8a:	bf00      	nop
 8102e8c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102e90:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102e94:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8102e98:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102ea0:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8102ea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8102ea8:	2300      	movs	r3, #0
 8102eaa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8102eae:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8102eb2:	460b      	mov	r3, r1
 8102eb4:	4313      	orrs	r3, r2
 8102eb6:	d055      	beq.n	8102f64 <HAL_RCCEx_PeriphCLKConfig+0xe10>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8102eb8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102ebc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102ec0:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102ec4:	d033      	beq.n	8102f2e <HAL_RCCEx_PeriphCLKConfig+0xdda>
 8102ec6:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8102eca:	d82c      	bhi.n	8102f26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102ecc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102ed0:	d02f      	beq.n	8102f32 <HAL_RCCEx_PeriphCLKConfig+0xdde>
 8102ed2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102ed6:	d826      	bhi.n	8102f26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102ed8:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102edc:	d02b      	beq.n	8102f36 <HAL_RCCEx_PeriphCLKConfig+0xde2>
 8102ede:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8102ee2:	d820      	bhi.n	8102f26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102ee4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102ee8:	d012      	beq.n	8102f10 <HAL_RCCEx_PeriphCLKConfig+0xdbc>
 8102eea:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8102eee:	d81a      	bhi.n	8102f26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
 8102ef0:	2b00      	cmp	r3, #0
 8102ef2:	d022      	beq.n	8102f3a <HAL_RCCEx_PeriphCLKConfig+0xde6>
 8102ef4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8102ef8:	d115      	bne.n	8102f26 <HAL_RCCEx_PeriphCLKConfig+0xdd2>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8102efa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102efe:	3308      	adds	r3, #8
 8102f00:	2100      	movs	r1, #0
 8102f02:	4618      	mov	r0, r3
 8102f04:	f000 fdee 	bl	8103ae4 <RCCEx_PLL2_Config>
 8102f08:	4603      	mov	r3, r0
 8102f0a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102f0e:	e015      	b.n	8102f3c <HAL_RCCEx_PeriphCLKConfig+0xde8>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8102f10:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102f14:	3328      	adds	r3, #40	; 0x28
 8102f16:	2102      	movs	r1, #2
 8102f18:	4618      	mov	r0, r3
 8102f1a:	f000 fe95 	bl	8103c48 <RCCEx_PLL3_Config>
 8102f1e:	4603      	mov	r3, r0
 8102f20:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8102f24:	e00a      	b.n	8102f3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8102f26:	2301      	movs	r3, #1
 8102f28:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8102f2c:	e006      	b.n	8102f3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102f2e:	bf00      	nop
 8102f30:	e004      	b.n	8102f3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102f32:	bf00      	nop
 8102f34:	e002      	b.n	8102f3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102f36:	bf00      	nop
 8102f38:	e000      	b.n	8102f3c <HAL_RCCEx_PeriphCLKConfig+0xde8>
        break;
 8102f3a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8102f3c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102f40:	2b00      	cmp	r3, #0
 8102f42:	d10b      	bne.n	8102f5c <HAL_RCCEx_PeriphCLKConfig+0xe08>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8102f44:	4ba1      	ldr	r3, [pc, #644]	; (81031cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102f46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102f48:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8102f4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102f50:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8102f54:	4a9d      	ldr	r2, [pc, #628]	; (81031cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102f56:	430b      	orrs	r3, r1
 8102f58:	6593      	str	r3, [r2, #88]	; 0x58
 8102f5a:	e003      	b.n	8102f64 <HAL_RCCEx_PeriphCLKConfig+0xe10>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8102f5c:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8102f60:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8102f64:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102f68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102f6c:	f002 0308 	and.w	r3, r2, #8
 8102f70:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8102f74:	2300      	movs	r3, #0
 8102f76:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8102f7a:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8102f7e:	460b      	mov	r3, r1
 8102f80:	4313      	orrs	r3, r2
 8102f82:	d01e      	beq.n	8102fc2 <HAL_RCCEx_PeriphCLKConfig+0xe6e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8102f84:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102f88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8102f90:	d10c      	bne.n	8102fac <HAL_RCCEx_PeriphCLKConfig+0xe58>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102f92:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102f96:	3328      	adds	r3, #40	; 0x28
 8102f98:	2102      	movs	r1, #2
 8102f9a:	4618      	mov	r0, r3
 8102f9c:	f000 fe54 	bl	8103c48 <RCCEx_PLL3_Config>
 8102fa0:	4603      	mov	r3, r0
 8102fa2:	2b00      	cmp	r3, #0
 8102fa4:	d002      	beq.n	8102fac <HAL_RCCEx_PeriphCLKConfig+0xe58>
      {
        status = HAL_ERROR;
 8102fa6:	2301      	movs	r3, #1
 8102fa8:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8102fac:	4b87      	ldr	r3, [pc, #540]	; (81031cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102fae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102fb0:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8102fb4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102fb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8102fbc:	4a83      	ldr	r2, [pc, #524]	; (81031cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8102fbe:	430b      	orrs	r3, r1
 8102fc0:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8102fc2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102fc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8102fca:	f002 0310 	and.w	r3, r2, #16
 8102fce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8102fd2:	2300      	movs	r3, #0
 8102fd4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8102fd8:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8102fdc:	460b      	mov	r3, r1
 8102fde:	4313      	orrs	r3, r2
 8102fe0:	d01e      	beq.n	8103020 <HAL_RCCEx_PeriphCLKConfig+0xecc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8102fe2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102fe6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8102fea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102fee:	d10c      	bne.n	810300a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8102ff0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8102ff4:	3328      	adds	r3, #40	; 0x28
 8102ff6:	2102      	movs	r1, #2
 8102ff8:	4618      	mov	r0, r3
 8102ffa:	f000 fe25 	bl	8103c48 <RCCEx_PLL3_Config>
 8102ffe:	4603      	mov	r3, r0
 8103000:	2b00      	cmp	r3, #0
 8103002:	d002      	beq.n	810300a <HAL_RCCEx_PeriphCLKConfig+0xeb6>
      {
        status = HAL_ERROR;
 8103004:	2301      	movs	r3, #1
 8103006:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810300a:	4b70      	ldr	r3, [pc, #448]	; (81031cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810300c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810300e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8103012:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103016:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810301a:	4a6c      	ldr	r2, [pc, #432]	; (81031cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 810301c:	430b      	orrs	r3, r1
 810301e:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8103020:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103028:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 810302c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8103030:	2300      	movs	r3, #0
 8103032:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8103036:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 810303a:	460b      	mov	r3, r1
 810303c:	4313      	orrs	r3, r2
 810303e:	d03e      	beq.n	81030be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8103040:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103044:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103048:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810304c:	d022      	beq.n	8103094 <HAL_RCCEx_PeriphCLKConfig+0xf40>
 810304e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8103052:	d81b      	bhi.n	810308c <HAL_RCCEx_PeriphCLKConfig+0xf38>
 8103054:	2b00      	cmp	r3, #0
 8103056:	d003      	beq.n	8103060 <HAL_RCCEx_PeriphCLKConfig+0xf0c>
 8103058:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810305c:	d00b      	beq.n	8103076 <HAL_RCCEx_PeriphCLKConfig+0xf22>
 810305e:	e015      	b.n	810308c <HAL_RCCEx_PeriphCLKConfig+0xf38>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8103060:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103064:	3308      	adds	r3, #8
 8103066:	2100      	movs	r1, #0
 8103068:	4618      	mov	r0, r3
 810306a:	f000 fd3b 	bl	8103ae4 <RCCEx_PLL2_Config>
 810306e:	4603      	mov	r3, r0
 8103070:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 8103074:	e00f      	b.n	8103096 <HAL_RCCEx_PeriphCLKConfig+0xf42>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103076:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810307a:	3328      	adds	r3, #40	; 0x28
 810307c:	2102      	movs	r1, #2
 810307e:	4618      	mov	r0, r3
 8103080:	f000 fde2 	bl	8103c48 <RCCEx_PLL3_Config>
 8103084:	4603      	mov	r3, r0
 8103086:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* ADC clock source configuration done later after clock selection check */
        break;
 810308a:	e004      	b.n	8103096 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 810308c:	2301      	movs	r3, #1
 810308e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103092:	e000      	b.n	8103096 <HAL_RCCEx_PeriphCLKConfig+0xf42>
        break;
 8103094:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103096:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810309a:	2b00      	cmp	r3, #0
 810309c:	d10b      	bne.n	81030b6 <HAL_RCCEx_PeriphCLKConfig+0xf62>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 810309e:	4b4b      	ldr	r3, [pc, #300]	; (81031cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81030a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81030a2:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 81030a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81030aa:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 81030ae:	4a47      	ldr	r2, [pc, #284]	; (81031cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81030b0:	430b      	orrs	r3, r1
 81030b2:	6593      	str	r3, [r2, #88]	; 0x58
 81030b4:	e003      	b.n	81030be <HAL_RCCEx_PeriphCLKConfig+0xf6a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81030b6:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81030ba:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 81030be:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81030c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 81030c6:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 81030ca:	67bb      	str	r3, [r7, #120]	; 0x78
 81030cc:	2300      	movs	r3, #0
 81030ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 81030d0:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 81030d4:	460b      	mov	r3, r1
 81030d6:	4313      	orrs	r3, r2
 81030d8:	d03b      	beq.n	8103152 <HAL_RCCEx_PeriphCLKConfig+0xffe>
  {

    switch (PeriphClkInit->UsbClockSelection)
 81030da:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81030de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81030e2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81030e6:	d01f      	beq.n	8103128 <HAL_RCCEx_PeriphCLKConfig+0xfd4>
 81030e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 81030ec:	d818      	bhi.n	8103120 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
 81030ee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81030f2:	d003      	beq.n	81030fc <HAL_RCCEx_PeriphCLKConfig+0xfa8>
 81030f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81030f8:	d007      	beq.n	810310a <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 81030fa:	e011      	b.n	8103120 <HAL_RCCEx_PeriphCLKConfig+0xfcc>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81030fc:	4b33      	ldr	r3, [pc, #204]	; (81031cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81030fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103100:	4a32      	ldr	r2, [pc, #200]	; (81031cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103102:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103106:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8103108:	e00f      	b.n	810312a <HAL_RCCEx_PeriphCLKConfig+0xfd6>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 810310a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810310e:	3328      	adds	r3, #40	; 0x28
 8103110:	2101      	movs	r1, #1
 8103112:	4618      	mov	r0, r3
 8103114:	f000 fd98 	bl	8103c48 <RCCEx_PLL3_Config>
 8103118:	4603      	mov	r3, r0
 810311a:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* USB clock source configuration done later after clock selection check */
        break;
 810311e:	e004      	b.n	810312a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103120:	2301      	movs	r3, #1
 8103122:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103126:	e000      	b.n	810312a <HAL_RCCEx_PeriphCLKConfig+0xfd6>
        break;
 8103128:	bf00      	nop
    }

    if (ret == HAL_OK)
 810312a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810312e:	2b00      	cmp	r3, #0
 8103130:	d10b      	bne.n	810314a <HAL_RCCEx_PeriphCLKConfig+0xff6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8103132:	4b26      	ldr	r3, [pc, #152]	; (81031cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103134:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103136:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 810313a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810313e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103142:	4a22      	ldr	r2, [pc, #136]	; (81031cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103144:	430b      	orrs	r3, r1
 8103146:	6553      	str	r3, [r2, #84]	; 0x54
 8103148:	e003      	b.n	8103152 <HAL_RCCEx_PeriphCLKConfig+0xffe>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810314a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810314e:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8103152:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103156:	e9d3 2300 	ldrd	r2, r3, [r3]
 810315a:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 810315e:	673b      	str	r3, [r7, #112]	; 0x70
 8103160:	2300      	movs	r3, #0
 8103162:	677b      	str	r3, [r7, #116]	; 0x74
 8103164:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 8103168:	460b      	mov	r3, r1
 810316a:	4313      	orrs	r3, r2
 810316c:	d034      	beq.n	81031d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 810316e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103174:	2b00      	cmp	r3, #0
 8103176:	d003      	beq.n	8103180 <HAL_RCCEx_PeriphCLKConfig+0x102c>
 8103178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810317c:	d007      	beq.n	810318e <HAL_RCCEx_PeriphCLKConfig+0x103a>
 810317e:	e011      	b.n	81031a4 <HAL_RCCEx_PeriphCLKConfig+0x1050>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103180:	4b12      	ldr	r3, [pc, #72]	; (81031cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103182:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103184:	4a11      	ldr	r2, [pc, #68]	; (81031cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 8103186:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810318a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 810318c:	e00e      	b.n	81031ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 810318e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103192:	3308      	adds	r3, #8
 8103194:	2102      	movs	r1, #2
 8103196:	4618      	mov	r0, r3
 8103198:	f000 fca4 	bl	8103ae4 <RCCEx_PLL2_Config>
 810319c:	4603      	mov	r3, r0
 810319e:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 81031a2:	e003      	b.n	81031ac <HAL_RCCEx_PeriphCLKConfig+0x1058>

      default:
        ret = HAL_ERROR;
 81031a4:	2301      	movs	r3, #1
 81031a6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 81031aa:	bf00      	nop
    }

    if (ret == HAL_OK)
 81031ac:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81031b0:	2b00      	cmp	r3, #0
 81031b2:	d10d      	bne.n	81031d0 <HAL_RCCEx_PeriphCLKConfig+0x107c>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81031b4:	4b05      	ldr	r3, [pc, #20]	; (81031cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81031b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81031b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81031bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81031c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81031c2:	4a02      	ldr	r2, [pc, #8]	; (81031cc <HAL_RCCEx_PeriphCLKConfig+0x1078>)
 81031c4:	430b      	orrs	r3, r1
 81031c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 81031c8:	e006      	b.n	81031d8 <HAL_RCCEx_PeriphCLKConfig+0x1084>
 81031ca:	bf00      	nop
 81031cc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 81031d0:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81031d4:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81031d8:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 81031e0:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 81031e4:	66bb      	str	r3, [r7, #104]	; 0x68
 81031e6:	2300      	movs	r3, #0
 81031e8:	66fb      	str	r3, [r7, #108]	; 0x6c
 81031ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 81031ee:	460b      	mov	r3, r1
 81031f0:	4313      	orrs	r3, r2
 81031f2:	d00c      	beq.n	810320e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 81031f4:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81031f8:	3328      	adds	r3, #40	; 0x28
 81031fa:	2102      	movs	r1, #2
 81031fc:	4618      	mov	r0, r3
 81031fe:	f000 fd23 	bl	8103c48 <RCCEx_PLL3_Config>
 8103202:	4603      	mov	r3, r0
 8103204:	2b00      	cmp	r3, #0
 8103206:	d002      	beq.n	810320e <HAL_RCCEx_PeriphCLKConfig+0x10ba>
    {
      status = HAL_ERROR;
 8103208:	2301      	movs	r3, #1
 810320a:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 810320e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103216:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 810321a:	663b      	str	r3, [r7, #96]	; 0x60
 810321c:	2300      	movs	r3, #0
 810321e:	667b      	str	r3, [r7, #100]	; 0x64
 8103220:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 8103224:	460b      	mov	r3, r1
 8103226:	4313      	orrs	r3, r2
 8103228:	d038      	beq.n	810329c <HAL_RCCEx_PeriphCLKConfig+0x1148>
  {

    switch (PeriphClkInit->RngClockSelection)
 810322a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810322e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8103232:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8103236:	d018      	beq.n	810326a <HAL_RCCEx_PeriphCLKConfig+0x1116>
 8103238:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 810323c:	d811      	bhi.n	8103262 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810323e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103242:	d014      	beq.n	810326e <HAL_RCCEx_PeriphCLKConfig+0x111a>
 8103244:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8103248:	d80b      	bhi.n	8103262 <HAL_RCCEx_PeriphCLKConfig+0x110e>
 810324a:	2b00      	cmp	r3, #0
 810324c:	d011      	beq.n	8103272 <HAL_RCCEx_PeriphCLKConfig+0x111e>
 810324e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103252:	d106      	bne.n	8103262 <HAL_RCCEx_PeriphCLKConfig+0x110e>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103254:	4bc3      	ldr	r3, [pc, #780]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103258:	4ac2      	ldr	r2, [pc, #776]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810325a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810325e:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8103260:	e008      	b.n	8103274 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8103262:	2301      	movs	r3, #1
 8103264:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
        break;
 8103268:	e004      	b.n	8103274 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810326a:	bf00      	nop
 810326c:	e002      	b.n	8103274 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 810326e:	bf00      	nop
 8103270:	e000      	b.n	8103274 <HAL_RCCEx_PeriphCLKConfig+0x1120>
        break;
 8103272:	bf00      	nop
    }

    if (ret == HAL_OK)
 8103274:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103278:	2b00      	cmp	r3, #0
 810327a:	d10b      	bne.n	8103294 <HAL_RCCEx_PeriphCLKConfig+0x1140>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 810327c:	4bb9      	ldr	r3, [pc, #740]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810327e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103280:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8103284:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103288:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810328c:	4ab5      	ldr	r2, [pc, #724]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810328e:	430b      	orrs	r3, r1
 8103290:	6553      	str	r3, [r2, #84]	; 0x54
 8103292:	e003      	b.n	810329c <HAL_RCCEx_PeriphCLKConfig+0x1148>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103294:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103298:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 810329c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81032a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81032a4:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 81032a8:	65bb      	str	r3, [r7, #88]	; 0x58
 81032aa:	2300      	movs	r3, #0
 81032ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 81032ae:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 81032b2:	460b      	mov	r3, r1
 81032b4:	4313      	orrs	r3, r2
 81032b6:	d009      	beq.n	81032cc <HAL_RCCEx_PeriphCLKConfig+0x1178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 81032b8:	4baa      	ldr	r3, [pc, #680]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81032ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81032bc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 81032c0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81032c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81032c6:	4aa7      	ldr	r2, [pc, #668]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81032c8:	430b      	orrs	r3, r1
 81032ca:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 81032cc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81032d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 81032d4:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 81032d8:	653b      	str	r3, [r7, #80]	; 0x50
 81032da:	2300      	movs	r3, #0
 81032dc:	657b      	str	r3, [r7, #84]	; 0x54
 81032de:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 81032e2:	460b      	mov	r3, r1
 81032e4:	4313      	orrs	r3, r2
 81032e6:	d00a      	beq.n	81032fe <HAL_RCCEx_PeriphCLKConfig+0x11aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 81032e8:	4b9e      	ldr	r3, [pc, #632]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81032ea:	691b      	ldr	r3, [r3, #16]
 81032ec:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 81032f0:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81032f4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 81032f8:	4a9a      	ldr	r2, [pc, #616]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81032fa:	430b      	orrs	r3, r1
 81032fc:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 81032fe:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103306:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 810330a:	64bb      	str	r3, [r7, #72]	; 0x48
 810330c:	2300      	movs	r3, #0
 810330e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8103310:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 8103314:	460b      	mov	r3, r1
 8103316:	4313      	orrs	r3, r2
 8103318:	d009      	beq.n	810332e <HAL_RCCEx_PeriphCLKConfig+0x11da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 810331a:	4b92      	ldr	r3, [pc, #584]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810331c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810331e:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 8103322:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103326:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8103328:	4a8e      	ldr	r2, [pc, #568]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810332a:	430b      	orrs	r3, r1
 810332c:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 810332e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103332:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103336:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 810333a:	643b      	str	r3, [r7, #64]	; 0x40
 810333c:	2300      	movs	r3, #0
 810333e:	647b      	str	r3, [r7, #68]	; 0x44
 8103340:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 8103344:	460b      	mov	r3, r1
 8103346:	4313      	orrs	r3, r2
 8103348:	d00e      	beq.n	8103368 <HAL_RCCEx_PeriphCLKConfig+0x1214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 810334a:	4b86      	ldr	r3, [pc, #536]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 810334c:	691b      	ldr	r3, [r3, #16]
 810334e:	4a85      	ldr	r2, [pc, #532]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103350:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8103354:	6113      	str	r3, [r2, #16]
 8103356:	4b83      	ldr	r3, [pc, #524]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103358:	6919      	ldr	r1, [r3, #16]
 810335a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810335e:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8103362:	4a80      	ldr	r2, [pc, #512]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103364:	430b      	orrs	r3, r1
 8103366:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8103368:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810336c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103370:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8103374:	63bb      	str	r3, [r7, #56]	; 0x38
 8103376:	2300      	movs	r3, #0
 8103378:	63fb      	str	r3, [r7, #60]	; 0x3c
 810337a:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 810337e:	460b      	mov	r3, r1
 8103380:	4313      	orrs	r3, r2
 8103382:	d009      	beq.n	8103398 <HAL_RCCEx_PeriphCLKConfig+0x1244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8103384:	4b77      	ldr	r3, [pc, #476]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8103388:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 810338c:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8103390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103392:	4a74      	ldr	r2, [pc, #464]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 8103394:	430b      	orrs	r3, r1
 8103396:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8103398:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810339c:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033a0:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 81033a4:	633b      	str	r3, [r7, #48]	; 0x30
 81033a6:	2300      	movs	r3, #0
 81033a8:	637b      	str	r3, [r7, #52]	; 0x34
 81033aa:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 81033ae:	460b      	mov	r3, r1
 81033b0:	4313      	orrs	r3, r2
 81033b2:	d00a      	beq.n	81033ca <HAL_RCCEx_PeriphCLKConfig+0x1276>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 81033b4:	4b6b      	ldr	r3, [pc, #428]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81033b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81033b8:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 81033bc:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81033c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81033c4:	4a67      	ldr	r2, [pc, #412]	; (8103564 <HAL_RCCEx_PeriphCLKConfig+0x1410>)
 81033c6:	430b      	orrs	r3, r1
 81033c8:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 81033ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81033ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033d2:	2100      	movs	r1, #0
 81033d4:	62b9      	str	r1, [r7, #40]	; 0x28
 81033d6:	f003 0301 	and.w	r3, r3, #1
 81033da:	62fb      	str	r3, [r7, #44]	; 0x2c
 81033dc:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 81033e0:	460b      	mov	r3, r1
 81033e2:	4313      	orrs	r3, r2
 81033e4:	d011      	beq.n	810340a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 81033e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81033ea:	3308      	adds	r3, #8
 81033ec:	2100      	movs	r1, #0
 81033ee:	4618      	mov	r0, r3
 81033f0:	f000 fb78 	bl	8103ae4 <RCCEx_PLL2_Config>
 81033f4:	4603      	mov	r3, r0
 81033f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 81033fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81033fe:	2b00      	cmp	r3, #0
 8103400:	d003      	beq.n	810340a <HAL_RCCEx_PeriphCLKConfig+0x12b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103402:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103406:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 810340a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810340e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103412:	2100      	movs	r1, #0
 8103414:	6239      	str	r1, [r7, #32]
 8103416:	f003 0302 	and.w	r3, r3, #2
 810341a:	627b      	str	r3, [r7, #36]	; 0x24
 810341c:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8103420:	460b      	mov	r3, r1
 8103422:	4313      	orrs	r3, r2
 8103424:	d011      	beq.n	810344a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8103426:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810342a:	3308      	adds	r3, #8
 810342c:	2101      	movs	r1, #1
 810342e:	4618      	mov	r0, r3
 8103430:	f000 fb58 	bl	8103ae4 <RCCEx_PLL2_Config>
 8103434:	4603      	mov	r3, r0
 8103436:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 810343a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810343e:	2b00      	cmp	r3, #0
 8103440:	d003      	beq.n	810344a <HAL_RCCEx_PeriphCLKConfig+0x12f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103442:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103446:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 810344a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810344e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103452:	2100      	movs	r1, #0
 8103454:	61b9      	str	r1, [r7, #24]
 8103456:	f003 0304 	and.w	r3, r3, #4
 810345a:	61fb      	str	r3, [r7, #28]
 810345c:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8103460:	460b      	mov	r3, r1
 8103462:	4313      	orrs	r3, r2
 8103464:	d011      	beq.n	810348a <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8103466:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810346a:	3308      	adds	r3, #8
 810346c:	2102      	movs	r1, #2
 810346e:	4618      	mov	r0, r3
 8103470:	f000 fb38 	bl	8103ae4 <RCCEx_PLL2_Config>
 8103474:	4603      	mov	r3, r0
 8103476:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 810347a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810347e:	2b00      	cmp	r3, #0
 8103480:	d003      	beq.n	810348a <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103482:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103486:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 810348a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810348e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103492:	2100      	movs	r1, #0
 8103494:	6139      	str	r1, [r7, #16]
 8103496:	f003 0308 	and.w	r3, r3, #8
 810349a:	617b      	str	r3, [r7, #20]
 810349c:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 81034a0:	460b      	mov	r3, r1
 81034a2:	4313      	orrs	r3, r2
 81034a4:	d011      	beq.n	81034ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 81034a6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81034aa:	3328      	adds	r3, #40	; 0x28
 81034ac:	2100      	movs	r1, #0
 81034ae:	4618      	mov	r0, r3
 81034b0:	f000 fbca 	bl	8103c48 <RCCEx_PLL3_Config>
 81034b4:	4603      	mov	r3, r0
 81034b6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
  
    if (ret == HAL_OK)
 81034ba:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81034be:	2b00      	cmp	r3, #0
 81034c0:	d003      	beq.n	81034ca <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 81034c2:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81034c6:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 81034ca:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81034ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 81034d2:	2100      	movs	r1, #0
 81034d4:	60b9      	str	r1, [r7, #8]
 81034d6:	f003 0310 	and.w	r3, r3, #16
 81034da:	60fb      	str	r3, [r7, #12]
 81034dc:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 81034e0:	460b      	mov	r3, r1
 81034e2:	4313      	orrs	r3, r2
 81034e4:	d011      	beq.n	810350a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 81034e6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 81034ea:	3328      	adds	r3, #40	; 0x28
 81034ec:	2101      	movs	r1, #1
 81034ee:	4618      	mov	r0, r3
 81034f0:	f000 fbaa 	bl	8103c48 <RCCEx_PLL3_Config>
 81034f4:	4603      	mov	r3, r0
 81034f6:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 81034fa:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 81034fe:	2b00      	cmp	r3, #0
 8103500:	d003      	beq.n	810350a <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103502:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103506:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 810350a:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810350e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103512:	2100      	movs	r1, #0
 8103514:	6039      	str	r1, [r7, #0]
 8103516:	f003 0320 	and.w	r3, r3, #32
 810351a:	607b      	str	r3, [r7, #4]
 810351c:	e9d7 1200 	ldrd	r1, r2, [r7]
 8103520:	460b      	mov	r3, r1
 8103522:	4313      	orrs	r3, r2
 8103524:	d011      	beq.n	810354a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8103526:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 810352a:	3328      	adds	r3, #40	; 0x28
 810352c:	2102      	movs	r1, #2
 810352e:	4618      	mov	r0, r3
 8103530:	f000 fb8a 	bl	8103c48 <RCCEx_PLL3_Config>
 8103534:	4603      	mov	r3, r0
 8103536:	f887 3127 	strb.w	r3, [r7, #295]	; 0x127
    
    if (ret == HAL_OK)
 810353a:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 810353e:	2b00      	cmp	r3, #0
 8103540:	d003      	beq.n	810354a <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103542:	f897 3127 	ldrb.w	r3, [r7, #295]	; 0x127
 8103546:	f887 3126 	strb.w	r3, [r7, #294]	; 0x126
    } 
  }

  if (status == HAL_OK)
 810354a:	f897 3126 	ldrb.w	r3, [r7, #294]	; 0x126
 810354e:	2b00      	cmp	r3, #0
 8103550:	d101      	bne.n	8103556 <HAL_RCCEx_PeriphCLKConfig+0x1402>
  {
    return HAL_OK;
 8103552:	2300      	movs	r3, #0
 8103554:	e000      	b.n	8103558 <HAL_RCCEx_PeriphCLKConfig+0x1404>
  }
  return HAL_ERROR;
 8103556:	2301      	movs	r3, #1
}
 8103558:	4618      	mov	r0, r3
 810355a:	f507 7794 	add.w	r7, r7, #296	; 0x128
 810355e:	46bd      	mov	sp, r7
 8103560:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8103564:	58024400 	.word	0x58024400

08103568 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8103568:	b580      	push	{r7, lr}
 810356a:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 810356c:	f7fe fd94 	bl	8102098 <HAL_RCC_GetHCLKFreq>
 8103570:	4602      	mov	r2, r0
 8103572:	4b06      	ldr	r3, [pc, #24]	; (810358c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8103574:	6a1b      	ldr	r3, [r3, #32]
 8103576:	091b      	lsrs	r3, r3, #4
 8103578:	f003 0307 	and.w	r3, r3, #7
 810357c:	4904      	ldr	r1, [pc, #16]	; (8103590 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 810357e:	5ccb      	ldrb	r3, [r1, r3]
 8103580:	f003 031f 	and.w	r3, r3, #31
 8103584:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8103588:	4618      	mov	r0, r3
 810358a:	bd80      	pop	{r7, pc}
 810358c:	58024400 	.word	0x58024400
 8103590:	081066a4 	.word	0x081066a4

08103594 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8103594:	b480      	push	{r7}
 8103596:	b089      	sub	sp, #36	; 0x24
 8103598:	af00      	add	r7, sp, #0
 810359a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810359c:	4ba1      	ldr	r3, [pc, #644]	; (8103824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810359e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81035a0:	f003 0303 	and.w	r3, r3, #3
 81035a4:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 81035a6:	4b9f      	ldr	r3, [pc, #636]	; (8103824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81035a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81035aa:	0b1b      	lsrs	r3, r3, #12
 81035ac:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81035b0:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 81035b2:	4b9c      	ldr	r3, [pc, #624]	; (8103824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81035b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81035b6:	091b      	lsrs	r3, r3, #4
 81035b8:	f003 0301 	and.w	r3, r3, #1
 81035bc:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 81035be:	4b99      	ldr	r3, [pc, #612]	; (8103824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81035c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81035c2:	08db      	lsrs	r3, r3, #3
 81035c4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81035c8:	693a      	ldr	r2, [r7, #16]
 81035ca:	fb02 f303 	mul.w	r3, r2, r3
 81035ce:	ee07 3a90 	vmov	s15, r3
 81035d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81035d6:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 81035da:	697b      	ldr	r3, [r7, #20]
 81035dc:	2b00      	cmp	r3, #0
 81035de:	f000 8111 	beq.w	8103804 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 81035e2:	69bb      	ldr	r3, [r7, #24]
 81035e4:	2b02      	cmp	r3, #2
 81035e6:	f000 8083 	beq.w	81036f0 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 81035ea:	69bb      	ldr	r3, [r7, #24]
 81035ec:	2b02      	cmp	r3, #2
 81035ee:	f200 80a1 	bhi.w	8103734 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 81035f2:	69bb      	ldr	r3, [r7, #24]
 81035f4:	2b00      	cmp	r3, #0
 81035f6:	d003      	beq.n	8103600 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 81035f8:	69bb      	ldr	r3, [r7, #24]
 81035fa:	2b01      	cmp	r3, #1
 81035fc:	d056      	beq.n	81036ac <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 81035fe:	e099      	b.n	8103734 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103600:	4b88      	ldr	r3, [pc, #544]	; (8103824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103602:	681b      	ldr	r3, [r3, #0]
 8103604:	f003 0320 	and.w	r3, r3, #32
 8103608:	2b00      	cmp	r3, #0
 810360a:	d02d      	beq.n	8103668 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 810360c:	4b85      	ldr	r3, [pc, #532]	; (8103824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810360e:	681b      	ldr	r3, [r3, #0]
 8103610:	08db      	lsrs	r3, r3, #3
 8103612:	f003 0303 	and.w	r3, r3, #3
 8103616:	4a84      	ldr	r2, [pc, #528]	; (8103828 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8103618:	fa22 f303 	lsr.w	r3, r2, r3
 810361c:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 810361e:	68bb      	ldr	r3, [r7, #8]
 8103620:	ee07 3a90 	vmov	s15, r3
 8103624:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103628:	697b      	ldr	r3, [r7, #20]
 810362a:	ee07 3a90 	vmov	s15, r3
 810362e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103632:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103636:	4b7b      	ldr	r3, [pc, #492]	; (8103824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810363a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810363e:	ee07 3a90 	vmov	s15, r3
 8103642:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103646:	ed97 6a03 	vldr	s12, [r7, #12]
 810364a:	eddf 5a78 	vldr	s11, [pc, #480]	; 810382c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810364e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103652:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103656:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810365a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810365e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103662:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8103666:	e087      	b.n	8103778 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103668:	697b      	ldr	r3, [r7, #20]
 810366a:	ee07 3a90 	vmov	s15, r3
 810366e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103672:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8103830 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8103676:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810367a:	4b6a      	ldr	r3, [pc, #424]	; (8103824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810367c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810367e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103682:	ee07 3a90 	vmov	s15, r3
 8103686:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810368a:	ed97 6a03 	vldr	s12, [r7, #12]
 810368e:	eddf 5a67 	vldr	s11, [pc, #412]	; 810382c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8103692:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103696:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810369a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810369e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81036a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81036a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81036aa:	e065      	b.n	8103778 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81036ac:	697b      	ldr	r3, [r7, #20]
 81036ae:	ee07 3a90 	vmov	s15, r3
 81036b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81036b6:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8103834 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81036ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81036be:	4b59      	ldr	r3, [pc, #356]	; (8103824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81036c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81036c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81036c6:	ee07 3a90 	vmov	s15, r3
 81036ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81036ce:	ed97 6a03 	vldr	s12, [r7, #12]
 81036d2:	eddf 5a56 	vldr	s11, [pc, #344]	; 810382c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81036d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81036da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81036de:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81036e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81036e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 81036ea:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81036ee:	e043      	b.n	8103778 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 81036f0:	697b      	ldr	r3, [r7, #20]
 81036f2:	ee07 3a90 	vmov	s15, r3
 81036f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81036fa:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8103838 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 81036fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103702:	4b48      	ldr	r3, [pc, #288]	; (8103824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8103706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810370a:	ee07 3a90 	vmov	s15, r3
 810370e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103712:	ed97 6a03 	vldr	s12, [r7, #12]
 8103716:	eddf 5a45 	vldr	s11, [pc, #276]	; 810382c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810371a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810371e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103722:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103726:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810372a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810372e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103732:	e021      	b.n	8103778 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8103734:	697b      	ldr	r3, [r7, #20]
 8103736:	ee07 3a90 	vmov	s15, r3
 810373a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810373e:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8103834 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8103742:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103746:	4b37      	ldr	r3, [pc, #220]	; (8103824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8103748:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810374a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810374e:	ee07 3a90 	vmov	s15, r3
 8103752:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103756:	ed97 6a03 	vldr	s12, [r7, #12]
 810375a:	eddf 5a34 	vldr	s11, [pc, #208]	; 810382c <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810375e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103762:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103766:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810376a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810376e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103772:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103776:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8103778:	4b2a      	ldr	r3, [pc, #168]	; (8103824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810377a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810377c:	0a5b      	lsrs	r3, r3, #9
 810377e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103782:	ee07 3a90 	vmov	s15, r3
 8103786:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810378a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810378e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103792:	edd7 6a07 	vldr	s13, [r7, #28]
 8103796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810379a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810379e:	ee17 2a90 	vmov	r2, s15
 81037a2:	687b      	ldr	r3, [r7, #4]
 81037a4:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 81037a6:	4b1f      	ldr	r3, [pc, #124]	; (8103824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81037a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81037aa:	0c1b      	lsrs	r3, r3, #16
 81037ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81037b0:	ee07 3a90 	vmov	s15, r3
 81037b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037b8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81037bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 81037c0:	edd7 6a07 	vldr	s13, [r7, #28]
 81037c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81037c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81037cc:	ee17 2a90 	vmov	r2, s15
 81037d0:	687b      	ldr	r3, [r7, #4]
 81037d2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 81037d4:	4b13      	ldr	r3, [pc, #76]	; (8103824 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81037d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81037d8:	0e1b      	lsrs	r3, r3, #24
 81037da:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81037de:	ee07 3a90 	vmov	s15, r3
 81037e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81037e6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81037ea:	ee37 7a87 	vadd.f32	s14, s15, s14
 81037ee:	edd7 6a07 	vldr	s13, [r7, #28]
 81037f2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81037f6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81037fa:	ee17 2a90 	vmov	r2, s15
 81037fe:	687b      	ldr	r3, [r7, #4]
 8103800:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8103802:	e008      	b.n	8103816 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8103804:	687b      	ldr	r3, [r7, #4]
 8103806:	2200      	movs	r2, #0
 8103808:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810380a:	687b      	ldr	r3, [r7, #4]
 810380c:	2200      	movs	r2, #0
 810380e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8103810:	687b      	ldr	r3, [r7, #4]
 8103812:	2200      	movs	r2, #0
 8103814:	609a      	str	r2, [r3, #8]
}
 8103816:	bf00      	nop
 8103818:	3724      	adds	r7, #36	; 0x24
 810381a:	46bd      	mov	sp, r7
 810381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103820:	4770      	bx	lr
 8103822:	bf00      	nop
 8103824:	58024400 	.word	0x58024400
 8103828:	03d09000 	.word	0x03d09000
 810382c:	46000000 	.word	0x46000000
 8103830:	4c742400 	.word	0x4c742400
 8103834:	4a742400 	.word	0x4a742400
 8103838:	4af42400 	.word	0x4af42400

0810383c <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 810383c:	b480      	push	{r7}
 810383e:	b089      	sub	sp, #36	; 0x24
 8103840:	af00      	add	r7, sp, #0
 8103842:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103844:	4ba1      	ldr	r3, [pc, #644]	; (8103acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103848:	f003 0303 	and.w	r3, r3, #3
 810384c:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 810384e:	4b9f      	ldr	r3, [pc, #636]	; (8103acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103852:	0d1b      	lsrs	r3, r3, #20
 8103854:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103858:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 810385a:	4b9c      	ldr	r3, [pc, #624]	; (8103acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810385c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810385e:	0a1b      	lsrs	r3, r3, #8
 8103860:	f003 0301 	and.w	r3, r3, #1
 8103864:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8103866:	4b99      	ldr	r3, [pc, #612]	; (8103acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103868:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810386a:	08db      	lsrs	r3, r3, #3
 810386c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103870:	693a      	ldr	r2, [r7, #16]
 8103872:	fb02 f303 	mul.w	r3, r2, r3
 8103876:	ee07 3a90 	vmov	s15, r3
 810387a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810387e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8103882:	697b      	ldr	r3, [r7, #20]
 8103884:	2b00      	cmp	r3, #0
 8103886:	f000 8111 	beq.w	8103aac <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810388a:	69bb      	ldr	r3, [r7, #24]
 810388c:	2b02      	cmp	r3, #2
 810388e:	f000 8083 	beq.w	8103998 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8103892:	69bb      	ldr	r3, [r7, #24]
 8103894:	2b02      	cmp	r3, #2
 8103896:	f200 80a1 	bhi.w	81039dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810389a:	69bb      	ldr	r3, [r7, #24]
 810389c:	2b00      	cmp	r3, #0
 810389e:	d003      	beq.n	81038a8 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 81038a0:	69bb      	ldr	r3, [r7, #24]
 81038a2:	2b01      	cmp	r3, #1
 81038a4:	d056      	beq.n	8103954 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 81038a6:	e099      	b.n	81039dc <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81038a8:	4b88      	ldr	r3, [pc, #544]	; (8103acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81038aa:	681b      	ldr	r3, [r3, #0]
 81038ac:	f003 0320 	and.w	r3, r3, #32
 81038b0:	2b00      	cmp	r3, #0
 81038b2:	d02d      	beq.n	8103910 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81038b4:	4b85      	ldr	r3, [pc, #532]	; (8103acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81038b6:	681b      	ldr	r3, [r3, #0]
 81038b8:	08db      	lsrs	r3, r3, #3
 81038ba:	f003 0303 	and.w	r3, r3, #3
 81038be:	4a84      	ldr	r2, [pc, #528]	; (8103ad0 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 81038c0:	fa22 f303 	lsr.w	r3, r2, r3
 81038c4:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81038c6:	68bb      	ldr	r3, [r7, #8]
 81038c8:	ee07 3a90 	vmov	s15, r3
 81038cc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81038d0:	697b      	ldr	r3, [r7, #20]
 81038d2:	ee07 3a90 	vmov	s15, r3
 81038d6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81038da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81038de:	4b7b      	ldr	r3, [pc, #492]	; (8103acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81038e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81038e6:	ee07 3a90 	vmov	s15, r3
 81038ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81038ee:	ed97 6a03 	vldr	s12, [r7, #12]
 81038f2:	eddf 5a78 	vldr	s11, [pc, #480]	; 8103ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81038f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81038fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81038fe:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103902:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103906:	ee67 7a27 	vmul.f32	s15, s14, s15
 810390a:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 810390e:	e087      	b.n	8103a20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103910:	697b      	ldr	r3, [r7, #20]
 8103912:	ee07 3a90 	vmov	s15, r3
 8103916:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810391a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8103ad8 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810391e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103922:	4b6a      	ldr	r3, [pc, #424]	; (8103acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103926:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810392a:	ee07 3a90 	vmov	s15, r3
 810392e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103932:	ed97 6a03 	vldr	s12, [r7, #12]
 8103936:	eddf 5a67 	vldr	s11, [pc, #412]	; 8103ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810393a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810393e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103942:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103946:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810394a:	ee67 7a27 	vmul.f32	s15, s14, s15
 810394e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103952:	e065      	b.n	8103a20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103954:	697b      	ldr	r3, [r7, #20]
 8103956:	ee07 3a90 	vmov	s15, r3
 810395a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810395e:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8103adc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8103962:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103966:	4b59      	ldr	r3, [pc, #356]	; (8103acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810396a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810396e:	ee07 3a90 	vmov	s15, r3
 8103972:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103976:	ed97 6a03 	vldr	s12, [r7, #12]
 810397a:	eddf 5a56 	vldr	s11, [pc, #344]	; 8103ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 810397e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103982:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103986:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810398a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810398e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103992:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103996:	e043      	b.n	8103a20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8103998:	697b      	ldr	r3, [r7, #20]
 810399a:	ee07 3a90 	vmov	s15, r3
 810399e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81039a2:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8103ae0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 81039a6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81039aa:	4b48      	ldr	r3, [pc, #288]	; (8103acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81039ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81039ae:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81039b2:	ee07 3a90 	vmov	s15, r3
 81039b6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81039ba:	ed97 6a03 	vldr	s12, [r7, #12]
 81039be:	eddf 5a45 	vldr	s11, [pc, #276]	; 8103ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81039c2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81039c6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81039ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81039ce:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81039d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 81039d6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 81039da:	e021      	b.n	8103a20 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 81039dc:	697b      	ldr	r3, [r7, #20]
 81039de:	ee07 3a90 	vmov	s15, r3
 81039e2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81039e6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8103adc <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81039ea:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81039ee:	4b37      	ldr	r3, [pc, #220]	; (8103acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81039f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81039f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81039f6:	ee07 3a90 	vmov	s15, r3
 81039fa:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81039fe:	ed97 6a03 	vldr	s12, [r7, #12]
 8103a02:	eddf 5a34 	vldr	s11, [pc, #208]	; 8103ad4 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8103a06:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103a0a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103a0e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103a12:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103a16:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103a1a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103a1e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8103a20:	4b2a      	ldr	r3, [pc, #168]	; (8103acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103a22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a24:	0a5b      	lsrs	r3, r3, #9
 8103a26:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103a2a:	ee07 3a90 	vmov	s15, r3
 8103a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103a32:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103a36:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103a3a:	edd7 6a07 	vldr	s13, [r7, #28]
 8103a3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103a42:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103a46:	ee17 2a90 	vmov	r2, s15
 8103a4a:	687b      	ldr	r3, [r7, #4]
 8103a4c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8103a4e:	4b1f      	ldr	r3, [pc, #124]	; (8103acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a52:	0c1b      	lsrs	r3, r3, #16
 8103a54:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103a58:	ee07 3a90 	vmov	s15, r3
 8103a5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103a60:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103a64:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103a68:	edd7 6a07 	vldr	s13, [r7, #28]
 8103a6c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103a70:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103a74:	ee17 2a90 	vmov	r2, s15
 8103a78:	687b      	ldr	r3, [r7, #4]
 8103a7a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8103a7c:	4b13      	ldr	r3, [pc, #76]	; (8103acc <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8103a7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8103a80:	0e1b      	lsrs	r3, r3, #24
 8103a82:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103a86:	ee07 3a90 	vmov	s15, r3
 8103a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103a8e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8103a92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8103a96:	edd7 6a07 	vldr	s13, [r7, #28]
 8103a9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103a9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103aa2:	ee17 2a90 	vmov	r2, s15
 8103aa6:	687b      	ldr	r3, [r7, #4]
 8103aa8:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8103aaa:	e008      	b.n	8103abe <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8103aac:	687b      	ldr	r3, [r7, #4]
 8103aae:	2200      	movs	r2, #0
 8103ab0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8103ab2:	687b      	ldr	r3, [r7, #4]
 8103ab4:	2200      	movs	r2, #0
 8103ab6:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8103ab8:	687b      	ldr	r3, [r7, #4]
 8103aba:	2200      	movs	r2, #0
 8103abc:	609a      	str	r2, [r3, #8]
}
 8103abe:	bf00      	nop
 8103ac0:	3724      	adds	r7, #36	; 0x24
 8103ac2:	46bd      	mov	sp, r7
 8103ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103ac8:	4770      	bx	lr
 8103aca:	bf00      	nop
 8103acc:	58024400 	.word	0x58024400
 8103ad0:	03d09000 	.word	0x03d09000
 8103ad4:	46000000 	.word	0x46000000
 8103ad8:	4c742400 	.word	0x4c742400
 8103adc:	4a742400 	.word	0x4a742400
 8103ae0:	4af42400 	.word	0x4af42400

08103ae4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8103ae4:	b580      	push	{r7, lr}
 8103ae6:	b084      	sub	sp, #16
 8103ae8:	af00      	add	r7, sp, #0
 8103aea:	6078      	str	r0, [r7, #4]
 8103aec:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103aee:	2300      	movs	r3, #0
 8103af0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103af2:	4b54      	ldr	r3, [pc, #336]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103af4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103af6:	f003 0303 	and.w	r3, r3, #3
 8103afa:	2b03      	cmp	r3, #3
 8103afc:	d101      	bne.n	8103b02 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8103afe:	2301      	movs	r3, #1
 8103b00:	e09b      	b.n	8103c3a <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8103b02:	4b50      	ldr	r3, [pc, #320]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103b04:	681b      	ldr	r3, [r3, #0]
 8103b06:	4a4f      	ldr	r2, [pc, #316]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103b08:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8103b0c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103b0e:	f7fd f86b 	bl	8100be8 <HAL_GetTick>
 8103b12:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103b14:	e008      	b.n	8103b28 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103b16:	f7fd f867 	bl	8100be8 <HAL_GetTick>
 8103b1a:	4602      	mov	r2, r0
 8103b1c:	68bb      	ldr	r3, [r7, #8]
 8103b1e:	1ad3      	subs	r3, r2, r3
 8103b20:	2b02      	cmp	r3, #2
 8103b22:	d901      	bls.n	8103b28 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103b24:	2303      	movs	r3, #3
 8103b26:	e088      	b.n	8103c3a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8103b28:	4b46      	ldr	r3, [pc, #280]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103b2a:	681b      	ldr	r3, [r3, #0]
 8103b2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103b30:	2b00      	cmp	r3, #0
 8103b32:	d1f0      	bne.n	8103b16 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8103b34:	4b43      	ldr	r3, [pc, #268]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103b38:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8103b3c:	687b      	ldr	r3, [r7, #4]
 8103b3e:	681b      	ldr	r3, [r3, #0]
 8103b40:	031b      	lsls	r3, r3, #12
 8103b42:	4940      	ldr	r1, [pc, #256]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103b44:	4313      	orrs	r3, r2
 8103b46:	628b      	str	r3, [r1, #40]	; 0x28
 8103b48:	687b      	ldr	r3, [r7, #4]
 8103b4a:	685b      	ldr	r3, [r3, #4]
 8103b4c:	3b01      	subs	r3, #1
 8103b4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103b52:	687b      	ldr	r3, [r7, #4]
 8103b54:	689b      	ldr	r3, [r3, #8]
 8103b56:	3b01      	subs	r3, #1
 8103b58:	025b      	lsls	r3, r3, #9
 8103b5a:	b29b      	uxth	r3, r3
 8103b5c:	431a      	orrs	r2, r3
 8103b5e:	687b      	ldr	r3, [r7, #4]
 8103b60:	68db      	ldr	r3, [r3, #12]
 8103b62:	3b01      	subs	r3, #1
 8103b64:	041b      	lsls	r3, r3, #16
 8103b66:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103b6a:	431a      	orrs	r2, r3
 8103b6c:	687b      	ldr	r3, [r7, #4]
 8103b6e:	691b      	ldr	r3, [r3, #16]
 8103b70:	3b01      	subs	r3, #1
 8103b72:	061b      	lsls	r3, r3, #24
 8103b74:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103b78:	4932      	ldr	r1, [pc, #200]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103b7a:	4313      	orrs	r3, r2
 8103b7c:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8103b7e:	4b31      	ldr	r3, [pc, #196]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103b80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b82:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8103b86:	687b      	ldr	r3, [r7, #4]
 8103b88:	695b      	ldr	r3, [r3, #20]
 8103b8a:	492e      	ldr	r1, [pc, #184]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103b8c:	4313      	orrs	r3, r2
 8103b8e:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8103b90:	4b2c      	ldr	r3, [pc, #176]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103b94:	f023 0220 	bic.w	r2, r3, #32
 8103b98:	687b      	ldr	r3, [r7, #4]
 8103b9a:	699b      	ldr	r3, [r3, #24]
 8103b9c:	4929      	ldr	r1, [pc, #164]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103b9e:	4313      	orrs	r3, r2
 8103ba0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8103ba2:	4b28      	ldr	r3, [pc, #160]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ba6:	4a27      	ldr	r2, [pc, #156]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103ba8:	f023 0310 	bic.w	r3, r3, #16
 8103bac:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8103bae:	4b25      	ldr	r3, [pc, #148]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103bb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8103bb2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103bb6:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103bba:	687a      	ldr	r2, [r7, #4]
 8103bbc:	69d2      	ldr	r2, [r2, #28]
 8103bbe:	00d2      	lsls	r2, r2, #3
 8103bc0:	4920      	ldr	r1, [pc, #128]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103bc2:	4313      	orrs	r3, r2
 8103bc4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8103bc6:	4b1f      	ldr	r3, [pc, #124]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bca:	4a1e      	ldr	r2, [pc, #120]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103bcc:	f043 0310 	orr.w	r3, r3, #16
 8103bd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8103bd2:	683b      	ldr	r3, [r7, #0]
 8103bd4:	2b00      	cmp	r3, #0
 8103bd6:	d106      	bne.n	8103be6 <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8103bd8:	4b1a      	ldr	r3, [pc, #104]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103bda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bdc:	4a19      	ldr	r2, [pc, #100]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103bde:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8103be2:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103be4:	e00f      	b.n	8103c06 <RCCEx_PLL2_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8103be6:	683b      	ldr	r3, [r7, #0]
 8103be8:	2b01      	cmp	r3, #1
 8103bea:	d106      	bne.n	8103bfa <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8103bec:	4b15      	ldr	r3, [pc, #84]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bf0:	4a14      	ldr	r2, [pc, #80]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103bf2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8103bf6:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103bf8:	e005      	b.n	8103c06 <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8103bfa:	4b12      	ldr	r3, [pc, #72]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103bfc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103bfe:	4a11      	ldr	r2, [pc, #68]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103c00:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8103c04:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8103c06:	4b0f      	ldr	r3, [pc, #60]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103c08:	681b      	ldr	r3, [r3, #0]
 8103c0a:	4a0e      	ldr	r2, [pc, #56]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103c0c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8103c10:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103c12:	f7fc ffe9 	bl	8100be8 <HAL_GetTick>
 8103c16:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103c18:	e008      	b.n	8103c2c <RCCEx_PLL2_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8103c1a:	f7fc ffe5 	bl	8100be8 <HAL_GetTick>
 8103c1e:	4602      	mov	r2, r0
 8103c20:	68bb      	ldr	r3, [r7, #8]
 8103c22:	1ad3      	subs	r3, r2, r3
 8103c24:	2b02      	cmp	r3, #2
 8103c26:	d901      	bls.n	8103c2c <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103c28:	2303      	movs	r3, #3
 8103c2a:	e006      	b.n	8103c3a <RCCEx_PLL2_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8103c2c:	4b05      	ldr	r3, [pc, #20]	; (8103c44 <RCCEx_PLL2_Config+0x160>)
 8103c2e:	681b      	ldr	r3, [r3, #0]
 8103c30:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103c34:	2b00      	cmp	r3, #0
 8103c36:	d0f0      	beq.n	8103c1a <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8103c38:	7bfb      	ldrb	r3, [r7, #15]
}
 8103c3a:	4618      	mov	r0, r3
 8103c3c:	3710      	adds	r7, #16
 8103c3e:	46bd      	mov	sp, r7
 8103c40:	bd80      	pop	{r7, pc}
 8103c42:	bf00      	nop
 8103c44:	58024400 	.word	0x58024400

08103c48 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8103c48:	b580      	push	{r7, lr}
 8103c4a:	b084      	sub	sp, #16
 8103c4c:	af00      	add	r7, sp, #0
 8103c4e:	6078      	str	r0, [r7, #4]
 8103c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8103c52:	2300      	movs	r3, #0
 8103c54:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8103c56:	4b54      	ldr	r3, [pc, #336]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103c58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103c5a:	f003 0303 	and.w	r3, r3, #3
 8103c5e:	2b03      	cmp	r3, #3
 8103c60:	d101      	bne.n	8103c66 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8103c62:	2301      	movs	r3, #1
 8103c64:	e09b      	b.n	8103d9e <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8103c66:	4b50      	ldr	r3, [pc, #320]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103c68:	681b      	ldr	r3, [r3, #0]
 8103c6a:	4a4f      	ldr	r2, [pc, #316]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103c6c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8103c70:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103c72:	f7fc ffb9 	bl	8100be8 <HAL_GetTick>
 8103c76:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103c78:	e008      	b.n	8103c8c <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8103c7a:	f7fc ffb5 	bl	8100be8 <HAL_GetTick>
 8103c7e:	4602      	mov	r2, r0
 8103c80:	68bb      	ldr	r3, [r7, #8]
 8103c82:	1ad3      	subs	r3, r2, r3
 8103c84:	2b02      	cmp	r3, #2
 8103c86:	d901      	bls.n	8103c8c <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8103c88:	2303      	movs	r3, #3
 8103c8a:	e088      	b.n	8103d9e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8103c8c:	4b46      	ldr	r3, [pc, #280]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103c8e:	681b      	ldr	r3, [r3, #0]
 8103c90:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103c94:	2b00      	cmp	r3, #0
 8103c96:	d1f0      	bne.n	8103c7a <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8103c98:	4b43      	ldr	r3, [pc, #268]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103c9c:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8103ca0:	687b      	ldr	r3, [r7, #4]
 8103ca2:	681b      	ldr	r3, [r3, #0]
 8103ca4:	051b      	lsls	r3, r3, #20
 8103ca6:	4940      	ldr	r1, [pc, #256]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103ca8:	4313      	orrs	r3, r2
 8103caa:	628b      	str	r3, [r1, #40]	; 0x28
 8103cac:	687b      	ldr	r3, [r7, #4]
 8103cae:	685b      	ldr	r3, [r3, #4]
 8103cb0:	3b01      	subs	r3, #1
 8103cb2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8103cb6:	687b      	ldr	r3, [r7, #4]
 8103cb8:	689b      	ldr	r3, [r3, #8]
 8103cba:	3b01      	subs	r3, #1
 8103cbc:	025b      	lsls	r3, r3, #9
 8103cbe:	b29b      	uxth	r3, r3
 8103cc0:	431a      	orrs	r2, r3
 8103cc2:	687b      	ldr	r3, [r7, #4]
 8103cc4:	68db      	ldr	r3, [r3, #12]
 8103cc6:	3b01      	subs	r3, #1
 8103cc8:	041b      	lsls	r3, r3, #16
 8103cca:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8103cce:	431a      	orrs	r2, r3
 8103cd0:	687b      	ldr	r3, [r7, #4]
 8103cd2:	691b      	ldr	r3, [r3, #16]
 8103cd4:	3b01      	subs	r3, #1
 8103cd6:	061b      	lsls	r3, r3, #24
 8103cd8:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8103cdc:	4932      	ldr	r1, [pc, #200]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103cde:	4313      	orrs	r3, r2
 8103ce0:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8103ce2:	4b31      	ldr	r3, [pc, #196]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ce6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8103cea:	687b      	ldr	r3, [r7, #4]
 8103cec:	695b      	ldr	r3, [r3, #20]
 8103cee:	492e      	ldr	r1, [pc, #184]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103cf0:	4313      	orrs	r3, r2
 8103cf2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8103cf4:	4b2c      	ldr	r3, [pc, #176]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103cf8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8103cfc:	687b      	ldr	r3, [r7, #4]
 8103cfe:	699b      	ldr	r3, [r3, #24]
 8103d00:	4929      	ldr	r1, [pc, #164]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103d02:	4313      	orrs	r3, r2
 8103d04:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8103d06:	4b28      	ldr	r3, [pc, #160]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d0a:	4a27      	ldr	r2, [pc, #156]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103d0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8103d10:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8103d12:	4b25      	ldr	r3, [pc, #148]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8103d16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8103d1a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8103d1e:	687a      	ldr	r2, [r7, #4]
 8103d20:	69d2      	ldr	r2, [r2, #28]
 8103d22:	00d2      	lsls	r2, r2, #3
 8103d24:	4920      	ldr	r1, [pc, #128]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103d26:	4313      	orrs	r3, r2
 8103d28:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8103d2a:	4b1f      	ldr	r3, [pc, #124]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d2e:	4a1e      	ldr	r2, [pc, #120]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103d30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8103d34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8103d36:	683b      	ldr	r3, [r7, #0]
 8103d38:	2b00      	cmp	r3, #0
 8103d3a:	d106      	bne.n	8103d4a <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8103d3c:	4b1a      	ldr	r3, [pc, #104]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d40:	4a19      	ldr	r2, [pc, #100]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103d42:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8103d46:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103d48:	e00f      	b.n	8103d6a <RCCEx_PLL3_Config+0x122>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8103d4a:	683b      	ldr	r3, [r7, #0]
 8103d4c:	2b01      	cmp	r3, #1
 8103d4e:	d106      	bne.n	8103d5e <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8103d50:	4b15      	ldr	r3, [pc, #84]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d54:	4a14      	ldr	r2, [pc, #80]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103d56:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8103d5a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8103d5c:	e005      	b.n	8103d6a <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8103d5e:	4b12      	ldr	r3, [pc, #72]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d62:	4a11      	ldr	r2, [pc, #68]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103d64:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8103d68:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8103d6a:	4b0f      	ldr	r3, [pc, #60]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103d6c:	681b      	ldr	r3, [r3, #0]
 8103d6e:	4a0e      	ldr	r2, [pc, #56]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103d70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8103d74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8103d76:	f7fc ff37 	bl	8100be8 <HAL_GetTick>
 8103d7a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103d7c:	e008      	b.n	8103d90 <RCCEx_PLL3_Config+0x148>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8103d7e:	f7fc ff33 	bl	8100be8 <HAL_GetTick>
 8103d82:	4602      	mov	r2, r0
 8103d84:	68bb      	ldr	r3, [r7, #8]
 8103d86:	1ad3      	subs	r3, r2, r3
 8103d88:	2b02      	cmp	r3, #2
 8103d8a:	d901      	bls.n	8103d90 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8103d8c:	2303      	movs	r3, #3
 8103d8e:	e006      	b.n	8103d9e <RCCEx_PLL3_Config+0x156>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8103d90:	4b05      	ldr	r3, [pc, #20]	; (8103da8 <RCCEx_PLL3_Config+0x160>)
 8103d92:	681b      	ldr	r3, [r3, #0]
 8103d94:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8103d98:	2b00      	cmp	r3, #0
 8103d9a:	d0f0      	beq.n	8103d7e <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8103d9c:	7bfb      	ldrb	r3, [r7, #15]
}
 8103d9e:	4618      	mov	r0, r3
 8103da0:	3710      	adds	r7, #16
 8103da2:	46bd      	mov	sp, r7
 8103da4:	bd80      	pop	{r7, pc}
 8103da6:	bf00      	nop
 8103da8:	58024400 	.word	0x58024400

08103dac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8103dac:	b580      	push	{r7, lr}
 8103dae:	b082      	sub	sp, #8
 8103db0:	af00      	add	r7, sp, #0
 8103db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8103db4:	687b      	ldr	r3, [r7, #4]
 8103db6:	2b00      	cmp	r3, #0
 8103db8:	d101      	bne.n	8103dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8103dba:	2301      	movs	r3, #1
 8103dbc:	e042      	b.n	8103e44 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8103dbe:	687b      	ldr	r3, [r7, #4]
 8103dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103dc4:	2b00      	cmp	r3, #0
 8103dc6:	d106      	bne.n	8103dd6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8103dc8:	687b      	ldr	r3, [r7, #4]
 8103dca:	2200      	movs	r2, #0
 8103dcc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8103dd0:	6878      	ldr	r0, [r7, #4]
 8103dd2:	f7fc fcb3 	bl	810073c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8103dd6:	687b      	ldr	r3, [r7, #4]
 8103dd8:	2224      	movs	r2, #36	; 0x24
 8103dda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8103dde:	687b      	ldr	r3, [r7, #4]
 8103de0:	681b      	ldr	r3, [r3, #0]
 8103de2:	681a      	ldr	r2, [r3, #0]
 8103de4:	687b      	ldr	r3, [r7, #4]
 8103de6:	681b      	ldr	r3, [r3, #0]
 8103de8:	f022 0201 	bic.w	r2, r2, #1
 8103dec:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8103dee:	687b      	ldr	r3, [r7, #4]
 8103df0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103df2:	2b00      	cmp	r3, #0
 8103df4:	d002      	beq.n	8103dfc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8103df6:	6878      	ldr	r0, [r7, #4]
 8103df8:	f001 fa3a 	bl	8105270 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8103dfc:	6878      	ldr	r0, [r7, #4]
 8103dfe:	f000 fccf 	bl	81047a0 <UART_SetConfig>
 8103e02:	4603      	mov	r3, r0
 8103e04:	2b01      	cmp	r3, #1
 8103e06:	d101      	bne.n	8103e0c <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8103e08:	2301      	movs	r3, #1
 8103e0a:	e01b      	b.n	8103e44 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8103e0c:	687b      	ldr	r3, [r7, #4]
 8103e0e:	681b      	ldr	r3, [r3, #0]
 8103e10:	685a      	ldr	r2, [r3, #4]
 8103e12:	687b      	ldr	r3, [r7, #4]
 8103e14:	681b      	ldr	r3, [r3, #0]
 8103e16:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8103e1a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8103e1c:	687b      	ldr	r3, [r7, #4]
 8103e1e:	681b      	ldr	r3, [r3, #0]
 8103e20:	689a      	ldr	r2, [r3, #8]
 8103e22:	687b      	ldr	r3, [r7, #4]
 8103e24:	681b      	ldr	r3, [r3, #0]
 8103e26:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8103e2a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8103e2c:	687b      	ldr	r3, [r7, #4]
 8103e2e:	681b      	ldr	r3, [r3, #0]
 8103e30:	681a      	ldr	r2, [r3, #0]
 8103e32:	687b      	ldr	r3, [r7, #4]
 8103e34:	681b      	ldr	r3, [r3, #0]
 8103e36:	f042 0201 	orr.w	r2, r2, #1
 8103e3a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8103e3c:	6878      	ldr	r0, [r7, #4]
 8103e3e:	f001 fab9 	bl	81053b4 <UART_CheckIdleState>
 8103e42:	4603      	mov	r3, r0
}
 8103e44:	4618      	mov	r0, r3
 8103e46:	3708      	adds	r7, #8
 8103e48:	46bd      	mov	sp, r7
 8103e4a:	bd80      	pop	{r7, pc}

08103e4c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8103e4c:	b580      	push	{r7, lr}
 8103e4e:	b08a      	sub	sp, #40	; 0x28
 8103e50:	af02      	add	r7, sp, #8
 8103e52:	60f8      	str	r0, [r7, #12]
 8103e54:	60b9      	str	r1, [r7, #8]
 8103e56:	603b      	str	r3, [r7, #0]
 8103e58:	4613      	mov	r3, r2
 8103e5a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8103e5c:	68fb      	ldr	r3, [r7, #12]
 8103e5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8103e62:	2b20      	cmp	r3, #32
 8103e64:	d17b      	bne.n	8103f5e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8103e66:	68bb      	ldr	r3, [r7, #8]
 8103e68:	2b00      	cmp	r3, #0
 8103e6a:	d002      	beq.n	8103e72 <HAL_UART_Transmit+0x26>
 8103e6c:	88fb      	ldrh	r3, [r7, #6]
 8103e6e:	2b00      	cmp	r3, #0
 8103e70:	d101      	bne.n	8103e76 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8103e72:	2301      	movs	r3, #1
 8103e74:	e074      	b.n	8103f60 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8103e76:	68fb      	ldr	r3, [r7, #12]
 8103e78:	2200      	movs	r2, #0
 8103e7a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8103e7e:	68fb      	ldr	r3, [r7, #12]
 8103e80:	2221      	movs	r2, #33	; 0x21
 8103e82:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8103e86:	f7fc feaf 	bl	8100be8 <HAL_GetTick>
 8103e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8103e8c:	68fb      	ldr	r3, [r7, #12]
 8103e8e:	88fa      	ldrh	r2, [r7, #6]
 8103e90:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8103e94:	68fb      	ldr	r3, [r7, #12]
 8103e96:	88fa      	ldrh	r2, [r7, #6]
 8103e98:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8103e9c:	68fb      	ldr	r3, [r7, #12]
 8103e9e:	689b      	ldr	r3, [r3, #8]
 8103ea0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8103ea4:	d108      	bne.n	8103eb8 <HAL_UART_Transmit+0x6c>
 8103ea6:	68fb      	ldr	r3, [r7, #12]
 8103ea8:	691b      	ldr	r3, [r3, #16]
 8103eaa:	2b00      	cmp	r3, #0
 8103eac:	d104      	bne.n	8103eb8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8103eae:	2300      	movs	r3, #0
 8103eb0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8103eb2:	68bb      	ldr	r3, [r7, #8]
 8103eb4:	61bb      	str	r3, [r7, #24]
 8103eb6:	e003      	b.n	8103ec0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8103eb8:	68bb      	ldr	r3, [r7, #8]
 8103eba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8103ebc:	2300      	movs	r3, #0
 8103ebe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8103ec0:	e030      	b.n	8103f24 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8103ec2:	683b      	ldr	r3, [r7, #0]
 8103ec4:	9300      	str	r3, [sp, #0]
 8103ec6:	697b      	ldr	r3, [r7, #20]
 8103ec8:	2200      	movs	r2, #0
 8103eca:	2180      	movs	r1, #128	; 0x80
 8103ecc:	68f8      	ldr	r0, [r7, #12]
 8103ece:	f001 fb1b 	bl	8105508 <UART_WaitOnFlagUntilTimeout>
 8103ed2:	4603      	mov	r3, r0
 8103ed4:	2b00      	cmp	r3, #0
 8103ed6:	d005      	beq.n	8103ee4 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8103ed8:	68fb      	ldr	r3, [r7, #12]
 8103eda:	2220      	movs	r2, #32
 8103edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8103ee0:	2303      	movs	r3, #3
 8103ee2:	e03d      	b.n	8103f60 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8103ee4:	69fb      	ldr	r3, [r7, #28]
 8103ee6:	2b00      	cmp	r3, #0
 8103ee8:	d10b      	bne.n	8103f02 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8103eea:	69bb      	ldr	r3, [r7, #24]
 8103eec:	881b      	ldrh	r3, [r3, #0]
 8103eee:	461a      	mov	r2, r3
 8103ef0:	68fb      	ldr	r3, [r7, #12]
 8103ef2:	681b      	ldr	r3, [r3, #0]
 8103ef4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8103ef8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8103efa:	69bb      	ldr	r3, [r7, #24]
 8103efc:	3302      	adds	r3, #2
 8103efe:	61bb      	str	r3, [r7, #24]
 8103f00:	e007      	b.n	8103f12 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8103f02:	69fb      	ldr	r3, [r7, #28]
 8103f04:	781a      	ldrb	r2, [r3, #0]
 8103f06:	68fb      	ldr	r3, [r7, #12]
 8103f08:	681b      	ldr	r3, [r3, #0]
 8103f0a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8103f0c:	69fb      	ldr	r3, [r7, #28]
 8103f0e:	3301      	adds	r3, #1
 8103f10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8103f12:	68fb      	ldr	r3, [r7, #12]
 8103f14:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8103f18:	b29b      	uxth	r3, r3
 8103f1a:	3b01      	subs	r3, #1
 8103f1c:	b29a      	uxth	r2, r3
 8103f1e:	68fb      	ldr	r3, [r7, #12]
 8103f20:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8103f24:	68fb      	ldr	r3, [r7, #12]
 8103f26:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8103f2a:	b29b      	uxth	r3, r3
 8103f2c:	2b00      	cmp	r3, #0
 8103f2e:	d1c8      	bne.n	8103ec2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8103f30:	683b      	ldr	r3, [r7, #0]
 8103f32:	9300      	str	r3, [sp, #0]
 8103f34:	697b      	ldr	r3, [r7, #20]
 8103f36:	2200      	movs	r2, #0
 8103f38:	2140      	movs	r1, #64	; 0x40
 8103f3a:	68f8      	ldr	r0, [r7, #12]
 8103f3c:	f001 fae4 	bl	8105508 <UART_WaitOnFlagUntilTimeout>
 8103f40:	4603      	mov	r3, r0
 8103f42:	2b00      	cmp	r3, #0
 8103f44:	d005      	beq.n	8103f52 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8103f46:	68fb      	ldr	r3, [r7, #12]
 8103f48:	2220      	movs	r2, #32
 8103f4a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8103f4e:	2303      	movs	r3, #3
 8103f50:	e006      	b.n	8103f60 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8103f52:	68fb      	ldr	r3, [r7, #12]
 8103f54:	2220      	movs	r2, #32
 8103f56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8103f5a:	2300      	movs	r3, #0
 8103f5c:	e000      	b.n	8103f60 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8103f5e:	2302      	movs	r3, #2
  }
}
 8103f60:	4618      	mov	r0, r3
 8103f62:	3720      	adds	r7, #32
 8103f64:	46bd      	mov	sp, r7
 8103f66:	bd80      	pop	{r7, pc}

08103f68 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8103f68:	b580      	push	{r7, lr}
 8103f6a:	b08a      	sub	sp, #40	; 0x28
 8103f6c:	af00      	add	r7, sp, #0
 8103f6e:	60f8      	str	r0, [r7, #12]
 8103f70:	60b9      	str	r1, [r7, #8]
 8103f72:	4613      	mov	r3, r2
 8103f74:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8103f76:	68fb      	ldr	r3, [r7, #12]
 8103f78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8103f7c:	2b20      	cmp	r3, #32
 8103f7e:	d137      	bne.n	8103ff0 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8103f80:	68bb      	ldr	r3, [r7, #8]
 8103f82:	2b00      	cmp	r3, #0
 8103f84:	d002      	beq.n	8103f8c <HAL_UART_Receive_IT+0x24>
 8103f86:	88fb      	ldrh	r3, [r7, #6]
 8103f88:	2b00      	cmp	r3, #0
 8103f8a:	d101      	bne.n	8103f90 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8103f8c:	2301      	movs	r3, #1
 8103f8e:	e030      	b.n	8103ff2 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8103f90:	68fb      	ldr	r3, [r7, #12]
 8103f92:	2200      	movs	r2, #0
 8103f94:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8103f96:	68fb      	ldr	r3, [r7, #12]
 8103f98:	681b      	ldr	r3, [r3, #0]
 8103f9a:	4a18      	ldr	r2, [pc, #96]	; (8103ffc <HAL_UART_Receive_IT+0x94>)
 8103f9c:	4293      	cmp	r3, r2
 8103f9e:	d01f      	beq.n	8103fe0 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8103fa0:	68fb      	ldr	r3, [r7, #12]
 8103fa2:	681b      	ldr	r3, [r3, #0]
 8103fa4:	685b      	ldr	r3, [r3, #4]
 8103fa6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8103faa:	2b00      	cmp	r3, #0
 8103fac:	d018      	beq.n	8103fe0 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8103fae:	68fb      	ldr	r3, [r7, #12]
 8103fb0:	681b      	ldr	r3, [r3, #0]
 8103fb2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8103fb4:	697b      	ldr	r3, [r7, #20]
 8103fb6:	e853 3f00 	ldrex	r3, [r3]
 8103fba:	613b      	str	r3, [r7, #16]
   return(result);
 8103fbc:	693b      	ldr	r3, [r7, #16]
 8103fbe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8103fc2:	627b      	str	r3, [r7, #36]	; 0x24
 8103fc4:	68fb      	ldr	r3, [r7, #12]
 8103fc6:	681b      	ldr	r3, [r3, #0]
 8103fc8:	461a      	mov	r2, r3
 8103fca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8103fcc:	623b      	str	r3, [r7, #32]
 8103fce:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8103fd0:	69f9      	ldr	r1, [r7, #28]
 8103fd2:	6a3a      	ldr	r2, [r7, #32]
 8103fd4:	e841 2300 	strex	r3, r2, [r1]
 8103fd8:	61bb      	str	r3, [r7, #24]
   return(result);
 8103fda:	69bb      	ldr	r3, [r7, #24]
 8103fdc:	2b00      	cmp	r3, #0
 8103fde:	d1e6      	bne.n	8103fae <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8103fe0:	88fb      	ldrh	r3, [r7, #6]
 8103fe2:	461a      	mov	r2, r3
 8103fe4:	68b9      	ldr	r1, [r7, #8]
 8103fe6:	68f8      	ldr	r0, [r7, #12]
 8103fe8:	f001 fafc 	bl	81055e4 <UART_Start_Receive_IT>
 8103fec:	4603      	mov	r3, r0
 8103fee:	e000      	b.n	8103ff2 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8103ff0:	2302      	movs	r3, #2
  }
}
 8103ff2:	4618      	mov	r0, r3
 8103ff4:	3728      	adds	r7, #40	; 0x28
 8103ff6:	46bd      	mov	sp, r7
 8103ff8:	bd80      	pop	{r7, pc}
 8103ffa:	bf00      	nop
 8103ffc:	58000c00 	.word	0x58000c00

08104000 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8104000:	b580      	push	{r7, lr}
 8104002:	b0ba      	sub	sp, #232	; 0xe8
 8104004:	af00      	add	r7, sp, #0
 8104006:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8104008:	687b      	ldr	r3, [r7, #4]
 810400a:	681b      	ldr	r3, [r3, #0]
 810400c:	69db      	ldr	r3, [r3, #28]
 810400e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8104012:	687b      	ldr	r3, [r7, #4]
 8104014:	681b      	ldr	r3, [r3, #0]
 8104016:	681b      	ldr	r3, [r3, #0]
 8104018:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 810401c:	687b      	ldr	r3, [r7, #4]
 810401e:	681b      	ldr	r3, [r3, #0]
 8104020:	689b      	ldr	r3, [r3, #8]
 8104022:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8104026:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 810402a:	f640 030f 	movw	r3, #2063	; 0x80f
 810402e:	4013      	ands	r3, r2
 8104030:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8104034:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8104038:	2b00      	cmp	r3, #0
 810403a:	d11b      	bne.n	8104074 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 810403c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104040:	f003 0320 	and.w	r3, r3, #32
 8104044:	2b00      	cmp	r3, #0
 8104046:	d015      	beq.n	8104074 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8104048:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 810404c:	f003 0320 	and.w	r3, r3, #32
 8104050:	2b00      	cmp	r3, #0
 8104052:	d105      	bne.n	8104060 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8104054:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8104058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 810405c:	2b00      	cmp	r3, #0
 810405e:	d009      	beq.n	8104074 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8104060:	687b      	ldr	r3, [r7, #4]
 8104062:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8104064:	2b00      	cmp	r3, #0
 8104066:	f000 8379 	beq.w	810475c <HAL_UART_IRQHandler+0x75c>
      {
        huart->RxISR(huart);
 810406a:	687b      	ldr	r3, [r7, #4]
 810406c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810406e:	6878      	ldr	r0, [r7, #4]
 8104070:	4798      	blx	r3
      }
      return;
 8104072:	e373      	b.n	810475c <HAL_UART_IRQHandler+0x75c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8104074:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8104078:	2b00      	cmp	r3, #0
 810407a:	f000 8123 	beq.w	81042c4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 810407e:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8104082:	4b8d      	ldr	r3, [pc, #564]	; (81042b8 <HAL_UART_IRQHandler+0x2b8>)
 8104084:	4013      	ands	r3, r2
 8104086:	2b00      	cmp	r3, #0
 8104088:	d106      	bne.n	8104098 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 810408a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 810408e:	4b8b      	ldr	r3, [pc, #556]	; (81042bc <HAL_UART_IRQHandler+0x2bc>)
 8104090:	4013      	ands	r3, r2
 8104092:	2b00      	cmp	r3, #0
 8104094:	f000 8116 	beq.w	81042c4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8104098:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810409c:	f003 0301 	and.w	r3, r3, #1
 81040a0:	2b00      	cmp	r3, #0
 81040a2:	d011      	beq.n	81040c8 <HAL_UART_IRQHandler+0xc8>
 81040a4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81040a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81040ac:	2b00      	cmp	r3, #0
 81040ae:	d00b      	beq.n	81040c8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 81040b0:	687b      	ldr	r3, [r7, #4]
 81040b2:	681b      	ldr	r3, [r3, #0]
 81040b4:	2201      	movs	r2, #1
 81040b6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 81040b8:	687b      	ldr	r3, [r7, #4]
 81040ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81040be:	f043 0201 	orr.w	r2, r3, #1
 81040c2:	687b      	ldr	r3, [r7, #4]
 81040c4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81040c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81040cc:	f003 0302 	and.w	r3, r3, #2
 81040d0:	2b00      	cmp	r3, #0
 81040d2:	d011      	beq.n	81040f8 <HAL_UART_IRQHandler+0xf8>
 81040d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 81040d8:	f003 0301 	and.w	r3, r3, #1
 81040dc:	2b00      	cmp	r3, #0
 81040de:	d00b      	beq.n	81040f8 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 81040e0:	687b      	ldr	r3, [r7, #4]
 81040e2:	681b      	ldr	r3, [r3, #0]
 81040e4:	2202      	movs	r2, #2
 81040e6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 81040e8:	687b      	ldr	r3, [r7, #4]
 81040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81040ee:	f043 0204 	orr.w	r2, r3, #4
 81040f2:	687b      	ldr	r3, [r7, #4]
 81040f4:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 81040f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81040fc:	f003 0304 	and.w	r3, r3, #4
 8104100:	2b00      	cmp	r3, #0
 8104102:	d011      	beq.n	8104128 <HAL_UART_IRQHandler+0x128>
 8104104:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8104108:	f003 0301 	and.w	r3, r3, #1
 810410c:	2b00      	cmp	r3, #0
 810410e:	d00b      	beq.n	8104128 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8104110:	687b      	ldr	r3, [r7, #4]
 8104112:	681b      	ldr	r3, [r3, #0]
 8104114:	2204      	movs	r2, #4
 8104116:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8104118:	687b      	ldr	r3, [r7, #4]
 810411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810411e:	f043 0202 	orr.w	r2, r3, #2
 8104122:	687b      	ldr	r3, [r7, #4]
 8104124:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8104128:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 810412c:	f003 0308 	and.w	r3, r3, #8
 8104130:	2b00      	cmp	r3, #0
 8104132:	d017      	beq.n	8104164 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8104134:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104138:	f003 0320 	and.w	r3, r3, #32
 810413c:	2b00      	cmp	r3, #0
 810413e:	d105      	bne.n	810414c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8104140:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8104144:	4b5c      	ldr	r3, [pc, #368]	; (81042b8 <HAL_UART_IRQHandler+0x2b8>)
 8104146:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8104148:	2b00      	cmp	r3, #0
 810414a:	d00b      	beq.n	8104164 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 810414c:	687b      	ldr	r3, [r7, #4]
 810414e:	681b      	ldr	r3, [r3, #0]
 8104150:	2208      	movs	r2, #8
 8104152:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8104154:	687b      	ldr	r3, [r7, #4]
 8104156:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810415a:	f043 0208 	orr.w	r2, r3, #8
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8104164:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104168:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 810416c:	2b00      	cmp	r3, #0
 810416e:	d012      	beq.n	8104196 <HAL_UART_IRQHandler+0x196>
 8104170:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104174:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8104178:	2b00      	cmp	r3, #0
 810417a:	d00c      	beq.n	8104196 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 810417c:	687b      	ldr	r3, [r7, #4]
 810417e:	681b      	ldr	r3, [r3, #0]
 8104180:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8104184:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8104186:	687b      	ldr	r3, [r7, #4]
 8104188:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810418c:	f043 0220 	orr.w	r2, r3, #32
 8104190:	687b      	ldr	r3, [r7, #4]
 8104192:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8104196:	687b      	ldr	r3, [r7, #4]
 8104198:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810419c:	2b00      	cmp	r3, #0
 810419e:	f000 82df 	beq.w	8104760 <HAL_UART_IRQHandler+0x760>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 81041a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81041a6:	f003 0320 	and.w	r3, r3, #32
 81041aa:	2b00      	cmp	r3, #0
 81041ac:	d013      	beq.n	81041d6 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 81041ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81041b2:	f003 0320 	and.w	r3, r3, #32
 81041b6:	2b00      	cmp	r3, #0
 81041b8:	d105      	bne.n	81041c6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 81041ba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 81041be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 81041c2:	2b00      	cmp	r3, #0
 81041c4:	d007      	beq.n	81041d6 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 81041c6:	687b      	ldr	r3, [r7, #4]
 81041c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81041ca:	2b00      	cmp	r3, #0
 81041cc:	d003      	beq.n	81041d6 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 81041ce:	687b      	ldr	r3, [r7, #4]
 81041d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 81041d2:	6878      	ldr	r0, [r7, #4]
 81041d4:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 81041d6:	687b      	ldr	r3, [r7, #4]
 81041d8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81041dc:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81041e0:	687b      	ldr	r3, [r7, #4]
 81041e2:	681b      	ldr	r3, [r3, #0]
 81041e4:	689b      	ldr	r3, [r3, #8]
 81041e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81041ea:	2b40      	cmp	r3, #64	; 0x40
 81041ec:	d005      	beq.n	81041fa <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 81041ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 81041f2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 81041f6:	2b00      	cmp	r3, #0
 81041f8:	d054      	beq.n	81042a4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 81041fa:	6878      	ldr	r0, [r7, #4]
 81041fc:	f001 fb14 	bl	8105828 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8104200:	687b      	ldr	r3, [r7, #4]
 8104202:	681b      	ldr	r3, [r3, #0]
 8104204:	689b      	ldr	r3, [r3, #8]
 8104206:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810420a:	2b40      	cmp	r3, #64	; 0x40
 810420c:	d146      	bne.n	810429c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 810420e:	687b      	ldr	r3, [r7, #4]
 8104210:	681b      	ldr	r3, [r3, #0]
 8104212:	3308      	adds	r3, #8
 8104214:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104218:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 810421c:	e853 3f00 	ldrex	r3, [r3]
 8104220:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8104224:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8104228:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810422c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8104230:	687b      	ldr	r3, [r7, #4]
 8104232:	681b      	ldr	r3, [r3, #0]
 8104234:	3308      	adds	r3, #8
 8104236:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 810423a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 810423e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104242:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8104246:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 810424a:	e841 2300 	strex	r3, r2, [r1]
 810424e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8104252:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8104256:	2b00      	cmp	r3, #0
 8104258:	d1d9      	bne.n	810420e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 810425a:	687b      	ldr	r3, [r7, #4]
 810425c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104260:	2b00      	cmp	r3, #0
 8104262:	d017      	beq.n	8104294 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8104264:	687b      	ldr	r3, [r7, #4]
 8104266:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810426a:	4a15      	ldr	r2, [pc, #84]	; (81042c0 <HAL_UART_IRQHandler+0x2c0>)
 810426c:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 810426e:	687b      	ldr	r3, [r7, #4]
 8104270:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104274:	4618      	mov	r0, r3
 8104276:	f7fd f905 	bl	8101484 <HAL_DMA_Abort_IT>
 810427a:	4603      	mov	r3, r0
 810427c:	2b00      	cmp	r3, #0
 810427e:	d019      	beq.n	81042b4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8104280:	687b      	ldr	r3, [r7, #4]
 8104282:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104286:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104288:	687a      	ldr	r2, [r7, #4]
 810428a:	f8d2 2080 	ldr.w	r2, [r2, #128]	; 0x80
 810428e:	4610      	mov	r0, r2
 8104290:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8104292:	e00f      	b.n	81042b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8104294:	6878      	ldr	r0, [r7, #4]
 8104296:	f7fc fbcb 	bl	8100a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 810429a:	e00b      	b.n	81042b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 810429c:	6878      	ldr	r0, [r7, #4]
 810429e:	f7fc fbc7 	bl	8100a30 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81042a2:	e007      	b.n	81042b4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 81042a4:	6878      	ldr	r0, [r7, #4]
 81042a6:	f7fc fbc3 	bl	8100a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 81042aa:	687b      	ldr	r3, [r7, #4]
 81042ac:	2200      	movs	r2, #0
 81042ae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      }
    }
    return;
 81042b2:	e255      	b.n	8104760 <HAL_UART_IRQHandler+0x760>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81042b4:	bf00      	nop
    return;
 81042b6:	e253      	b.n	8104760 <HAL_UART_IRQHandler+0x760>
 81042b8:	10000001 	.word	0x10000001
 81042bc:	04000120 	.word	0x04000120
 81042c0:	081058f5 	.word	0x081058f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 81042c4:	687b      	ldr	r3, [r7, #4]
 81042c6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 81042c8:	2b01      	cmp	r3, #1
 81042ca:	f040 81e9 	bne.w	81046a0 <HAL_UART_IRQHandler+0x6a0>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 81042ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81042d2:	f003 0310 	and.w	r3, r3, #16
 81042d6:	2b00      	cmp	r3, #0
 81042d8:	f000 81e2 	beq.w	81046a0 <HAL_UART_IRQHandler+0x6a0>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 81042dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81042e0:	f003 0310 	and.w	r3, r3, #16
 81042e4:	2b00      	cmp	r3, #0
 81042e6:	f000 81db 	beq.w	81046a0 <HAL_UART_IRQHandler+0x6a0>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 81042ea:	687b      	ldr	r3, [r7, #4]
 81042ec:	681b      	ldr	r3, [r3, #0]
 81042ee:	2210      	movs	r2, #16
 81042f0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	681b      	ldr	r3, [r3, #0]
 81042f6:	689b      	ldr	r3, [r3, #8]
 81042f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81042fc:	2b40      	cmp	r3, #64	; 0x40
 81042fe:	f040 8151 	bne.w	81045a4 <HAL_UART_IRQHandler+0x5a4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8104302:	687b      	ldr	r3, [r7, #4]
 8104304:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104308:	681b      	ldr	r3, [r3, #0]
 810430a:	4a96      	ldr	r2, [pc, #600]	; (8104564 <HAL_UART_IRQHandler+0x564>)
 810430c:	4293      	cmp	r3, r2
 810430e:	d068      	beq.n	81043e2 <HAL_UART_IRQHandler+0x3e2>
 8104310:	687b      	ldr	r3, [r7, #4]
 8104312:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104316:	681b      	ldr	r3, [r3, #0]
 8104318:	4a93      	ldr	r2, [pc, #588]	; (8104568 <HAL_UART_IRQHandler+0x568>)
 810431a:	4293      	cmp	r3, r2
 810431c:	d061      	beq.n	81043e2 <HAL_UART_IRQHandler+0x3e2>
 810431e:	687b      	ldr	r3, [r7, #4]
 8104320:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104324:	681b      	ldr	r3, [r3, #0]
 8104326:	4a91      	ldr	r2, [pc, #580]	; (810456c <HAL_UART_IRQHandler+0x56c>)
 8104328:	4293      	cmp	r3, r2
 810432a:	d05a      	beq.n	81043e2 <HAL_UART_IRQHandler+0x3e2>
 810432c:	687b      	ldr	r3, [r7, #4]
 810432e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104332:	681b      	ldr	r3, [r3, #0]
 8104334:	4a8e      	ldr	r2, [pc, #568]	; (8104570 <HAL_UART_IRQHandler+0x570>)
 8104336:	4293      	cmp	r3, r2
 8104338:	d053      	beq.n	81043e2 <HAL_UART_IRQHandler+0x3e2>
 810433a:	687b      	ldr	r3, [r7, #4]
 810433c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104340:	681b      	ldr	r3, [r3, #0]
 8104342:	4a8c      	ldr	r2, [pc, #560]	; (8104574 <HAL_UART_IRQHandler+0x574>)
 8104344:	4293      	cmp	r3, r2
 8104346:	d04c      	beq.n	81043e2 <HAL_UART_IRQHandler+0x3e2>
 8104348:	687b      	ldr	r3, [r7, #4]
 810434a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810434e:	681b      	ldr	r3, [r3, #0]
 8104350:	4a89      	ldr	r2, [pc, #548]	; (8104578 <HAL_UART_IRQHandler+0x578>)
 8104352:	4293      	cmp	r3, r2
 8104354:	d045      	beq.n	81043e2 <HAL_UART_IRQHandler+0x3e2>
 8104356:	687b      	ldr	r3, [r7, #4]
 8104358:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810435c:	681b      	ldr	r3, [r3, #0]
 810435e:	4a87      	ldr	r2, [pc, #540]	; (810457c <HAL_UART_IRQHandler+0x57c>)
 8104360:	4293      	cmp	r3, r2
 8104362:	d03e      	beq.n	81043e2 <HAL_UART_IRQHandler+0x3e2>
 8104364:	687b      	ldr	r3, [r7, #4]
 8104366:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810436a:	681b      	ldr	r3, [r3, #0]
 810436c:	4a84      	ldr	r2, [pc, #528]	; (8104580 <HAL_UART_IRQHandler+0x580>)
 810436e:	4293      	cmp	r3, r2
 8104370:	d037      	beq.n	81043e2 <HAL_UART_IRQHandler+0x3e2>
 8104372:	687b      	ldr	r3, [r7, #4]
 8104374:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104378:	681b      	ldr	r3, [r3, #0]
 810437a:	4a82      	ldr	r2, [pc, #520]	; (8104584 <HAL_UART_IRQHandler+0x584>)
 810437c:	4293      	cmp	r3, r2
 810437e:	d030      	beq.n	81043e2 <HAL_UART_IRQHandler+0x3e2>
 8104380:	687b      	ldr	r3, [r7, #4]
 8104382:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104386:	681b      	ldr	r3, [r3, #0]
 8104388:	4a7f      	ldr	r2, [pc, #508]	; (8104588 <HAL_UART_IRQHandler+0x588>)
 810438a:	4293      	cmp	r3, r2
 810438c:	d029      	beq.n	81043e2 <HAL_UART_IRQHandler+0x3e2>
 810438e:	687b      	ldr	r3, [r7, #4]
 8104390:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104394:	681b      	ldr	r3, [r3, #0]
 8104396:	4a7d      	ldr	r2, [pc, #500]	; (810458c <HAL_UART_IRQHandler+0x58c>)
 8104398:	4293      	cmp	r3, r2
 810439a:	d022      	beq.n	81043e2 <HAL_UART_IRQHandler+0x3e2>
 810439c:	687b      	ldr	r3, [r7, #4]
 810439e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81043a2:	681b      	ldr	r3, [r3, #0]
 81043a4:	4a7a      	ldr	r2, [pc, #488]	; (8104590 <HAL_UART_IRQHandler+0x590>)
 81043a6:	4293      	cmp	r3, r2
 81043a8:	d01b      	beq.n	81043e2 <HAL_UART_IRQHandler+0x3e2>
 81043aa:	687b      	ldr	r3, [r7, #4]
 81043ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81043b0:	681b      	ldr	r3, [r3, #0]
 81043b2:	4a78      	ldr	r2, [pc, #480]	; (8104594 <HAL_UART_IRQHandler+0x594>)
 81043b4:	4293      	cmp	r3, r2
 81043b6:	d014      	beq.n	81043e2 <HAL_UART_IRQHandler+0x3e2>
 81043b8:	687b      	ldr	r3, [r7, #4]
 81043ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81043be:	681b      	ldr	r3, [r3, #0]
 81043c0:	4a75      	ldr	r2, [pc, #468]	; (8104598 <HAL_UART_IRQHandler+0x598>)
 81043c2:	4293      	cmp	r3, r2
 81043c4:	d00d      	beq.n	81043e2 <HAL_UART_IRQHandler+0x3e2>
 81043c6:	687b      	ldr	r3, [r7, #4]
 81043c8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81043cc:	681b      	ldr	r3, [r3, #0]
 81043ce:	4a73      	ldr	r2, [pc, #460]	; (810459c <HAL_UART_IRQHandler+0x59c>)
 81043d0:	4293      	cmp	r3, r2
 81043d2:	d006      	beq.n	81043e2 <HAL_UART_IRQHandler+0x3e2>
 81043d4:	687b      	ldr	r3, [r7, #4]
 81043d6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81043da:	681b      	ldr	r3, [r3, #0]
 81043dc:	4a70      	ldr	r2, [pc, #448]	; (81045a0 <HAL_UART_IRQHandler+0x5a0>)
 81043de:	4293      	cmp	r3, r2
 81043e0:	d106      	bne.n	81043f0 <HAL_UART_IRQHandler+0x3f0>
 81043e2:	687b      	ldr	r3, [r7, #4]
 81043e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81043e8:	681b      	ldr	r3, [r3, #0]
 81043ea:	685b      	ldr	r3, [r3, #4]
 81043ec:	b29b      	uxth	r3, r3
 81043ee:	e005      	b.n	81043fc <HAL_UART_IRQHandler+0x3fc>
 81043f0:	687b      	ldr	r3, [r7, #4]
 81043f2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 81043f6:	681b      	ldr	r3, [r3, #0]
 81043f8:	685b      	ldr	r3, [r3, #4]
 81043fa:	b29b      	uxth	r3, r3
 81043fc:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8104400:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8104404:	2b00      	cmp	r3, #0
 8104406:	f000 81ad 	beq.w	8104764 <HAL_UART_IRQHandler+0x764>
          && (nb_remaining_rx_data < huart->RxXferSize))
 810440a:	687b      	ldr	r3, [r7, #4]
 810440c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8104410:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8104414:	429a      	cmp	r2, r3
 8104416:	f080 81a5 	bcs.w	8104764 <HAL_UART_IRQHandler+0x764>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 810441a:	687b      	ldr	r3, [r7, #4]
 810441c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8104420:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8104424:	687b      	ldr	r3, [r7, #4]
 8104426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810442a:	69db      	ldr	r3, [r3, #28]
 810442c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104430:	f000 8087 	beq.w	8104542 <HAL_UART_IRQHandler+0x542>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8104434:	687b      	ldr	r3, [r7, #4]
 8104436:	681b      	ldr	r3, [r3, #0]
 8104438:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810443c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8104440:	e853 3f00 	ldrex	r3, [r3]
 8104444:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8104448:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 810444c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8104450:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8104454:	687b      	ldr	r3, [r7, #4]
 8104456:	681b      	ldr	r3, [r3, #0]
 8104458:	461a      	mov	r2, r3
 810445a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 810445e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8104462:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104466:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 810446a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 810446e:	e841 2300 	strex	r3, r2, [r1]
 8104472:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8104476:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 810447a:	2b00      	cmp	r3, #0
 810447c:	d1da      	bne.n	8104434 <HAL_UART_IRQHandler+0x434>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 810447e:	687b      	ldr	r3, [r7, #4]
 8104480:	681b      	ldr	r3, [r3, #0]
 8104482:	3308      	adds	r3, #8
 8104484:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104486:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8104488:	e853 3f00 	ldrex	r3, [r3]
 810448c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 810448e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8104490:	f023 0301 	bic.w	r3, r3, #1
 8104494:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8104498:	687b      	ldr	r3, [r7, #4]
 810449a:	681b      	ldr	r3, [r3, #0]
 810449c:	3308      	adds	r3, #8
 810449e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 81044a2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 81044a6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81044a8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 81044aa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 81044ae:	e841 2300 	strex	r3, r2, [r1]
 81044b2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 81044b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81044b6:	2b00      	cmp	r3, #0
 81044b8:	d1e1      	bne.n	810447e <HAL_UART_IRQHandler+0x47e>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 81044ba:	687b      	ldr	r3, [r7, #4]
 81044bc:	681b      	ldr	r3, [r3, #0]
 81044be:	3308      	adds	r3, #8
 81044c0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81044c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81044c4:	e853 3f00 	ldrex	r3, [r3]
 81044c8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 81044ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81044cc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 81044d0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 81044d4:	687b      	ldr	r3, [r7, #4]
 81044d6:	681b      	ldr	r3, [r3, #0]
 81044d8:	3308      	adds	r3, #8
 81044da:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 81044de:	66fa      	str	r2, [r7, #108]	; 0x6c
 81044e0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81044e2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 81044e4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 81044e6:	e841 2300 	strex	r3, r2, [r1]
 81044ea:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 81044ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81044ee:	2b00      	cmp	r3, #0
 81044f0:	d1e3      	bne.n	81044ba <HAL_UART_IRQHandler+0x4ba>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 81044f2:	687b      	ldr	r3, [r7, #4]
 81044f4:	2220      	movs	r2, #32
 81044f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81044fa:	687b      	ldr	r3, [r7, #4]
 81044fc:	2200      	movs	r2, #0
 81044fe:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8104500:	687b      	ldr	r3, [r7, #4]
 8104502:	681b      	ldr	r3, [r3, #0]
 8104504:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8104506:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8104508:	e853 3f00 	ldrex	r3, [r3]
 810450c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 810450e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8104510:	f023 0310 	bic.w	r3, r3, #16
 8104514:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8104518:	687b      	ldr	r3, [r7, #4]
 810451a:	681b      	ldr	r3, [r3, #0]
 810451c:	461a      	mov	r2, r3
 810451e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8104522:	65bb      	str	r3, [r7, #88]	; 0x58
 8104524:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104526:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8104528:	6dba      	ldr	r2, [r7, #88]	; 0x58
 810452a:	e841 2300 	strex	r3, r2, [r1]
 810452e:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8104530:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8104532:	2b00      	cmp	r3, #0
 8104534:	d1e4      	bne.n	8104500 <HAL_UART_IRQHandler+0x500>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8104536:	687b      	ldr	r3, [r7, #4]
 8104538:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810453c:	4618      	mov	r0, r3
 810453e:	f7fc fc83 	bl	8100e48 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8104542:	687b      	ldr	r3, [r7, #4]
 8104544:	2202      	movs	r2, #2
 8104546:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8104548:	687b      	ldr	r3, [r7, #4]
 810454a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 810454e:	687b      	ldr	r3, [r7, #4]
 8104550:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8104554:	b29b      	uxth	r3, r3
 8104556:	1ad3      	subs	r3, r2, r3
 8104558:	b29b      	uxth	r3, r3
 810455a:	4619      	mov	r1, r3
 810455c:	6878      	ldr	r0, [r7, #4]
 810455e:	f000 f913 	bl	8104788 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8104562:	e0ff      	b.n	8104764 <HAL_UART_IRQHandler+0x764>
 8104564:	40020010 	.word	0x40020010
 8104568:	40020028 	.word	0x40020028
 810456c:	40020040 	.word	0x40020040
 8104570:	40020058 	.word	0x40020058
 8104574:	40020070 	.word	0x40020070
 8104578:	40020088 	.word	0x40020088
 810457c:	400200a0 	.word	0x400200a0
 8104580:	400200b8 	.word	0x400200b8
 8104584:	40020410 	.word	0x40020410
 8104588:	40020428 	.word	0x40020428
 810458c:	40020440 	.word	0x40020440
 8104590:	40020458 	.word	0x40020458
 8104594:	40020470 	.word	0x40020470
 8104598:	40020488 	.word	0x40020488
 810459c:	400204a0 	.word	0x400204a0
 81045a0:	400204b8 	.word	0x400204b8
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 81045a4:	687b      	ldr	r3, [r7, #4]
 81045a6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 81045aa:	687b      	ldr	r3, [r7, #4]
 81045ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81045b0:	b29b      	uxth	r3, r3
 81045b2:	1ad3      	subs	r3, r2, r3
 81045b4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 81045b8:	687b      	ldr	r3, [r7, #4]
 81045ba:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81045be:	b29b      	uxth	r3, r3
 81045c0:	2b00      	cmp	r3, #0
 81045c2:	f000 80d1 	beq.w	8104768 <HAL_UART_IRQHandler+0x768>
          && (nb_rx_data > 0U))
 81045c6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 81045ca:	2b00      	cmp	r3, #0
 81045cc:	f000 80cc 	beq.w	8104768 <HAL_UART_IRQHandler+0x768>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81045d0:	687b      	ldr	r3, [r7, #4]
 81045d2:	681b      	ldr	r3, [r3, #0]
 81045d4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81045d8:	e853 3f00 	ldrex	r3, [r3]
 81045dc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 81045de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81045e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 81045e4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 81045e8:	687b      	ldr	r3, [r7, #4]
 81045ea:	681b      	ldr	r3, [r3, #0]
 81045ec:	461a      	mov	r2, r3
 81045ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 81045f2:	647b      	str	r3, [r7, #68]	; 0x44
 81045f4:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81045f6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 81045f8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81045fa:	e841 2300 	strex	r3, r2, [r1]
 81045fe:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8104600:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8104602:	2b00      	cmp	r3, #0
 8104604:	d1e4      	bne.n	81045d0 <HAL_UART_IRQHandler+0x5d0>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8104606:	687b      	ldr	r3, [r7, #4]
 8104608:	681b      	ldr	r3, [r3, #0]
 810460a:	3308      	adds	r3, #8
 810460c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810460e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8104610:	e853 3f00 	ldrex	r3, [r3]
 8104614:	623b      	str	r3, [r7, #32]
   return(result);
 8104616:	6a3b      	ldr	r3, [r7, #32]
 8104618:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 810461c:	f023 0301 	bic.w	r3, r3, #1
 8104620:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8104624:	687b      	ldr	r3, [r7, #4]
 8104626:	681b      	ldr	r3, [r3, #0]
 8104628:	3308      	adds	r3, #8
 810462a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 810462e:	633a      	str	r2, [r7, #48]	; 0x30
 8104630:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8104632:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8104634:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8104636:	e841 2300 	strex	r3, r2, [r1]
 810463a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 810463c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810463e:	2b00      	cmp	r3, #0
 8104640:	d1e1      	bne.n	8104606 <HAL_UART_IRQHandler+0x606>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8104642:	687b      	ldr	r3, [r7, #4]
 8104644:	2220      	movs	r2, #32
 8104646:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810464a:	687b      	ldr	r3, [r7, #4]
 810464c:	2200      	movs	r2, #0
 810464e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8104650:	687b      	ldr	r3, [r7, #4]
 8104652:	2200      	movs	r2, #0
 8104654:	675a      	str	r2, [r3, #116]	; 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8104656:	687b      	ldr	r3, [r7, #4]
 8104658:	681b      	ldr	r3, [r3, #0]
 810465a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810465c:	693b      	ldr	r3, [r7, #16]
 810465e:	e853 3f00 	ldrex	r3, [r3]
 8104662:	60fb      	str	r3, [r7, #12]
   return(result);
 8104664:	68fb      	ldr	r3, [r7, #12]
 8104666:	f023 0310 	bic.w	r3, r3, #16
 810466a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 810466e:	687b      	ldr	r3, [r7, #4]
 8104670:	681b      	ldr	r3, [r3, #0]
 8104672:	461a      	mov	r2, r3
 8104674:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8104678:	61fb      	str	r3, [r7, #28]
 810467a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810467c:	69b9      	ldr	r1, [r7, #24]
 810467e:	69fa      	ldr	r2, [r7, #28]
 8104680:	e841 2300 	strex	r3, r2, [r1]
 8104684:	617b      	str	r3, [r7, #20]
   return(result);
 8104686:	697b      	ldr	r3, [r7, #20]
 8104688:	2b00      	cmp	r3, #0
 810468a:	d1e4      	bne.n	8104656 <HAL_UART_IRQHandler+0x656>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 810468c:	687b      	ldr	r3, [r7, #4]
 810468e:	2202      	movs	r2, #2
 8104690:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8104692:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8104696:	4619      	mov	r1, r3
 8104698:	6878      	ldr	r0, [r7, #4]
 810469a:	f000 f875 	bl	8104788 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 810469e:	e063      	b.n	8104768 <HAL_UART_IRQHandler+0x768>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 81046a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81046a4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81046a8:	2b00      	cmp	r3, #0
 81046aa:	d00e      	beq.n	81046ca <HAL_UART_IRQHandler+0x6ca>
 81046ac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 81046b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81046b4:	2b00      	cmp	r3, #0
 81046b6:	d008      	beq.n	81046ca <HAL_UART_IRQHandler+0x6ca>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 81046b8:	687b      	ldr	r3, [r7, #4]
 81046ba:	681b      	ldr	r3, [r3, #0]
 81046bc:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 81046c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 81046c2:	6878      	ldr	r0, [r7, #4]
 81046c4:	f001 fe74 	bl	81063b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 81046c8:	e051      	b.n	810476e <HAL_UART_IRQHandler+0x76e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 81046ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 81046ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81046d2:	2b00      	cmp	r3, #0
 81046d4:	d014      	beq.n	8104700 <HAL_UART_IRQHandler+0x700>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 81046d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 81046da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81046de:	2b00      	cmp	r3, #0
 81046e0:	d105      	bne.n	81046ee <HAL_UART_IRQHandler+0x6ee>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 81046e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 81046e6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 81046ea:	2b00      	cmp	r3, #0
 81046ec:	d008      	beq.n	8104700 <HAL_UART_IRQHandler+0x700>
  {
    if (huart->TxISR != NULL)
 81046ee:	687b      	ldr	r3, [r7, #4]
 81046f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81046f2:	2b00      	cmp	r3, #0
 81046f4:	d03a      	beq.n	810476c <HAL_UART_IRQHandler+0x76c>
    {
      huart->TxISR(huart);
 81046f6:	687b      	ldr	r3, [r7, #4]
 81046f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 81046fa:	6878      	ldr	r0, [r7, #4]
 81046fc:	4798      	blx	r3
    }
    return;
 81046fe:	e035      	b.n	810476c <HAL_UART_IRQHandler+0x76c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8104700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104704:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104708:	2b00      	cmp	r3, #0
 810470a:	d009      	beq.n	8104720 <HAL_UART_IRQHandler+0x720>
 810470c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104710:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8104714:	2b00      	cmp	r3, #0
 8104716:	d003      	beq.n	8104720 <HAL_UART_IRQHandler+0x720>
  {
    UART_EndTransmit_IT(huart);
 8104718:	6878      	ldr	r0, [r7, #4]
 810471a:	f001 f901 	bl	8105920 <UART_EndTransmit_IT>
    return;
 810471e:	e026      	b.n	810476e <HAL_UART_IRQHandler+0x76e>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8104720:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104724:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104728:	2b00      	cmp	r3, #0
 810472a:	d009      	beq.n	8104740 <HAL_UART_IRQHandler+0x740>
 810472c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104730:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8104734:	2b00      	cmp	r3, #0
 8104736:	d003      	beq.n	8104740 <HAL_UART_IRQHandler+0x740>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8104738:	6878      	ldr	r0, [r7, #4]
 810473a:	f001 fe4d 	bl	81063d8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810473e:	e016      	b.n	810476e <HAL_UART_IRQHandler+0x76e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8104740:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8104744:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104748:	2b00      	cmp	r3, #0
 810474a:	d010      	beq.n	810476e <HAL_UART_IRQHandler+0x76e>
 810474c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8104750:	2b00      	cmp	r3, #0
 8104752:	da0c      	bge.n	810476e <HAL_UART_IRQHandler+0x76e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8104754:	6878      	ldr	r0, [r7, #4]
 8104756:	f001 fe35 	bl	81063c4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 810475a:	e008      	b.n	810476e <HAL_UART_IRQHandler+0x76e>
      return;
 810475c:	bf00      	nop
 810475e:	e006      	b.n	810476e <HAL_UART_IRQHandler+0x76e>
    return;
 8104760:	bf00      	nop
 8104762:	e004      	b.n	810476e <HAL_UART_IRQHandler+0x76e>
      return;
 8104764:	bf00      	nop
 8104766:	e002      	b.n	810476e <HAL_UART_IRQHandler+0x76e>
      return;
 8104768:	bf00      	nop
 810476a:	e000      	b.n	810476e <HAL_UART_IRQHandler+0x76e>
    return;
 810476c:	bf00      	nop
  }
}
 810476e:	37e8      	adds	r7, #232	; 0xe8
 8104770:	46bd      	mov	sp, r7
 8104772:	bd80      	pop	{r7, pc}

08104774 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8104774:	b480      	push	{r7}
 8104776:	b083      	sub	sp, #12
 8104778:	af00      	add	r7, sp, #0
 810477a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 810477c:	bf00      	nop
 810477e:	370c      	adds	r7, #12
 8104780:	46bd      	mov	sp, r7
 8104782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8104786:	4770      	bx	lr

08104788 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8104788:	b480      	push	{r7}
 810478a:	b083      	sub	sp, #12
 810478c:	af00      	add	r7, sp, #0
 810478e:	6078      	str	r0, [r7, #4]
 8104790:	460b      	mov	r3, r1
 8104792:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8104794:	bf00      	nop
 8104796:	370c      	adds	r7, #12
 8104798:	46bd      	mov	sp, r7
 810479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810479e:	4770      	bx	lr

081047a0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 81047a0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 81047a4:	b092      	sub	sp, #72	; 0x48
 81047a6:	af00      	add	r7, sp, #0
 81047a8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 81047aa:	2300      	movs	r3, #0
 81047ac:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 81047b0:	697b      	ldr	r3, [r7, #20]
 81047b2:	689a      	ldr	r2, [r3, #8]
 81047b4:	697b      	ldr	r3, [r7, #20]
 81047b6:	691b      	ldr	r3, [r3, #16]
 81047b8:	431a      	orrs	r2, r3
 81047ba:	697b      	ldr	r3, [r7, #20]
 81047bc:	695b      	ldr	r3, [r3, #20]
 81047be:	431a      	orrs	r2, r3
 81047c0:	697b      	ldr	r3, [r7, #20]
 81047c2:	69db      	ldr	r3, [r3, #28]
 81047c4:	4313      	orrs	r3, r2
 81047c6:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 81047c8:	697b      	ldr	r3, [r7, #20]
 81047ca:	681b      	ldr	r3, [r3, #0]
 81047cc:	681a      	ldr	r2, [r3, #0]
 81047ce:	4bbd      	ldr	r3, [pc, #756]	; (8104ac4 <UART_SetConfig+0x324>)
 81047d0:	4013      	ands	r3, r2
 81047d2:	697a      	ldr	r2, [r7, #20]
 81047d4:	6812      	ldr	r2, [r2, #0]
 81047d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 81047d8:	430b      	orrs	r3, r1
 81047da:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 81047dc:	697b      	ldr	r3, [r7, #20]
 81047de:	681b      	ldr	r3, [r3, #0]
 81047e0:	685b      	ldr	r3, [r3, #4]
 81047e2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 81047e6:	697b      	ldr	r3, [r7, #20]
 81047e8:	68da      	ldr	r2, [r3, #12]
 81047ea:	697b      	ldr	r3, [r7, #20]
 81047ec:	681b      	ldr	r3, [r3, #0]
 81047ee:	430a      	orrs	r2, r1
 81047f0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 81047f2:	697b      	ldr	r3, [r7, #20]
 81047f4:	699b      	ldr	r3, [r3, #24]
 81047f6:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 81047f8:	697b      	ldr	r3, [r7, #20]
 81047fa:	681b      	ldr	r3, [r3, #0]
 81047fc:	4ab2      	ldr	r2, [pc, #712]	; (8104ac8 <UART_SetConfig+0x328>)
 81047fe:	4293      	cmp	r3, r2
 8104800:	d004      	beq.n	810480c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8104802:	697b      	ldr	r3, [r7, #20]
 8104804:	6a1b      	ldr	r3, [r3, #32]
 8104806:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8104808:	4313      	orrs	r3, r2
 810480a:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 810480c:	697b      	ldr	r3, [r7, #20]
 810480e:	681b      	ldr	r3, [r3, #0]
 8104810:	689b      	ldr	r3, [r3, #8]
 8104812:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8104816:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 810481a:	697a      	ldr	r2, [r7, #20]
 810481c:	6812      	ldr	r2, [r2, #0]
 810481e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8104820:	430b      	orrs	r3, r1
 8104822:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8104824:	697b      	ldr	r3, [r7, #20]
 8104826:	681b      	ldr	r3, [r3, #0]
 8104828:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810482a:	f023 010f 	bic.w	r1, r3, #15
 810482e:	697b      	ldr	r3, [r7, #20]
 8104830:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8104832:	697b      	ldr	r3, [r7, #20]
 8104834:	681b      	ldr	r3, [r3, #0]
 8104836:	430a      	orrs	r2, r1
 8104838:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 810483a:	697b      	ldr	r3, [r7, #20]
 810483c:	681b      	ldr	r3, [r3, #0]
 810483e:	4aa3      	ldr	r2, [pc, #652]	; (8104acc <UART_SetConfig+0x32c>)
 8104840:	4293      	cmp	r3, r2
 8104842:	d177      	bne.n	8104934 <UART_SetConfig+0x194>
 8104844:	4ba2      	ldr	r3, [pc, #648]	; (8104ad0 <UART_SetConfig+0x330>)
 8104846:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104848:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810484c:	2b28      	cmp	r3, #40	; 0x28
 810484e:	d86d      	bhi.n	810492c <UART_SetConfig+0x18c>
 8104850:	a201      	add	r2, pc, #4	; (adr r2, 8104858 <UART_SetConfig+0xb8>)
 8104852:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104856:	bf00      	nop
 8104858:	081048fd 	.word	0x081048fd
 810485c:	0810492d 	.word	0x0810492d
 8104860:	0810492d 	.word	0x0810492d
 8104864:	0810492d 	.word	0x0810492d
 8104868:	0810492d 	.word	0x0810492d
 810486c:	0810492d 	.word	0x0810492d
 8104870:	0810492d 	.word	0x0810492d
 8104874:	0810492d 	.word	0x0810492d
 8104878:	08104905 	.word	0x08104905
 810487c:	0810492d 	.word	0x0810492d
 8104880:	0810492d 	.word	0x0810492d
 8104884:	0810492d 	.word	0x0810492d
 8104888:	0810492d 	.word	0x0810492d
 810488c:	0810492d 	.word	0x0810492d
 8104890:	0810492d 	.word	0x0810492d
 8104894:	0810492d 	.word	0x0810492d
 8104898:	0810490d 	.word	0x0810490d
 810489c:	0810492d 	.word	0x0810492d
 81048a0:	0810492d 	.word	0x0810492d
 81048a4:	0810492d 	.word	0x0810492d
 81048a8:	0810492d 	.word	0x0810492d
 81048ac:	0810492d 	.word	0x0810492d
 81048b0:	0810492d 	.word	0x0810492d
 81048b4:	0810492d 	.word	0x0810492d
 81048b8:	08104915 	.word	0x08104915
 81048bc:	0810492d 	.word	0x0810492d
 81048c0:	0810492d 	.word	0x0810492d
 81048c4:	0810492d 	.word	0x0810492d
 81048c8:	0810492d 	.word	0x0810492d
 81048cc:	0810492d 	.word	0x0810492d
 81048d0:	0810492d 	.word	0x0810492d
 81048d4:	0810492d 	.word	0x0810492d
 81048d8:	0810491d 	.word	0x0810491d
 81048dc:	0810492d 	.word	0x0810492d
 81048e0:	0810492d 	.word	0x0810492d
 81048e4:	0810492d 	.word	0x0810492d
 81048e8:	0810492d 	.word	0x0810492d
 81048ec:	0810492d 	.word	0x0810492d
 81048f0:	0810492d 	.word	0x0810492d
 81048f4:	0810492d 	.word	0x0810492d
 81048f8:	08104925 	.word	0x08104925
 81048fc:	2301      	movs	r3, #1
 81048fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104902:	e220      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104904:	2304      	movs	r3, #4
 8104906:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810490a:	e21c      	b.n	8104d46 <UART_SetConfig+0x5a6>
 810490c:	2308      	movs	r3, #8
 810490e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104912:	e218      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104914:	2310      	movs	r3, #16
 8104916:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810491a:	e214      	b.n	8104d46 <UART_SetConfig+0x5a6>
 810491c:	2320      	movs	r3, #32
 810491e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104922:	e210      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104924:	2340      	movs	r3, #64	; 0x40
 8104926:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810492a:	e20c      	b.n	8104d46 <UART_SetConfig+0x5a6>
 810492c:	2380      	movs	r3, #128	; 0x80
 810492e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104932:	e208      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104934:	697b      	ldr	r3, [r7, #20]
 8104936:	681b      	ldr	r3, [r3, #0]
 8104938:	4a66      	ldr	r2, [pc, #408]	; (8104ad4 <UART_SetConfig+0x334>)
 810493a:	4293      	cmp	r3, r2
 810493c:	d130      	bne.n	81049a0 <UART_SetConfig+0x200>
 810493e:	4b64      	ldr	r3, [pc, #400]	; (8104ad0 <UART_SetConfig+0x330>)
 8104940:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104942:	f003 0307 	and.w	r3, r3, #7
 8104946:	2b05      	cmp	r3, #5
 8104948:	d826      	bhi.n	8104998 <UART_SetConfig+0x1f8>
 810494a:	a201      	add	r2, pc, #4	; (adr r2, 8104950 <UART_SetConfig+0x1b0>)
 810494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104950:	08104969 	.word	0x08104969
 8104954:	08104971 	.word	0x08104971
 8104958:	08104979 	.word	0x08104979
 810495c:	08104981 	.word	0x08104981
 8104960:	08104989 	.word	0x08104989
 8104964:	08104991 	.word	0x08104991
 8104968:	2300      	movs	r3, #0
 810496a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810496e:	e1ea      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104970:	2304      	movs	r3, #4
 8104972:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104976:	e1e6      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104978:	2308      	movs	r3, #8
 810497a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810497e:	e1e2      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104980:	2310      	movs	r3, #16
 8104982:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104986:	e1de      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104988:	2320      	movs	r3, #32
 810498a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810498e:	e1da      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104990:	2340      	movs	r3, #64	; 0x40
 8104992:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104996:	e1d6      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104998:	2380      	movs	r3, #128	; 0x80
 810499a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 810499e:	e1d2      	b.n	8104d46 <UART_SetConfig+0x5a6>
 81049a0:	697b      	ldr	r3, [r7, #20]
 81049a2:	681b      	ldr	r3, [r3, #0]
 81049a4:	4a4c      	ldr	r2, [pc, #304]	; (8104ad8 <UART_SetConfig+0x338>)
 81049a6:	4293      	cmp	r3, r2
 81049a8:	d130      	bne.n	8104a0c <UART_SetConfig+0x26c>
 81049aa:	4b49      	ldr	r3, [pc, #292]	; (8104ad0 <UART_SetConfig+0x330>)
 81049ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81049ae:	f003 0307 	and.w	r3, r3, #7
 81049b2:	2b05      	cmp	r3, #5
 81049b4:	d826      	bhi.n	8104a04 <UART_SetConfig+0x264>
 81049b6:	a201      	add	r2, pc, #4	; (adr r2, 81049bc <UART_SetConfig+0x21c>)
 81049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81049bc:	081049d5 	.word	0x081049d5
 81049c0:	081049dd 	.word	0x081049dd
 81049c4:	081049e5 	.word	0x081049e5
 81049c8:	081049ed 	.word	0x081049ed
 81049cc:	081049f5 	.word	0x081049f5
 81049d0:	081049fd 	.word	0x081049fd
 81049d4:	2300      	movs	r3, #0
 81049d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81049da:	e1b4      	b.n	8104d46 <UART_SetConfig+0x5a6>
 81049dc:	2304      	movs	r3, #4
 81049de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81049e2:	e1b0      	b.n	8104d46 <UART_SetConfig+0x5a6>
 81049e4:	2308      	movs	r3, #8
 81049e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81049ea:	e1ac      	b.n	8104d46 <UART_SetConfig+0x5a6>
 81049ec:	2310      	movs	r3, #16
 81049ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81049f2:	e1a8      	b.n	8104d46 <UART_SetConfig+0x5a6>
 81049f4:	2320      	movs	r3, #32
 81049f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 81049fa:	e1a4      	b.n	8104d46 <UART_SetConfig+0x5a6>
 81049fc:	2340      	movs	r3, #64	; 0x40
 81049fe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104a02:	e1a0      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104a04:	2380      	movs	r3, #128	; 0x80
 8104a06:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104a0a:	e19c      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104a0c:	697b      	ldr	r3, [r7, #20]
 8104a0e:	681b      	ldr	r3, [r3, #0]
 8104a10:	4a32      	ldr	r2, [pc, #200]	; (8104adc <UART_SetConfig+0x33c>)
 8104a12:	4293      	cmp	r3, r2
 8104a14:	d130      	bne.n	8104a78 <UART_SetConfig+0x2d8>
 8104a16:	4b2e      	ldr	r3, [pc, #184]	; (8104ad0 <UART_SetConfig+0x330>)
 8104a18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104a1a:	f003 0307 	and.w	r3, r3, #7
 8104a1e:	2b05      	cmp	r3, #5
 8104a20:	d826      	bhi.n	8104a70 <UART_SetConfig+0x2d0>
 8104a22:	a201      	add	r2, pc, #4	; (adr r2, 8104a28 <UART_SetConfig+0x288>)
 8104a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104a28:	08104a41 	.word	0x08104a41
 8104a2c:	08104a49 	.word	0x08104a49
 8104a30:	08104a51 	.word	0x08104a51
 8104a34:	08104a59 	.word	0x08104a59
 8104a38:	08104a61 	.word	0x08104a61
 8104a3c:	08104a69 	.word	0x08104a69
 8104a40:	2300      	movs	r3, #0
 8104a42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104a46:	e17e      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104a48:	2304      	movs	r3, #4
 8104a4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104a4e:	e17a      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104a50:	2308      	movs	r3, #8
 8104a52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104a56:	e176      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104a58:	2310      	movs	r3, #16
 8104a5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104a5e:	e172      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104a60:	2320      	movs	r3, #32
 8104a62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104a66:	e16e      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104a68:	2340      	movs	r3, #64	; 0x40
 8104a6a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104a6e:	e16a      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104a70:	2380      	movs	r3, #128	; 0x80
 8104a72:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104a76:	e166      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104a78:	697b      	ldr	r3, [r7, #20]
 8104a7a:	681b      	ldr	r3, [r3, #0]
 8104a7c:	4a18      	ldr	r2, [pc, #96]	; (8104ae0 <UART_SetConfig+0x340>)
 8104a7e:	4293      	cmp	r3, r2
 8104a80:	d140      	bne.n	8104b04 <UART_SetConfig+0x364>
 8104a82:	4b13      	ldr	r3, [pc, #76]	; (8104ad0 <UART_SetConfig+0x330>)
 8104a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104a86:	f003 0307 	and.w	r3, r3, #7
 8104a8a:	2b05      	cmp	r3, #5
 8104a8c:	d836      	bhi.n	8104afc <UART_SetConfig+0x35c>
 8104a8e:	a201      	add	r2, pc, #4	; (adr r2, 8104a94 <UART_SetConfig+0x2f4>)
 8104a90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104a94:	08104aad 	.word	0x08104aad
 8104a98:	08104ab5 	.word	0x08104ab5
 8104a9c:	08104abd 	.word	0x08104abd
 8104aa0:	08104ae5 	.word	0x08104ae5
 8104aa4:	08104aed 	.word	0x08104aed
 8104aa8:	08104af5 	.word	0x08104af5
 8104aac:	2300      	movs	r3, #0
 8104aae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104ab2:	e148      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104ab4:	2304      	movs	r3, #4
 8104ab6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104aba:	e144      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104abc:	2308      	movs	r3, #8
 8104abe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104ac2:	e140      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104ac4:	cfff69f3 	.word	0xcfff69f3
 8104ac8:	58000c00 	.word	0x58000c00
 8104acc:	40011000 	.word	0x40011000
 8104ad0:	58024400 	.word	0x58024400
 8104ad4:	40004400 	.word	0x40004400
 8104ad8:	40004800 	.word	0x40004800
 8104adc:	40004c00 	.word	0x40004c00
 8104ae0:	40005000 	.word	0x40005000
 8104ae4:	2310      	movs	r3, #16
 8104ae6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104aea:	e12c      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104aec:	2320      	movs	r3, #32
 8104aee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104af2:	e128      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104af4:	2340      	movs	r3, #64	; 0x40
 8104af6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104afa:	e124      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104afc:	2380      	movs	r3, #128	; 0x80
 8104afe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104b02:	e120      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104b04:	697b      	ldr	r3, [r7, #20]
 8104b06:	681b      	ldr	r3, [r3, #0]
 8104b08:	4acb      	ldr	r2, [pc, #812]	; (8104e38 <UART_SetConfig+0x698>)
 8104b0a:	4293      	cmp	r3, r2
 8104b0c:	d176      	bne.n	8104bfc <UART_SetConfig+0x45c>
 8104b0e:	4bcb      	ldr	r3, [pc, #812]	; (8104e3c <UART_SetConfig+0x69c>)
 8104b10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104b12:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8104b16:	2b28      	cmp	r3, #40	; 0x28
 8104b18:	d86c      	bhi.n	8104bf4 <UART_SetConfig+0x454>
 8104b1a:	a201      	add	r2, pc, #4	; (adr r2, 8104b20 <UART_SetConfig+0x380>)
 8104b1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104b20:	08104bc5 	.word	0x08104bc5
 8104b24:	08104bf5 	.word	0x08104bf5
 8104b28:	08104bf5 	.word	0x08104bf5
 8104b2c:	08104bf5 	.word	0x08104bf5
 8104b30:	08104bf5 	.word	0x08104bf5
 8104b34:	08104bf5 	.word	0x08104bf5
 8104b38:	08104bf5 	.word	0x08104bf5
 8104b3c:	08104bf5 	.word	0x08104bf5
 8104b40:	08104bcd 	.word	0x08104bcd
 8104b44:	08104bf5 	.word	0x08104bf5
 8104b48:	08104bf5 	.word	0x08104bf5
 8104b4c:	08104bf5 	.word	0x08104bf5
 8104b50:	08104bf5 	.word	0x08104bf5
 8104b54:	08104bf5 	.word	0x08104bf5
 8104b58:	08104bf5 	.word	0x08104bf5
 8104b5c:	08104bf5 	.word	0x08104bf5
 8104b60:	08104bd5 	.word	0x08104bd5
 8104b64:	08104bf5 	.word	0x08104bf5
 8104b68:	08104bf5 	.word	0x08104bf5
 8104b6c:	08104bf5 	.word	0x08104bf5
 8104b70:	08104bf5 	.word	0x08104bf5
 8104b74:	08104bf5 	.word	0x08104bf5
 8104b78:	08104bf5 	.word	0x08104bf5
 8104b7c:	08104bf5 	.word	0x08104bf5
 8104b80:	08104bdd 	.word	0x08104bdd
 8104b84:	08104bf5 	.word	0x08104bf5
 8104b88:	08104bf5 	.word	0x08104bf5
 8104b8c:	08104bf5 	.word	0x08104bf5
 8104b90:	08104bf5 	.word	0x08104bf5
 8104b94:	08104bf5 	.word	0x08104bf5
 8104b98:	08104bf5 	.word	0x08104bf5
 8104b9c:	08104bf5 	.word	0x08104bf5
 8104ba0:	08104be5 	.word	0x08104be5
 8104ba4:	08104bf5 	.word	0x08104bf5
 8104ba8:	08104bf5 	.word	0x08104bf5
 8104bac:	08104bf5 	.word	0x08104bf5
 8104bb0:	08104bf5 	.word	0x08104bf5
 8104bb4:	08104bf5 	.word	0x08104bf5
 8104bb8:	08104bf5 	.word	0x08104bf5
 8104bbc:	08104bf5 	.word	0x08104bf5
 8104bc0:	08104bed 	.word	0x08104bed
 8104bc4:	2301      	movs	r3, #1
 8104bc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104bca:	e0bc      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104bcc:	2304      	movs	r3, #4
 8104bce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104bd2:	e0b8      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104bd4:	2308      	movs	r3, #8
 8104bd6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104bda:	e0b4      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104bdc:	2310      	movs	r3, #16
 8104bde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104be2:	e0b0      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104be4:	2320      	movs	r3, #32
 8104be6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104bea:	e0ac      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104bec:	2340      	movs	r3, #64	; 0x40
 8104bee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104bf2:	e0a8      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104bf4:	2380      	movs	r3, #128	; 0x80
 8104bf6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104bfa:	e0a4      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104bfc:	697b      	ldr	r3, [r7, #20]
 8104bfe:	681b      	ldr	r3, [r3, #0]
 8104c00:	4a8f      	ldr	r2, [pc, #572]	; (8104e40 <UART_SetConfig+0x6a0>)
 8104c02:	4293      	cmp	r3, r2
 8104c04:	d130      	bne.n	8104c68 <UART_SetConfig+0x4c8>
 8104c06:	4b8d      	ldr	r3, [pc, #564]	; (8104e3c <UART_SetConfig+0x69c>)
 8104c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104c0a:	f003 0307 	and.w	r3, r3, #7
 8104c0e:	2b05      	cmp	r3, #5
 8104c10:	d826      	bhi.n	8104c60 <UART_SetConfig+0x4c0>
 8104c12:	a201      	add	r2, pc, #4	; (adr r2, 8104c18 <UART_SetConfig+0x478>)
 8104c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c18:	08104c31 	.word	0x08104c31
 8104c1c:	08104c39 	.word	0x08104c39
 8104c20:	08104c41 	.word	0x08104c41
 8104c24:	08104c49 	.word	0x08104c49
 8104c28:	08104c51 	.word	0x08104c51
 8104c2c:	08104c59 	.word	0x08104c59
 8104c30:	2300      	movs	r3, #0
 8104c32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c36:	e086      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104c38:	2304      	movs	r3, #4
 8104c3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c3e:	e082      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104c40:	2308      	movs	r3, #8
 8104c42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c46:	e07e      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104c48:	2310      	movs	r3, #16
 8104c4a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c4e:	e07a      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104c50:	2320      	movs	r3, #32
 8104c52:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c56:	e076      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104c58:	2340      	movs	r3, #64	; 0x40
 8104c5a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c5e:	e072      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104c60:	2380      	movs	r3, #128	; 0x80
 8104c62:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104c66:	e06e      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104c68:	697b      	ldr	r3, [r7, #20]
 8104c6a:	681b      	ldr	r3, [r3, #0]
 8104c6c:	4a75      	ldr	r2, [pc, #468]	; (8104e44 <UART_SetConfig+0x6a4>)
 8104c6e:	4293      	cmp	r3, r2
 8104c70:	d130      	bne.n	8104cd4 <UART_SetConfig+0x534>
 8104c72:	4b72      	ldr	r3, [pc, #456]	; (8104e3c <UART_SetConfig+0x69c>)
 8104c74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104c76:	f003 0307 	and.w	r3, r3, #7
 8104c7a:	2b05      	cmp	r3, #5
 8104c7c:	d826      	bhi.n	8104ccc <UART_SetConfig+0x52c>
 8104c7e:	a201      	add	r2, pc, #4	; (adr r2, 8104c84 <UART_SetConfig+0x4e4>)
 8104c80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104c84:	08104c9d 	.word	0x08104c9d
 8104c88:	08104ca5 	.word	0x08104ca5
 8104c8c:	08104cad 	.word	0x08104cad
 8104c90:	08104cb5 	.word	0x08104cb5
 8104c94:	08104cbd 	.word	0x08104cbd
 8104c98:	08104cc5 	.word	0x08104cc5
 8104c9c:	2300      	movs	r3, #0
 8104c9e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104ca2:	e050      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104ca4:	2304      	movs	r3, #4
 8104ca6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104caa:	e04c      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104cac:	2308      	movs	r3, #8
 8104cae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104cb2:	e048      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104cb4:	2310      	movs	r3, #16
 8104cb6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104cba:	e044      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104cbc:	2320      	movs	r3, #32
 8104cbe:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104cc2:	e040      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104cc4:	2340      	movs	r3, #64	; 0x40
 8104cc6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104cca:	e03c      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104ccc:	2380      	movs	r3, #128	; 0x80
 8104cce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104cd2:	e038      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104cd4:	697b      	ldr	r3, [r7, #20]
 8104cd6:	681b      	ldr	r3, [r3, #0]
 8104cd8:	4a5b      	ldr	r2, [pc, #364]	; (8104e48 <UART_SetConfig+0x6a8>)
 8104cda:	4293      	cmp	r3, r2
 8104cdc:	d130      	bne.n	8104d40 <UART_SetConfig+0x5a0>
 8104cde:	4b57      	ldr	r3, [pc, #348]	; (8104e3c <UART_SetConfig+0x69c>)
 8104ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104ce2:	f003 0307 	and.w	r3, r3, #7
 8104ce6:	2b05      	cmp	r3, #5
 8104ce8:	d826      	bhi.n	8104d38 <UART_SetConfig+0x598>
 8104cea:	a201      	add	r2, pc, #4	; (adr r2, 8104cf0 <UART_SetConfig+0x550>)
 8104cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104cf0:	08104d09 	.word	0x08104d09
 8104cf4:	08104d11 	.word	0x08104d11
 8104cf8:	08104d19 	.word	0x08104d19
 8104cfc:	08104d21 	.word	0x08104d21
 8104d00:	08104d29 	.word	0x08104d29
 8104d04:	08104d31 	.word	0x08104d31
 8104d08:	2302      	movs	r3, #2
 8104d0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d0e:	e01a      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104d10:	2304      	movs	r3, #4
 8104d12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d16:	e016      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104d18:	2308      	movs	r3, #8
 8104d1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d1e:	e012      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104d20:	2310      	movs	r3, #16
 8104d22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d26:	e00e      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104d28:	2320      	movs	r3, #32
 8104d2a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d2e:	e00a      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104d30:	2340      	movs	r3, #64	; 0x40
 8104d32:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d36:	e006      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104d38:	2380      	movs	r3, #128	; 0x80
 8104d3a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8104d3e:	e002      	b.n	8104d46 <UART_SetConfig+0x5a6>
 8104d40:	2380      	movs	r3, #128	; 0x80
 8104d42:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8104d46:	697b      	ldr	r3, [r7, #20]
 8104d48:	681b      	ldr	r3, [r3, #0]
 8104d4a:	4a3f      	ldr	r2, [pc, #252]	; (8104e48 <UART_SetConfig+0x6a8>)
 8104d4c:	4293      	cmp	r3, r2
 8104d4e:	f040 80f8 	bne.w	8104f42 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8104d52:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8104d56:	2b20      	cmp	r3, #32
 8104d58:	dc46      	bgt.n	8104de8 <UART_SetConfig+0x648>
 8104d5a:	2b02      	cmp	r3, #2
 8104d5c:	f2c0 8082 	blt.w	8104e64 <UART_SetConfig+0x6c4>
 8104d60:	3b02      	subs	r3, #2
 8104d62:	2b1e      	cmp	r3, #30
 8104d64:	d87e      	bhi.n	8104e64 <UART_SetConfig+0x6c4>
 8104d66:	a201      	add	r2, pc, #4	; (adr r2, 8104d6c <UART_SetConfig+0x5cc>)
 8104d68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104d6c:	08104def 	.word	0x08104def
 8104d70:	08104e65 	.word	0x08104e65
 8104d74:	08104df7 	.word	0x08104df7
 8104d78:	08104e65 	.word	0x08104e65
 8104d7c:	08104e65 	.word	0x08104e65
 8104d80:	08104e65 	.word	0x08104e65
 8104d84:	08104e07 	.word	0x08104e07
 8104d88:	08104e65 	.word	0x08104e65
 8104d8c:	08104e65 	.word	0x08104e65
 8104d90:	08104e65 	.word	0x08104e65
 8104d94:	08104e65 	.word	0x08104e65
 8104d98:	08104e65 	.word	0x08104e65
 8104d9c:	08104e65 	.word	0x08104e65
 8104da0:	08104e65 	.word	0x08104e65
 8104da4:	08104e17 	.word	0x08104e17
 8104da8:	08104e65 	.word	0x08104e65
 8104dac:	08104e65 	.word	0x08104e65
 8104db0:	08104e65 	.word	0x08104e65
 8104db4:	08104e65 	.word	0x08104e65
 8104db8:	08104e65 	.word	0x08104e65
 8104dbc:	08104e65 	.word	0x08104e65
 8104dc0:	08104e65 	.word	0x08104e65
 8104dc4:	08104e65 	.word	0x08104e65
 8104dc8:	08104e65 	.word	0x08104e65
 8104dcc:	08104e65 	.word	0x08104e65
 8104dd0:	08104e65 	.word	0x08104e65
 8104dd4:	08104e65 	.word	0x08104e65
 8104dd8:	08104e65 	.word	0x08104e65
 8104ddc:	08104e65 	.word	0x08104e65
 8104de0:	08104e65 	.word	0x08104e65
 8104de4:	08104e57 	.word	0x08104e57
 8104de8:	2b40      	cmp	r3, #64	; 0x40
 8104dea:	d037      	beq.n	8104e5c <UART_SetConfig+0x6bc>
 8104dec:	e03a      	b.n	8104e64 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8104dee:	f7fe fbbb 	bl	8103568 <HAL_RCCEx_GetD3PCLK1Freq>
 8104df2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8104df4:	e03c      	b.n	8104e70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104df6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104dfa:	4618      	mov	r0, r3
 8104dfc:	f7fe fbca 	bl	8103594 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8104e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104e02:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104e04:	e034      	b.n	8104e70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104e06:	f107 0318 	add.w	r3, r7, #24
 8104e0a:	4618      	mov	r0, r3
 8104e0c:	f7fe fd16 	bl	810383c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8104e10:	69fb      	ldr	r3, [r7, #28]
 8104e12:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104e14:	e02c      	b.n	8104e70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8104e16:	4b09      	ldr	r3, [pc, #36]	; (8104e3c <UART_SetConfig+0x69c>)
 8104e18:	681b      	ldr	r3, [r3, #0]
 8104e1a:	f003 0320 	and.w	r3, r3, #32
 8104e1e:	2b00      	cmp	r3, #0
 8104e20:	d016      	beq.n	8104e50 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8104e22:	4b06      	ldr	r3, [pc, #24]	; (8104e3c <UART_SetConfig+0x69c>)
 8104e24:	681b      	ldr	r3, [r3, #0]
 8104e26:	08db      	lsrs	r3, r3, #3
 8104e28:	f003 0303 	and.w	r3, r3, #3
 8104e2c:	4a07      	ldr	r2, [pc, #28]	; (8104e4c <UART_SetConfig+0x6ac>)
 8104e2e:	fa22 f303 	lsr.w	r3, r2, r3
 8104e32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8104e34:	e01c      	b.n	8104e70 <UART_SetConfig+0x6d0>
 8104e36:	bf00      	nop
 8104e38:	40011400 	.word	0x40011400
 8104e3c:	58024400 	.word	0x58024400
 8104e40:	40007800 	.word	0x40007800
 8104e44:	40007c00 	.word	0x40007c00
 8104e48:	58000c00 	.word	0x58000c00
 8104e4c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8104e50:	4b9d      	ldr	r3, [pc, #628]	; (81050c8 <UART_SetConfig+0x928>)
 8104e52:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104e54:	e00c      	b.n	8104e70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8104e56:	4b9d      	ldr	r3, [pc, #628]	; (81050cc <UART_SetConfig+0x92c>)
 8104e58:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104e5a:	e009      	b.n	8104e70 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8104e5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8104e60:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8104e62:	e005      	b.n	8104e70 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8104e64:	2300      	movs	r3, #0
 8104e66:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8104e68:	2301      	movs	r3, #1
 8104e6a:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8104e6e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8104e70:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8104e72:	2b00      	cmp	r3, #0
 8104e74:	f000 81de 	beq.w	8105234 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8104e78:	697b      	ldr	r3, [r7, #20]
 8104e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104e7c:	4a94      	ldr	r2, [pc, #592]	; (81050d0 <UART_SetConfig+0x930>)
 8104e7e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8104e82:	461a      	mov	r2, r3
 8104e84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8104e86:	fbb3 f3f2 	udiv	r3, r3, r2
 8104e8a:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8104e8c:	697b      	ldr	r3, [r7, #20]
 8104e8e:	685a      	ldr	r2, [r3, #4]
 8104e90:	4613      	mov	r3, r2
 8104e92:	005b      	lsls	r3, r3, #1
 8104e94:	4413      	add	r3, r2
 8104e96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8104e98:	429a      	cmp	r2, r3
 8104e9a:	d305      	bcc.n	8104ea8 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8104e9c:	697b      	ldr	r3, [r7, #20]
 8104e9e:	685b      	ldr	r3, [r3, #4]
 8104ea0:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8104ea2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8104ea4:	429a      	cmp	r2, r3
 8104ea6:	d903      	bls.n	8104eb0 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8104ea8:	2301      	movs	r3, #1
 8104eaa:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8104eae:	e1c1      	b.n	8105234 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8104eb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8104eb2:	2200      	movs	r2, #0
 8104eb4:	60bb      	str	r3, [r7, #8]
 8104eb6:	60fa      	str	r2, [r7, #12]
 8104eb8:	697b      	ldr	r3, [r7, #20]
 8104eba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8104ebc:	4a84      	ldr	r2, [pc, #528]	; (81050d0 <UART_SetConfig+0x930>)
 8104ebe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8104ec2:	b29b      	uxth	r3, r3
 8104ec4:	2200      	movs	r2, #0
 8104ec6:	603b      	str	r3, [r7, #0]
 8104ec8:	607a      	str	r2, [r7, #4]
 8104eca:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104ece:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8104ed2:	f7fb fa09 	bl	81002e8 <__aeabi_uldivmod>
 8104ed6:	4602      	mov	r2, r0
 8104ed8:	460b      	mov	r3, r1
 8104eda:	4610      	mov	r0, r2
 8104edc:	4619      	mov	r1, r3
 8104ede:	f04f 0200 	mov.w	r2, #0
 8104ee2:	f04f 0300 	mov.w	r3, #0
 8104ee6:	020b      	lsls	r3, r1, #8
 8104ee8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8104eec:	0202      	lsls	r2, r0, #8
 8104eee:	6979      	ldr	r1, [r7, #20]
 8104ef0:	6849      	ldr	r1, [r1, #4]
 8104ef2:	0849      	lsrs	r1, r1, #1
 8104ef4:	2000      	movs	r0, #0
 8104ef6:	460c      	mov	r4, r1
 8104ef8:	4605      	mov	r5, r0
 8104efa:	eb12 0804 	adds.w	r8, r2, r4
 8104efe:	eb43 0905 	adc.w	r9, r3, r5
 8104f02:	697b      	ldr	r3, [r7, #20]
 8104f04:	685b      	ldr	r3, [r3, #4]
 8104f06:	2200      	movs	r2, #0
 8104f08:	469a      	mov	sl, r3
 8104f0a:	4693      	mov	fp, r2
 8104f0c:	4652      	mov	r2, sl
 8104f0e:	465b      	mov	r3, fp
 8104f10:	4640      	mov	r0, r8
 8104f12:	4649      	mov	r1, r9
 8104f14:	f7fb f9e8 	bl	81002e8 <__aeabi_uldivmod>
 8104f18:	4602      	mov	r2, r0
 8104f1a:	460b      	mov	r3, r1
 8104f1c:	4613      	mov	r3, r2
 8104f1e:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8104f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f22:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104f26:	d308      	bcc.n	8104f3a <UART_SetConfig+0x79a>
 8104f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8104f2a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8104f2e:	d204      	bcs.n	8104f3a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8104f30:	697b      	ldr	r3, [r7, #20]
 8104f32:	681b      	ldr	r3, [r3, #0]
 8104f34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8104f36:	60da      	str	r2, [r3, #12]
 8104f38:	e17c      	b.n	8105234 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8104f3a:	2301      	movs	r3, #1
 8104f3c:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8104f40:	e178      	b.n	8105234 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8104f42:	697b      	ldr	r3, [r7, #20]
 8104f44:	69db      	ldr	r3, [r3, #28]
 8104f46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104f4a:	f040 80c5 	bne.w	81050d8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8104f4e:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 8104f52:	2b20      	cmp	r3, #32
 8104f54:	dc48      	bgt.n	8104fe8 <UART_SetConfig+0x848>
 8104f56:	2b00      	cmp	r3, #0
 8104f58:	db7b      	blt.n	8105052 <UART_SetConfig+0x8b2>
 8104f5a:	2b20      	cmp	r3, #32
 8104f5c:	d879      	bhi.n	8105052 <UART_SetConfig+0x8b2>
 8104f5e:	a201      	add	r2, pc, #4	; (adr r2, 8104f64 <UART_SetConfig+0x7c4>)
 8104f60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104f64:	08104fef 	.word	0x08104fef
 8104f68:	08104ff7 	.word	0x08104ff7
 8104f6c:	08105053 	.word	0x08105053
 8104f70:	08105053 	.word	0x08105053
 8104f74:	08104fff 	.word	0x08104fff
 8104f78:	08105053 	.word	0x08105053
 8104f7c:	08105053 	.word	0x08105053
 8104f80:	08105053 	.word	0x08105053
 8104f84:	0810500f 	.word	0x0810500f
 8104f88:	08105053 	.word	0x08105053
 8104f8c:	08105053 	.word	0x08105053
 8104f90:	08105053 	.word	0x08105053
 8104f94:	08105053 	.word	0x08105053
 8104f98:	08105053 	.word	0x08105053
 8104f9c:	08105053 	.word	0x08105053
 8104fa0:	08105053 	.word	0x08105053
 8104fa4:	0810501f 	.word	0x0810501f
 8104fa8:	08105053 	.word	0x08105053
 8104fac:	08105053 	.word	0x08105053
 8104fb0:	08105053 	.word	0x08105053
 8104fb4:	08105053 	.word	0x08105053
 8104fb8:	08105053 	.word	0x08105053
 8104fbc:	08105053 	.word	0x08105053
 8104fc0:	08105053 	.word	0x08105053
 8104fc4:	08105053 	.word	0x08105053
 8104fc8:	08105053 	.word	0x08105053
 8104fcc:	08105053 	.word	0x08105053
 8104fd0:	08105053 	.word	0x08105053
 8104fd4:	08105053 	.word	0x08105053
 8104fd8:	08105053 	.word	0x08105053
 8104fdc:	08105053 	.word	0x08105053
 8104fe0:	08105053 	.word	0x08105053
 8104fe4:	08105045 	.word	0x08105045
 8104fe8:	2b40      	cmp	r3, #64	; 0x40
 8104fea:	d02e      	beq.n	810504a <UART_SetConfig+0x8aa>
 8104fec:	e031      	b.n	8105052 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8104fee:	f7fd f885 	bl	81020fc <HAL_RCC_GetPCLK1Freq>
 8104ff2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8104ff4:	e033      	b.n	810505e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8104ff6:	f7fd f897 	bl	8102128 <HAL_RCC_GetPCLK2Freq>
 8104ffa:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8104ffc:	e02f      	b.n	810505e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104ffe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8105002:	4618      	mov	r0, r3
 8105004:	f7fe fac6 	bl	8103594 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810500a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810500c:	e027      	b.n	810505e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810500e:	f107 0318 	add.w	r3, r7, #24
 8105012:	4618      	mov	r0, r3
 8105014:	f7fe fc12 	bl	810383c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8105018:	69fb      	ldr	r3, [r7, #28]
 810501a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 810501c:	e01f      	b.n	810505e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 810501e:	4b2d      	ldr	r3, [pc, #180]	; (81050d4 <UART_SetConfig+0x934>)
 8105020:	681b      	ldr	r3, [r3, #0]
 8105022:	f003 0320 	and.w	r3, r3, #32
 8105026:	2b00      	cmp	r3, #0
 8105028:	d009      	beq.n	810503e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 810502a:	4b2a      	ldr	r3, [pc, #168]	; (81050d4 <UART_SetConfig+0x934>)
 810502c:	681b      	ldr	r3, [r3, #0]
 810502e:	08db      	lsrs	r3, r3, #3
 8105030:	f003 0303 	and.w	r3, r3, #3
 8105034:	4a24      	ldr	r2, [pc, #144]	; (81050c8 <UART_SetConfig+0x928>)
 8105036:	fa22 f303 	lsr.w	r3, r2, r3
 810503a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 810503c:	e00f      	b.n	810505e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 810503e:	4b22      	ldr	r3, [pc, #136]	; (81050c8 <UART_SetConfig+0x928>)
 8105040:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105042:	e00c      	b.n	810505e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8105044:	4b21      	ldr	r3, [pc, #132]	; (81050cc <UART_SetConfig+0x92c>)
 8105046:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105048:	e009      	b.n	810505e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 810504a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 810504e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105050:	e005      	b.n	810505e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8105052:	2300      	movs	r3, #0
 8105054:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8105056:	2301      	movs	r3, #1
 8105058:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 810505c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 810505e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105060:	2b00      	cmp	r3, #0
 8105062:	f000 80e7 	beq.w	8105234 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8105066:	697b      	ldr	r3, [r7, #20]
 8105068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810506a:	4a19      	ldr	r2, [pc, #100]	; (81050d0 <UART_SetConfig+0x930>)
 810506c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8105070:	461a      	mov	r2, r3
 8105072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105074:	fbb3 f3f2 	udiv	r3, r3, r2
 8105078:	005a      	lsls	r2, r3, #1
 810507a:	697b      	ldr	r3, [r7, #20]
 810507c:	685b      	ldr	r3, [r3, #4]
 810507e:	085b      	lsrs	r3, r3, #1
 8105080:	441a      	add	r2, r3
 8105082:	697b      	ldr	r3, [r7, #20]
 8105084:	685b      	ldr	r3, [r3, #4]
 8105086:	fbb2 f3f3 	udiv	r3, r2, r3
 810508a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 810508c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810508e:	2b0f      	cmp	r3, #15
 8105090:	d916      	bls.n	81050c0 <UART_SetConfig+0x920>
 8105092:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105094:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105098:	d212      	bcs.n	81050c0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 810509a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810509c:	b29b      	uxth	r3, r3
 810509e:	f023 030f 	bic.w	r3, r3, #15
 81050a2:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 81050a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050a6:	085b      	lsrs	r3, r3, #1
 81050a8:	b29b      	uxth	r3, r3
 81050aa:	f003 0307 	and.w	r3, r3, #7
 81050ae:	b29a      	uxth	r2, r3
 81050b0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 81050b2:	4313      	orrs	r3, r2
 81050b4:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 81050b6:	697b      	ldr	r3, [r7, #20]
 81050b8:	681b      	ldr	r3, [r3, #0]
 81050ba:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 81050bc:	60da      	str	r2, [r3, #12]
 81050be:	e0b9      	b.n	8105234 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 81050c0:	2301      	movs	r3, #1
 81050c2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 81050c6:	e0b5      	b.n	8105234 <UART_SetConfig+0xa94>
 81050c8:	03d09000 	.word	0x03d09000
 81050cc:	003d0900 	.word	0x003d0900
 81050d0:	081066b4 	.word	0x081066b4
 81050d4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 81050d8:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 81050dc:	2b20      	cmp	r3, #32
 81050de:	dc49      	bgt.n	8105174 <UART_SetConfig+0x9d4>
 81050e0:	2b00      	cmp	r3, #0
 81050e2:	db7c      	blt.n	81051de <UART_SetConfig+0xa3e>
 81050e4:	2b20      	cmp	r3, #32
 81050e6:	d87a      	bhi.n	81051de <UART_SetConfig+0xa3e>
 81050e8:	a201      	add	r2, pc, #4	; (adr r2, 81050f0 <UART_SetConfig+0x950>)
 81050ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81050ee:	bf00      	nop
 81050f0:	0810517b 	.word	0x0810517b
 81050f4:	08105183 	.word	0x08105183
 81050f8:	081051df 	.word	0x081051df
 81050fc:	081051df 	.word	0x081051df
 8105100:	0810518b 	.word	0x0810518b
 8105104:	081051df 	.word	0x081051df
 8105108:	081051df 	.word	0x081051df
 810510c:	081051df 	.word	0x081051df
 8105110:	0810519b 	.word	0x0810519b
 8105114:	081051df 	.word	0x081051df
 8105118:	081051df 	.word	0x081051df
 810511c:	081051df 	.word	0x081051df
 8105120:	081051df 	.word	0x081051df
 8105124:	081051df 	.word	0x081051df
 8105128:	081051df 	.word	0x081051df
 810512c:	081051df 	.word	0x081051df
 8105130:	081051ab 	.word	0x081051ab
 8105134:	081051df 	.word	0x081051df
 8105138:	081051df 	.word	0x081051df
 810513c:	081051df 	.word	0x081051df
 8105140:	081051df 	.word	0x081051df
 8105144:	081051df 	.word	0x081051df
 8105148:	081051df 	.word	0x081051df
 810514c:	081051df 	.word	0x081051df
 8105150:	081051df 	.word	0x081051df
 8105154:	081051df 	.word	0x081051df
 8105158:	081051df 	.word	0x081051df
 810515c:	081051df 	.word	0x081051df
 8105160:	081051df 	.word	0x081051df
 8105164:	081051df 	.word	0x081051df
 8105168:	081051df 	.word	0x081051df
 810516c:	081051df 	.word	0x081051df
 8105170:	081051d1 	.word	0x081051d1
 8105174:	2b40      	cmp	r3, #64	; 0x40
 8105176:	d02e      	beq.n	81051d6 <UART_SetConfig+0xa36>
 8105178:	e031      	b.n	81051de <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 810517a:	f7fc ffbf 	bl	81020fc <HAL_RCC_GetPCLK1Freq>
 810517e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105180:	e033      	b.n	81051ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8105182:	f7fc ffd1 	bl	8102128 <HAL_RCC_GetPCLK2Freq>
 8105186:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8105188:	e02f      	b.n	81051ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 810518a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810518e:	4618      	mov	r0, r3
 8105190:	f7fe fa00 	bl	8103594 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8105194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105196:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8105198:	e027      	b.n	81051ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810519a:	f107 0318 	add.w	r3, r7, #24
 810519e:	4618      	mov	r0, r3
 81051a0:	f7fe fb4c 	bl	810383c <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 81051a4:	69fb      	ldr	r3, [r7, #28]
 81051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81051a8:	e01f      	b.n	81051ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81051aa:	4b2d      	ldr	r3, [pc, #180]	; (8105260 <UART_SetConfig+0xac0>)
 81051ac:	681b      	ldr	r3, [r3, #0]
 81051ae:	f003 0320 	and.w	r3, r3, #32
 81051b2:	2b00      	cmp	r3, #0
 81051b4:	d009      	beq.n	81051ca <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 81051b6:	4b2a      	ldr	r3, [pc, #168]	; (8105260 <UART_SetConfig+0xac0>)
 81051b8:	681b      	ldr	r3, [r3, #0]
 81051ba:	08db      	lsrs	r3, r3, #3
 81051bc:	f003 0303 	and.w	r3, r3, #3
 81051c0:	4a28      	ldr	r2, [pc, #160]	; (8105264 <UART_SetConfig+0xac4>)
 81051c2:	fa22 f303 	lsr.w	r3, r2, r3
 81051c6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 81051c8:	e00f      	b.n	81051ea <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 81051ca:	4b26      	ldr	r3, [pc, #152]	; (8105264 <UART_SetConfig+0xac4>)
 81051cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81051ce:	e00c      	b.n	81051ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 81051d0:	4b25      	ldr	r3, [pc, #148]	; (8105268 <UART_SetConfig+0xac8>)
 81051d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81051d4:	e009      	b.n	81051ea <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 81051d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81051da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 81051dc:	e005      	b.n	81051ea <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 81051de:	2300      	movs	r3, #0
 81051e0:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 81051e2:	2301      	movs	r3, #1
 81051e4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 81051e8:	bf00      	nop
    }

    if (pclk != 0U)
 81051ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81051ec:	2b00      	cmp	r3, #0
 81051ee:	d021      	beq.n	8105234 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 81051f0:	697b      	ldr	r3, [r7, #20]
 81051f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81051f4:	4a1d      	ldr	r2, [pc, #116]	; (810526c <UART_SetConfig+0xacc>)
 81051f6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 81051fa:	461a      	mov	r2, r3
 81051fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81051fe:	fbb3 f2f2 	udiv	r2, r3, r2
 8105202:	697b      	ldr	r3, [r7, #20]
 8105204:	685b      	ldr	r3, [r3, #4]
 8105206:	085b      	lsrs	r3, r3, #1
 8105208:	441a      	add	r2, r3
 810520a:	697b      	ldr	r3, [r7, #20]
 810520c:	685b      	ldr	r3, [r3, #4]
 810520e:	fbb2 f3f3 	udiv	r3, r2, r3
 8105212:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8105214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105216:	2b0f      	cmp	r3, #15
 8105218:	d909      	bls.n	810522e <UART_SetConfig+0xa8e>
 810521a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810521c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8105220:	d205      	bcs.n	810522e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8105222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105224:	b29a      	uxth	r2, r3
 8105226:	697b      	ldr	r3, [r7, #20]
 8105228:	681b      	ldr	r3, [r3, #0]
 810522a:	60da      	str	r2, [r3, #12]
 810522c:	e002      	b.n	8105234 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 810522e:	2301      	movs	r3, #1
 8105230:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8105234:	697b      	ldr	r3, [r7, #20]
 8105236:	2201      	movs	r2, #1
 8105238:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 810523c:	697b      	ldr	r3, [r7, #20]
 810523e:	2201      	movs	r2, #1
 8105240:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8105244:	697b      	ldr	r3, [r7, #20]
 8105246:	2200      	movs	r2, #0
 8105248:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 810524a:	697b      	ldr	r3, [r7, #20]
 810524c:	2200      	movs	r2, #0
 810524e:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8105250:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 8105254:	4618      	mov	r0, r3
 8105256:	3748      	adds	r7, #72	; 0x48
 8105258:	46bd      	mov	sp, r7
 810525a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 810525e:	bf00      	nop
 8105260:	58024400 	.word	0x58024400
 8105264:	03d09000 	.word	0x03d09000
 8105268:	003d0900 	.word	0x003d0900
 810526c:	081066b4 	.word	0x081066b4

08105270 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8105270:	b480      	push	{r7}
 8105272:	b083      	sub	sp, #12
 8105274:	af00      	add	r7, sp, #0
 8105276:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8105278:	687b      	ldr	r3, [r7, #4]
 810527a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810527c:	f003 0308 	and.w	r3, r3, #8
 8105280:	2b00      	cmp	r3, #0
 8105282:	d00a      	beq.n	810529a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8105284:	687b      	ldr	r3, [r7, #4]
 8105286:	681b      	ldr	r3, [r3, #0]
 8105288:	685b      	ldr	r3, [r3, #4]
 810528a:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 810528e:	687b      	ldr	r3, [r7, #4]
 8105290:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8105292:	687b      	ldr	r3, [r7, #4]
 8105294:	681b      	ldr	r3, [r3, #0]
 8105296:	430a      	orrs	r2, r1
 8105298:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 810529a:	687b      	ldr	r3, [r7, #4]
 810529c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810529e:	f003 0301 	and.w	r3, r3, #1
 81052a2:	2b00      	cmp	r3, #0
 81052a4:	d00a      	beq.n	81052bc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 81052a6:	687b      	ldr	r3, [r7, #4]
 81052a8:	681b      	ldr	r3, [r3, #0]
 81052aa:	685b      	ldr	r3, [r3, #4]
 81052ac:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 81052b0:	687b      	ldr	r3, [r7, #4]
 81052b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 81052b4:	687b      	ldr	r3, [r7, #4]
 81052b6:	681b      	ldr	r3, [r3, #0]
 81052b8:	430a      	orrs	r2, r1
 81052ba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 81052bc:	687b      	ldr	r3, [r7, #4]
 81052be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81052c0:	f003 0302 	and.w	r3, r3, #2
 81052c4:	2b00      	cmp	r3, #0
 81052c6:	d00a      	beq.n	81052de <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 81052c8:	687b      	ldr	r3, [r7, #4]
 81052ca:	681b      	ldr	r3, [r3, #0]
 81052cc:	685b      	ldr	r3, [r3, #4]
 81052ce:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 81052d2:	687b      	ldr	r3, [r7, #4]
 81052d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 81052d6:	687b      	ldr	r3, [r7, #4]
 81052d8:	681b      	ldr	r3, [r3, #0]
 81052da:	430a      	orrs	r2, r1
 81052dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 81052de:	687b      	ldr	r3, [r7, #4]
 81052e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81052e2:	f003 0304 	and.w	r3, r3, #4
 81052e6:	2b00      	cmp	r3, #0
 81052e8:	d00a      	beq.n	8105300 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 81052ea:	687b      	ldr	r3, [r7, #4]
 81052ec:	681b      	ldr	r3, [r3, #0]
 81052ee:	685b      	ldr	r3, [r3, #4]
 81052f0:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 81052f4:	687b      	ldr	r3, [r7, #4]
 81052f6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 81052f8:	687b      	ldr	r3, [r7, #4]
 81052fa:	681b      	ldr	r3, [r3, #0]
 81052fc:	430a      	orrs	r2, r1
 81052fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8105300:	687b      	ldr	r3, [r7, #4]
 8105302:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105304:	f003 0310 	and.w	r3, r3, #16
 8105308:	2b00      	cmp	r3, #0
 810530a:	d00a      	beq.n	8105322 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 810530c:	687b      	ldr	r3, [r7, #4]
 810530e:	681b      	ldr	r3, [r3, #0]
 8105310:	689b      	ldr	r3, [r3, #8]
 8105312:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8105316:	687b      	ldr	r3, [r7, #4]
 8105318:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 810531a:	687b      	ldr	r3, [r7, #4]
 810531c:	681b      	ldr	r3, [r3, #0]
 810531e:	430a      	orrs	r2, r1
 8105320:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8105322:	687b      	ldr	r3, [r7, #4]
 8105324:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105326:	f003 0320 	and.w	r3, r3, #32
 810532a:	2b00      	cmp	r3, #0
 810532c:	d00a      	beq.n	8105344 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 810532e:	687b      	ldr	r3, [r7, #4]
 8105330:	681b      	ldr	r3, [r3, #0]
 8105332:	689b      	ldr	r3, [r3, #8]
 8105334:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8105338:	687b      	ldr	r3, [r7, #4]
 810533a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 810533c:	687b      	ldr	r3, [r7, #4]
 810533e:	681b      	ldr	r3, [r3, #0]
 8105340:	430a      	orrs	r2, r1
 8105342:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8105344:	687b      	ldr	r3, [r7, #4]
 8105346:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105348:	f003 0340 	and.w	r3, r3, #64	; 0x40
 810534c:	2b00      	cmp	r3, #0
 810534e:	d01a      	beq.n	8105386 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8105350:	687b      	ldr	r3, [r7, #4]
 8105352:	681b      	ldr	r3, [r3, #0]
 8105354:	685b      	ldr	r3, [r3, #4]
 8105356:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 810535a:	687b      	ldr	r3, [r7, #4]
 810535c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 810535e:	687b      	ldr	r3, [r7, #4]
 8105360:	681b      	ldr	r3, [r3, #0]
 8105362:	430a      	orrs	r2, r1
 8105364:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8105366:	687b      	ldr	r3, [r7, #4]
 8105368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810536a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810536e:	d10a      	bne.n	8105386 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8105370:	687b      	ldr	r3, [r7, #4]
 8105372:	681b      	ldr	r3, [r3, #0]
 8105374:	685b      	ldr	r3, [r3, #4]
 8105376:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 810537a:	687b      	ldr	r3, [r7, #4]
 810537c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 810537e:	687b      	ldr	r3, [r7, #4]
 8105380:	681b      	ldr	r3, [r3, #0]
 8105382:	430a      	orrs	r2, r1
 8105384:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8105386:	687b      	ldr	r3, [r7, #4]
 8105388:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810538a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 810538e:	2b00      	cmp	r3, #0
 8105390:	d00a      	beq.n	81053a8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8105392:	687b      	ldr	r3, [r7, #4]
 8105394:	681b      	ldr	r3, [r3, #0]
 8105396:	685b      	ldr	r3, [r3, #4]
 8105398:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 810539c:	687b      	ldr	r3, [r7, #4]
 810539e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 81053a0:	687b      	ldr	r3, [r7, #4]
 81053a2:	681b      	ldr	r3, [r3, #0]
 81053a4:	430a      	orrs	r2, r1
 81053a6:	605a      	str	r2, [r3, #4]
  }
}
 81053a8:	bf00      	nop
 81053aa:	370c      	adds	r7, #12
 81053ac:	46bd      	mov	sp, r7
 81053ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 81053b2:	4770      	bx	lr

081053b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 81053b4:	b580      	push	{r7, lr}
 81053b6:	b098      	sub	sp, #96	; 0x60
 81053b8:	af02      	add	r7, sp, #8
 81053ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 81053bc:	687b      	ldr	r3, [r7, #4]
 81053be:	2200      	movs	r2, #0
 81053c0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 81053c4:	f7fb fc10 	bl	8100be8 <HAL_GetTick>
 81053c8:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 81053ca:	687b      	ldr	r3, [r7, #4]
 81053cc:	681b      	ldr	r3, [r3, #0]
 81053ce:	681b      	ldr	r3, [r3, #0]
 81053d0:	f003 0308 	and.w	r3, r3, #8
 81053d4:	2b08      	cmp	r3, #8
 81053d6:	d12f      	bne.n	8105438 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 81053d8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 81053dc:	9300      	str	r3, [sp, #0]
 81053de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81053e0:	2200      	movs	r2, #0
 81053e2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 81053e6:	6878      	ldr	r0, [r7, #4]
 81053e8:	f000 f88e 	bl	8105508 <UART_WaitOnFlagUntilTimeout>
 81053ec:	4603      	mov	r3, r0
 81053ee:	2b00      	cmp	r3, #0
 81053f0:	d022      	beq.n	8105438 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 81053f2:	687b      	ldr	r3, [r7, #4]
 81053f4:	681b      	ldr	r3, [r3, #0]
 81053f6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81053f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81053fa:	e853 3f00 	ldrex	r3, [r3]
 81053fe:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8105400:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8105406:	653b      	str	r3, [r7, #80]	; 0x50
 8105408:	687b      	ldr	r3, [r7, #4]
 810540a:	681b      	ldr	r3, [r3, #0]
 810540c:	461a      	mov	r2, r3
 810540e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8105410:	647b      	str	r3, [r7, #68]	; 0x44
 8105412:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105414:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8105416:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8105418:	e841 2300 	strex	r3, r2, [r1]
 810541c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 810541e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105420:	2b00      	cmp	r3, #0
 8105422:	d1e6      	bne.n	81053f2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8105424:	687b      	ldr	r3, [r7, #4]
 8105426:	2220      	movs	r2, #32
 8105428:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 810542c:	687b      	ldr	r3, [r7, #4]
 810542e:	2200      	movs	r2, #0
 8105430:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8105434:	2303      	movs	r3, #3
 8105436:	e063      	b.n	8105500 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8105438:	687b      	ldr	r3, [r7, #4]
 810543a:	681b      	ldr	r3, [r3, #0]
 810543c:	681b      	ldr	r3, [r3, #0]
 810543e:	f003 0304 	and.w	r3, r3, #4
 8105442:	2b04      	cmp	r3, #4
 8105444:	d149      	bne.n	81054da <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8105446:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 810544a:	9300      	str	r3, [sp, #0]
 810544c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 810544e:	2200      	movs	r2, #0
 8105450:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8105454:	6878      	ldr	r0, [r7, #4]
 8105456:	f000 f857 	bl	8105508 <UART_WaitOnFlagUntilTimeout>
 810545a:	4603      	mov	r3, r0
 810545c:	2b00      	cmp	r3, #0
 810545e:	d03c      	beq.n	81054da <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8105460:	687b      	ldr	r3, [r7, #4]
 8105462:	681b      	ldr	r3, [r3, #0]
 8105464:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105466:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105468:	e853 3f00 	ldrex	r3, [r3]
 810546c:	623b      	str	r3, [r7, #32]
   return(result);
 810546e:	6a3b      	ldr	r3, [r7, #32]
 8105470:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8105474:	64fb      	str	r3, [r7, #76]	; 0x4c
 8105476:	687b      	ldr	r3, [r7, #4]
 8105478:	681b      	ldr	r3, [r3, #0]
 810547a:	461a      	mov	r2, r3
 810547c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810547e:	633b      	str	r3, [r7, #48]	; 0x30
 8105480:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105482:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8105484:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105486:	e841 2300 	strex	r3, r2, [r1]
 810548a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 810548c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810548e:	2b00      	cmp	r3, #0
 8105490:	d1e6      	bne.n	8105460 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105492:	687b      	ldr	r3, [r7, #4]
 8105494:	681b      	ldr	r3, [r3, #0]
 8105496:	3308      	adds	r3, #8
 8105498:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810549a:	693b      	ldr	r3, [r7, #16]
 810549c:	e853 3f00 	ldrex	r3, [r3]
 81054a0:	60fb      	str	r3, [r7, #12]
   return(result);
 81054a2:	68fb      	ldr	r3, [r7, #12]
 81054a4:	f023 0301 	bic.w	r3, r3, #1
 81054a8:	64bb      	str	r3, [r7, #72]	; 0x48
 81054aa:	687b      	ldr	r3, [r7, #4]
 81054ac:	681b      	ldr	r3, [r3, #0]
 81054ae:	3308      	adds	r3, #8
 81054b0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 81054b2:	61fa      	str	r2, [r7, #28]
 81054b4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81054b6:	69b9      	ldr	r1, [r7, #24]
 81054b8:	69fa      	ldr	r2, [r7, #28]
 81054ba:	e841 2300 	strex	r3, r2, [r1]
 81054be:	617b      	str	r3, [r7, #20]
   return(result);
 81054c0:	697b      	ldr	r3, [r7, #20]
 81054c2:	2b00      	cmp	r3, #0
 81054c4:	d1e5      	bne.n	8105492 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 81054c6:	687b      	ldr	r3, [r7, #4]
 81054c8:	2220      	movs	r2, #32
 81054ca:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 81054ce:	687b      	ldr	r3, [r7, #4]
 81054d0:	2200      	movs	r2, #0
 81054d2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 81054d6:	2303      	movs	r3, #3
 81054d8:	e012      	b.n	8105500 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 81054da:	687b      	ldr	r3, [r7, #4]
 81054dc:	2220      	movs	r2, #32
 81054de:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 81054e2:	687b      	ldr	r3, [r7, #4]
 81054e4:	2220      	movs	r2, #32
 81054e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81054ea:	687b      	ldr	r3, [r7, #4]
 81054ec:	2200      	movs	r2, #0
 81054ee:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 81054f0:	687b      	ldr	r3, [r7, #4]
 81054f2:	2200      	movs	r2, #0
 81054f4:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 81054f6:	687b      	ldr	r3, [r7, #4]
 81054f8:	2200      	movs	r2, #0
 81054fa:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 81054fe:	2300      	movs	r3, #0
}
 8105500:	4618      	mov	r0, r3
 8105502:	3758      	adds	r7, #88	; 0x58
 8105504:	46bd      	mov	sp, r7
 8105506:	bd80      	pop	{r7, pc}

08105508 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8105508:	b580      	push	{r7, lr}
 810550a:	b084      	sub	sp, #16
 810550c:	af00      	add	r7, sp, #0
 810550e:	60f8      	str	r0, [r7, #12]
 8105510:	60b9      	str	r1, [r7, #8]
 8105512:	603b      	str	r3, [r7, #0]
 8105514:	4613      	mov	r3, r2
 8105516:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8105518:	e04f      	b.n	81055ba <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 810551a:	69bb      	ldr	r3, [r7, #24]
 810551c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8105520:	d04b      	beq.n	81055ba <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8105522:	f7fb fb61 	bl	8100be8 <HAL_GetTick>
 8105526:	4602      	mov	r2, r0
 8105528:	683b      	ldr	r3, [r7, #0]
 810552a:	1ad3      	subs	r3, r2, r3
 810552c:	69ba      	ldr	r2, [r7, #24]
 810552e:	429a      	cmp	r2, r3
 8105530:	d302      	bcc.n	8105538 <UART_WaitOnFlagUntilTimeout+0x30>
 8105532:	69bb      	ldr	r3, [r7, #24]
 8105534:	2b00      	cmp	r3, #0
 8105536:	d101      	bne.n	810553c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8105538:	2303      	movs	r3, #3
 810553a:	e04e      	b.n	81055da <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 810553c:	68fb      	ldr	r3, [r7, #12]
 810553e:	681b      	ldr	r3, [r3, #0]
 8105540:	681b      	ldr	r3, [r3, #0]
 8105542:	f003 0304 	and.w	r3, r3, #4
 8105546:	2b00      	cmp	r3, #0
 8105548:	d037      	beq.n	81055ba <UART_WaitOnFlagUntilTimeout+0xb2>
 810554a:	68bb      	ldr	r3, [r7, #8]
 810554c:	2b80      	cmp	r3, #128	; 0x80
 810554e:	d034      	beq.n	81055ba <UART_WaitOnFlagUntilTimeout+0xb2>
 8105550:	68bb      	ldr	r3, [r7, #8]
 8105552:	2b40      	cmp	r3, #64	; 0x40
 8105554:	d031      	beq.n	81055ba <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8105556:	68fb      	ldr	r3, [r7, #12]
 8105558:	681b      	ldr	r3, [r3, #0]
 810555a:	69db      	ldr	r3, [r3, #28]
 810555c:	f003 0308 	and.w	r3, r3, #8
 8105560:	2b08      	cmp	r3, #8
 8105562:	d110      	bne.n	8105586 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8105564:	68fb      	ldr	r3, [r7, #12]
 8105566:	681b      	ldr	r3, [r3, #0]
 8105568:	2208      	movs	r2, #8
 810556a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 810556c:	68f8      	ldr	r0, [r7, #12]
 810556e:	f000 f95b 	bl	8105828 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8105572:	68fb      	ldr	r3, [r7, #12]
 8105574:	2208      	movs	r2, #8
 8105576:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 810557a:	68fb      	ldr	r3, [r7, #12]
 810557c:	2200      	movs	r2, #0
 810557e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8105582:	2301      	movs	r3, #1
 8105584:	e029      	b.n	81055da <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8105586:	68fb      	ldr	r3, [r7, #12]
 8105588:	681b      	ldr	r3, [r3, #0]
 810558a:	69db      	ldr	r3, [r3, #28]
 810558c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8105590:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8105594:	d111      	bne.n	81055ba <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8105596:	68fb      	ldr	r3, [r7, #12]
 8105598:	681b      	ldr	r3, [r3, #0]
 810559a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 810559e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 81055a0:	68f8      	ldr	r0, [r7, #12]
 81055a2:	f000 f941 	bl	8105828 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 81055a6:	68fb      	ldr	r3, [r7, #12]
 81055a8:	2220      	movs	r2, #32
 81055aa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 81055ae:	68fb      	ldr	r3, [r7, #12]
 81055b0:	2200      	movs	r2, #0
 81055b2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 81055b6:	2303      	movs	r3, #3
 81055b8:	e00f      	b.n	81055da <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 81055ba:	68fb      	ldr	r3, [r7, #12]
 81055bc:	681b      	ldr	r3, [r3, #0]
 81055be:	69da      	ldr	r2, [r3, #28]
 81055c0:	68bb      	ldr	r3, [r7, #8]
 81055c2:	4013      	ands	r3, r2
 81055c4:	68ba      	ldr	r2, [r7, #8]
 81055c6:	429a      	cmp	r2, r3
 81055c8:	bf0c      	ite	eq
 81055ca:	2301      	moveq	r3, #1
 81055cc:	2300      	movne	r3, #0
 81055ce:	b2db      	uxtb	r3, r3
 81055d0:	461a      	mov	r2, r3
 81055d2:	79fb      	ldrb	r3, [r7, #7]
 81055d4:	429a      	cmp	r2, r3
 81055d6:	d0a0      	beq.n	810551a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 81055d8:	2300      	movs	r3, #0
}
 81055da:	4618      	mov	r0, r3
 81055dc:	3710      	adds	r7, #16
 81055de:	46bd      	mov	sp, r7
 81055e0:	bd80      	pop	{r7, pc}
	...

081055e4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 81055e4:	b480      	push	{r7}
 81055e6:	b0a3      	sub	sp, #140	; 0x8c
 81055e8:	af00      	add	r7, sp, #0
 81055ea:	60f8      	str	r0, [r7, #12]
 81055ec:	60b9      	str	r1, [r7, #8]
 81055ee:	4613      	mov	r3, r2
 81055f0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 81055f2:	68fb      	ldr	r3, [r7, #12]
 81055f4:	68ba      	ldr	r2, [r7, #8]
 81055f6:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 81055f8:	68fb      	ldr	r3, [r7, #12]
 81055fa:	88fa      	ldrh	r2, [r7, #6]
 81055fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8105600:	68fb      	ldr	r3, [r7, #12]
 8105602:	88fa      	ldrh	r2, [r7, #6]
 8105604:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8105608:	68fb      	ldr	r3, [r7, #12]
 810560a:	2200      	movs	r2, #0
 810560c:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 810560e:	68fb      	ldr	r3, [r7, #12]
 8105610:	689b      	ldr	r3, [r3, #8]
 8105612:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105616:	d10e      	bne.n	8105636 <UART_Start_Receive_IT+0x52>
 8105618:	68fb      	ldr	r3, [r7, #12]
 810561a:	691b      	ldr	r3, [r3, #16]
 810561c:	2b00      	cmp	r3, #0
 810561e:	d105      	bne.n	810562c <UART_Start_Receive_IT+0x48>
 8105620:	68fb      	ldr	r3, [r7, #12]
 8105622:	f240 12ff 	movw	r2, #511	; 0x1ff
 8105626:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810562a:	e02d      	b.n	8105688 <UART_Start_Receive_IT+0xa4>
 810562c:	68fb      	ldr	r3, [r7, #12]
 810562e:	22ff      	movs	r2, #255	; 0xff
 8105630:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8105634:	e028      	b.n	8105688 <UART_Start_Receive_IT+0xa4>
 8105636:	68fb      	ldr	r3, [r7, #12]
 8105638:	689b      	ldr	r3, [r3, #8]
 810563a:	2b00      	cmp	r3, #0
 810563c:	d10d      	bne.n	810565a <UART_Start_Receive_IT+0x76>
 810563e:	68fb      	ldr	r3, [r7, #12]
 8105640:	691b      	ldr	r3, [r3, #16]
 8105642:	2b00      	cmp	r3, #0
 8105644:	d104      	bne.n	8105650 <UART_Start_Receive_IT+0x6c>
 8105646:	68fb      	ldr	r3, [r7, #12]
 8105648:	22ff      	movs	r2, #255	; 0xff
 810564a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810564e:	e01b      	b.n	8105688 <UART_Start_Receive_IT+0xa4>
 8105650:	68fb      	ldr	r3, [r7, #12]
 8105652:	227f      	movs	r2, #127	; 0x7f
 8105654:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8105658:	e016      	b.n	8105688 <UART_Start_Receive_IT+0xa4>
 810565a:	68fb      	ldr	r3, [r7, #12]
 810565c:	689b      	ldr	r3, [r3, #8]
 810565e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105662:	d10d      	bne.n	8105680 <UART_Start_Receive_IT+0x9c>
 8105664:	68fb      	ldr	r3, [r7, #12]
 8105666:	691b      	ldr	r3, [r3, #16]
 8105668:	2b00      	cmp	r3, #0
 810566a:	d104      	bne.n	8105676 <UART_Start_Receive_IT+0x92>
 810566c:	68fb      	ldr	r3, [r7, #12]
 810566e:	227f      	movs	r2, #127	; 0x7f
 8105670:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8105674:	e008      	b.n	8105688 <UART_Start_Receive_IT+0xa4>
 8105676:	68fb      	ldr	r3, [r7, #12]
 8105678:	223f      	movs	r2, #63	; 0x3f
 810567a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 810567e:	e003      	b.n	8105688 <UART_Start_Receive_IT+0xa4>
 8105680:	68fb      	ldr	r3, [r7, #12]
 8105682:	2200      	movs	r2, #0
 8105684:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105688:	68fb      	ldr	r3, [r7, #12]
 810568a:	2200      	movs	r2, #0
 810568c:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8105690:	68fb      	ldr	r3, [r7, #12]
 8105692:	2222      	movs	r2, #34	; 0x22
 8105694:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105698:	68fb      	ldr	r3, [r7, #12]
 810569a:	681b      	ldr	r3, [r3, #0]
 810569c:	3308      	adds	r3, #8
 810569e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81056a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 81056a2:	e853 3f00 	ldrex	r3, [r3]
 81056a6:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 81056a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81056aa:	f043 0301 	orr.w	r3, r3, #1
 81056ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 81056b2:	68fb      	ldr	r3, [r7, #12]
 81056b4:	681b      	ldr	r3, [r3, #0]
 81056b6:	3308      	adds	r3, #8
 81056b8:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 81056bc:	673a      	str	r2, [r7, #112]	; 0x70
 81056be:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81056c0:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 81056c2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 81056c4:	e841 2300 	strex	r3, r2, [r1]
 81056c8:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 81056ca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81056cc:	2b00      	cmp	r3, #0
 81056ce:	d1e3      	bne.n	8105698 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 81056d0:	68fb      	ldr	r3, [r7, #12]
 81056d2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81056d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81056d8:	d14f      	bne.n	810577a <UART_Start_Receive_IT+0x196>
 81056da:	68fb      	ldr	r3, [r7, #12]
 81056dc:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 81056e0:	88fa      	ldrh	r2, [r7, #6]
 81056e2:	429a      	cmp	r2, r3
 81056e4:	d349      	bcc.n	810577a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 81056e6:	68fb      	ldr	r3, [r7, #12]
 81056e8:	689b      	ldr	r3, [r3, #8]
 81056ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81056ee:	d107      	bne.n	8105700 <UART_Start_Receive_IT+0x11c>
 81056f0:	68fb      	ldr	r3, [r7, #12]
 81056f2:	691b      	ldr	r3, [r3, #16]
 81056f4:	2b00      	cmp	r3, #0
 81056f6:	d103      	bne.n	8105700 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 81056f8:	68fb      	ldr	r3, [r7, #12]
 81056fa:	4a47      	ldr	r2, [pc, #284]	; (8105818 <UART_Start_Receive_IT+0x234>)
 81056fc:	675a      	str	r2, [r3, #116]	; 0x74
 81056fe:	e002      	b.n	8105706 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8105700:	68fb      	ldr	r3, [r7, #12]
 8105702:	4a46      	ldr	r2, [pc, #280]	; (810581c <UART_Start_Receive_IT+0x238>)
 8105704:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8105706:	68fb      	ldr	r3, [r7, #12]
 8105708:	691b      	ldr	r3, [r3, #16]
 810570a:	2b00      	cmp	r3, #0
 810570c:	d01a      	beq.n	8105744 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810570e:	68fb      	ldr	r3, [r7, #12]
 8105710:	681b      	ldr	r3, [r3, #0]
 8105712:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105714:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8105716:	e853 3f00 	ldrex	r3, [r3]
 810571a:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 810571c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810571e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105722:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8105726:	68fb      	ldr	r3, [r7, #12]
 8105728:	681b      	ldr	r3, [r3, #0]
 810572a:	461a      	mov	r2, r3
 810572c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8105730:	65fb      	str	r3, [r7, #92]	; 0x5c
 8105732:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105734:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8105736:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8105738:	e841 2300 	strex	r3, r2, [r1]
 810573c:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 810573e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8105740:	2b00      	cmp	r3, #0
 8105742:	d1e4      	bne.n	810570e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8105744:	68fb      	ldr	r3, [r7, #12]
 8105746:	681b      	ldr	r3, [r3, #0]
 8105748:	3308      	adds	r3, #8
 810574a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810574c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 810574e:	e853 3f00 	ldrex	r3, [r3]
 8105752:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8105754:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105756:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 810575a:	67fb      	str	r3, [r7, #124]	; 0x7c
 810575c:	68fb      	ldr	r3, [r7, #12]
 810575e:	681b      	ldr	r3, [r3, #0]
 8105760:	3308      	adds	r3, #8
 8105762:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8105764:	64ba      	str	r2, [r7, #72]	; 0x48
 8105766:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105768:	6c79      	ldr	r1, [r7, #68]	; 0x44
 810576a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 810576c:	e841 2300 	strex	r3, r2, [r1]
 8105770:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8105772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8105774:	2b00      	cmp	r3, #0
 8105776:	d1e5      	bne.n	8105744 <UART_Start_Receive_IT+0x160>
 8105778:	e046      	b.n	8105808 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 810577a:	68fb      	ldr	r3, [r7, #12]
 810577c:	689b      	ldr	r3, [r3, #8]
 810577e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105782:	d107      	bne.n	8105794 <UART_Start_Receive_IT+0x1b0>
 8105784:	68fb      	ldr	r3, [r7, #12]
 8105786:	691b      	ldr	r3, [r3, #16]
 8105788:	2b00      	cmp	r3, #0
 810578a:	d103      	bne.n	8105794 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 810578c:	68fb      	ldr	r3, [r7, #12]
 810578e:	4a24      	ldr	r2, [pc, #144]	; (8105820 <UART_Start_Receive_IT+0x23c>)
 8105790:	675a      	str	r2, [r3, #116]	; 0x74
 8105792:	e002      	b.n	810579a <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8105794:	68fb      	ldr	r3, [r7, #12]
 8105796:	4a23      	ldr	r2, [pc, #140]	; (8105824 <UART_Start_Receive_IT+0x240>)
 8105798:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 810579a:	68fb      	ldr	r3, [r7, #12]
 810579c:	691b      	ldr	r3, [r3, #16]
 810579e:	2b00      	cmp	r3, #0
 81057a0:	d019      	beq.n	81057d6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 81057a2:	68fb      	ldr	r3, [r7, #12]
 81057a4:	681b      	ldr	r3, [r3, #0]
 81057a6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81057a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81057aa:	e853 3f00 	ldrex	r3, [r3]
 81057ae:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 81057b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81057b2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 81057b6:	677b      	str	r3, [r7, #116]	; 0x74
 81057b8:	68fb      	ldr	r3, [r7, #12]
 81057ba:	681b      	ldr	r3, [r3, #0]
 81057bc:	461a      	mov	r2, r3
 81057be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 81057c0:	637b      	str	r3, [r7, #52]	; 0x34
 81057c2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81057c4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 81057c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 81057c8:	e841 2300 	strex	r3, r2, [r1]
 81057cc:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 81057ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 81057d0:	2b00      	cmp	r3, #0
 81057d2:	d1e6      	bne.n	81057a2 <UART_Start_Receive_IT+0x1be>
 81057d4:	e018      	b.n	8105808 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 81057d6:	68fb      	ldr	r3, [r7, #12]
 81057d8:	681b      	ldr	r3, [r3, #0]
 81057da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81057dc:	697b      	ldr	r3, [r7, #20]
 81057de:	e853 3f00 	ldrex	r3, [r3]
 81057e2:	613b      	str	r3, [r7, #16]
   return(result);
 81057e4:	693b      	ldr	r3, [r7, #16]
 81057e6:	f043 0320 	orr.w	r3, r3, #32
 81057ea:	67bb      	str	r3, [r7, #120]	; 0x78
 81057ec:	68fb      	ldr	r3, [r7, #12]
 81057ee:	681b      	ldr	r3, [r3, #0]
 81057f0:	461a      	mov	r2, r3
 81057f2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81057f4:	623b      	str	r3, [r7, #32]
 81057f6:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81057f8:	69f9      	ldr	r1, [r7, #28]
 81057fa:	6a3a      	ldr	r2, [r7, #32]
 81057fc:	e841 2300 	strex	r3, r2, [r1]
 8105800:	61bb      	str	r3, [r7, #24]
   return(result);
 8105802:	69bb      	ldr	r3, [r7, #24]
 8105804:	2b00      	cmp	r3, #0
 8105806:	d1e6      	bne.n	81057d6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8105808:	2300      	movs	r3, #0
}
 810580a:	4618      	mov	r0, r3
 810580c:	378c      	adds	r7, #140	; 0x8c
 810580e:	46bd      	mov	sp, r7
 8105810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105814:	4770      	bx	lr
 8105816:	bf00      	nop
 8105818:	08106049 	.word	0x08106049
 810581c:	08105ce9 	.word	0x08105ce9
 8105820:	08105b31 	.word	0x08105b31
 8105824:	08105979 	.word	0x08105979

08105828 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8105828:	b480      	push	{r7}
 810582a:	b095      	sub	sp, #84	; 0x54
 810582c:	af00      	add	r7, sp, #0
 810582e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8105830:	687b      	ldr	r3, [r7, #4]
 8105832:	681b      	ldr	r3, [r3, #0]
 8105834:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105838:	e853 3f00 	ldrex	r3, [r3]
 810583c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 810583e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105840:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8105844:	64fb      	str	r3, [r7, #76]	; 0x4c
 8105846:	687b      	ldr	r3, [r7, #4]
 8105848:	681b      	ldr	r3, [r3, #0]
 810584a:	461a      	mov	r2, r3
 810584c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 810584e:	643b      	str	r3, [r7, #64]	; 0x40
 8105850:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105852:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8105854:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8105856:	e841 2300 	strex	r3, r2, [r1]
 810585a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 810585c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810585e:	2b00      	cmp	r3, #0
 8105860:	d1e6      	bne.n	8105830 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8105862:	687b      	ldr	r3, [r7, #4]
 8105864:	681b      	ldr	r3, [r3, #0]
 8105866:	3308      	adds	r3, #8
 8105868:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810586a:	6a3b      	ldr	r3, [r7, #32]
 810586c:	e853 3f00 	ldrex	r3, [r3]
 8105870:	61fb      	str	r3, [r7, #28]
   return(result);
 8105872:	69fb      	ldr	r3, [r7, #28]
 8105874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105878:	f023 0301 	bic.w	r3, r3, #1
 810587c:	64bb      	str	r3, [r7, #72]	; 0x48
 810587e:	687b      	ldr	r3, [r7, #4]
 8105880:	681b      	ldr	r3, [r3, #0]
 8105882:	3308      	adds	r3, #8
 8105884:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8105886:	62fa      	str	r2, [r7, #44]	; 0x2c
 8105888:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810588a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 810588c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 810588e:	e841 2300 	strex	r3, r2, [r1]
 8105892:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8105894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105896:	2b00      	cmp	r3, #0
 8105898:	d1e3      	bne.n	8105862 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 810589a:	687b      	ldr	r3, [r7, #4]
 810589c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 810589e:	2b01      	cmp	r3, #1
 81058a0:	d118      	bne.n	81058d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 81058a2:	687b      	ldr	r3, [r7, #4]
 81058a4:	681b      	ldr	r3, [r3, #0]
 81058a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81058a8:	68fb      	ldr	r3, [r7, #12]
 81058aa:	e853 3f00 	ldrex	r3, [r3]
 81058ae:	60bb      	str	r3, [r7, #8]
   return(result);
 81058b0:	68bb      	ldr	r3, [r7, #8]
 81058b2:	f023 0310 	bic.w	r3, r3, #16
 81058b6:	647b      	str	r3, [r7, #68]	; 0x44
 81058b8:	687b      	ldr	r3, [r7, #4]
 81058ba:	681b      	ldr	r3, [r3, #0]
 81058bc:	461a      	mov	r2, r3
 81058be:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 81058c0:	61bb      	str	r3, [r7, #24]
 81058c2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81058c4:	6979      	ldr	r1, [r7, #20]
 81058c6:	69ba      	ldr	r2, [r7, #24]
 81058c8:	e841 2300 	strex	r3, r2, [r1]
 81058cc:	613b      	str	r3, [r7, #16]
   return(result);
 81058ce:	693b      	ldr	r3, [r7, #16]
 81058d0:	2b00      	cmp	r3, #0
 81058d2:	d1e6      	bne.n	81058a2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 81058d4:	687b      	ldr	r3, [r7, #4]
 81058d6:	2220      	movs	r2, #32
 81058d8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 81058dc:	687b      	ldr	r3, [r7, #4]
 81058de:	2200      	movs	r2, #0
 81058e0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 81058e2:	687b      	ldr	r3, [r7, #4]
 81058e4:	2200      	movs	r2, #0
 81058e6:	675a      	str	r2, [r3, #116]	; 0x74
}
 81058e8:	bf00      	nop
 81058ea:	3754      	adds	r7, #84	; 0x54
 81058ec:	46bd      	mov	sp, r7
 81058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81058f2:	4770      	bx	lr

081058f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 81058f4:	b580      	push	{r7, lr}
 81058f6:	b084      	sub	sp, #16
 81058f8:	af00      	add	r7, sp, #0
 81058fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 81058fc:	687b      	ldr	r3, [r7, #4]
 81058fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105900:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8105902:	68fb      	ldr	r3, [r7, #12]
 8105904:	2200      	movs	r2, #0
 8105906:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 810590a:	68fb      	ldr	r3, [r7, #12]
 810590c:	2200      	movs	r2, #0
 810590e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8105912:	68f8      	ldr	r0, [r7, #12]
 8105914:	f7fb f88c 	bl	8100a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8105918:	bf00      	nop
 810591a:	3710      	adds	r7, #16
 810591c:	46bd      	mov	sp, r7
 810591e:	bd80      	pop	{r7, pc}

08105920 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8105920:	b580      	push	{r7, lr}
 8105922:	b088      	sub	sp, #32
 8105924:	af00      	add	r7, sp, #0
 8105926:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8105928:	687b      	ldr	r3, [r7, #4]
 810592a:	681b      	ldr	r3, [r3, #0]
 810592c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810592e:	68fb      	ldr	r3, [r7, #12]
 8105930:	e853 3f00 	ldrex	r3, [r3]
 8105934:	60bb      	str	r3, [r7, #8]
   return(result);
 8105936:	68bb      	ldr	r3, [r7, #8]
 8105938:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 810593c:	61fb      	str	r3, [r7, #28]
 810593e:	687b      	ldr	r3, [r7, #4]
 8105940:	681b      	ldr	r3, [r3, #0]
 8105942:	461a      	mov	r2, r3
 8105944:	69fb      	ldr	r3, [r7, #28]
 8105946:	61bb      	str	r3, [r7, #24]
 8105948:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810594a:	6979      	ldr	r1, [r7, #20]
 810594c:	69ba      	ldr	r2, [r7, #24]
 810594e:	e841 2300 	strex	r3, r2, [r1]
 8105952:	613b      	str	r3, [r7, #16]
   return(result);
 8105954:	693b      	ldr	r3, [r7, #16]
 8105956:	2b00      	cmp	r3, #0
 8105958:	d1e6      	bne.n	8105928 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 810595a:	687b      	ldr	r3, [r7, #4]
 810595c:	2220      	movs	r2, #32
 810595e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8105962:	687b      	ldr	r3, [r7, #4]
 8105964:	2200      	movs	r2, #0
 8105966:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8105968:	6878      	ldr	r0, [r7, #4]
 810596a:	f7fe ff03 	bl	8104774 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 810596e:	bf00      	nop
 8105970:	3720      	adds	r7, #32
 8105972:	46bd      	mov	sp, r7
 8105974:	bd80      	pop	{r7, pc}
	...

08105978 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8105978:	b580      	push	{r7, lr}
 810597a:	b09c      	sub	sp, #112	; 0x70
 810597c:	af00      	add	r7, sp, #0
 810597e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8105980:	687b      	ldr	r3, [r7, #4]
 8105982:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8105986:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 810598a:	687b      	ldr	r3, [r7, #4]
 810598c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105990:	2b22      	cmp	r3, #34	; 0x22
 8105992:	f040 80be 	bne.w	8105b12 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8105996:	687b      	ldr	r3, [r7, #4]
 8105998:	681b      	ldr	r3, [r3, #0]
 810599a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 810599c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 81059a0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 81059a4:	b2d9      	uxtb	r1, r3
 81059a6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 81059aa:	b2da      	uxtb	r2, r3
 81059ac:	687b      	ldr	r3, [r7, #4]
 81059ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81059b0:	400a      	ands	r2, r1
 81059b2:	b2d2      	uxtb	r2, r2
 81059b4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 81059b6:	687b      	ldr	r3, [r7, #4]
 81059b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81059ba:	1c5a      	adds	r2, r3, #1
 81059bc:	687b      	ldr	r3, [r7, #4]
 81059be:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 81059c0:	687b      	ldr	r3, [r7, #4]
 81059c2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81059c6:	b29b      	uxth	r3, r3
 81059c8:	3b01      	subs	r3, #1
 81059ca:	b29a      	uxth	r2, r3
 81059cc:	687b      	ldr	r3, [r7, #4]
 81059ce:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 81059d2:	687b      	ldr	r3, [r7, #4]
 81059d4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81059d8:	b29b      	uxth	r3, r3
 81059da:	2b00      	cmp	r3, #0
 81059dc:	f040 80a1 	bne.w	8105b22 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 81059e0:	687b      	ldr	r3, [r7, #4]
 81059e2:	681b      	ldr	r3, [r3, #0]
 81059e4:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81059e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 81059e8:	e853 3f00 	ldrex	r3, [r3]
 81059ec:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 81059ee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 81059f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 81059f4:	66bb      	str	r3, [r7, #104]	; 0x68
 81059f6:	687b      	ldr	r3, [r7, #4]
 81059f8:	681b      	ldr	r3, [r3, #0]
 81059fa:	461a      	mov	r2, r3
 81059fc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81059fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8105a00:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105a02:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8105a04:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8105a06:	e841 2300 	strex	r3, r2, [r1]
 8105a0a:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8105a0c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8105a0e:	2b00      	cmp	r3, #0
 8105a10:	d1e6      	bne.n	81059e0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105a12:	687b      	ldr	r3, [r7, #4]
 8105a14:	681b      	ldr	r3, [r3, #0]
 8105a16:	3308      	adds	r3, #8
 8105a18:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105a1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105a1c:	e853 3f00 	ldrex	r3, [r3]
 8105a20:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8105a22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105a24:	f023 0301 	bic.w	r3, r3, #1
 8105a28:	667b      	str	r3, [r7, #100]	; 0x64
 8105a2a:	687b      	ldr	r3, [r7, #4]
 8105a2c:	681b      	ldr	r3, [r3, #0]
 8105a2e:	3308      	adds	r3, #8
 8105a30:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8105a32:	647a      	str	r2, [r7, #68]	; 0x44
 8105a34:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105a36:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8105a38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8105a3a:	e841 2300 	strex	r3, r2, [r1]
 8105a3e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8105a40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8105a42:	2b00      	cmp	r3, #0
 8105a44:	d1e5      	bne.n	8105a12 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8105a46:	687b      	ldr	r3, [r7, #4]
 8105a48:	2220      	movs	r2, #32
 8105a4a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8105a4e:	687b      	ldr	r3, [r7, #4]
 8105a50:	2200      	movs	r2, #0
 8105a52:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8105a54:	687b      	ldr	r3, [r7, #4]
 8105a56:	2200      	movs	r2, #0
 8105a58:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8105a5a:	687b      	ldr	r3, [r7, #4]
 8105a5c:	681b      	ldr	r3, [r3, #0]
 8105a5e:	4a33      	ldr	r2, [pc, #204]	; (8105b2c <UART_RxISR_8BIT+0x1b4>)
 8105a60:	4293      	cmp	r3, r2
 8105a62:	d01f      	beq.n	8105aa4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8105a64:	687b      	ldr	r3, [r7, #4]
 8105a66:	681b      	ldr	r3, [r3, #0]
 8105a68:	685b      	ldr	r3, [r3, #4]
 8105a6a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8105a6e:	2b00      	cmp	r3, #0
 8105a70:	d018      	beq.n	8105aa4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8105a72:	687b      	ldr	r3, [r7, #4]
 8105a74:	681b      	ldr	r3, [r3, #0]
 8105a76:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105a7a:	e853 3f00 	ldrex	r3, [r3]
 8105a7e:	623b      	str	r3, [r7, #32]
   return(result);
 8105a80:	6a3b      	ldr	r3, [r7, #32]
 8105a82:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8105a86:	663b      	str	r3, [r7, #96]	; 0x60
 8105a88:	687b      	ldr	r3, [r7, #4]
 8105a8a:	681b      	ldr	r3, [r3, #0]
 8105a8c:	461a      	mov	r2, r3
 8105a8e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8105a90:	633b      	str	r3, [r7, #48]	; 0x30
 8105a92:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105a94:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8105a96:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8105a98:	e841 2300 	strex	r3, r2, [r1]
 8105a9c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8105a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105aa0:	2b00      	cmp	r3, #0
 8105aa2:	d1e6      	bne.n	8105a72 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8105aa4:	687b      	ldr	r3, [r7, #4]
 8105aa6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105aa8:	2b01      	cmp	r3, #1
 8105aaa:	d12e      	bne.n	8105b0a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105aac:	687b      	ldr	r3, [r7, #4]
 8105aae:	2200      	movs	r2, #0
 8105ab0:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8105ab2:	687b      	ldr	r3, [r7, #4]
 8105ab4:	681b      	ldr	r3, [r3, #0]
 8105ab6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105ab8:	693b      	ldr	r3, [r7, #16]
 8105aba:	e853 3f00 	ldrex	r3, [r3]
 8105abe:	60fb      	str	r3, [r7, #12]
   return(result);
 8105ac0:	68fb      	ldr	r3, [r7, #12]
 8105ac2:	f023 0310 	bic.w	r3, r3, #16
 8105ac6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8105ac8:	687b      	ldr	r3, [r7, #4]
 8105aca:	681b      	ldr	r3, [r3, #0]
 8105acc:	461a      	mov	r2, r3
 8105ace:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8105ad0:	61fb      	str	r3, [r7, #28]
 8105ad2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105ad4:	69b9      	ldr	r1, [r7, #24]
 8105ad6:	69fa      	ldr	r2, [r7, #28]
 8105ad8:	e841 2300 	strex	r3, r2, [r1]
 8105adc:	617b      	str	r3, [r7, #20]
   return(result);
 8105ade:	697b      	ldr	r3, [r7, #20]
 8105ae0:	2b00      	cmp	r3, #0
 8105ae2:	d1e6      	bne.n	8105ab2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8105ae4:	687b      	ldr	r3, [r7, #4]
 8105ae6:	681b      	ldr	r3, [r3, #0]
 8105ae8:	69db      	ldr	r3, [r3, #28]
 8105aea:	f003 0310 	and.w	r3, r3, #16
 8105aee:	2b10      	cmp	r3, #16
 8105af0:	d103      	bne.n	8105afa <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8105af2:	687b      	ldr	r3, [r7, #4]
 8105af4:	681b      	ldr	r3, [r3, #0]
 8105af6:	2210      	movs	r2, #16
 8105af8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8105afa:	687b      	ldr	r3, [r7, #4]
 8105afc:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8105b00:	4619      	mov	r1, r3
 8105b02:	6878      	ldr	r0, [r7, #4]
 8105b04:	f7fe fe40 	bl	8104788 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8105b08:	e00b      	b.n	8105b22 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8105b0a:	6878      	ldr	r0, [r7, #4]
 8105b0c:	f7fa ff62 	bl	81009d4 <HAL_UART_RxCpltCallback>
}
 8105b10:	e007      	b.n	8105b22 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8105b12:	687b      	ldr	r3, [r7, #4]
 8105b14:	681b      	ldr	r3, [r3, #0]
 8105b16:	699a      	ldr	r2, [r3, #24]
 8105b18:	687b      	ldr	r3, [r7, #4]
 8105b1a:	681b      	ldr	r3, [r3, #0]
 8105b1c:	f042 0208 	orr.w	r2, r2, #8
 8105b20:	619a      	str	r2, [r3, #24]
}
 8105b22:	bf00      	nop
 8105b24:	3770      	adds	r7, #112	; 0x70
 8105b26:	46bd      	mov	sp, r7
 8105b28:	bd80      	pop	{r7, pc}
 8105b2a:	bf00      	nop
 8105b2c:	58000c00 	.word	0x58000c00

08105b30 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8105b30:	b580      	push	{r7, lr}
 8105b32:	b09c      	sub	sp, #112	; 0x70
 8105b34:	af00      	add	r7, sp, #0
 8105b36:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8105b38:	687b      	ldr	r3, [r7, #4]
 8105b3a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8105b3e:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8105b42:	687b      	ldr	r3, [r7, #4]
 8105b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105b48:	2b22      	cmp	r3, #34	; 0x22
 8105b4a:	f040 80be 	bne.w	8105cca <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8105b4e:	687b      	ldr	r3, [r7, #4]
 8105b50:	681b      	ldr	r3, [r3, #0]
 8105b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105b54:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8105b58:	687b      	ldr	r3, [r7, #4]
 8105b5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105b5c:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8105b5e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8105b62:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8105b66:	4013      	ands	r3, r2
 8105b68:	b29a      	uxth	r2, r3
 8105b6a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8105b6c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8105b6e:	687b      	ldr	r3, [r7, #4]
 8105b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105b72:	1c9a      	adds	r2, r3, #2
 8105b74:	687b      	ldr	r3, [r7, #4]
 8105b76:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8105b78:	687b      	ldr	r3, [r7, #4]
 8105b7a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8105b7e:	b29b      	uxth	r3, r3
 8105b80:	3b01      	subs	r3, #1
 8105b82:	b29a      	uxth	r2, r3
 8105b84:	687b      	ldr	r3, [r7, #4]
 8105b86:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8105b8a:	687b      	ldr	r3, [r7, #4]
 8105b8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8105b90:	b29b      	uxth	r3, r3
 8105b92:	2b00      	cmp	r3, #0
 8105b94:	f040 80a1 	bne.w	8105cda <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8105b98:	687b      	ldr	r3, [r7, #4]
 8105b9a:	681b      	ldr	r3, [r3, #0]
 8105b9c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105b9e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8105ba0:	e853 3f00 	ldrex	r3, [r3]
 8105ba4:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8105ba6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8105ba8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8105bac:	667b      	str	r3, [r7, #100]	; 0x64
 8105bae:	687b      	ldr	r3, [r7, #4]
 8105bb0:	681b      	ldr	r3, [r3, #0]
 8105bb2:	461a      	mov	r2, r3
 8105bb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8105bb6:	657b      	str	r3, [r7, #84]	; 0x54
 8105bb8:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105bba:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8105bbc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8105bbe:	e841 2300 	strex	r3, r2, [r1]
 8105bc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8105bc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8105bc6:	2b00      	cmp	r3, #0
 8105bc8:	d1e6      	bne.n	8105b98 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8105bca:	687b      	ldr	r3, [r7, #4]
 8105bcc:	681b      	ldr	r3, [r3, #0]
 8105bce:	3308      	adds	r3, #8
 8105bd0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105bd4:	e853 3f00 	ldrex	r3, [r3]
 8105bd8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8105bda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105bdc:	f023 0301 	bic.w	r3, r3, #1
 8105be0:	663b      	str	r3, [r7, #96]	; 0x60
 8105be2:	687b      	ldr	r3, [r7, #4]
 8105be4:	681b      	ldr	r3, [r3, #0]
 8105be6:	3308      	adds	r3, #8
 8105be8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8105bea:	643a      	str	r2, [r7, #64]	; 0x40
 8105bec:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105bee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8105bf0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8105bf2:	e841 2300 	strex	r3, r2, [r1]
 8105bf6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8105bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105bfa:	2b00      	cmp	r3, #0
 8105bfc:	d1e5      	bne.n	8105bca <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8105bfe:	687b      	ldr	r3, [r7, #4]
 8105c00:	2220      	movs	r2, #32
 8105c02:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8105c06:	687b      	ldr	r3, [r7, #4]
 8105c08:	2200      	movs	r2, #0
 8105c0a:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8105c0c:	687b      	ldr	r3, [r7, #4]
 8105c0e:	2200      	movs	r2, #0
 8105c10:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8105c12:	687b      	ldr	r3, [r7, #4]
 8105c14:	681b      	ldr	r3, [r3, #0]
 8105c16:	4a33      	ldr	r2, [pc, #204]	; (8105ce4 <UART_RxISR_16BIT+0x1b4>)
 8105c18:	4293      	cmp	r3, r2
 8105c1a:	d01f      	beq.n	8105c5c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8105c1c:	687b      	ldr	r3, [r7, #4]
 8105c1e:	681b      	ldr	r3, [r3, #0]
 8105c20:	685b      	ldr	r3, [r3, #4]
 8105c22:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8105c26:	2b00      	cmp	r3, #0
 8105c28:	d018      	beq.n	8105c5c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8105c2a:	687b      	ldr	r3, [r7, #4]
 8105c2c:	681b      	ldr	r3, [r3, #0]
 8105c2e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105c30:	6a3b      	ldr	r3, [r7, #32]
 8105c32:	e853 3f00 	ldrex	r3, [r3]
 8105c36:	61fb      	str	r3, [r7, #28]
   return(result);
 8105c38:	69fb      	ldr	r3, [r7, #28]
 8105c3a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8105c3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8105c40:	687b      	ldr	r3, [r7, #4]
 8105c42:	681b      	ldr	r3, [r3, #0]
 8105c44:	461a      	mov	r2, r3
 8105c46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8105c48:	62fb      	str	r3, [r7, #44]	; 0x2c
 8105c4a:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105c4c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8105c4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8105c50:	e841 2300 	strex	r3, r2, [r1]
 8105c54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8105c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105c58:	2b00      	cmp	r3, #0
 8105c5a:	d1e6      	bne.n	8105c2a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8105c5c:	687b      	ldr	r3, [r7, #4]
 8105c5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105c60:	2b01      	cmp	r3, #1
 8105c62:	d12e      	bne.n	8105cc2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105c64:	687b      	ldr	r3, [r7, #4]
 8105c66:	2200      	movs	r2, #0
 8105c68:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8105c6a:	687b      	ldr	r3, [r7, #4]
 8105c6c:	681b      	ldr	r3, [r3, #0]
 8105c6e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105c70:	68fb      	ldr	r3, [r7, #12]
 8105c72:	e853 3f00 	ldrex	r3, [r3]
 8105c76:	60bb      	str	r3, [r7, #8]
   return(result);
 8105c78:	68bb      	ldr	r3, [r7, #8]
 8105c7a:	f023 0310 	bic.w	r3, r3, #16
 8105c7e:	65bb      	str	r3, [r7, #88]	; 0x58
 8105c80:	687b      	ldr	r3, [r7, #4]
 8105c82:	681b      	ldr	r3, [r3, #0]
 8105c84:	461a      	mov	r2, r3
 8105c86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8105c88:	61bb      	str	r3, [r7, #24]
 8105c8a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105c8c:	6979      	ldr	r1, [r7, #20]
 8105c8e:	69ba      	ldr	r2, [r7, #24]
 8105c90:	e841 2300 	strex	r3, r2, [r1]
 8105c94:	613b      	str	r3, [r7, #16]
   return(result);
 8105c96:	693b      	ldr	r3, [r7, #16]
 8105c98:	2b00      	cmp	r3, #0
 8105c9a:	d1e6      	bne.n	8105c6a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8105c9c:	687b      	ldr	r3, [r7, #4]
 8105c9e:	681b      	ldr	r3, [r3, #0]
 8105ca0:	69db      	ldr	r3, [r3, #28]
 8105ca2:	f003 0310 	and.w	r3, r3, #16
 8105ca6:	2b10      	cmp	r3, #16
 8105ca8:	d103      	bne.n	8105cb2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8105caa:	687b      	ldr	r3, [r7, #4]
 8105cac:	681b      	ldr	r3, [r3, #0]
 8105cae:	2210      	movs	r2, #16
 8105cb0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8105cb2:	687b      	ldr	r3, [r7, #4]
 8105cb4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8105cb8:	4619      	mov	r1, r3
 8105cba:	6878      	ldr	r0, [r7, #4]
 8105cbc:	f7fe fd64 	bl	8104788 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8105cc0:	e00b      	b.n	8105cda <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8105cc2:	6878      	ldr	r0, [r7, #4]
 8105cc4:	f7fa fe86 	bl	81009d4 <HAL_UART_RxCpltCallback>
}
 8105cc8:	e007      	b.n	8105cda <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8105cca:	687b      	ldr	r3, [r7, #4]
 8105ccc:	681b      	ldr	r3, [r3, #0]
 8105cce:	699a      	ldr	r2, [r3, #24]
 8105cd0:	687b      	ldr	r3, [r7, #4]
 8105cd2:	681b      	ldr	r3, [r3, #0]
 8105cd4:	f042 0208 	orr.w	r2, r2, #8
 8105cd8:	619a      	str	r2, [r3, #24]
}
 8105cda:	bf00      	nop
 8105cdc:	3770      	adds	r7, #112	; 0x70
 8105cde:	46bd      	mov	sp, r7
 8105ce0:	bd80      	pop	{r7, pc}
 8105ce2:	bf00      	nop
 8105ce4:	58000c00 	.word	0x58000c00

08105ce8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8105ce8:	b580      	push	{r7, lr}
 8105cea:	b0ac      	sub	sp, #176	; 0xb0
 8105cec:	af00      	add	r7, sp, #0
 8105cee:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8105cf0:	687b      	ldr	r3, [r7, #4]
 8105cf2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8105cf6:	f8a7 30aa 	strh.w	r3, [r7, #170]	; 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8105cfa:	687b      	ldr	r3, [r7, #4]
 8105cfc:	681b      	ldr	r3, [r3, #0]
 8105cfe:	69db      	ldr	r3, [r3, #28]
 8105d00:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8105d04:	687b      	ldr	r3, [r7, #4]
 8105d06:	681b      	ldr	r3, [r3, #0]
 8105d08:	681b      	ldr	r3, [r3, #0]
 8105d0a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8105d0e:	687b      	ldr	r3, [r7, #4]
 8105d10:	681b      	ldr	r3, [r3, #0]
 8105d12:	689b      	ldr	r3, [r3, #8]
 8105d14:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8105d18:	687b      	ldr	r3, [r7, #4]
 8105d1a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8105d1e:	2b22      	cmp	r3, #34	; 0x22
 8105d20:	f040 8182 	bne.w	8106028 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8105d24:	687b      	ldr	r3, [r7, #4]
 8105d26:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8105d2a:	f8a7 309e 	strh.w	r3, [r7, #158]	; 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8105d2e:	e125      	b.n	8105f7c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8105d30:	687b      	ldr	r3, [r7, #4]
 8105d32:	681b      	ldr	r3, [r3, #0]
 8105d34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8105d36:	f8a7 309c 	strh.w	r3, [r7, #156]	; 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8105d3a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	; 0x9c
 8105d3e:	b2d9      	uxtb	r1, r3
 8105d40:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	; 0xaa
 8105d44:	b2da      	uxtb	r2, r3
 8105d46:	687b      	ldr	r3, [r7, #4]
 8105d48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105d4a:	400a      	ands	r2, r1
 8105d4c:	b2d2      	uxtb	r2, r2
 8105d4e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8105d50:	687b      	ldr	r3, [r7, #4]
 8105d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105d54:	1c5a      	adds	r2, r3, #1
 8105d56:	687b      	ldr	r3, [r7, #4]
 8105d58:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8105d5a:	687b      	ldr	r3, [r7, #4]
 8105d5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8105d60:	b29b      	uxth	r3, r3
 8105d62:	3b01      	subs	r3, #1
 8105d64:	b29a      	uxth	r2, r3
 8105d66:	687b      	ldr	r3, [r7, #4]
 8105d68:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8105d6c:	687b      	ldr	r3, [r7, #4]
 8105d6e:	681b      	ldr	r3, [r3, #0]
 8105d70:	69db      	ldr	r3, [r3, #28]
 8105d72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8105d76:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8105d7a:	f003 0307 	and.w	r3, r3, #7
 8105d7e:	2b00      	cmp	r3, #0
 8105d80:	d053      	beq.n	8105e2a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8105d82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8105d86:	f003 0301 	and.w	r3, r3, #1
 8105d8a:	2b00      	cmp	r3, #0
 8105d8c:	d011      	beq.n	8105db2 <UART_RxISR_8BIT_FIFOEN+0xca>
 8105d8e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8105d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105d96:	2b00      	cmp	r3, #0
 8105d98:	d00b      	beq.n	8105db2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8105d9a:	687b      	ldr	r3, [r7, #4]
 8105d9c:	681b      	ldr	r3, [r3, #0]
 8105d9e:	2201      	movs	r2, #1
 8105da0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8105da2:	687b      	ldr	r3, [r7, #4]
 8105da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105da8:	f043 0201 	orr.w	r2, r3, #1
 8105dac:	687b      	ldr	r3, [r7, #4]
 8105dae:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8105db2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8105db6:	f003 0302 	and.w	r3, r3, #2
 8105dba:	2b00      	cmp	r3, #0
 8105dbc:	d011      	beq.n	8105de2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8105dbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8105dc2:	f003 0301 	and.w	r3, r3, #1
 8105dc6:	2b00      	cmp	r3, #0
 8105dc8:	d00b      	beq.n	8105de2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8105dca:	687b      	ldr	r3, [r7, #4]
 8105dcc:	681b      	ldr	r3, [r3, #0]
 8105dce:	2202      	movs	r2, #2
 8105dd0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8105dd2:	687b      	ldr	r3, [r7, #4]
 8105dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105dd8:	f043 0204 	orr.w	r2, r3, #4
 8105ddc:	687b      	ldr	r3, [r7, #4]
 8105dde:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8105de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8105de6:	f003 0304 	and.w	r3, r3, #4
 8105dea:	2b00      	cmp	r3, #0
 8105dec:	d011      	beq.n	8105e12 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8105dee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8105df2:	f003 0301 	and.w	r3, r3, #1
 8105df6:	2b00      	cmp	r3, #0
 8105df8:	d00b      	beq.n	8105e12 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8105dfa:	687b      	ldr	r3, [r7, #4]
 8105dfc:	681b      	ldr	r3, [r3, #0]
 8105dfe:	2204      	movs	r2, #4
 8105e00:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8105e02:	687b      	ldr	r3, [r7, #4]
 8105e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105e08:	f043 0202 	orr.w	r2, r3, #2
 8105e0c:	687b      	ldr	r3, [r7, #4]
 8105e0e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8105e12:	687b      	ldr	r3, [r7, #4]
 8105e14:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8105e18:	2b00      	cmp	r3, #0
 8105e1a:	d006      	beq.n	8105e2a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8105e1c:	6878      	ldr	r0, [r7, #4]
 8105e1e:	f7fa fe07 	bl	8100a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8105e22:	687b      	ldr	r3, [r7, #4]
 8105e24:	2200      	movs	r2, #0
 8105e26:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8105e2a:	687b      	ldr	r3, [r7, #4]
 8105e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8105e30:	b29b      	uxth	r3, r3
 8105e32:	2b00      	cmp	r3, #0
 8105e34:	f040 80a2 	bne.w	8105f7c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8105e38:	687b      	ldr	r3, [r7, #4]
 8105e3a:	681b      	ldr	r3, [r3, #0]
 8105e3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105e3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8105e40:	e853 3f00 	ldrex	r3, [r3]
 8105e44:	66fb      	str	r3, [r7, #108]	; 0x6c
   return(result);
 8105e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8105e48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105e4c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8105e50:	687b      	ldr	r3, [r7, #4]
 8105e52:	681b      	ldr	r3, [r3, #0]
 8105e54:	461a      	mov	r2, r3
 8105e56:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8105e5a:	67fb      	str	r3, [r7, #124]	; 0x7c
 8105e5c:	67ba      	str	r2, [r7, #120]	; 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105e5e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8105e60:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8105e62:	e841 2300 	strex	r3, r2, [r1]
 8105e66:	677b      	str	r3, [r7, #116]	; 0x74
   return(result);
 8105e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8105e6a:	2b00      	cmp	r3, #0
 8105e6c:	d1e4      	bne.n	8105e38 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8105e6e:	687b      	ldr	r3, [r7, #4]
 8105e70:	681b      	ldr	r3, [r3, #0]
 8105e72:	3308      	adds	r3, #8
 8105e74:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105e76:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8105e78:	e853 3f00 	ldrex	r3, [r3]
 8105e7c:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8105e7e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8105e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105e84:	f023 0301 	bic.w	r3, r3, #1
 8105e88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8105e8c:	687b      	ldr	r3, [r7, #4]
 8105e8e:	681b      	ldr	r3, [r3, #0]
 8105e90:	3308      	adds	r3, #8
 8105e92:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8105e96:	66ba      	str	r2, [r7, #104]	; 0x68
 8105e98:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105e9a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8105e9c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8105e9e:	e841 2300 	strex	r3, r2, [r1]
 8105ea2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8105ea4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8105ea6:	2b00      	cmp	r3, #0
 8105ea8:	d1e1      	bne.n	8105e6e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8105eaa:	687b      	ldr	r3, [r7, #4]
 8105eac:	2220      	movs	r2, #32
 8105eae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8105eb2:	687b      	ldr	r3, [r7, #4]
 8105eb4:	2200      	movs	r2, #0
 8105eb6:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8105eb8:	687b      	ldr	r3, [r7, #4]
 8105eba:	2200      	movs	r2, #0
 8105ebc:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8105ebe:	687b      	ldr	r3, [r7, #4]
 8105ec0:	681b      	ldr	r3, [r3, #0]
 8105ec2:	4a5f      	ldr	r2, [pc, #380]	; (8106040 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8105ec4:	4293      	cmp	r3, r2
 8105ec6:	d021      	beq.n	8105f0c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8105ec8:	687b      	ldr	r3, [r7, #4]
 8105eca:	681b      	ldr	r3, [r3, #0]
 8105ecc:	685b      	ldr	r3, [r3, #4]
 8105ece:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8105ed2:	2b00      	cmp	r3, #0
 8105ed4:	d01a      	beq.n	8105f0c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8105ed6:	687b      	ldr	r3, [r7, #4]
 8105ed8:	681b      	ldr	r3, [r3, #0]
 8105eda:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105edc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8105ede:	e853 3f00 	ldrex	r3, [r3]
 8105ee2:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8105ee4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8105ee6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8105eea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8105eee:	687b      	ldr	r3, [r7, #4]
 8105ef0:	681b      	ldr	r3, [r3, #0]
 8105ef2:	461a      	mov	r2, r3
 8105ef4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8105ef8:	657b      	str	r3, [r7, #84]	; 0x54
 8105efa:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105efc:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8105efe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8105f00:	e841 2300 	strex	r3, r2, [r1]
 8105f04:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8105f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8105f08:	2b00      	cmp	r3, #0
 8105f0a:	d1e4      	bne.n	8105ed6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8105f0c:	687b      	ldr	r3, [r7, #4]
 8105f0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8105f10:	2b01      	cmp	r3, #1
 8105f12:	d130      	bne.n	8105f76 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8105f14:	687b      	ldr	r3, [r7, #4]
 8105f16:	2200      	movs	r2, #0
 8105f18:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8105f1a:	687b      	ldr	r3, [r7, #4]
 8105f1c:	681b      	ldr	r3, [r3, #0]
 8105f1e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105f20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105f22:	e853 3f00 	ldrex	r3, [r3]
 8105f26:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8105f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8105f2a:	f023 0310 	bic.w	r3, r3, #16
 8105f2e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8105f32:	687b      	ldr	r3, [r7, #4]
 8105f34:	681b      	ldr	r3, [r3, #0]
 8105f36:	461a      	mov	r2, r3
 8105f38:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8105f3c:	643b      	str	r3, [r7, #64]	; 0x40
 8105f3e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105f40:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8105f42:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8105f44:	e841 2300 	strex	r3, r2, [r1]
 8105f48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8105f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105f4c:	2b00      	cmp	r3, #0
 8105f4e:	d1e4      	bne.n	8105f1a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8105f50:	687b      	ldr	r3, [r7, #4]
 8105f52:	681b      	ldr	r3, [r3, #0]
 8105f54:	69db      	ldr	r3, [r3, #28]
 8105f56:	f003 0310 	and.w	r3, r3, #16
 8105f5a:	2b10      	cmp	r3, #16
 8105f5c:	d103      	bne.n	8105f66 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8105f5e:	687b      	ldr	r3, [r7, #4]
 8105f60:	681b      	ldr	r3, [r3, #0]
 8105f62:	2210      	movs	r2, #16
 8105f64:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8105f66:	687b      	ldr	r3, [r7, #4]
 8105f68:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8105f6c:	4619      	mov	r1, r3
 8105f6e:	6878      	ldr	r0, [r7, #4]
 8105f70:	f7fe fc0a 	bl	8104788 <HAL_UARTEx_RxEventCallback>
 8105f74:	e002      	b.n	8105f7c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8105f76:	6878      	ldr	r0, [r7, #4]
 8105f78:	f7fa fd2c 	bl	81009d4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8105f7c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	; 0x9e
 8105f80:	2b00      	cmp	r3, #0
 8105f82:	d006      	beq.n	8105f92 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8105f84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8105f88:	f003 0320 	and.w	r3, r3, #32
 8105f8c:	2b00      	cmp	r3, #0
 8105f8e:	f47f aecf 	bne.w	8105d30 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8105f92:	687b      	ldr	r3, [r7, #4]
 8105f94:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8105f98:	f8a7 308a 	strh.w	r3, [r7, #138]	; 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8105f9c:	f8b7 308a 	ldrh.w	r3, [r7, #138]	; 0x8a
 8105fa0:	2b00      	cmp	r3, #0
 8105fa2:	d049      	beq.n	8106038 <UART_RxISR_8BIT_FIFOEN+0x350>
 8105fa4:	687b      	ldr	r3, [r7, #4]
 8105fa6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8105faa:	f8b7 208a 	ldrh.w	r2, [r7, #138]	; 0x8a
 8105fae:	429a      	cmp	r2, r3
 8105fb0:	d242      	bcs.n	8106038 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8105fb2:	687b      	ldr	r3, [r7, #4]
 8105fb4:	681b      	ldr	r3, [r3, #0]
 8105fb6:	3308      	adds	r3, #8
 8105fb8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105fba:	6a3b      	ldr	r3, [r7, #32]
 8105fbc:	e853 3f00 	ldrex	r3, [r3]
 8105fc0:	61fb      	str	r3, [r7, #28]
   return(result);
 8105fc2:	69fb      	ldr	r3, [r7, #28]
 8105fc4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105fc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8105fcc:	687b      	ldr	r3, [r7, #4]
 8105fce:	681b      	ldr	r3, [r3, #0]
 8105fd0:	3308      	adds	r3, #8
 8105fd2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8105fd6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8105fd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8105fda:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8105fdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8105fde:	e841 2300 	strex	r3, r2, [r1]
 8105fe2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8105fe4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8105fe6:	2b00      	cmp	r3, #0
 8105fe8:	d1e3      	bne.n	8105fb2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8105fea:	687b      	ldr	r3, [r7, #4]
 8105fec:	4a15      	ldr	r2, [pc, #84]	; (8106044 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8105fee:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8105ff0:	687b      	ldr	r3, [r7, #4]
 8105ff2:	681b      	ldr	r3, [r3, #0]
 8105ff4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8105ff6:	68fb      	ldr	r3, [r7, #12]
 8105ff8:	e853 3f00 	ldrex	r3, [r3]
 8105ffc:	60bb      	str	r3, [r7, #8]
   return(result);
 8105ffe:	68bb      	ldr	r3, [r7, #8]
 8106000:	f043 0320 	orr.w	r3, r3, #32
 8106004:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8106008:	687b      	ldr	r3, [r7, #4]
 810600a:	681b      	ldr	r3, [r3, #0]
 810600c:	461a      	mov	r2, r3
 810600e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8106012:	61bb      	str	r3, [r7, #24]
 8106014:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106016:	6979      	ldr	r1, [r7, #20]
 8106018:	69ba      	ldr	r2, [r7, #24]
 810601a:	e841 2300 	strex	r3, r2, [r1]
 810601e:	613b      	str	r3, [r7, #16]
   return(result);
 8106020:	693b      	ldr	r3, [r7, #16]
 8106022:	2b00      	cmp	r3, #0
 8106024:	d1e4      	bne.n	8105ff0 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8106026:	e007      	b.n	8106038 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8106028:	687b      	ldr	r3, [r7, #4]
 810602a:	681b      	ldr	r3, [r3, #0]
 810602c:	699a      	ldr	r2, [r3, #24]
 810602e:	687b      	ldr	r3, [r7, #4]
 8106030:	681b      	ldr	r3, [r3, #0]
 8106032:	f042 0208 	orr.w	r2, r2, #8
 8106036:	619a      	str	r2, [r3, #24]
}
 8106038:	bf00      	nop
 810603a:	37b0      	adds	r7, #176	; 0xb0
 810603c:	46bd      	mov	sp, r7
 810603e:	bd80      	pop	{r7, pc}
 8106040:	58000c00 	.word	0x58000c00
 8106044:	08105979 	.word	0x08105979

08106048 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8106048:	b580      	push	{r7, lr}
 810604a:	b0ae      	sub	sp, #184	; 0xb8
 810604c:	af00      	add	r7, sp, #0
 810604e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8106050:	687b      	ldr	r3, [r7, #4]
 8106052:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8106056:	f8a7 30b2 	strh.w	r3, [r7, #178]	; 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 810605a:	687b      	ldr	r3, [r7, #4]
 810605c:	681b      	ldr	r3, [r3, #0]
 810605e:	69db      	ldr	r3, [r3, #28]
 8106060:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8106064:	687b      	ldr	r3, [r7, #4]
 8106066:	681b      	ldr	r3, [r3, #0]
 8106068:	681b      	ldr	r3, [r3, #0]
 810606a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 810606e:	687b      	ldr	r3, [r7, #4]
 8106070:	681b      	ldr	r3, [r3, #0]
 8106072:	689b      	ldr	r3, [r3, #8]
 8106074:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8106078:	687b      	ldr	r3, [r7, #4]
 810607a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 810607e:	2b22      	cmp	r3, #34	; 0x22
 8106080:	f040 8186 	bne.w	8106390 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8106084:	687b      	ldr	r3, [r7, #4]
 8106086:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 810608a:	f8a7 30a6 	strh.w	r3, [r7, #166]	; 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 810608e:	e129      	b.n	81062e4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8106090:	687b      	ldr	r3, [r7, #4]
 8106092:	681b      	ldr	r3, [r3, #0]
 8106094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8106096:	f8a7 30a4 	strh.w	r3, [r7, #164]	; 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 810609a:	687b      	ldr	r3, [r7, #4]
 810609c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810609e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 81060a2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	; 0xa4
 81060a6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	; 0xb2
 81060aa:	4013      	ands	r3, r2
 81060ac:	b29a      	uxth	r2, r3
 81060ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 81060b2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 81060b4:	687b      	ldr	r3, [r7, #4]
 81060b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81060b8:	1c9a      	adds	r2, r3, #2
 81060ba:	687b      	ldr	r3, [r7, #4]
 81060bc:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 81060be:	687b      	ldr	r3, [r7, #4]
 81060c0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 81060c4:	b29b      	uxth	r3, r3
 81060c6:	3b01      	subs	r3, #1
 81060c8:	b29a      	uxth	r2, r3
 81060ca:	687b      	ldr	r3, [r7, #4]
 81060cc:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 81060d0:	687b      	ldr	r3, [r7, #4]
 81060d2:	681b      	ldr	r3, [r3, #0]
 81060d4:	69db      	ldr	r3, [r3, #28]
 81060d6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 81060da:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 81060de:	f003 0307 	and.w	r3, r3, #7
 81060e2:	2b00      	cmp	r3, #0
 81060e4:	d053      	beq.n	810618e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 81060e6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 81060ea:	f003 0301 	and.w	r3, r3, #1
 81060ee:	2b00      	cmp	r3, #0
 81060f0:	d011      	beq.n	8106116 <UART_RxISR_16BIT_FIFOEN+0xce>
 81060f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 81060f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81060fa:	2b00      	cmp	r3, #0
 81060fc:	d00b      	beq.n	8106116 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 81060fe:	687b      	ldr	r3, [r7, #4]
 8106100:	681b      	ldr	r3, [r3, #0]
 8106102:	2201      	movs	r2, #1
 8106104:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8106106:	687b      	ldr	r3, [r7, #4]
 8106108:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810610c:	f043 0201 	orr.w	r2, r3, #1
 8106110:	687b      	ldr	r3, [r7, #4]
 8106112:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8106116:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 810611a:	f003 0302 	and.w	r3, r3, #2
 810611e:	2b00      	cmp	r3, #0
 8106120:	d011      	beq.n	8106146 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8106122:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8106126:	f003 0301 	and.w	r3, r3, #1
 810612a:	2b00      	cmp	r3, #0
 810612c:	d00b      	beq.n	8106146 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 810612e:	687b      	ldr	r3, [r7, #4]
 8106130:	681b      	ldr	r3, [r3, #0]
 8106132:	2202      	movs	r2, #2
 8106134:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8106136:	687b      	ldr	r3, [r7, #4]
 8106138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810613c:	f043 0204 	orr.w	r2, r3, #4
 8106140:	687b      	ldr	r3, [r7, #4]
 8106142:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8106146:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 810614a:	f003 0304 	and.w	r3, r3, #4
 810614e:	2b00      	cmp	r3, #0
 8106150:	d011      	beq.n	8106176 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8106152:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8106156:	f003 0301 	and.w	r3, r3, #1
 810615a:	2b00      	cmp	r3, #0
 810615c:	d00b      	beq.n	8106176 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 810615e:	687b      	ldr	r3, [r7, #4]
 8106160:	681b      	ldr	r3, [r3, #0]
 8106162:	2204      	movs	r2, #4
 8106164:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8106166:	687b      	ldr	r3, [r7, #4]
 8106168:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810616c:	f043 0202 	orr.w	r2, r3, #2
 8106170:	687b      	ldr	r3, [r7, #4]
 8106172:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8106176:	687b      	ldr	r3, [r7, #4]
 8106178:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 810617c:	2b00      	cmp	r3, #0
 810617e:	d006      	beq.n	810618e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8106180:	6878      	ldr	r0, [r7, #4]
 8106182:	f7fa fc55 	bl	8100a30 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8106186:	687b      	ldr	r3, [r7, #4]
 8106188:	2200      	movs	r2, #0
 810618a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 810618e:	687b      	ldr	r3, [r7, #4]
 8106190:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106194:	b29b      	uxth	r3, r3
 8106196:	2b00      	cmp	r3, #0
 8106198:	f040 80a4 	bne.w	81062e4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 810619c:	687b      	ldr	r3, [r7, #4]
 810619e:	681b      	ldr	r3, [r3, #0]
 81061a0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81061a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 81061a4:	e853 3f00 	ldrex	r3, [r3]
 81061a8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 81061aa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 81061ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 81061b0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 81061b4:	687b      	ldr	r3, [r7, #4]
 81061b6:	681b      	ldr	r3, [r3, #0]
 81061b8:	461a      	mov	r2, r3
 81061ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 81061be:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 81061c2:	67fa      	str	r2, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81061c4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 81061c6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 81061ca:	e841 2300 	strex	r3, r2, [r1]
 81061ce:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 81061d0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81061d2:	2b00      	cmp	r3, #0
 81061d4:	d1e2      	bne.n	810619c <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 81061d6:	687b      	ldr	r3, [r7, #4]
 81061d8:	681b      	ldr	r3, [r3, #0]
 81061da:	3308      	adds	r3, #8
 81061dc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81061de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 81061e0:	e853 3f00 	ldrex	r3, [r3]
 81061e4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 81061e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81061e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 81061ec:	f023 0301 	bic.w	r3, r3, #1
 81061f0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 81061f4:	687b      	ldr	r3, [r7, #4]
 81061f6:	681b      	ldr	r3, [r3, #0]
 81061f8:	3308      	adds	r3, #8
 81061fa:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 81061fe:	66fa      	str	r2, [r7, #108]	; 0x6c
 8106200:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106202:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8106204:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8106206:	e841 2300 	strex	r3, r2, [r1]
 810620a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 810620c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810620e:	2b00      	cmp	r3, #0
 8106210:	d1e1      	bne.n	81061d6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8106212:	687b      	ldr	r3, [r7, #4]
 8106214:	2220      	movs	r2, #32
 8106216:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 810621a:	687b      	ldr	r3, [r7, #4]
 810621c:	2200      	movs	r2, #0
 810621e:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8106220:	687b      	ldr	r3, [r7, #4]
 8106222:	2200      	movs	r2, #0
 8106224:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8106226:	687b      	ldr	r3, [r7, #4]
 8106228:	681b      	ldr	r3, [r3, #0]
 810622a:	4a5f      	ldr	r2, [pc, #380]	; (81063a8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 810622c:	4293      	cmp	r3, r2
 810622e:	d021      	beq.n	8106274 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8106230:	687b      	ldr	r3, [r7, #4]
 8106232:	681b      	ldr	r3, [r3, #0]
 8106234:	685b      	ldr	r3, [r3, #4]
 8106236:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 810623a:	2b00      	cmp	r3, #0
 810623c:	d01a      	beq.n	8106274 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 810623e:	687b      	ldr	r3, [r7, #4]
 8106240:	681b      	ldr	r3, [r3, #0]
 8106242:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106244:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8106246:	e853 3f00 	ldrex	r3, [r3]
 810624a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 810624c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810624e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8106252:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8106256:	687b      	ldr	r3, [r7, #4]
 8106258:	681b      	ldr	r3, [r3, #0]
 810625a:	461a      	mov	r2, r3
 810625c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8106260:	65bb      	str	r3, [r7, #88]	; 0x58
 8106262:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106264:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8106266:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8106268:	e841 2300 	strex	r3, r2, [r1]
 810626c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 810626e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8106270:	2b00      	cmp	r3, #0
 8106272:	d1e4      	bne.n	810623e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8106274:	687b      	ldr	r3, [r7, #4]
 8106276:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8106278:	2b01      	cmp	r3, #1
 810627a:	d130      	bne.n	81062de <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 810627c:	687b      	ldr	r3, [r7, #4]
 810627e:	2200      	movs	r2, #0
 8106280:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8106282:	687b      	ldr	r3, [r7, #4]
 8106284:	681b      	ldr	r3, [r3, #0]
 8106286:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106288:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810628a:	e853 3f00 	ldrex	r3, [r3]
 810628e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8106290:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8106292:	f023 0310 	bic.w	r3, r3, #16
 8106296:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 810629a:	687b      	ldr	r3, [r7, #4]
 810629c:	681b      	ldr	r3, [r3, #0]
 810629e:	461a      	mov	r2, r3
 81062a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 81062a4:	647b      	str	r3, [r7, #68]	; 0x44
 81062a6:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81062a8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 81062aa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 81062ac:	e841 2300 	strex	r3, r2, [r1]
 81062b0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 81062b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 81062b4:	2b00      	cmp	r3, #0
 81062b6:	d1e4      	bne.n	8106282 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 81062b8:	687b      	ldr	r3, [r7, #4]
 81062ba:	681b      	ldr	r3, [r3, #0]
 81062bc:	69db      	ldr	r3, [r3, #28]
 81062be:	f003 0310 	and.w	r3, r3, #16
 81062c2:	2b10      	cmp	r3, #16
 81062c4:	d103      	bne.n	81062ce <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 81062c6:	687b      	ldr	r3, [r7, #4]
 81062c8:	681b      	ldr	r3, [r3, #0]
 81062ca:	2210      	movs	r2, #16
 81062cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 81062ce:	687b      	ldr	r3, [r7, #4]
 81062d0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 81062d4:	4619      	mov	r1, r3
 81062d6:	6878      	ldr	r0, [r7, #4]
 81062d8:	f7fe fa56 	bl	8104788 <HAL_UARTEx_RxEventCallback>
 81062dc:	e002      	b.n	81062e4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 81062de:	6878      	ldr	r0, [r7, #4]
 81062e0:	f7fa fb78 	bl	81009d4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 81062e4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	; 0xa6
 81062e8:	2b00      	cmp	r3, #0
 81062ea:	d006      	beq.n	81062fa <UART_RxISR_16BIT_FIFOEN+0x2b2>
 81062ec:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 81062f0:	f003 0320 	and.w	r3, r3, #32
 81062f4:	2b00      	cmp	r3, #0
 81062f6:	f47f aecb 	bne.w	8106090 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 81062fa:	687b      	ldr	r3, [r7, #4]
 81062fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8106300:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8106304:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8106308:	2b00      	cmp	r3, #0
 810630a:	d049      	beq.n	81063a0 <UART_RxISR_16BIT_FIFOEN+0x358>
 810630c:	687b      	ldr	r3, [r7, #4]
 810630e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8106312:	f8b7 208e 	ldrh.w	r2, [r7, #142]	; 0x8e
 8106316:	429a      	cmp	r2, r3
 8106318:	d242      	bcs.n	81063a0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 810631a:	687b      	ldr	r3, [r7, #4]
 810631c:	681b      	ldr	r3, [r3, #0]
 810631e:	3308      	adds	r3, #8
 8106320:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8106322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8106324:	e853 3f00 	ldrex	r3, [r3]
 8106328:	623b      	str	r3, [r7, #32]
   return(result);
 810632a:	6a3b      	ldr	r3, [r7, #32]
 810632c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8106330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8106334:	687b      	ldr	r3, [r7, #4]
 8106336:	681b      	ldr	r3, [r3, #0]
 8106338:	3308      	adds	r3, #8
 810633a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 810633e:	633a      	str	r2, [r7, #48]	; 0x30
 8106340:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8106342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8106344:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8106346:	e841 2300 	strex	r3, r2, [r1]
 810634a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 810634c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 810634e:	2b00      	cmp	r3, #0
 8106350:	d1e3      	bne.n	810631a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8106352:	687b      	ldr	r3, [r7, #4]
 8106354:	4a15      	ldr	r2, [pc, #84]	; (81063ac <UART_RxISR_16BIT_FIFOEN+0x364>)
 8106356:	675a      	str	r2, [r3, #116]	; 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8106358:	687b      	ldr	r3, [r7, #4]
 810635a:	681b      	ldr	r3, [r3, #0]
 810635c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 810635e:	693b      	ldr	r3, [r7, #16]
 8106360:	e853 3f00 	ldrex	r3, [r3]
 8106364:	60fb      	str	r3, [r7, #12]
   return(result);
 8106366:	68fb      	ldr	r3, [r7, #12]
 8106368:	f043 0320 	orr.w	r3, r3, #32
 810636c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8106370:	687b      	ldr	r3, [r7, #4]
 8106372:	681b      	ldr	r3, [r3, #0]
 8106374:	461a      	mov	r2, r3
 8106376:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 810637a:	61fb      	str	r3, [r7, #28]
 810637c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 810637e:	69b9      	ldr	r1, [r7, #24]
 8106380:	69fa      	ldr	r2, [r7, #28]
 8106382:	e841 2300 	strex	r3, r2, [r1]
 8106386:	617b      	str	r3, [r7, #20]
   return(result);
 8106388:	697b      	ldr	r3, [r7, #20]
 810638a:	2b00      	cmp	r3, #0
 810638c:	d1e4      	bne.n	8106358 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 810638e:	e007      	b.n	81063a0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8106390:	687b      	ldr	r3, [r7, #4]
 8106392:	681b      	ldr	r3, [r3, #0]
 8106394:	699a      	ldr	r2, [r3, #24]
 8106396:	687b      	ldr	r3, [r7, #4]
 8106398:	681b      	ldr	r3, [r3, #0]
 810639a:	f042 0208 	orr.w	r2, r2, #8
 810639e:	619a      	str	r2, [r3, #24]
}
 81063a0:	bf00      	nop
 81063a2:	37b8      	adds	r7, #184	; 0xb8
 81063a4:	46bd      	mov	sp, r7
 81063a6:	bd80      	pop	{r7, pc}
 81063a8:	58000c00 	.word	0x58000c00
 81063ac:	08105b31 	.word	0x08105b31

081063b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 81063b0:	b480      	push	{r7}
 81063b2:	b083      	sub	sp, #12
 81063b4:	af00      	add	r7, sp, #0
 81063b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 81063b8:	bf00      	nop
 81063ba:	370c      	adds	r7, #12
 81063bc:	46bd      	mov	sp, r7
 81063be:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063c2:	4770      	bx	lr

081063c4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 81063c4:	b480      	push	{r7}
 81063c6:	b083      	sub	sp, #12
 81063c8:	af00      	add	r7, sp, #0
 81063ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 81063cc:	bf00      	nop
 81063ce:	370c      	adds	r7, #12
 81063d0:	46bd      	mov	sp, r7
 81063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063d6:	4770      	bx	lr

081063d8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 81063d8:	b480      	push	{r7}
 81063da:	b083      	sub	sp, #12
 81063dc:	af00      	add	r7, sp, #0
 81063de:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 81063e0:	bf00      	nop
 81063e2:	370c      	adds	r7, #12
 81063e4:	46bd      	mov	sp, r7
 81063e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81063ea:	4770      	bx	lr

081063ec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 81063ec:	b480      	push	{r7}
 81063ee:	b085      	sub	sp, #20
 81063f0:	af00      	add	r7, sp, #0
 81063f2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 81063f4:	687b      	ldr	r3, [r7, #4]
 81063f6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 81063fa:	2b01      	cmp	r3, #1
 81063fc:	d101      	bne.n	8106402 <HAL_UARTEx_DisableFifoMode+0x16>
 81063fe:	2302      	movs	r3, #2
 8106400:	e027      	b.n	8106452 <HAL_UARTEx_DisableFifoMode+0x66>
 8106402:	687b      	ldr	r3, [r7, #4]
 8106404:	2201      	movs	r2, #1
 8106406:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810640a:	687b      	ldr	r3, [r7, #4]
 810640c:	2224      	movs	r2, #36	; 0x24
 810640e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106412:	687b      	ldr	r3, [r7, #4]
 8106414:	681b      	ldr	r3, [r3, #0]
 8106416:	681b      	ldr	r3, [r3, #0]
 8106418:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810641a:	687b      	ldr	r3, [r7, #4]
 810641c:	681b      	ldr	r3, [r3, #0]
 810641e:	681a      	ldr	r2, [r3, #0]
 8106420:	687b      	ldr	r3, [r7, #4]
 8106422:	681b      	ldr	r3, [r3, #0]
 8106424:	f022 0201 	bic.w	r2, r2, #1
 8106428:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 810642a:	68fb      	ldr	r3, [r7, #12]
 810642c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8106430:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8106432:	687b      	ldr	r3, [r7, #4]
 8106434:	2200      	movs	r2, #0
 8106436:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106438:	687b      	ldr	r3, [r7, #4]
 810643a:	681b      	ldr	r3, [r3, #0]
 810643c:	68fa      	ldr	r2, [r7, #12]
 810643e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8106440:	687b      	ldr	r3, [r7, #4]
 8106442:	2220      	movs	r2, #32
 8106444:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106448:	687b      	ldr	r3, [r7, #4]
 810644a:	2200      	movs	r2, #0
 810644c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8106450:	2300      	movs	r3, #0
}
 8106452:	4618      	mov	r0, r3
 8106454:	3714      	adds	r7, #20
 8106456:	46bd      	mov	sp, r7
 8106458:	f85d 7b04 	ldr.w	r7, [sp], #4
 810645c:	4770      	bx	lr

0810645e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 810645e:	b580      	push	{r7, lr}
 8106460:	b084      	sub	sp, #16
 8106462:	af00      	add	r7, sp, #0
 8106464:	6078      	str	r0, [r7, #4]
 8106466:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8106468:	687b      	ldr	r3, [r7, #4]
 810646a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 810646e:	2b01      	cmp	r3, #1
 8106470:	d101      	bne.n	8106476 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8106472:	2302      	movs	r3, #2
 8106474:	e02d      	b.n	81064d2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8106476:	687b      	ldr	r3, [r7, #4]
 8106478:	2201      	movs	r2, #1
 810647a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 810647e:	687b      	ldr	r3, [r7, #4]
 8106480:	2224      	movs	r2, #36	; 0x24
 8106482:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106486:	687b      	ldr	r3, [r7, #4]
 8106488:	681b      	ldr	r3, [r3, #0]
 810648a:	681b      	ldr	r3, [r3, #0]
 810648c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810648e:	687b      	ldr	r3, [r7, #4]
 8106490:	681b      	ldr	r3, [r3, #0]
 8106492:	681a      	ldr	r2, [r3, #0]
 8106494:	687b      	ldr	r3, [r7, #4]
 8106496:	681b      	ldr	r3, [r3, #0]
 8106498:	f022 0201 	bic.w	r2, r2, #1
 810649c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 810649e:	687b      	ldr	r3, [r7, #4]
 81064a0:	681b      	ldr	r3, [r3, #0]
 81064a2:	689b      	ldr	r3, [r3, #8]
 81064a4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 81064a8:	687b      	ldr	r3, [r7, #4]
 81064aa:	681b      	ldr	r3, [r3, #0]
 81064ac:	683a      	ldr	r2, [r7, #0]
 81064ae:	430a      	orrs	r2, r1
 81064b0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 81064b2:	6878      	ldr	r0, [r7, #4]
 81064b4:	f000 f850 	bl	8106558 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 81064b8:	687b      	ldr	r3, [r7, #4]
 81064ba:	681b      	ldr	r3, [r3, #0]
 81064bc:	68fa      	ldr	r2, [r7, #12]
 81064be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 81064c0:	687b      	ldr	r3, [r7, #4]
 81064c2:	2220      	movs	r2, #32
 81064c4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 81064c8:	687b      	ldr	r3, [r7, #4]
 81064ca:	2200      	movs	r2, #0
 81064cc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 81064d0:	2300      	movs	r3, #0
}
 81064d2:	4618      	mov	r0, r3
 81064d4:	3710      	adds	r7, #16
 81064d6:	46bd      	mov	sp, r7
 81064d8:	bd80      	pop	{r7, pc}

081064da <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 81064da:	b580      	push	{r7, lr}
 81064dc:	b084      	sub	sp, #16
 81064de:	af00      	add	r7, sp, #0
 81064e0:	6078      	str	r0, [r7, #4]
 81064e2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 81064e4:	687b      	ldr	r3, [r7, #4]
 81064e6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 81064ea:	2b01      	cmp	r3, #1
 81064ec:	d101      	bne.n	81064f2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 81064ee:	2302      	movs	r3, #2
 81064f0:	e02d      	b.n	810654e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 81064f2:	687b      	ldr	r3, [r7, #4]
 81064f4:	2201      	movs	r2, #1
 81064f6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 81064fa:	687b      	ldr	r3, [r7, #4]
 81064fc:	2224      	movs	r2, #36	; 0x24
 81064fe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8106502:	687b      	ldr	r3, [r7, #4]
 8106504:	681b      	ldr	r3, [r3, #0]
 8106506:	681b      	ldr	r3, [r3, #0]
 8106508:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 810650a:	687b      	ldr	r3, [r7, #4]
 810650c:	681b      	ldr	r3, [r3, #0]
 810650e:	681a      	ldr	r2, [r3, #0]
 8106510:	687b      	ldr	r3, [r7, #4]
 8106512:	681b      	ldr	r3, [r3, #0]
 8106514:	f022 0201 	bic.w	r2, r2, #1
 8106518:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 810651a:	687b      	ldr	r3, [r7, #4]
 810651c:	681b      	ldr	r3, [r3, #0]
 810651e:	689b      	ldr	r3, [r3, #8]
 8106520:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8106524:	687b      	ldr	r3, [r7, #4]
 8106526:	681b      	ldr	r3, [r3, #0]
 8106528:	683a      	ldr	r2, [r7, #0]
 810652a:	430a      	orrs	r2, r1
 810652c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 810652e:	6878      	ldr	r0, [r7, #4]
 8106530:	f000 f812 	bl	8106558 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8106534:	687b      	ldr	r3, [r7, #4]
 8106536:	681b      	ldr	r3, [r3, #0]
 8106538:	68fa      	ldr	r2, [r7, #12]
 810653a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 810653c:	687b      	ldr	r3, [r7, #4]
 810653e:	2220      	movs	r2, #32
 8106540:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8106544:	687b      	ldr	r3, [r7, #4]
 8106546:	2200      	movs	r2, #0
 8106548:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 810654c:	2300      	movs	r3, #0
}
 810654e:	4618      	mov	r0, r3
 8106550:	3710      	adds	r7, #16
 8106552:	46bd      	mov	sp, r7
 8106554:	bd80      	pop	{r7, pc}
	...

08106558 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8106558:	b480      	push	{r7}
 810655a:	b085      	sub	sp, #20
 810655c:	af00      	add	r7, sp, #0
 810655e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8106560:	687b      	ldr	r3, [r7, #4]
 8106562:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8106564:	2b00      	cmp	r3, #0
 8106566:	d108      	bne.n	810657a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8106568:	687b      	ldr	r3, [r7, #4]
 810656a:	2201      	movs	r2, #1
 810656c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8106570:	687b      	ldr	r3, [r7, #4]
 8106572:	2201      	movs	r2, #1
 8106574:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8106578:	e031      	b.n	81065de <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 810657a:	2310      	movs	r3, #16
 810657c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 810657e:	2310      	movs	r3, #16
 8106580:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8106582:	687b      	ldr	r3, [r7, #4]
 8106584:	681b      	ldr	r3, [r3, #0]
 8106586:	689b      	ldr	r3, [r3, #8]
 8106588:	0e5b      	lsrs	r3, r3, #25
 810658a:	b2db      	uxtb	r3, r3
 810658c:	f003 0307 	and.w	r3, r3, #7
 8106590:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8106592:	687b      	ldr	r3, [r7, #4]
 8106594:	681b      	ldr	r3, [r3, #0]
 8106596:	689b      	ldr	r3, [r3, #8]
 8106598:	0f5b      	lsrs	r3, r3, #29
 810659a:	b2db      	uxtb	r3, r3
 810659c:	f003 0307 	and.w	r3, r3, #7
 81065a0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81065a2:	7bbb      	ldrb	r3, [r7, #14]
 81065a4:	7b3a      	ldrb	r2, [r7, #12]
 81065a6:	4911      	ldr	r1, [pc, #68]	; (81065ec <UARTEx_SetNbDataToProcess+0x94>)
 81065a8:	5c8a      	ldrb	r2, [r1, r2]
 81065aa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 81065ae:	7b3a      	ldrb	r2, [r7, #12]
 81065b0:	490f      	ldr	r1, [pc, #60]	; (81065f0 <UARTEx_SetNbDataToProcess+0x98>)
 81065b2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 81065b4:	fb93 f3f2 	sdiv	r3, r3, r2
 81065b8:	b29a      	uxth	r2, r3
 81065ba:	687b      	ldr	r3, [r7, #4]
 81065bc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81065c0:	7bfb      	ldrb	r3, [r7, #15]
 81065c2:	7b7a      	ldrb	r2, [r7, #13]
 81065c4:	4909      	ldr	r1, [pc, #36]	; (81065ec <UARTEx_SetNbDataToProcess+0x94>)
 81065c6:	5c8a      	ldrb	r2, [r1, r2]
 81065c8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 81065cc:	7b7a      	ldrb	r2, [r7, #13]
 81065ce:	4908      	ldr	r1, [pc, #32]	; (81065f0 <UARTEx_SetNbDataToProcess+0x98>)
 81065d0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 81065d2:	fb93 f3f2 	sdiv	r3, r3, r2
 81065d6:	b29a      	uxth	r2, r3
 81065d8:	687b      	ldr	r3, [r7, #4]
 81065da:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 81065de:	bf00      	nop
 81065e0:	3714      	adds	r7, #20
 81065e2:	46bd      	mov	sp, r7
 81065e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81065e8:	4770      	bx	lr
 81065ea:	bf00      	nop
 81065ec:	081066cc 	.word	0x081066cc
 81065f0:	081066d4 	.word	0x081066d4

081065f4 <memset>:
 81065f4:	4402      	add	r2, r0
 81065f6:	4603      	mov	r3, r0
 81065f8:	4293      	cmp	r3, r2
 81065fa:	d100      	bne.n	81065fe <memset+0xa>
 81065fc:	4770      	bx	lr
 81065fe:	f803 1b01 	strb.w	r1, [r3], #1
 8106602:	e7f9      	b.n	81065f8 <memset+0x4>

08106604 <__libc_init_array>:
 8106604:	b570      	push	{r4, r5, r6, lr}
 8106606:	4d0d      	ldr	r5, [pc, #52]	; (810663c <__libc_init_array+0x38>)
 8106608:	4c0d      	ldr	r4, [pc, #52]	; (8106640 <__libc_init_array+0x3c>)
 810660a:	1b64      	subs	r4, r4, r5
 810660c:	10a4      	asrs	r4, r4, #2
 810660e:	2600      	movs	r6, #0
 8106610:	42a6      	cmp	r6, r4
 8106612:	d109      	bne.n	8106628 <__libc_init_array+0x24>
 8106614:	4d0b      	ldr	r5, [pc, #44]	; (8106644 <__libc_init_array+0x40>)
 8106616:	4c0c      	ldr	r4, [pc, #48]	; (8106648 <__libc_init_array+0x44>)
 8106618:	f000 f818 	bl	810664c <_init>
 810661c:	1b64      	subs	r4, r4, r5
 810661e:	10a4      	asrs	r4, r4, #2
 8106620:	2600      	movs	r6, #0
 8106622:	42a6      	cmp	r6, r4
 8106624:	d105      	bne.n	8106632 <__libc_init_array+0x2e>
 8106626:	bd70      	pop	{r4, r5, r6, pc}
 8106628:	f855 3b04 	ldr.w	r3, [r5], #4
 810662c:	4798      	blx	r3
 810662e:	3601      	adds	r6, #1
 8106630:	e7ee      	b.n	8106610 <__libc_init_array+0xc>
 8106632:	f855 3b04 	ldr.w	r3, [r5], #4
 8106636:	4798      	blx	r3
 8106638:	3601      	adds	r6, #1
 810663a:	e7f2      	b.n	8106622 <__libc_init_array+0x1e>
 810663c:	081066e4 	.word	0x081066e4
 8106640:	081066e4 	.word	0x081066e4
 8106644:	081066e4 	.word	0x081066e4
 8106648:	081066e8 	.word	0x081066e8

0810664c <_init>:
 810664c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810664e:	bf00      	nop
 8106650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8106652:	bc08      	pop	{r3}
 8106654:	469e      	mov	lr, r3
 8106656:	4770      	bx	lr

08106658 <_fini>:
 8106658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810665a:	bf00      	nop
 810665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 810665e:	bc08      	pop	{r3}
 8106660:	469e      	mov	lr, r3
 8106662:	4770      	bx	lr
