
ifec_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a04  08100298  08100298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  08100c9c  08100c9c  00010c9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08100cac  08100cac  00010cac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08100cb0  08100cb0  00010cb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000014  10000000  08100cb4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000020  10000014  08100cc8  00020014  2**2
                  ALLOC
  7 ._user_heap_stack 00000604  10000034  08100cc8  00020034  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY
 10 .debug_info   00008ed4  00000000  00000000  00020087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000013a3  00000000  00000000  00028f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 000006c0  00000000  00000000  0002a300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 000004f9  00000000  00000000  0002a9c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  00038d0d  00000000  00000000  0002aeb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00007787  00000000  00000000  00063bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0017c8ae  00000000  00000000  0006b34d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000019cc  00000000  00000000  001e7bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000064  00000000  00000000  001e95c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000014 	.word	0x10000014
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08100c84 	.word	0x08100c84

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000018 	.word	0x10000018
 81002d4:	08100c84 	.word	0x08100c84

081002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81002d8:	b480      	push	{r7}
 81002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81002dc:	4b09      	ldr	r3, [pc, #36]	; (8100304 <SystemInit+0x2c>)
 81002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81002e2:	4a08      	ldr	r2, [pc, #32]	; (8100304 <SystemInit+0x2c>)
 81002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 81002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 81002ec:	4b05      	ldr	r3, [pc, #20]	; (8100304 <SystemInit+0x2c>)
 81002ee:	691b      	ldr	r3, [r3, #16]
 81002f0:	4a04      	ldr	r2, [pc, #16]	; (8100304 <SystemInit+0x2c>)
 81002f2:	f043 0310 	orr.w	r3, r3, #16
 81002f6:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 81002f8:	bf00      	nop
 81002fa:	46bd      	mov	sp, r7
 81002fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100300:	4770      	bx	lr
 8100302:	bf00      	nop
 8100304:	e000ed00 	.word	0xe000ed00

08100308 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100308:	b580      	push	{r7, lr}
 810030a:	b082      	sub	sp, #8
 810030c:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 810030e:	4b1e      	ldr	r3, [pc, #120]	; (8100388 <main+0x80>)
 8100310:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100314:	4a1c      	ldr	r2, [pc, #112]	; (8100388 <main+0x80>)
 8100316:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 810031a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 810031e:	4b1a      	ldr	r3, [pc, #104]	; (8100388 <main+0x80>)
 8100320:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100328:	607b      	str	r3, [r7, #4]
 810032a:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 810032c:	2001      	movs	r0, #1
 810032e:	f000 fa71 	bl	8100814 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100332:	f000 fafb 	bl	810092c <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100336:	2201      	movs	r2, #1
 8100338:	2102      	movs	r1, #2
 810033a:	2000      	movs	r0, #0
 810033c:	f000 fa7c 	bl	8100838 <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100340:	4b12      	ldr	r3, [pc, #72]	; (810038c <main+0x84>)
 8100342:	681b      	ldr	r3, [r3, #0]
 8100344:	091b      	lsrs	r3, r3, #4
 8100346:	f003 030f 	and.w	r3, r3, #15
 810034a:	2b07      	cmp	r3, #7
 810034c:	d108      	bne.n	8100360 <main+0x58>
 810034e:	4b10      	ldr	r3, [pc, #64]	; (8100390 <main+0x88>)
 8100350:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100354:	4a0e      	ldr	r2, [pc, #56]	; (8100390 <main+0x88>)
 8100356:	f043 0301 	orr.w	r3, r3, #1
 810035a:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 810035e:	e007      	b.n	8100370 <main+0x68>
 8100360:	4b0b      	ldr	r3, [pc, #44]	; (8100390 <main+0x88>)
 8100362:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100366:	4a0a      	ldr	r2, [pc, #40]	; (8100390 <main+0x88>)
 8100368:	f043 0301 	orr.w	r3, r3, #1
 810036c:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100370:	f000 f880 	bl	8100474 <HAL_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  count++;
 8100374:	4b07      	ldr	r3, [pc, #28]	; (8100394 <main+0x8c>)
 8100376:	681b      	ldr	r3, [r3, #0]
 8100378:	3301      	adds	r3, #1
 810037a:	4a06      	ldr	r2, [pc, #24]	; (8100394 <main+0x8c>)
 810037c:	6013      	str	r3, [r2, #0]
	  HAL_Delay(10000);
 810037e:	f242 7010 	movw	r0, #10000	; 0x2710
 8100382:	f000 f92b 	bl	81005dc <HAL_Delay>
	  count++;
 8100386:	e7f5      	b.n	8100374 <main+0x6c>
 8100388:	58024400 	.word	0x58024400
 810038c:	e000ed00 	.word	0xe000ed00
 8100390:	58026400 	.word	0x58026400
 8100394:	10000008 	.word	0x10000008

08100398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8100398:	b480      	push	{r7}
 810039a:	b083      	sub	sp, #12
 810039c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810039e:	4b0a      	ldr	r3, [pc, #40]	; (81003c8 <HAL_MspInit+0x30>)
 81003a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81003a4:	4a08      	ldr	r2, [pc, #32]	; (81003c8 <HAL_MspInit+0x30>)
 81003a6:	f043 0302 	orr.w	r3, r3, #2
 81003aa:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 81003ae:	4b06      	ldr	r3, [pc, #24]	; (81003c8 <HAL_MspInit+0x30>)
 81003b0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81003b4:	f003 0302 	and.w	r3, r3, #2
 81003b8:	607b      	str	r3, [r7, #4]
 81003ba:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81003bc:	bf00      	nop
 81003be:	370c      	adds	r7, #12
 81003c0:	46bd      	mov	sp, r7
 81003c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003c6:	4770      	bx	lr
 81003c8:	58024400 	.word	0x58024400

081003cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81003cc:	b480      	push	{r7}
 81003ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 81003d0:	e7fe      	b.n	81003d0 <NMI_Handler+0x4>

081003d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81003d2:	b480      	push	{r7}
 81003d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81003d6:	e7fe      	b.n	81003d6 <HardFault_Handler+0x4>

081003d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81003d8:	b480      	push	{r7}
 81003da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81003dc:	e7fe      	b.n	81003dc <MemManage_Handler+0x4>

081003de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81003de:	b480      	push	{r7}
 81003e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81003e2:	e7fe      	b.n	81003e2 <BusFault_Handler+0x4>

081003e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81003e4:	b480      	push	{r7}
 81003e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81003e8:	e7fe      	b.n	81003e8 <UsageFault_Handler+0x4>

081003ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81003ea:	b480      	push	{r7}
 81003ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81003ee:	bf00      	nop
 81003f0:	46bd      	mov	sp, r7
 81003f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81003f6:	4770      	bx	lr

081003f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81003f8:	b480      	push	{r7}
 81003fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81003fc:	bf00      	nop
 81003fe:	46bd      	mov	sp, r7
 8100400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100404:	4770      	bx	lr

08100406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8100406:	b480      	push	{r7}
 8100408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810040a:	bf00      	nop
 810040c:	46bd      	mov	sp, r7
 810040e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100412:	4770      	bx	lr

08100414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8100414:	b580      	push	{r7, lr}
 8100416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8100418:	f000 f8c0 	bl	810059c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810041c:	bf00      	nop
 810041e:	bd80      	pop	{r7, pc}

08100420 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8100420:	f8df d034 	ldr.w	sp, [pc, #52]	; 8100458 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8100424:	f7ff ff58 	bl	81002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8100428:	480c      	ldr	r0, [pc, #48]	; (810045c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 810042a:	490d      	ldr	r1, [pc, #52]	; (8100460 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 810042c:	4a0d      	ldr	r2, [pc, #52]	; (8100464 <LoopFillZerobss+0x1a>)
  movs r3, #0
 810042e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8100430:	e002      	b.n	8100438 <LoopCopyDataInit>

08100432 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8100432:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8100434:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8100436:	3304      	adds	r3, #4

08100438 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8100438:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 810043a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 810043c:	d3f9      	bcc.n	8100432 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 810043e:	4a0a      	ldr	r2, [pc, #40]	; (8100468 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8100440:	4c0a      	ldr	r4, [pc, #40]	; (810046c <LoopFillZerobss+0x22>)
  movs r3, #0
 8100442:	2300      	movs	r3, #0
  b LoopFillZerobss
 8100444:	e001      	b.n	810044a <LoopFillZerobss>

08100446 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8100446:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8100448:	3204      	adds	r2, #4

0810044a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 810044a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 810044c:	d3fb      	bcc.n	8100446 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 810044e:	f000 fbf5 	bl	8100c3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8100452:	f7ff ff59 	bl	8100308 <main>
  bx  lr
 8100456:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8100458:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 810045c:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8100460:	10000014 	.word	0x10000014
  ldr r2, =_sidata
 8100464:	08100cb4 	.word	0x08100cb4
  ldr r2, =_sbss
 8100468:	10000014 	.word	0x10000014
  ldr r4, =_ebss
 810046c:	10000034 	.word	0x10000034

08100470 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8100470:	e7fe      	b.n	8100470 <ADC3_IRQHandler>
	...

08100474 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8100474:	b580      	push	{r7, lr}
 8100476:	b082      	sub	sp, #8
 8100478:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 810047a:	4b28      	ldr	r3, [pc, #160]	; (810051c <HAL_Init+0xa8>)
 810047c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100480:	4a26      	ldr	r2, [pc, #152]	; (810051c <HAL_Init+0xa8>)
 8100482:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8100486:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 810048a:	4b24      	ldr	r3, [pc, #144]	; (810051c <HAL_Init+0xa8>)
 810048c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100490:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8100494:	603b      	str	r3, [r7, #0]
 8100496:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8100498:	4b21      	ldr	r3, [pc, #132]	; (8100520 <HAL_Init+0xac>)
 810049a:	681b      	ldr	r3, [r3, #0]
 810049c:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 81004a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 81004a4:	4a1e      	ldr	r2, [pc, #120]	; (8100520 <HAL_Init+0xac>)
 81004a6:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 81004aa:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 81004ac:	4b1c      	ldr	r3, [pc, #112]	; (8100520 <HAL_Init+0xac>)
 81004ae:	681b      	ldr	r3, [r3, #0]
 81004b0:	4a1b      	ldr	r2, [pc, #108]	; (8100520 <HAL_Init+0xac>)
 81004b2:	f043 0301 	orr.w	r3, r3, #1
 81004b6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81004b8:	2003      	movs	r0, #3
 81004ba:	f000 f965 	bl	8100788 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 81004be:	f000 fa43 	bl	8100948 <HAL_RCC_GetSysClockFreq>
 81004c2:	4602      	mov	r2, r0
 81004c4:	4b15      	ldr	r3, [pc, #84]	; (810051c <HAL_Init+0xa8>)
 81004c6:	699b      	ldr	r3, [r3, #24]
 81004c8:	0a1b      	lsrs	r3, r3, #8
 81004ca:	f003 030f 	and.w	r3, r3, #15
 81004ce:	4915      	ldr	r1, [pc, #84]	; (8100524 <HAL_Init+0xb0>)
 81004d0:	5ccb      	ldrb	r3, [r1, r3]
 81004d2:	f003 031f 	and.w	r3, r3, #31
 81004d6:	fa22 f303 	lsr.w	r3, r2, r3
 81004da:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81004dc:	4b0f      	ldr	r3, [pc, #60]	; (810051c <HAL_Init+0xa8>)
 81004de:	699b      	ldr	r3, [r3, #24]
 81004e0:	f003 030f 	and.w	r3, r3, #15
 81004e4:	4a0f      	ldr	r2, [pc, #60]	; (8100524 <HAL_Init+0xb0>)
 81004e6:	5cd3      	ldrb	r3, [r2, r3]
 81004e8:	f003 031f 	and.w	r3, r3, #31
 81004ec:	687a      	ldr	r2, [r7, #4]
 81004ee:	fa22 f303 	lsr.w	r3, r2, r3
 81004f2:	4a0d      	ldr	r2, [pc, #52]	; (8100528 <HAL_Init+0xb4>)
 81004f4:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81004f6:	4b0c      	ldr	r3, [pc, #48]	; (8100528 <HAL_Init+0xb4>)
 81004f8:	681b      	ldr	r3, [r3, #0]
 81004fa:	4a0c      	ldr	r2, [pc, #48]	; (810052c <HAL_Init+0xb8>)
 81004fc:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81004fe:	2000      	movs	r0, #0
 8100500:	f000 f816 	bl	8100530 <HAL_InitTick>
 8100504:	4603      	mov	r3, r0
 8100506:	2b00      	cmp	r3, #0
 8100508:	d001      	beq.n	810050e <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 810050a:	2301      	movs	r3, #1
 810050c:	e002      	b.n	8100514 <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 810050e:	f7ff ff43 	bl	8100398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8100512:	2300      	movs	r3, #0
}
 8100514:	4618      	mov	r0, r3
 8100516:	3708      	adds	r7, #8
 8100518:	46bd      	mov	sp, r7
 810051a:	bd80      	pop	{r7, pc}
 810051c:	58024400 	.word	0x58024400
 8100520:	40024400 	.word	0x40024400
 8100524:	08100c9c 	.word	0x08100c9c
 8100528:	10000004 	.word	0x10000004
 810052c:	10000000 	.word	0x10000000

08100530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8100530:	b580      	push	{r7, lr}
 8100532:	b082      	sub	sp, #8
 8100534:	af00      	add	r7, sp, #0
 8100536:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8100538:	4b15      	ldr	r3, [pc, #84]	; (8100590 <HAL_InitTick+0x60>)
 810053a:	781b      	ldrb	r3, [r3, #0]
 810053c:	2b00      	cmp	r3, #0
 810053e:	d101      	bne.n	8100544 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8100540:	2301      	movs	r3, #1
 8100542:	e021      	b.n	8100588 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8100544:	4b13      	ldr	r3, [pc, #76]	; (8100594 <HAL_InitTick+0x64>)
 8100546:	681a      	ldr	r2, [r3, #0]
 8100548:	4b11      	ldr	r3, [pc, #68]	; (8100590 <HAL_InitTick+0x60>)
 810054a:	781b      	ldrb	r3, [r3, #0]
 810054c:	4619      	mov	r1, r3
 810054e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8100552:	fbb3 f3f1 	udiv	r3, r3, r1
 8100556:	fbb2 f3f3 	udiv	r3, r2, r3
 810055a:	4618      	mov	r0, r3
 810055c:	f000 f939 	bl	81007d2 <HAL_SYSTICK_Config>
 8100560:	4603      	mov	r3, r0
 8100562:	2b00      	cmp	r3, #0
 8100564:	d001      	beq.n	810056a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8100566:	2301      	movs	r3, #1
 8100568:	e00e      	b.n	8100588 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 810056a:	687b      	ldr	r3, [r7, #4]
 810056c:	2b0f      	cmp	r3, #15
 810056e:	d80a      	bhi.n	8100586 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8100570:	2200      	movs	r2, #0
 8100572:	6879      	ldr	r1, [r7, #4]
 8100574:	f04f 30ff 	mov.w	r0, #4294967295
 8100578:	f000 f911 	bl	810079e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 810057c:	4a06      	ldr	r2, [pc, #24]	; (8100598 <HAL_InitTick+0x68>)
 810057e:	687b      	ldr	r3, [r7, #4]
 8100580:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8100582:	2300      	movs	r3, #0
 8100584:	e000      	b.n	8100588 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8100586:	2301      	movs	r3, #1
}
 8100588:	4618      	mov	r0, r3
 810058a:	3708      	adds	r7, #8
 810058c:	46bd      	mov	sp, r7
 810058e:	bd80      	pop	{r7, pc}
 8100590:	10000010 	.word	0x10000010
 8100594:	10000000 	.word	0x10000000
 8100598:	1000000c 	.word	0x1000000c

0810059c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 810059c:	b480      	push	{r7}
 810059e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 81005a0:	4b06      	ldr	r3, [pc, #24]	; (81005bc <HAL_IncTick+0x20>)
 81005a2:	781b      	ldrb	r3, [r3, #0]
 81005a4:	461a      	mov	r2, r3
 81005a6:	4b06      	ldr	r3, [pc, #24]	; (81005c0 <HAL_IncTick+0x24>)
 81005a8:	681b      	ldr	r3, [r3, #0]
 81005aa:	4413      	add	r3, r2
 81005ac:	4a04      	ldr	r2, [pc, #16]	; (81005c0 <HAL_IncTick+0x24>)
 81005ae:	6013      	str	r3, [r2, #0]
}
 81005b0:	bf00      	nop
 81005b2:	46bd      	mov	sp, r7
 81005b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005b8:	4770      	bx	lr
 81005ba:	bf00      	nop
 81005bc:	10000010 	.word	0x10000010
 81005c0:	10000030 	.word	0x10000030

081005c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 81005c4:	b480      	push	{r7}
 81005c6:	af00      	add	r7, sp, #0
  return uwTick;
 81005c8:	4b03      	ldr	r3, [pc, #12]	; (81005d8 <HAL_GetTick+0x14>)
 81005ca:	681b      	ldr	r3, [r3, #0]
}
 81005cc:	4618      	mov	r0, r3
 81005ce:	46bd      	mov	sp, r7
 81005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81005d4:	4770      	bx	lr
 81005d6:	bf00      	nop
 81005d8:	10000030 	.word	0x10000030

081005dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 81005dc:	b580      	push	{r7, lr}
 81005de:	b084      	sub	sp, #16
 81005e0:	af00      	add	r7, sp, #0
 81005e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 81005e4:	f7ff ffee 	bl	81005c4 <HAL_GetTick>
 81005e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 81005ea:	687b      	ldr	r3, [r7, #4]
 81005ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 81005ee:	68fb      	ldr	r3, [r7, #12]
 81005f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 81005f4:	d005      	beq.n	8100602 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 81005f6:	4b0a      	ldr	r3, [pc, #40]	; (8100620 <HAL_Delay+0x44>)
 81005f8:	781b      	ldrb	r3, [r3, #0]
 81005fa:	461a      	mov	r2, r3
 81005fc:	68fb      	ldr	r3, [r7, #12]
 81005fe:	4413      	add	r3, r2
 8100600:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8100602:	bf00      	nop
 8100604:	f7ff ffde 	bl	81005c4 <HAL_GetTick>
 8100608:	4602      	mov	r2, r0
 810060a:	68bb      	ldr	r3, [r7, #8]
 810060c:	1ad3      	subs	r3, r2, r3
 810060e:	68fa      	ldr	r2, [r7, #12]
 8100610:	429a      	cmp	r2, r3
 8100612:	d8f7      	bhi.n	8100604 <HAL_Delay+0x28>
  {
  }
}
 8100614:	bf00      	nop
 8100616:	bf00      	nop
 8100618:	3710      	adds	r7, #16
 810061a:	46bd      	mov	sp, r7
 810061c:	bd80      	pop	{r7, pc}
 810061e:	bf00      	nop
 8100620:	10000010 	.word	0x10000010

08100624 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100624:	b480      	push	{r7}
 8100626:	b085      	sub	sp, #20
 8100628:	af00      	add	r7, sp, #0
 810062a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 810062c:	687b      	ldr	r3, [r7, #4]
 810062e:	f003 0307 	and.w	r3, r3, #7
 8100632:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8100634:	4b0c      	ldr	r3, [pc, #48]	; (8100668 <__NVIC_SetPriorityGrouping+0x44>)
 8100636:	68db      	ldr	r3, [r3, #12]
 8100638:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 810063a:	68ba      	ldr	r2, [r7, #8]
 810063c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8100640:	4013      	ands	r3, r2
 8100642:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8100644:	68fb      	ldr	r3, [r7, #12]
 8100646:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8100648:	68bb      	ldr	r3, [r7, #8]
 810064a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 810064c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8100650:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8100654:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8100656:	4a04      	ldr	r2, [pc, #16]	; (8100668 <__NVIC_SetPriorityGrouping+0x44>)
 8100658:	68bb      	ldr	r3, [r7, #8]
 810065a:	60d3      	str	r3, [r2, #12]
}
 810065c:	bf00      	nop
 810065e:	3714      	adds	r7, #20
 8100660:	46bd      	mov	sp, r7
 8100662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100666:	4770      	bx	lr
 8100668:	e000ed00 	.word	0xe000ed00

0810066c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 810066c:	b480      	push	{r7}
 810066e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8100670:	4b04      	ldr	r3, [pc, #16]	; (8100684 <__NVIC_GetPriorityGrouping+0x18>)
 8100672:	68db      	ldr	r3, [r3, #12]
 8100674:	0a1b      	lsrs	r3, r3, #8
 8100676:	f003 0307 	and.w	r3, r3, #7
}
 810067a:	4618      	mov	r0, r3
 810067c:	46bd      	mov	sp, r7
 810067e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100682:	4770      	bx	lr
 8100684:	e000ed00 	.word	0xe000ed00

08100688 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8100688:	b480      	push	{r7}
 810068a:	b083      	sub	sp, #12
 810068c:	af00      	add	r7, sp, #0
 810068e:	4603      	mov	r3, r0
 8100690:	6039      	str	r1, [r7, #0]
 8100692:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8100694:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8100698:	2b00      	cmp	r3, #0
 810069a:	db0a      	blt.n	81006b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 810069c:	683b      	ldr	r3, [r7, #0]
 810069e:	b2da      	uxtb	r2, r3
 81006a0:	490c      	ldr	r1, [pc, #48]	; (81006d4 <__NVIC_SetPriority+0x4c>)
 81006a2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81006a6:	0112      	lsls	r2, r2, #4
 81006a8:	b2d2      	uxtb	r2, r2
 81006aa:	440b      	add	r3, r1
 81006ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81006b0:	e00a      	b.n	81006c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81006b2:	683b      	ldr	r3, [r7, #0]
 81006b4:	b2da      	uxtb	r2, r3
 81006b6:	4908      	ldr	r1, [pc, #32]	; (81006d8 <__NVIC_SetPriority+0x50>)
 81006b8:	88fb      	ldrh	r3, [r7, #6]
 81006ba:	f003 030f 	and.w	r3, r3, #15
 81006be:	3b04      	subs	r3, #4
 81006c0:	0112      	lsls	r2, r2, #4
 81006c2:	b2d2      	uxtb	r2, r2
 81006c4:	440b      	add	r3, r1
 81006c6:	761a      	strb	r2, [r3, #24]
}
 81006c8:	bf00      	nop
 81006ca:	370c      	adds	r7, #12
 81006cc:	46bd      	mov	sp, r7
 81006ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81006d2:	4770      	bx	lr
 81006d4:	e000e100 	.word	0xe000e100
 81006d8:	e000ed00 	.word	0xe000ed00

081006dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 81006dc:	b480      	push	{r7}
 81006de:	b089      	sub	sp, #36	; 0x24
 81006e0:	af00      	add	r7, sp, #0
 81006e2:	60f8      	str	r0, [r7, #12]
 81006e4:	60b9      	str	r1, [r7, #8]
 81006e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81006e8:	68fb      	ldr	r3, [r7, #12]
 81006ea:	f003 0307 	and.w	r3, r3, #7
 81006ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81006f0:	69fb      	ldr	r3, [r7, #28]
 81006f2:	f1c3 0307 	rsb	r3, r3, #7
 81006f6:	2b04      	cmp	r3, #4
 81006f8:	bf28      	it	cs
 81006fa:	2304      	movcs	r3, #4
 81006fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 81006fe:	69fb      	ldr	r3, [r7, #28]
 8100700:	3304      	adds	r3, #4
 8100702:	2b06      	cmp	r3, #6
 8100704:	d902      	bls.n	810070c <NVIC_EncodePriority+0x30>
 8100706:	69fb      	ldr	r3, [r7, #28]
 8100708:	3b03      	subs	r3, #3
 810070a:	e000      	b.n	810070e <NVIC_EncodePriority+0x32>
 810070c:	2300      	movs	r3, #0
 810070e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100710:	f04f 32ff 	mov.w	r2, #4294967295
 8100714:	69bb      	ldr	r3, [r7, #24]
 8100716:	fa02 f303 	lsl.w	r3, r2, r3
 810071a:	43da      	mvns	r2, r3
 810071c:	68bb      	ldr	r3, [r7, #8]
 810071e:	401a      	ands	r2, r3
 8100720:	697b      	ldr	r3, [r7, #20]
 8100722:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8100724:	f04f 31ff 	mov.w	r1, #4294967295
 8100728:	697b      	ldr	r3, [r7, #20]
 810072a:	fa01 f303 	lsl.w	r3, r1, r3
 810072e:	43d9      	mvns	r1, r3
 8100730:	687b      	ldr	r3, [r7, #4]
 8100732:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8100734:	4313      	orrs	r3, r2
         );
}
 8100736:	4618      	mov	r0, r3
 8100738:	3724      	adds	r7, #36	; 0x24
 810073a:	46bd      	mov	sp, r7
 810073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100740:	4770      	bx	lr
	...

08100744 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8100744:	b580      	push	{r7, lr}
 8100746:	b082      	sub	sp, #8
 8100748:	af00      	add	r7, sp, #0
 810074a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 810074c:	687b      	ldr	r3, [r7, #4]
 810074e:	3b01      	subs	r3, #1
 8100750:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8100754:	d301      	bcc.n	810075a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8100756:	2301      	movs	r3, #1
 8100758:	e00f      	b.n	810077a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 810075a:	4a0a      	ldr	r2, [pc, #40]	; (8100784 <SysTick_Config+0x40>)
 810075c:	687b      	ldr	r3, [r7, #4]
 810075e:	3b01      	subs	r3, #1
 8100760:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8100762:	210f      	movs	r1, #15
 8100764:	f04f 30ff 	mov.w	r0, #4294967295
 8100768:	f7ff ff8e 	bl	8100688 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 810076c:	4b05      	ldr	r3, [pc, #20]	; (8100784 <SysTick_Config+0x40>)
 810076e:	2200      	movs	r2, #0
 8100770:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8100772:	4b04      	ldr	r3, [pc, #16]	; (8100784 <SysTick_Config+0x40>)
 8100774:	2207      	movs	r2, #7
 8100776:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8100778:	2300      	movs	r3, #0
}
 810077a:	4618      	mov	r0, r3
 810077c:	3708      	adds	r7, #8
 810077e:	46bd      	mov	sp, r7
 8100780:	bd80      	pop	{r7, pc}
 8100782:	bf00      	nop
 8100784:	e000e010 	.word	0xe000e010

08100788 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8100788:	b580      	push	{r7, lr}
 810078a:	b082      	sub	sp, #8
 810078c:	af00      	add	r7, sp, #0
 810078e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8100790:	6878      	ldr	r0, [r7, #4]
 8100792:	f7ff ff47 	bl	8100624 <__NVIC_SetPriorityGrouping>
}
 8100796:	bf00      	nop
 8100798:	3708      	adds	r7, #8
 810079a:	46bd      	mov	sp, r7
 810079c:	bd80      	pop	{r7, pc}

0810079e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 810079e:	b580      	push	{r7, lr}
 81007a0:	b086      	sub	sp, #24
 81007a2:	af00      	add	r7, sp, #0
 81007a4:	4603      	mov	r3, r0
 81007a6:	60b9      	str	r1, [r7, #8]
 81007a8:	607a      	str	r2, [r7, #4]
 81007aa:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 81007ac:	f7ff ff5e 	bl	810066c <__NVIC_GetPriorityGrouping>
 81007b0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 81007b2:	687a      	ldr	r2, [r7, #4]
 81007b4:	68b9      	ldr	r1, [r7, #8]
 81007b6:	6978      	ldr	r0, [r7, #20]
 81007b8:	f7ff ff90 	bl	81006dc <NVIC_EncodePriority>
 81007bc:	4602      	mov	r2, r0
 81007be:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 81007c2:	4611      	mov	r1, r2
 81007c4:	4618      	mov	r0, r3
 81007c6:	f7ff ff5f 	bl	8100688 <__NVIC_SetPriority>
}
 81007ca:	bf00      	nop
 81007cc:	3718      	adds	r7, #24
 81007ce:	46bd      	mov	sp, r7
 81007d0:	bd80      	pop	{r7, pc}

081007d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 81007d2:	b580      	push	{r7, lr}
 81007d4:	b082      	sub	sp, #8
 81007d6:	af00      	add	r7, sp, #0
 81007d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 81007da:	6878      	ldr	r0, [r7, #4]
 81007dc:	f7ff ffb2 	bl	8100744 <SysTick_Config>
 81007e0:	4603      	mov	r3, r0
}
 81007e2:	4618      	mov	r0, r3
 81007e4:	3708      	adds	r7, #8
 81007e6:	46bd      	mov	sp, r7
 81007e8:	bd80      	pop	{r7, pc}
	...

081007ec <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 81007ec:	b480      	push	{r7}
 81007ee:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 81007f0:	4b07      	ldr	r3, [pc, #28]	; (8100810 <HAL_GetCurrentCPUID+0x24>)
 81007f2:	681b      	ldr	r3, [r3, #0]
 81007f4:	091b      	lsrs	r3, r3, #4
 81007f6:	f003 030f 	and.w	r3, r3, #15
 81007fa:	2b07      	cmp	r3, #7
 81007fc:	d101      	bne.n	8100802 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 81007fe:	2303      	movs	r3, #3
 8100800:	e000      	b.n	8100804 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8100802:	2301      	movs	r3, #1
  }
}
 8100804:	4618      	mov	r0, r3
 8100806:	46bd      	mov	sp, r7
 8100808:	f85d 7b04 	ldr.w	r7, [sp], #4
 810080c:	4770      	bx	lr
 810080e:	bf00      	nop
 8100810:	e000ed00 	.word	0xe000ed00

08100814 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8100814:	b480      	push	{r7}
 8100816:	b083      	sub	sp, #12
 8100818:	af00      	add	r7, sp, #0
 810081a:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 810081c:	4b05      	ldr	r3, [pc, #20]	; (8100834 <HAL_HSEM_ActivateNotification+0x20>)
 810081e:	681a      	ldr	r2, [r3, #0]
 8100820:	4904      	ldr	r1, [pc, #16]	; (8100834 <HAL_HSEM_ActivateNotification+0x20>)
 8100822:	687b      	ldr	r3, [r7, #4]
 8100824:	4313      	orrs	r3, r2
 8100826:	600b      	str	r3, [r1, #0]
#endif
}
 8100828:	bf00      	nop
 810082a:	370c      	adds	r7, #12
 810082c:	46bd      	mov	sp, r7
 810082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100832:	4770      	bx	lr
 8100834:	58026510 	.word	0x58026510

08100838 <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 8100838:	b580      	push	{r7, lr}
 810083a:	b084      	sub	sp, #16
 810083c:	af00      	add	r7, sp, #0
 810083e:	60f8      	str	r0, [r7, #12]
 8100840:	460b      	mov	r3, r1
 8100842:	607a      	str	r2, [r7, #4]
 8100844:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 8100846:	4b37      	ldr	r3, [pc, #220]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100848:	681b      	ldr	r3, [r3, #0]
 810084a:	f023 0201 	bic.w	r2, r3, #1
 810084e:	4935      	ldr	r1, [pc, #212]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100850:	68fb      	ldr	r3, [r7, #12]
 8100852:	4313      	orrs	r3, r2
 8100854:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 8100856:	687b      	ldr	r3, [r7, #4]
 8100858:	2b00      	cmp	r3, #0
 810085a:	d123      	bne.n	81008a4 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 810085c:	f7ff ffc6 	bl	81007ec <HAL_GetCurrentCPUID>
 8100860:	4603      	mov	r3, r0
 8100862:	2b03      	cmp	r3, #3
 8100864:	d158      	bne.n	8100918 <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 8100866:	4b2f      	ldr	r3, [pc, #188]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100868:	691b      	ldr	r3, [r3, #16]
 810086a:	4a2e      	ldr	r2, [pc, #184]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 810086c:	f023 0301 	bic.w	r3, r3, #1
 8100870:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100872:	4b2d      	ldr	r3, [pc, #180]	; (8100928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100874:	691b      	ldr	r3, [r3, #16]
 8100876:	4a2c      	ldr	r2, [pc, #176]	; (8100928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100878:	f043 0304 	orr.w	r3, r3, #4
 810087c:	6113      	str	r3, [r2, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 810087e:	f3bf 8f4f 	dsb	sy
}
 8100882:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8100884:	f3bf 8f6f 	isb	sy
}
 8100888:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 810088a:	7afb      	ldrb	r3, [r7, #11]
 810088c:	2b01      	cmp	r3, #1
 810088e:	d101      	bne.n	8100894 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8100890:	bf30      	wfi
 8100892:	e000      	b.n	8100896 <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8100894:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8100896:	4b24      	ldr	r3, [pc, #144]	; (8100928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 8100898:	691b      	ldr	r3, [r3, #16]
 810089a:	4a23      	ldr	r2, [pc, #140]	; (8100928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 810089c:	f023 0304 	bic.w	r3, r3, #4
 81008a0:	6113      	str	r3, [r2, #16]
 81008a2:	e03c      	b.n	810091e <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81008a4:	687b      	ldr	r3, [r7, #4]
 81008a6:	2b01      	cmp	r3, #1
 81008a8:	d123      	bne.n	81008f2 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81008aa:	f7ff ff9f 	bl	81007ec <HAL_GetCurrentCPUID>
 81008ae:	4603      	mov	r3, r0
 81008b0:	2b01      	cmp	r3, #1
 81008b2:	d133      	bne.n	810091c <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81008b4:	4b1b      	ldr	r3, [pc, #108]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008b6:	695b      	ldr	r3, [r3, #20]
 81008b8:	4a1a      	ldr	r2, [pc, #104]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008ba:	f023 0302 	bic.w	r3, r3, #2
 81008be:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81008c0:	4b19      	ldr	r3, [pc, #100]	; (8100928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81008c2:	691b      	ldr	r3, [r3, #16]
 81008c4:	4a18      	ldr	r2, [pc, #96]	; (8100928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81008c6:	f043 0304 	orr.w	r3, r3, #4
 81008ca:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81008cc:	f3bf 8f4f 	dsb	sy
}
 81008d0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81008d2:	f3bf 8f6f 	isb	sy
}
 81008d6:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81008d8:	7afb      	ldrb	r3, [r7, #11]
 81008da:	2b01      	cmp	r3, #1
 81008dc:	d101      	bne.n	81008e2 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81008de:	bf30      	wfi
 81008e0:	e000      	b.n	81008e4 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81008e2:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81008e4:	4b10      	ldr	r3, [pc, #64]	; (8100928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81008e6:	691b      	ldr	r3, [r3, #16]
 81008e8:	4a0f      	ldr	r2, [pc, #60]	; (8100928 <HAL_PWREx_EnterSTOPMode+0xf0>)
 81008ea:	f023 0304 	bic.w	r3, r3, #4
 81008ee:	6113      	str	r3, [r2, #16]
 81008f0:	e015      	b.n	810091e <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 81008f2:	f7ff ff7b 	bl	81007ec <HAL_GetCurrentCPUID>
 81008f6:	4603      	mov	r3, r0
 81008f8:	2b03      	cmp	r3, #3
 81008fa:	d106      	bne.n	810090a <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 81008fc:	4b09      	ldr	r3, [pc, #36]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 81008fe:	691b      	ldr	r3, [r3, #16]
 8100900:	4a08      	ldr	r2, [pc, #32]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100902:	f023 0304 	bic.w	r3, r3, #4
 8100906:	6113      	str	r3, [r2, #16]
 8100908:	e009      	b.n	810091e <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810090a:	4b06      	ldr	r3, [pc, #24]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 810090c:	695b      	ldr	r3, [r3, #20]
 810090e:	4a05      	ldr	r2, [pc, #20]	; (8100924 <HAL_PWREx_EnterSTOPMode+0xec>)
 8100910:	f023 0304 	bic.w	r3, r3, #4
 8100914:	6153      	str	r3, [r2, #20]
 8100916:	e002      	b.n	810091e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8100918:	bf00      	nop
 810091a:	e000      	b.n	810091e <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810091c:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 810091e:	3710      	adds	r7, #16
 8100920:	46bd      	mov	sp, r7
 8100922:	bd80      	pop	{r7, pc}
 8100924:	58024800 	.word	0x58024800
 8100928:	e000ed00 	.word	0xe000ed00

0810092c <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 810092c:	b580      	push	{r7, lr}
 810092e:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8100930:	f7ff ff5c 	bl	81007ec <HAL_GetCurrentCPUID>
 8100934:	4603      	mov	r3, r0
 8100936:	2b03      	cmp	r3, #3
 8100938:	d101      	bne.n	810093e <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810093a:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 810093c:	e001      	b.n	8100942 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 810093e:	bf40      	sev
    __WFE ();
 8100940:	bf20      	wfe
}
 8100942:	bf00      	nop
 8100944:	bd80      	pop	{r7, pc}
	...

08100948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8100948:	b480      	push	{r7}
 810094a:	b089      	sub	sp, #36	; 0x24
 810094c:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 810094e:	4bb3      	ldr	r3, [pc, #716]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100950:	691b      	ldr	r3, [r3, #16]
 8100952:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8100956:	2b18      	cmp	r3, #24
 8100958:	f200 8155 	bhi.w	8100c06 <HAL_RCC_GetSysClockFreq+0x2be>
 810095c:	a201      	add	r2, pc, #4	; (adr r2, 8100964 <HAL_RCC_GetSysClockFreq+0x1c>)
 810095e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8100962:	bf00      	nop
 8100964:	081009c9 	.word	0x081009c9
 8100968:	08100c07 	.word	0x08100c07
 810096c:	08100c07 	.word	0x08100c07
 8100970:	08100c07 	.word	0x08100c07
 8100974:	08100c07 	.word	0x08100c07
 8100978:	08100c07 	.word	0x08100c07
 810097c:	08100c07 	.word	0x08100c07
 8100980:	08100c07 	.word	0x08100c07
 8100984:	081009ef 	.word	0x081009ef
 8100988:	08100c07 	.word	0x08100c07
 810098c:	08100c07 	.word	0x08100c07
 8100990:	08100c07 	.word	0x08100c07
 8100994:	08100c07 	.word	0x08100c07
 8100998:	08100c07 	.word	0x08100c07
 810099c:	08100c07 	.word	0x08100c07
 81009a0:	08100c07 	.word	0x08100c07
 81009a4:	081009f5 	.word	0x081009f5
 81009a8:	08100c07 	.word	0x08100c07
 81009ac:	08100c07 	.word	0x08100c07
 81009b0:	08100c07 	.word	0x08100c07
 81009b4:	08100c07 	.word	0x08100c07
 81009b8:	08100c07 	.word	0x08100c07
 81009bc:	08100c07 	.word	0x08100c07
 81009c0:	08100c07 	.word	0x08100c07
 81009c4:	081009fb 	.word	0x081009fb
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81009c8:	4b94      	ldr	r3, [pc, #592]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81009ca:	681b      	ldr	r3, [r3, #0]
 81009cc:	f003 0320 	and.w	r3, r3, #32
 81009d0:	2b00      	cmp	r3, #0
 81009d2:	d009      	beq.n	81009e8 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 81009d4:	4b91      	ldr	r3, [pc, #580]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81009d6:	681b      	ldr	r3, [r3, #0]
 81009d8:	08db      	lsrs	r3, r3, #3
 81009da:	f003 0303 	and.w	r3, r3, #3
 81009de:	4a90      	ldr	r2, [pc, #576]	; (8100c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81009e0:	fa22 f303 	lsr.w	r3, r2, r3
 81009e4:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 81009e6:	e111      	b.n	8100c0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 81009e8:	4b8d      	ldr	r3, [pc, #564]	; (8100c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 81009ea:	61bb      	str	r3, [r7, #24]
      break;
 81009ec:	e10e      	b.n	8100c0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 81009ee:	4b8d      	ldr	r3, [pc, #564]	; (8100c24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 81009f0:	61bb      	str	r3, [r7, #24]
      break;
 81009f2:	e10b      	b.n	8100c0c <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 81009f4:	4b8c      	ldr	r3, [pc, #560]	; (8100c28 <HAL_RCC_GetSysClockFreq+0x2e0>)
 81009f6:	61bb      	str	r3, [r7, #24]
      break;
 81009f8:	e108      	b.n	8100c0c <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81009fa:	4b88      	ldr	r3, [pc, #544]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 81009fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81009fe:	f003 0303 	and.w	r3, r3, #3
 8100a02:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8100a04:	4b85      	ldr	r3, [pc, #532]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8100a08:	091b      	lsrs	r3, r3, #4
 8100a0a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8100a0e:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8100a10:	4b82      	ldr	r3, [pc, #520]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8100a14:	f003 0301 	and.w	r3, r3, #1
 8100a18:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8100a1a:	4b80      	ldr	r3, [pc, #512]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8100a1e:	08db      	lsrs	r3, r3, #3
 8100a20:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8100a24:	68fa      	ldr	r2, [r7, #12]
 8100a26:	fb02 f303 	mul.w	r3, r2, r3
 8100a2a:	ee07 3a90 	vmov	s15, r3
 8100a2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100a32:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8100a36:	693b      	ldr	r3, [r7, #16]
 8100a38:	2b00      	cmp	r3, #0
 8100a3a:	f000 80e1 	beq.w	8100c00 <HAL_RCC_GetSysClockFreq+0x2b8>
 8100a3e:	697b      	ldr	r3, [r7, #20]
 8100a40:	2b02      	cmp	r3, #2
 8100a42:	f000 8083 	beq.w	8100b4c <HAL_RCC_GetSysClockFreq+0x204>
 8100a46:	697b      	ldr	r3, [r7, #20]
 8100a48:	2b02      	cmp	r3, #2
 8100a4a:	f200 80a1 	bhi.w	8100b90 <HAL_RCC_GetSysClockFreq+0x248>
 8100a4e:	697b      	ldr	r3, [r7, #20]
 8100a50:	2b00      	cmp	r3, #0
 8100a52:	d003      	beq.n	8100a5c <HAL_RCC_GetSysClockFreq+0x114>
 8100a54:	697b      	ldr	r3, [r7, #20]
 8100a56:	2b01      	cmp	r3, #1
 8100a58:	d056      	beq.n	8100b08 <HAL_RCC_GetSysClockFreq+0x1c0>
 8100a5a:	e099      	b.n	8100b90 <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8100a5c:	4b6f      	ldr	r3, [pc, #444]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a5e:	681b      	ldr	r3, [r3, #0]
 8100a60:	f003 0320 	and.w	r3, r3, #32
 8100a64:	2b00      	cmp	r3, #0
 8100a66:	d02d      	beq.n	8100ac4 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8100a68:	4b6c      	ldr	r3, [pc, #432]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a6a:	681b      	ldr	r3, [r3, #0]
 8100a6c:	08db      	lsrs	r3, r3, #3
 8100a6e:	f003 0303 	and.w	r3, r3, #3
 8100a72:	4a6b      	ldr	r2, [pc, #428]	; (8100c20 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8100a74:	fa22 f303 	lsr.w	r3, r2, r3
 8100a78:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100a7a:	687b      	ldr	r3, [r7, #4]
 8100a7c:	ee07 3a90 	vmov	s15, r3
 8100a80:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100a84:	693b      	ldr	r3, [r7, #16]
 8100a86:	ee07 3a90 	vmov	s15, r3
 8100a8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100a8e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100a92:	4b62      	ldr	r3, [pc, #392]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100a94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100a96:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100a9a:	ee07 3a90 	vmov	s15, r3
 8100a9e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100aa2:	ed97 6a02 	vldr	s12, [r7, #8]
 8100aa6:	eddf 5a61 	vldr	s11, [pc, #388]	; 8100c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100aaa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100aae:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100ab2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100ab6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100aba:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100abe:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8100ac2:	e087      	b.n	8100bd4 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100ac4:	693b      	ldr	r3, [r7, #16]
 8100ac6:	ee07 3a90 	vmov	s15, r3
 8100aca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100ace:	eddf 6a58 	vldr	s13, [pc, #352]	; 8100c30 <HAL_RCC_GetSysClockFreq+0x2e8>
 8100ad2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100ad6:	4b51      	ldr	r3, [pc, #324]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100ada:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100ade:	ee07 3a90 	vmov	s15, r3
 8100ae2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100ae6:	ed97 6a02 	vldr	s12, [r7, #8]
 8100aea:	eddf 5a50 	vldr	s11, [pc, #320]	; 8100c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100aee:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100af2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100af6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100afa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100afe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b02:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100b06:	e065      	b.n	8100bd4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100b08:	693b      	ldr	r3, [r7, #16]
 8100b0a:	ee07 3a90 	vmov	s15, r3
 8100b0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b12:	eddf 6a48 	vldr	s13, [pc, #288]	; 8100c34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100b16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100b1a:	4b40      	ldr	r3, [pc, #256]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100b1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100b22:	ee07 3a90 	vmov	s15, r3
 8100b26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b2a:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b2e:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8100c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100b32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100b3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b46:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100b4a:	e043      	b.n	8100bd4 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100b4c:	693b      	ldr	r3, [r7, #16]
 8100b4e:	ee07 3a90 	vmov	s15, r3
 8100b52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b56:	eddf 6a38 	vldr	s13, [pc, #224]	; 8100c38 <HAL_RCC_GetSysClockFreq+0x2f0>
 8100b5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100b5e:	4b2f      	ldr	r3, [pc, #188]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100b62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100b66:	ee07 3a90 	vmov	s15, r3
 8100b6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100b6e:	ed97 6a02 	vldr	s12, [r7, #8]
 8100b72:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8100c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100b76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100b7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100b7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100b82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100b86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100b8a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100b8e:	e021      	b.n	8100bd4 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8100b90:	693b      	ldr	r3, [r7, #16]
 8100b92:	ee07 3a90 	vmov	s15, r3
 8100b96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8100b9a:	eddf 6a26 	vldr	s13, [pc, #152]	; 8100c34 <HAL_RCC_GetSysClockFreq+0x2ec>
 8100b9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8100ba2:	4b1e      	ldr	r3, [pc, #120]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100ba6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8100baa:	ee07 3a90 	vmov	s15, r3
 8100bae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8100bb2:	ed97 6a02 	vldr	s12, [r7, #8]
 8100bb6:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8100c2c <HAL_RCC_GetSysClockFreq+0x2e4>
 8100bba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8100bbe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8100bc2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8100bc6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8100bca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8100bce:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8100bd2:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8100bd4:	4b11      	ldr	r3, [pc, #68]	; (8100c1c <HAL_RCC_GetSysClockFreq+0x2d4>)
 8100bd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8100bd8:	0a5b      	lsrs	r3, r3, #9
 8100bda:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8100bde:	3301      	adds	r3, #1
 8100be0:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8100be2:	683b      	ldr	r3, [r7, #0]
 8100be4:	ee07 3a90 	vmov	s15, r3
 8100be8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8100bec:	edd7 6a07 	vldr	s13, [r7, #28]
 8100bf0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8100bf4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8100bf8:	ee17 3a90 	vmov	r3, s15
 8100bfc:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8100bfe:	e005      	b.n	8100c0c <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8100c00:	2300      	movs	r3, #0
 8100c02:	61bb      	str	r3, [r7, #24]
      break;
 8100c04:	e002      	b.n	8100c0c <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8100c06:	4b07      	ldr	r3, [pc, #28]	; (8100c24 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8100c08:	61bb      	str	r3, [r7, #24]
      break;
 8100c0a:	bf00      	nop
  }

  return sysclockfreq;
 8100c0c:	69bb      	ldr	r3, [r7, #24]
}
 8100c0e:	4618      	mov	r0, r3
 8100c10:	3724      	adds	r7, #36	; 0x24
 8100c12:	46bd      	mov	sp, r7
 8100c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100c18:	4770      	bx	lr
 8100c1a:	bf00      	nop
 8100c1c:	58024400 	.word	0x58024400
 8100c20:	03d09000 	.word	0x03d09000
 8100c24:	003d0900 	.word	0x003d0900
 8100c28:	007a1200 	.word	0x007a1200
 8100c2c:	46000000 	.word	0x46000000
 8100c30:	4c742400 	.word	0x4c742400
 8100c34:	4a742400 	.word	0x4a742400
 8100c38:	4af42400 	.word	0x4af42400

08100c3c <__libc_init_array>:
 8100c3c:	b570      	push	{r4, r5, r6, lr}
 8100c3e:	4d0d      	ldr	r5, [pc, #52]	; (8100c74 <__libc_init_array+0x38>)
 8100c40:	4c0d      	ldr	r4, [pc, #52]	; (8100c78 <__libc_init_array+0x3c>)
 8100c42:	1b64      	subs	r4, r4, r5
 8100c44:	10a4      	asrs	r4, r4, #2
 8100c46:	2600      	movs	r6, #0
 8100c48:	42a6      	cmp	r6, r4
 8100c4a:	d109      	bne.n	8100c60 <__libc_init_array+0x24>
 8100c4c:	4d0b      	ldr	r5, [pc, #44]	; (8100c7c <__libc_init_array+0x40>)
 8100c4e:	4c0c      	ldr	r4, [pc, #48]	; (8100c80 <__libc_init_array+0x44>)
 8100c50:	f000 f818 	bl	8100c84 <_init>
 8100c54:	1b64      	subs	r4, r4, r5
 8100c56:	10a4      	asrs	r4, r4, #2
 8100c58:	2600      	movs	r6, #0
 8100c5a:	42a6      	cmp	r6, r4
 8100c5c:	d105      	bne.n	8100c6a <__libc_init_array+0x2e>
 8100c5e:	bd70      	pop	{r4, r5, r6, pc}
 8100c60:	f855 3b04 	ldr.w	r3, [r5], #4
 8100c64:	4798      	blx	r3
 8100c66:	3601      	adds	r6, #1
 8100c68:	e7ee      	b.n	8100c48 <__libc_init_array+0xc>
 8100c6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8100c6e:	4798      	blx	r3
 8100c70:	3601      	adds	r6, #1
 8100c72:	e7f2      	b.n	8100c5a <__libc_init_array+0x1e>
 8100c74:	08100cac 	.word	0x08100cac
 8100c78:	08100cac 	.word	0x08100cac
 8100c7c:	08100cac 	.word	0x08100cac
 8100c80:	08100cb0 	.word	0x08100cb0

08100c84 <_init>:
 8100c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100c86:	bf00      	nop
 8100c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100c8a:	bc08      	pop	{r3}
 8100c8c:	469e      	mov	lr, r3
 8100c8e:	4770      	bx	lr

08100c90 <_fini>:
 8100c90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8100c92:	bf00      	nop
 8100c94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8100c96:	bc08      	pop	{r3}
 8100c98:	469e      	mov	lr, r3
 8100c9a:	4770      	bx	lr
