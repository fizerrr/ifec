
adctest_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000070a8  081002a0  081002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004bc  08107348  08107348  00017348  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08107804  08107804  00017804  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08107808  08107808  00017808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         000001c8  10000000  0810780c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000001c0  100001c8  081079d4  000201c8  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  10000388  081079d4  00020388  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  000201c8  2**0
                  CONTENTS, READONLY
  9 .comment      00000043  00000000  00000000  000201f8  2**0
                  CONTENTS, READONLY
 10 .debug_info   00007079  00000000  00000000  0002023b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_abbrev 000015cc  00000000  00000000  000272b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_aranges 00000768  00000000  00000000  00028880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_rnglists 00000586  00000000  00000000  00028fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_macro  0003134d  00000000  00000000  0002956e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_line   00008117  00000000  00000000  0005a8bb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    0011af5f  00000000  00000000  000629d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_frame  000031cc  00000000  00000000  0017d934  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line_str 00000063  00000000  00000000  00180b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

081002a0 <__do_global_dtors_aux>:
 81002a0:	b510      	push	{r4, lr}
 81002a2:	4c05      	ldr	r4, [pc, #20]	; (81002b8 <__do_global_dtors_aux+0x18>)
 81002a4:	7823      	ldrb	r3, [r4, #0]
 81002a6:	b933      	cbnz	r3, 81002b6 <__do_global_dtors_aux+0x16>
 81002a8:	4b04      	ldr	r3, [pc, #16]	; (81002bc <__do_global_dtors_aux+0x1c>)
 81002aa:	b113      	cbz	r3, 81002b2 <__do_global_dtors_aux+0x12>
 81002ac:	4804      	ldr	r0, [pc, #16]	; (81002c0 <__do_global_dtors_aux+0x20>)
 81002ae:	f3af 8000 	nop.w
 81002b2:	2301      	movs	r3, #1
 81002b4:	7023      	strb	r3, [r4, #0]
 81002b6:	bd10      	pop	{r4, pc}
 81002b8:	100001c8 	.word	0x100001c8
 81002bc:	00000000 	.word	0x00000000
 81002c0:	08107330 	.word	0x08107330

081002c4 <frame_dummy>:
 81002c4:	b508      	push	{r3, lr}
 81002c6:	4b03      	ldr	r3, [pc, #12]	; (81002d4 <frame_dummy+0x10>)
 81002c8:	b11b      	cbz	r3, 81002d2 <frame_dummy+0xe>
 81002ca:	4903      	ldr	r1, [pc, #12]	; (81002d8 <frame_dummy+0x14>)
 81002cc:	4803      	ldr	r0, [pc, #12]	; (81002dc <frame_dummy+0x18>)
 81002ce:	f3af 8000 	nop.w
 81002d2:	bd08      	pop	{r3, pc}
 81002d4:	00000000 	.word	0x00000000
 81002d8:	100001cc 	.word	0x100001cc
 81002dc:	08107330 	.word	0x08107330

081002e0 <memchr>:
 81002e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 81002e4:	2a10      	cmp	r2, #16
 81002e6:	db2b      	blt.n	8100340 <memchr+0x60>
 81002e8:	f010 0f07 	tst.w	r0, #7
 81002ec:	d008      	beq.n	8100300 <memchr+0x20>
 81002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 81002f2:	3a01      	subs	r2, #1
 81002f4:	428b      	cmp	r3, r1
 81002f6:	d02d      	beq.n	8100354 <memchr+0x74>
 81002f8:	f010 0f07 	tst.w	r0, #7
 81002fc:	b342      	cbz	r2, 8100350 <memchr+0x70>
 81002fe:	d1f6      	bne.n	81002ee <memchr+0xe>
 8100300:	b4f0      	push	{r4, r5, r6, r7}
 8100302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8100306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 810030a:	f022 0407 	bic.w	r4, r2, #7
 810030e:	f07f 0700 	mvns.w	r7, #0
 8100312:	2300      	movs	r3, #0
 8100314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8100318:	3c08      	subs	r4, #8
 810031a:	ea85 0501 	eor.w	r5, r5, r1
 810031e:	ea86 0601 	eor.w	r6, r6, r1
 8100322:	fa85 f547 	uadd8	r5, r5, r7
 8100326:	faa3 f587 	sel	r5, r3, r7
 810032a:	fa86 f647 	uadd8	r6, r6, r7
 810032e:	faa5 f687 	sel	r6, r5, r7
 8100332:	b98e      	cbnz	r6, 8100358 <memchr+0x78>
 8100334:	d1ee      	bne.n	8100314 <memchr+0x34>
 8100336:	bcf0      	pop	{r4, r5, r6, r7}
 8100338:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 810033c:	f002 0207 	and.w	r2, r2, #7
 8100340:	b132      	cbz	r2, 8100350 <memchr+0x70>
 8100342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8100346:	3a01      	subs	r2, #1
 8100348:	ea83 0301 	eor.w	r3, r3, r1
 810034c:	b113      	cbz	r3, 8100354 <memchr+0x74>
 810034e:	d1f8      	bne.n	8100342 <memchr+0x62>
 8100350:	2000      	movs	r0, #0
 8100352:	4770      	bx	lr
 8100354:	3801      	subs	r0, #1
 8100356:	4770      	bx	lr
 8100358:	2d00      	cmp	r5, #0
 810035a:	bf06      	itte	eq
 810035c:	4635      	moveq	r5, r6
 810035e:	3803      	subeq	r0, #3
 8100360:	3807      	subne	r0, #7
 8100362:	f015 0f01 	tst.w	r5, #1
 8100366:	d107      	bne.n	8100378 <memchr+0x98>
 8100368:	3001      	adds	r0, #1
 810036a:	f415 7f80 	tst.w	r5, #256	; 0x100
 810036e:	bf02      	ittt	eq
 8100370:	3001      	addeq	r0, #1
 8100372:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8100376:	3001      	addeq	r0, #1
 8100378:	bcf0      	pop	{r4, r5, r6, r7}
 810037a:	3801      	subs	r0, #1
 810037c:	4770      	bx	lr
 810037e:	bf00      	nop

08100380 <strlen>:
 8100380:	4603      	mov	r3, r0
 8100382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8100386:	2a00      	cmp	r2, #0
 8100388:	d1fb      	bne.n	8100382 <strlen+0x2>
 810038a:	1a18      	subs	r0, r3, r0
 810038c:	3801      	subs	r0, #1
 810038e:	4770      	bx	lr

08100390 <__aeabi_drsub>:
 8100390:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100394:	e002      	b.n	810039c <__adddf3>
 8100396:	bf00      	nop

08100398 <__aeabi_dsub>:
 8100398:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0810039c <__adddf3>:
 810039c:	b530      	push	{r4, r5, lr}
 810039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 81003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 81003a6:	ea94 0f05 	teq	r4, r5
 81003aa:	bf08      	it	eq
 81003ac:	ea90 0f02 	teqeq	r0, r2
 81003b0:	bf1f      	itttt	ne
 81003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 81003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 81003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 81003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 81003c2:	f000 80e2 	beq.w	810058a <__adddf3+0x1ee>
 81003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 81003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 81003ce:	bfb8      	it	lt
 81003d0:	426d      	neglt	r5, r5
 81003d2:	dd0c      	ble.n	81003ee <__adddf3+0x52>
 81003d4:	442c      	add	r4, r5
 81003d6:	ea80 0202 	eor.w	r2, r0, r2
 81003da:	ea81 0303 	eor.w	r3, r1, r3
 81003de:	ea82 0000 	eor.w	r0, r2, r0
 81003e2:	ea83 0101 	eor.w	r1, r3, r1
 81003e6:	ea80 0202 	eor.w	r2, r0, r2
 81003ea:	ea81 0303 	eor.w	r3, r1, r3
 81003ee:	2d36      	cmp	r5, #54	; 0x36
 81003f0:	bf88      	it	hi
 81003f2:	bd30      	pophi	{r4, r5, pc}
 81003f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 81003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 81003fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8100400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8100404:	d002      	beq.n	810040c <__adddf3+0x70>
 8100406:	4240      	negs	r0, r0
 8100408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810040c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8100410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8100418:	d002      	beq.n	8100420 <__adddf3+0x84>
 810041a:	4252      	negs	r2, r2
 810041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8100420:	ea94 0f05 	teq	r4, r5
 8100424:	f000 80a7 	beq.w	8100576 <__adddf3+0x1da>
 8100428:	f1a4 0401 	sub.w	r4, r4, #1
 810042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8100430:	db0d      	blt.n	810044e <__adddf3+0xb2>
 8100432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8100436:	fa22 f205 	lsr.w	r2, r2, r5
 810043a:	1880      	adds	r0, r0, r2
 810043c:	f141 0100 	adc.w	r1, r1, #0
 8100440:	fa03 f20e 	lsl.w	r2, r3, lr
 8100444:	1880      	adds	r0, r0, r2
 8100446:	fa43 f305 	asr.w	r3, r3, r5
 810044a:	4159      	adcs	r1, r3
 810044c:	e00e      	b.n	810046c <__adddf3+0xd0>
 810044e:	f1a5 0520 	sub.w	r5, r5, #32
 8100452:	f10e 0e20 	add.w	lr, lr, #32
 8100456:	2a01      	cmp	r2, #1
 8100458:	fa03 fc0e 	lsl.w	ip, r3, lr
 810045c:	bf28      	it	cs
 810045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8100462:	fa43 f305 	asr.w	r3, r3, r5
 8100466:	18c0      	adds	r0, r0, r3
 8100468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 810046c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100470:	d507      	bpl.n	8100482 <__adddf3+0xe6>
 8100472:	f04f 0e00 	mov.w	lr, #0
 8100476:	f1dc 0c00 	rsbs	ip, ip, #0
 810047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 810047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8100482:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100486:	d31b      	bcc.n	81004c0 <__adddf3+0x124>
 8100488:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 810048c:	d30c      	bcc.n	81004a8 <__adddf3+0x10c>
 810048e:	0849      	lsrs	r1, r1, #1
 8100490:	ea5f 0030 	movs.w	r0, r0, rrx
 8100494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100498:	f104 0401 	add.w	r4, r4, #1
 810049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 81004a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 81004a4:	f080 809a 	bcs.w	81005dc <__adddf3+0x240>
 81004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 81004ac:	bf08      	it	eq
 81004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 81004b2:	f150 0000 	adcs.w	r0, r0, #0
 81004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81004ba:	ea41 0105 	orr.w	r1, r1, r5
 81004be:	bd30      	pop	{r4, r5, pc}
 81004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 81004c4:	4140      	adcs	r0, r0
 81004c6:	eb41 0101 	adc.w	r1, r1, r1
 81004ca:	3c01      	subs	r4, #1
 81004cc:	bf28      	it	cs
 81004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 81004d2:	d2e9      	bcs.n	81004a8 <__adddf3+0x10c>
 81004d4:	f091 0f00 	teq	r1, #0
 81004d8:	bf04      	itt	eq
 81004da:	4601      	moveq	r1, r0
 81004dc:	2000      	moveq	r0, #0
 81004de:	fab1 f381 	clz	r3, r1
 81004e2:	bf08      	it	eq
 81004e4:	3320      	addeq	r3, #32
 81004e6:	f1a3 030b 	sub.w	r3, r3, #11
 81004ea:	f1b3 0220 	subs.w	r2, r3, #32
 81004ee:	da0c      	bge.n	810050a <__adddf3+0x16e>
 81004f0:	320c      	adds	r2, #12
 81004f2:	dd08      	ble.n	8100506 <__adddf3+0x16a>
 81004f4:	f102 0c14 	add.w	ip, r2, #20
 81004f8:	f1c2 020c 	rsb	r2, r2, #12
 81004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8100500:	fa21 f102 	lsr.w	r1, r1, r2
 8100504:	e00c      	b.n	8100520 <__adddf3+0x184>
 8100506:	f102 0214 	add.w	r2, r2, #20
 810050a:	bfd8      	it	le
 810050c:	f1c2 0c20 	rsble	ip, r2, #32
 8100510:	fa01 f102 	lsl.w	r1, r1, r2
 8100514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8100518:	bfdc      	itt	le
 810051a:	ea41 010c 	orrle.w	r1, r1, ip
 810051e:	4090      	lslle	r0, r2
 8100520:	1ae4      	subs	r4, r4, r3
 8100522:	bfa2      	ittt	ge
 8100524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8100528:	4329      	orrge	r1, r5
 810052a:	bd30      	popge	{r4, r5, pc}
 810052c:	ea6f 0404 	mvn.w	r4, r4
 8100530:	3c1f      	subs	r4, #31
 8100532:	da1c      	bge.n	810056e <__adddf3+0x1d2>
 8100534:	340c      	adds	r4, #12
 8100536:	dc0e      	bgt.n	8100556 <__adddf3+0x1ba>
 8100538:	f104 0414 	add.w	r4, r4, #20
 810053c:	f1c4 0220 	rsb	r2, r4, #32
 8100540:	fa20 f004 	lsr.w	r0, r0, r4
 8100544:	fa01 f302 	lsl.w	r3, r1, r2
 8100548:	ea40 0003 	orr.w	r0, r0, r3
 810054c:	fa21 f304 	lsr.w	r3, r1, r4
 8100550:	ea45 0103 	orr.w	r1, r5, r3
 8100554:	bd30      	pop	{r4, r5, pc}
 8100556:	f1c4 040c 	rsb	r4, r4, #12
 810055a:	f1c4 0220 	rsb	r2, r4, #32
 810055e:	fa20 f002 	lsr.w	r0, r0, r2
 8100562:	fa01 f304 	lsl.w	r3, r1, r4
 8100566:	ea40 0003 	orr.w	r0, r0, r3
 810056a:	4629      	mov	r1, r5
 810056c:	bd30      	pop	{r4, r5, pc}
 810056e:	fa21 f004 	lsr.w	r0, r1, r4
 8100572:	4629      	mov	r1, r5
 8100574:	bd30      	pop	{r4, r5, pc}
 8100576:	f094 0f00 	teq	r4, #0
 810057a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810057e:	bf06      	itte	eq
 8100580:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100584:	3401      	addeq	r4, #1
 8100586:	3d01      	subne	r5, #1
 8100588:	e74e      	b.n	8100428 <__adddf3+0x8c>
 810058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810058e:	bf18      	it	ne
 8100590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100594:	d029      	beq.n	81005ea <__adddf3+0x24e>
 8100596:	ea94 0f05 	teq	r4, r5
 810059a:	bf08      	it	eq
 810059c:	ea90 0f02 	teqeq	r0, r2
 81005a0:	d005      	beq.n	81005ae <__adddf3+0x212>
 81005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 81005a6:	bf04      	itt	eq
 81005a8:	4619      	moveq	r1, r3
 81005aa:	4610      	moveq	r0, r2
 81005ac:	bd30      	pop	{r4, r5, pc}
 81005ae:	ea91 0f03 	teq	r1, r3
 81005b2:	bf1e      	ittt	ne
 81005b4:	2100      	movne	r1, #0
 81005b6:	2000      	movne	r0, #0
 81005b8:	bd30      	popne	{r4, r5, pc}
 81005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 81005be:	d105      	bne.n	81005cc <__adddf3+0x230>
 81005c0:	0040      	lsls	r0, r0, #1
 81005c2:	4149      	adcs	r1, r1
 81005c4:	bf28      	it	cs
 81005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 81005ca:	bd30      	pop	{r4, r5, pc}
 81005cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 81005d0:	bf3c      	itt	cc
 81005d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 81005d6:	bd30      	popcc	{r4, r5, pc}
 81005d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 81005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 81005e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 81005e4:	f04f 0000 	mov.w	r0, #0
 81005e8:	bd30      	pop	{r4, r5, pc}
 81005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 81005ee:	bf1a      	itte	ne
 81005f0:	4619      	movne	r1, r3
 81005f2:	4610      	movne	r0, r2
 81005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 81005f8:	bf1c      	itt	ne
 81005fa:	460b      	movne	r3, r1
 81005fc:	4602      	movne	r2, r0
 81005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100602:	bf06      	itte	eq
 8100604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8100608:	ea91 0f03 	teqeq	r1, r3
 810060c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8100610:	bd30      	pop	{r4, r5, pc}
 8100612:	bf00      	nop

08100614 <__aeabi_ui2d>:
 8100614:	f090 0f00 	teq	r0, #0
 8100618:	bf04      	itt	eq
 810061a:	2100      	moveq	r1, #0
 810061c:	4770      	bxeq	lr
 810061e:	b530      	push	{r4, r5, lr}
 8100620:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100624:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100628:	f04f 0500 	mov.w	r5, #0
 810062c:	f04f 0100 	mov.w	r1, #0
 8100630:	e750      	b.n	81004d4 <__adddf3+0x138>
 8100632:	bf00      	nop

08100634 <__aeabi_i2d>:
 8100634:	f090 0f00 	teq	r0, #0
 8100638:	bf04      	itt	eq
 810063a:	2100      	moveq	r1, #0
 810063c:	4770      	bxeq	lr
 810063e:	b530      	push	{r4, r5, lr}
 8100640:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100644:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100648:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 810064c:	bf48      	it	mi
 810064e:	4240      	negmi	r0, r0
 8100650:	f04f 0100 	mov.w	r1, #0
 8100654:	e73e      	b.n	81004d4 <__adddf3+0x138>
 8100656:	bf00      	nop

08100658 <__aeabi_f2d>:
 8100658:	0042      	lsls	r2, r0, #1
 810065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 810065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8100662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100666:	bf1f      	itttt	ne
 8100668:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 810066c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8100670:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100674:	4770      	bxne	lr
 8100676:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 810067a:	bf08      	it	eq
 810067c:	4770      	bxeq	lr
 810067e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8100682:	bf04      	itt	eq
 8100684:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100688:	4770      	bxeq	lr
 810068a:	b530      	push	{r4, r5, lr}
 810068c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8100690:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100694:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100698:	e71c      	b.n	81004d4 <__adddf3+0x138>
 810069a:	bf00      	nop

0810069c <__aeabi_ul2d>:
 810069c:	ea50 0201 	orrs.w	r2, r0, r1
 81006a0:	bf08      	it	eq
 81006a2:	4770      	bxeq	lr
 81006a4:	b530      	push	{r4, r5, lr}
 81006a6:	f04f 0500 	mov.w	r5, #0
 81006aa:	e00a      	b.n	81006c2 <__aeabi_l2d+0x16>

081006ac <__aeabi_l2d>:
 81006ac:	ea50 0201 	orrs.w	r2, r0, r1
 81006b0:	bf08      	it	eq
 81006b2:	4770      	bxeq	lr
 81006b4:	b530      	push	{r4, r5, lr}
 81006b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 81006ba:	d502      	bpl.n	81006c2 <__aeabi_l2d+0x16>
 81006bc:	4240      	negs	r0, r0
 81006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81006c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81006c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 81006ce:	f43f aed8 	beq.w	8100482 <__adddf3+0xe6>
 81006d2:	f04f 0203 	mov.w	r2, #3
 81006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006da:	bf18      	it	ne
 81006dc:	3203      	addne	r2, #3
 81006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 81006e2:	bf18      	it	ne
 81006e4:	3203      	addne	r2, #3
 81006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 81006ea:	f1c2 0320 	rsb	r3, r2, #32
 81006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 81006f2:	fa20 f002 	lsr.w	r0, r0, r2
 81006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 81006fa:	ea40 000e 	orr.w	r0, r0, lr
 81006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8100702:	4414      	add	r4, r2
 8100704:	e6bd      	b.n	8100482 <__adddf3+0xe6>
 8100706:	bf00      	nop

08100708 <__aeabi_dmul>:
 8100708:	b570      	push	{r4, r5, r6, lr}
 810070a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 810070e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100712:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8100716:	bf1d      	ittte	ne
 8100718:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 810071c:	ea94 0f0c 	teqne	r4, ip
 8100720:	ea95 0f0c 	teqne	r5, ip
 8100724:	f000 f8de 	bleq	81008e4 <__aeabi_dmul+0x1dc>
 8100728:	442c      	add	r4, r5
 810072a:	ea81 0603 	eor.w	r6, r1, r3
 810072e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100732:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100736:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810073a:	bf18      	it	ne
 810073c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100740:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100744:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100748:	d038      	beq.n	81007bc <__aeabi_dmul+0xb4>
 810074a:	fba0 ce02 	umull	ip, lr, r0, r2
 810074e:	f04f 0500 	mov.w	r5, #0
 8100752:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100756:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810075a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810075e:	f04f 0600 	mov.w	r6, #0
 8100762:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100766:	f09c 0f00 	teq	ip, #0
 810076a:	bf18      	it	ne
 810076c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100770:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100774:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100778:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810077c:	d204      	bcs.n	8100788 <__aeabi_dmul+0x80>
 810077e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100782:	416d      	adcs	r5, r5
 8100784:	eb46 0606 	adc.w	r6, r6, r6
 8100788:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810078c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100790:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100794:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100798:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810079c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 81007a0:	bf88      	it	hi
 81007a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 81007a6:	d81e      	bhi.n	81007e6 <__aeabi_dmul+0xde>
 81007a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 81007ac:	bf08      	it	eq
 81007ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 81007b2:	f150 0000 	adcs.w	r0, r0, #0
 81007b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 81007ba:	bd70      	pop	{r4, r5, r6, pc}
 81007bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 81007c0:	ea46 0101 	orr.w	r1, r6, r1
 81007c4:	ea40 0002 	orr.w	r0, r0, r2
 81007c8:	ea81 0103 	eor.w	r1, r1, r3
 81007cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81007d0:	bfc2      	ittt	gt
 81007d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81007d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81007da:	bd70      	popgt	{r4, r5, r6, pc}
 81007dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81007e0:	f04f 0e00 	mov.w	lr, #0
 81007e4:	3c01      	subs	r4, #1
 81007e6:	f300 80ab 	bgt.w	8100940 <__aeabi_dmul+0x238>
 81007ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81007ee:	bfde      	ittt	le
 81007f0:	2000      	movle	r0, #0
 81007f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81007f6:	bd70      	pople	{r4, r5, r6, pc}
 81007f8:	f1c4 0400 	rsb	r4, r4, #0
 81007fc:	3c20      	subs	r4, #32
 81007fe:	da35      	bge.n	810086c <__aeabi_dmul+0x164>
 8100800:	340c      	adds	r4, #12
 8100802:	dc1b      	bgt.n	810083c <__aeabi_dmul+0x134>
 8100804:	f104 0414 	add.w	r4, r4, #20
 8100808:	f1c4 0520 	rsb	r5, r4, #32
 810080c:	fa00 f305 	lsl.w	r3, r0, r5
 8100810:	fa20 f004 	lsr.w	r0, r0, r4
 8100814:	fa01 f205 	lsl.w	r2, r1, r5
 8100818:	ea40 0002 	orr.w	r0, r0, r2
 810081c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8100820:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100824:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8100828:	fa21 f604 	lsr.w	r6, r1, r4
 810082c:	eb42 0106 	adc.w	r1, r2, r6
 8100830:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100834:	bf08      	it	eq
 8100836:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810083a:	bd70      	pop	{r4, r5, r6, pc}
 810083c:	f1c4 040c 	rsb	r4, r4, #12
 8100840:	f1c4 0520 	rsb	r5, r4, #32
 8100844:	fa00 f304 	lsl.w	r3, r0, r4
 8100848:	fa20 f005 	lsr.w	r0, r0, r5
 810084c:	fa01 f204 	lsl.w	r2, r1, r4
 8100850:	ea40 0002 	orr.w	r0, r0, r2
 8100854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100858:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810085c:	f141 0100 	adc.w	r1, r1, #0
 8100860:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100864:	bf08      	it	eq
 8100866:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810086a:	bd70      	pop	{r4, r5, r6, pc}
 810086c:	f1c4 0520 	rsb	r5, r4, #32
 8100870:	fa00 f205 	lsl.w	r2, r0, r5
 8100874:	ea4e 0e02 	orr.w	lr, lr, r2
 8100878:	fa20 f304 	lsr.w	r3, r0, r4
 810087c:	fa01 f205 	lsl.w	r2, r1, r5
 8100880:	ea43 0302 	orr.w	r3, r3, r2
 8100884:	fa21 f004 	lsr.w	r0, r1, r4
 8100888:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810088c:	fa21 f204 	lsr.w	r2, r1, r4
 8100890:	ea20 0002 	bic.w	r0, r0, r2
 8100894:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100898:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810089c:	bf08      	it	eq
 810089e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 81008a2:	bd70      	pop	{r4, r5, r6, pc}
 81008a4:	f094 0f00 	teq	r4, #0
 81008a8:	d10f      	bne.n	81008ca <__aeabi_dmul+0x1c2>
 81008aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 81008ae:	0040      	lsls	r0, r0, #1
 81008b0:	eb41 0101 	adc.w	r1, r1, r1
 81008b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 81008b8:	bf08      	it	eq
 81008ba:	3c01      	subeq	r4, #1
 81008bc:	d0f7      	beq.n	81008ae <__aeabi_dmul+0x1a6>
 81008be:	ea41 0106 	orr.w	r1, r1, r6
 81008c2:	f095 0f00 	teq	r5, #0
 81008c6:	bf18      	it	ne
 81008c8:	4770      	bxne	lr
 81008ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 81008ce:	0052      	lsls	r2, r2, #1
 81008d0:	eb43 0303 	adc.w	r3, r3, r3
 81008d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81008d8:	bf08      	it	eq
 81008da:	3d01      	subeq	r5, #1
 81008dc:	d0f7      	beq.n	81008ce <__aeabi_dmul+0x1c6>
 81008de:	ea43 0306 	orr.w	r3, r3, r6
 81008e2:	4770      	bx	lr
 81008e4:	ea94 0f0c 	teq	r4, ip
 81008e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81008ec:	bf18      	it	ne
 81008ee:	ea95 0f0c 	teqne	r5, ip
 81008f2:	d00c      	beq.n	810090e <__aeabi_dmul+0x206>
 81008f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81008f8:	bf18      	it	ne
 81008fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81008fe:	d1d1      	bne.n	81008a4 <__aeabi_dmul+0x19c>
 8100900:	ea81 0103 	eor.w	r1, r1, r3
 8100904:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100908:	f04f 0000 	mov.w	r0, #0
 810090c:	bd70      	pop	{r4, r5, r6, pc}
 810090e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100912:	bf06      	itte	eq
 8100914:	4610      	moveq	r0, r2
 8100916:	4619      	moveq	r1, r3
 8100918:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 810091c:	d019      	beq.n	8100952 <__aeabi_dmul+0x24a>
 810091e:	ea94 0f0c 	teq	r4, ip
 8100922:	d102      	bne.n	810092a <__aeabi_dmul+0x222>
 8100924:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8100928:	d113      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810092a:	ea95 0f0c 	teq	r5, ip
 810092e:	d105      	bne.n	810093c <__aeabi_dmul+0x234>
 8100930:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100934:	bf1c      	itt	ne
 8100936:	4610      	movne	r0, r2
 8100938:	4619      	movne	r1, r3
 810093a:	d10a      	bne.n	8100952 <__aeabi_dmul+0x24a>
 810093c:	ea81 0103 	eor.w	r1, r1, r3
 8100940:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100944:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100948:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810094c:	f04f 0000 	mov.w	r0, #0
 8100950:	bd70      	pop	{r4, r5, r6, pc}
 8100952:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100956:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810095a:	bd70      	pop	{r4, r5, r6, pc}

0810095c <__aeabi_ddiv>:
 810095c:	b570      	push	{r4, r5, r6, lr}
 810095e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8100962:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8100966:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 810096a:	bf1d      	ittte	ne
 810096c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8100970:	ea94 0f0c 	teqne	r4, ip
 8100974:	ea95 0f0c 	teqne	r5, ip
 8100978:	f000 f8a7 	bleq	8100aca <__aeabi_ddiv+0x16e>
 810097c:	eba4 0405 	sub.w	r4, r4, r5
 8100980:	ea81 0e03 	eor.w	lr, r1, r3
 8100984:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100988:	ea4f 3101 	mov.w	r1, r1, lsl #12
 810098c:	f000 8088 	beq.w	8100aa0 <__aeabi_ddiv+0x144>
 8100990:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8100994:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8100998:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 810099c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 81009a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 81009a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 81009a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 81009ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 81009b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 81009b4:	429d      	cmp	r5, r3
 81009b6:	bf08      	it	eq
 81009b8:	4296      	cmpeq	r6, r2
 81009ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 81009be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 81009c2:	d202      	bcs.n	81009ca <__aeabi_ddiv+0x6e>
 81009c4:	085b      	lsrs	r3, r3, #1
 81009c6:	ea4f 0232 	mov.w	r2, r2, rrx
 81009ca:	1ab6      	subs	r6, r6, r2
 81009cc:	eb65 0503 	sbc.w	r5, r5, r3
 81009d0:	085b      	lsrs	r3, r3, #1
 81009d2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 81009da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 81009de:	ebb6 0e02 	subs.w	lr, r6, r2
 81009e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009e6:	bf22      	ittt	cs
 81009e8:	1ab6      	subcs	r6, r6, r2
 81009ea:	4675      	movcs	r5, lr
 81009ec:	ea40 000c 	orrcs.w	r0, r0, ip
 81009f0:	085b      	lsrs	r3, r3, #1
 81009f2:	ea4f 0232 	mov.w	r2, r2, rrx
 81009f6:	ebb6 0e02 	subs.w	lr, r6, r2
 81009fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 81009fe:	bf22      	ittt	cs
 8100a00:	1ab6      	subcs	r6, r6, r2
 8100a02:	4675      	movcs	r5, lr
 8100a04:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8100a08:	085b      	lsrs	r3, r3, #1
 8100a0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a16:	bf22      	ittt	cs
 8100a18:	1ab6      	subcs	r6, r6, r2
 8100a1a:	4675      	movcs	r5, lr
 8100a1c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8100a20:	085b      	lsrs	r3, r3, #1
 8100a22:	ea4f 0232 	mov.w	r2, r2, rrx
 8100a26:	ebb6 0e02 	subs.w	lr, r6, r2
 8100a2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8100a2e:	bf22      	ittt	cs
 8100a30:	1ab6      	subcs	r6, r6, r2
 8100a32:	4675      	movcs	r5, lr
 8100a34:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8100a38:	ea55 0e06 	orrs.w	lr, r5, r6
 8100a3c:	d018      	beq.n	8100a70 <__aeabi_ddiv+0x114>
 8100a3e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8100a42:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8100a46:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8100a4a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8100a4e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8100a52:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8100a56:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8100a5a:	d1c0      	bne.n	81009de <__aeabi_ddiv+0x82>
 8100a5c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a60:	d10b      	bne.n	8100a7a <__aeabi_ddiv+0x11e>
 8100a62:	ea41 0100 	orr.w	r1, r1, r0
 8100a66:	f04f 0000 	mov.w	r0, #0
 8100a6a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8100a6e:	e7b6      	b.n	81009de <__aeabi_ddiv+0x82>
 8100a70:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100a74:	bf04      	itt	eq
 8100a76:	4301      	orreq	r1, r0
 8100a78:	2000      	moveq	r0, #0
 8100a7a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100a7e:	bf88      	it	hi
 8100a80:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100a84:	f63f aeaf 	bhi.w	81007e6 <__aeabi_dmul+0xde>
 8100a88:	ebb5 0c03 	subs.w	ip, r5, r3
 8100a8c:	bf04      	itt	eq
 8100a8e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8100a92:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8100a96:	f150 0000 	adcs.w	r0, r0, #0
 8100a9a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100a9e:	bd70      	pop	{r4, r5, r6, pc}
 8100aa0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8100aa4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8100aa8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8100aac:	bfc2      	ittt	gt
 8100aae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8100ab2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8100ab6:	bd70      	popgt	{r4, r5, r6, pc}
 8100ab8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100abc:	f04f 0e00 	mov.w	lr, #0
 8100ac0:	3c01      	subs	r4, #1
 8100ac2:	e690      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100ac4:	ea45 0e06 	orr.w	lr, r5, r6
 8100ac8:	e68d      	b.n	81007e6 <__aeabi_dmul+0xde>
 8100aca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8100ace:	ea94 0f0c 	teq	r4, ip
 8100ad2:	bf08      	it	eq
 8100ad4:	ea95 0f0c 	teqeq	r5, ip
 8100ad8:	f43f af3b 	beq.w	8100952 <__aeabi_dmul+0x24a>
 8100adc:	ea94 0f0c 	teq	r4, ip
 8100ae0:	d10a      	bne.n	8100af8 <__aeabi_ddiv+0x19c>
 8100ae2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8100ae6:	f47f af34 	bne.w	8100952 <__aeabi_dmul+0x24a>
 8100aea:	ea95 0f0c 	teq	r5, ip
 8100aee:	f47f af25 	bne.w	810093c <__aeabi_dmul+0x234>
 8100af2:	4610      	mov	r0, r2
 8100af4:	4619      	mov	r1, r3
 8100af6:	e72c      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100af8:	ea95 0f0c 	teq	r5, ip
 8100afc:	d106      	bne.n	8100b0c <__aeabi_ddiv+0x1b0>
 8100afe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8100b02:	f43f aefd 	beq.w	8100900 <__aeabi_dmul+0x1f8>
 8100b06:	4610      	mov	r0, r2
 8100b08:	4619      	mov	r1, r3
 8100b0a:	e722      	b.n	8100952 <__aeabi_dmul+0x24a>
 8100b0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8100b10:	bf18      	it	ne
 8100b12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8100b16:	f47f aec5 	bne.w	81008a4 <__aeabi_dmul+0x19c>
 8100b1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8100b1e:	f47f af0d 	bne.w	810093c <__aeabi_dmul+0x234>
 8100b22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8100b26:	f47f aeeb 	bne.w	8100900 <__aeabi_dmul+0x1f8>
 8100b2a:	e712      	b.n	8100952 <__aeabi_dmul+0x24a>

08100b2c <__gedf2>:
 8100b2c:	f04f 3cff 	mov.w	ip, #4294967295
 8100b30:	e006      	b.n	8100b40 <__cmpdf2+0x4>
 8100b32:	bf00      	nop

08100b34 <__ledf2>:
 8100b34:	f04f 0c01 	mov.w	ip, #1
 8100b38:	e002      	b.n	8100b40 <__cmpdf2+0x4>
 8100b3a:	bf00      	nop

08100b3c <__cmpdf2>:
 8100b3c:	f04f 0c01 	mov.w	ip, #1
 8100b40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8100b44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100b50:	bf18      	it	ne
 8100b52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8100b56:	d01b      	beq.n	8100b90 <__cmpdf2+0x54>
 8100b58:	b001      	add	sp, #4
 8100b5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8100b5e:	bf0c      	ite	eq
 8100b60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8100b64:	ea91 0f03 	teqne	r1, r3
 8100b68:	bf02      	ittt	eq
 8100b6a:	ea90 0f02 	teqeq	r0, r2
 8100b6e:	2000      	moveq	r0, #0
 8100b70:	4770      	bxeq	lr
 8100b72:	f110 0f00 	cmn.w	r0, #0
 8100b76:	ea91 0f03 	teq	r1, r3
 8100b7a:	bf58      	it	pl
 8100b7c:	4299      	cmppl	r1, r3
 8100b7e:	bf08      	it	eq
 8100b80:	4290      	cmpeq	r0, r2
 8100b82:	bf2c      	ite	cs
 8100b84:	17d8      	asrcs	r0, r3, #31
 8100b86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100b8a:	f040 0001 	orr.w	r0, r0, #1
 8100b8e:	4770      	bx	lr
 8100b90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100b94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100b98:	d102      	bne.n	8100ba0 <__cmpdf2+0x64>
 8100b9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100b9e:	d107      	bne.n	8100bb0 <__cmpdf2+0x74>
 8100ba0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100ba4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100ba8:	d1d6      	bne.n	8100b58 <__cmpdf2+0x1c>
 8100baa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100bae:	d0d3      	beq.n	8100b58 <__cmpdf2+0x1c>
 8100bb0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8100bb4:	4770      	bx	lr
 8100bb6:	bf00      	nop

08100bb8 <__aeabi_cdrcmple>:
 8100bb8:	4684      	mov	ip, r0
 8100bba:	4610      	mov	r0, r2
 8100bbc:	4662      	mov	r2, ip
 8100bbe:	468c      	mov	ip, r1
 8100bc0:	4619      	mov	r1, r3
 8100bc2:	4663      	mov	r3, ip
 8100bc4:	e000      	b.n	8100bc8 <__aeabi_cdcmpeq>
 8100bc6:	bf00      	nop

08100bc8 <__aeabi_cdcmpeq>:
 8100bc8:	b501      	push	{r0, lr}
 8100bca:	f7ff ffb7 	bl	8100b3c <__cmpdf2>
 8100bce:	2800      	cmp	r0, #0
 8100bd0:	bf48      	it	mi
 8100bd2:	f110 0f00 	cmnmi.w	r0, #0
 8100bd6:	bd01      	pop	{r0, pc}

08100bd8 <__aeabi_dcmpeq>:
 8100bd8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bdc:	f7ff fff4 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100be0:	bf0c      	ite	eq
 8100be2:	2001      	moveq	r0, #1
 8100be4:	2000      	movne	r0, #0
 8100be6:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bea:	bf00      	nop

08100bec <__aeabi_dcmplt>:
 8100bec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100bf0:	f7ff ffea 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100bf4:	bf34      	ite	cc
 8100bf6:	2001      	movcc	r0, #1
 8100bf8:	2000      	movcs	r0, #0
 8100bfa:	f85d fb08 	ldr.w	pc, [sp], #8
 8100bfe:	bf00      	nop

08100c00 <__aeabi_dcmple>:
 8100c00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c04:	f7ff ffe0 	bl	8100bc8 <__aeabi_cdcmpeq>
 8100c08:	bf94      	ite	ls
 8100c0a:	2001      	movls	r0, #1
 8100c0c:	2000      	movhi	r0, #0
 8100c0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c12:	bf00      	nop

08100c14 <__aeabi_dcmpge>:
 8100c14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c18:	f7ff ffce 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c1c:	bf94      	ite	ls
 8100c1e:	2001      	movls	r0, #1
 8100c20:	2000      	movhi	r0, #0
 8100c22:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c26:	bf00      	nop

08100c28 <__aeabi_dcmpgt>:
 8100c28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100c2c:	f7ff ffc4 	bl	8100bb8 <__aeabi_cdrcmple>
 8100c30:	bf34      	ite	cc
 8100c32:	2001      	movcc	r0, #1
 8100c34:	2000      	movcs	r0, #0
 8100c36:	f85d fb08 	ldr.w	pc, [sp], #8
 8100c3a:	bf00      	nop

08100c3c <__aeabi_dcmpun>:
 8100c3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8100c40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c44:	d102      	bne.n	8100c4c <__aeabi_dcmpun+0x10>
 8100c46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100c4a:	d10a      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8100c50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100c54:	d102      	bne.n	8100c5c <__aeabi_dcmpun+0x20>
 8100c56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100c5a:	d102      	bne.n	8100c62 <__aeabi_dcmpun+0x26>
 8100c5c:	f04f 0000 	mov.w	r0, #0
 8100c60:	4770      	bx	lr
 8100c62:	f04f 0001 	mov.w	r0, #1
 8100c66:	4770      	bx	lr

08100c68 <__aeabi_d2iz>:
 8100c68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100c6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100c70:	d215      	bcs.n	8100c9e <__aeabi_d2iz+0x36>
 8100c72:	d511      	bpl.n	8100c98 <__aeabi_d2iz+0x30>
 8100c74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100c78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100c7c:	d912      	bls.n	8100ca4 <__aeabi_d2iz+0x3c>
 8100c7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100c82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100c86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100c8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100c8e:	fa23 f002 	lsr.w	r0, r3, r2
 8100c92:	bf18      	it	ne
 8100c94:	4240      	negne	r0, r0
 8100c96:	4770      	bx	lr
 8100c98:	f04f 0000 	mov.w	r0, #0
 8100c9c:	4770      	bx	lr
 8100c9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100ca2:	d105      	bne.n	8100cb0 <__aeabi_d2iz+0x48>
 8100ca4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8100ca8:	bf08      	it	eq
 8100caa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8100cae:	4770      	bx	lr
 8100cb0:	f04f 0000 	mov.w	r0, #0
 8100cb4:	4770      	bx	lr
 8100cb6:	bf00      	nop

08100cb8 <__aeabi_d2uiz>:
 8100cb8:	004a      	lsls	r2, r1, #1
 8100cba:	d211      	bcs.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8100cc0:	d211      	bcs.n	8100ce6 <__aeabi_d2uiz+0x2e>
 8100cc2:	d50d      	bpl.n	8100ce0 <__aeabi_d2uiz+0x28>
 8100cc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8100cc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8100ccc:	d40e      	bmi.n	8100cec <__aeabi_d2uiz+0x34>
 8100cce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100cd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8100cd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8100cda:	fa23 f002 	lsr.w	r0, r3, r2
 8100cde:	4770      	bx	lr
 8100ce0:	f04f 0000 	mov.w	r0, #0
 8100ce4:	4770      	bx	lr
 8100ce6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8100cea:	d102      	bne.n	8100cf2 <__aeabi_d2uiz+0x3a>
 8100cec:	f04f 30ff 	mov.w	r0, #4294967295
 8100cf0:	4770      	bx	lr
 8100cf2:	f04f 0000 	mov.w	r0, #0
 8100cf6:	4770      	bx	lr

08100cf8 <__aeabi_d2f>:
 8100cf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8100cfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8100d00:	bf24      	itt	cs
 8100d02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8100d06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8100d0a:	d90d      	bls.n	8100d28 <__aeabi_d2f+0x30>
 8100d0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8100d10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8100d14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8100d18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8100d1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8100d20:	bf08      	it	eq
 8100d22:	f020 0001 	biceq.w	r0, r0, #1
 8100d26:	4770      	bx	lr
 8100d28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8100d2c:	d121      	bne.n	8100d72 <__aeabi_d2f+0x7a>
 8100d2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8100d32:	bfbc      	itt	lt
 8100d34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8100d38:	4770      	bxlt	lr
 8100d3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100d3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8100d42:	f1c2 0218 	rsb	r2, r2, #24
 8100d46:	f1c2 0c20 	rsb	ip, r2, #32
 8100d4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8100d4e:	fa20 f002 	lsr.w	r0, r0, r2
 8100d52:	bf18      	it	ne
 8100d54:	f040 0001 	orrne.w	r0, r0, #1
 8100d58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8100d5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8100d60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8100d64:	ea40 000c 	orr.w	r0, r0, ip
 8100d68:	fa23 f302 	lsr.w	r3, r3, r2
 8100d6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8100d70:	e7cc      	b.n	8100d0c <__aeabi_d2f+0x14>
 8100d72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8100d76:	d107      	bne.n	8100d88 <__aeabi_d2f+0x90>
 8100d78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8100d7c:	bf1e      	ittt	ne
 8100d7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8100d82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8100d86:	4770      	bxne	lr
 8100d88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8100d8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8100d90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8100d94:	4770      	bx	lr
 8100d96:	bf00      	nop

08100d98 <__aeabi_d2lz>:
 8100d98:	b538      	push	{r3, r4, r5, lr}
 8100d9a:	2200      	movs	r2, #0
 8100d9c:	2300      	movs	r3, #0
 8100d9e:	4604      	mov	r4, r0
 8100da0:	460d      	mov	r5, r1
 8100da2:	f7ff ff23 	bl	8100bec <__aeabi_dcmplt>
 8100da6:	b928      	cbnz	r0, 8100db4 <__aeabi_d2lz+0x1c>
 8100da8:	4620      	mov	r0, r4
 8100daa:	4629      	mov	r1, r5
 8100dac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8100db0:	f000 b80a 	b.w	8100dc8 <__aeabi_d2ulz>
 8100db4:	4620      	mov	r0, r4
 8100db6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8100dba:	f000 f805 	bl	8100dc8 <__aeabi_d2ulz>
 8100dbe:	4240      	negs	r0, r0
 8100dc0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8100dc4:	bd38      	pop	{r3, r4, r5, pc}
 8100dc6:	bf00      	nop

08100dc8 <__aeabi_d2ulz>:
 8100dc8:	b5d0      	push	{r4, r6, r7, lr}
 8100dca:	4b0c      	ldr	r3, [pc, #48]	; (8100dfc <__aeabi_d2ulz+0x34>)
 8100dcc:	2200      	movs	r2, #0
 8100dce:	4606      	mov	r6, r0
 8100dd0:	460f      	mov	r7, r1
 8100dd2:	f7ff fc99 	bl	8100708 <__aeabi_dmul>
 8100dd6:	f7ff ff6f 	bl	8100cb8 <__aeabi_d2uiz>
 8100dda:	4604      	mov	r4, r0
 8100ddc:	f7ff fc1a 	bl	8100614 <__aeabi_ui2d>
 8100de0:	4b07      	ldr	r3, [pc, #28]	; (8100e00 <__aeabi_d2ulz+0x38>)
 8100de2:	2200      	movs	r2, #0
 8100de4:	f7ff fc90 	bl	8100708 <__aeabi_dmul>
 8100de8:	4602      	mov	r2, r0
 8100dea:	460b      	mov	r3, r1
 8100dec:	4630      	mov	r0, r6
 8100dee:	4639      	mov	r1, r7
 8100df0:	f7ff fad2 	bl	8100398 <__aeabi_dsub>
 8100df4:	f7ff ff60 	bl	8100cb8 <__aeabi_d2uiz>
 8100df8:	4621      	mov	r1, r4
 8100dfa:	bdd0      	pop	{r4, r6, r7, pc}
 8100dfc:	3df00000 	.word	0x3df00000
 8100e00:	41f00000 	.word	0x41f00000

08100e04 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8100e04:	b480      	push	{r7}
 8100e06:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8100e08:	4b09      	ldr	r3, [pc, #36]	; (8100e30 <SystemInit+0x2c>)
 8100e0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8100e0e:	4a08      	ldr	r2, [pc, #32]	; (8100e30 <SystemInit+0x2c>)
 8100e10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100e14:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100e18:	4b05      	ldr	r3, [pc, #20]	; (8100e30 <SystemInit+0x2c>)
 8100e1a:	691b      	ldr	r3, [r3, #16]
 8100e1c:	4a04      	ldr	r2, [pc, #16]	; (8100e30 <SystemInit+0x2c>)
 8100e1e:	f043 0310 	orr.w	r3, r3, #16
 8100e22:	6113      	str	r3, [r2, #16]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 8100e24:	bf00      	nop
 8100e26:	46bd      	mov	sp, r7
 8100e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e2c:	4770      	bx	lr
 8100e2e:	bf00      	nop
 8100e30:	e000ed00 	.word	0xe000ed00

08100e34 <LL_USART_IsActiveFlag_RXNE_RXFNE>:
  * @rmtoll ISR          RXNE_RXFNE    LL_USART_IsActiveFlag_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_RXNE_RXFNE(const USART_TypeDef *USARTx)
{
 8100e34:	b480      	push	{r7}
 8100e36:	b083      	sub	sp, #12
 8100e38:	af00      	add	r7, sp, #0
 8100e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE_RXFNE) == (USART_ISR_RXNE_RXFNE)) ? 1UL : 0UL);
 8100e3c:	687b      	ldr	r3, [r7, #4]
 8100e3e:	69db      	ldr	r3, [r3, #28]
 8100e40:	f003 0320 	and.w	r3, r3, #32
 8100e44:	2b20      	cmp	r3, #32
 8100e46:	d101      	bne.n	8100e4c <LL_USART_IsActiveFlag_RXNE_RXFNE+0x18>
 8100e48:	2301      	movs	r3, #1
 8100e4a:	e000      	b.n	8100e4e <LL_USART_IsActiveFlag_RXNE_RXFNE+0x1a>
 8100e4c:	2300      	movs	r3, #0
}
 8100e4e:	4618      	mov	r0, r3
 8100e50:	370c      	adds	r7, #12
 8100e52:	46bd      	mov	sp, r7
 8100e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e58:	4770      	bx	lr

08100e5a <LL_USART_EnableIT_RXNE_RXFNE>:
  * @rmtoll CR1        RXNEIE_RXFNEIE  LL_USART_EnableIT_RXNE_RXFNE
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_EnableIT_RXNE_RXFNE(USART_TypeDef *USARTx)
{
 8100e5a:	b480      	push	{r7}
 8100e5c:	b089      	sub	sp, #36	; 0x24
 8100e5e:	af00      	add	r7, sp, #0
 8100e60:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8100e62:	687b      	ldr	r3, [r7, #4]
 8100e64:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8100e66:	68fb      	ldr	r3, [r7, #12]
 8100e68:	e853 3f00 	ldrex	r3, [r3]
 8100e6c:	60bb      	str	r3, [r7, #8]
   return(result);
 8100e6e:	68bb      	ldr	r3, [r7, #8]
 8100e70:	f043 0320 	orr.w	r3, r3, #32
 8100e74:	61fb      	str	r3, [r7, #28]
 8100e76:	687b      	ldr	r3, [r7, #4]
 8100e78:	69fa      	ldr	r2, [r7, #28]
 8100e7a:	61ba      	str	r2, [r7, #24]
 8100e7c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8100e7e:	6979      	ldr	r1, [r7, #20]
 8100e80:	69ba      	ldr	r2, [r7, #24]
 8100e82:	e841 2300 	strex	r3, r2, [r1]
 8100e86:	613b      	str	r3, [r7, #16]
   return(result);
 8100e88:	693b      	ldr	r3, [r7, #16]
 8100e8a:	2b00      	cmp	r3, #0
 8100e8c:	d1e9      	bne.n	8100e62 <LL_USART_EnableIT_RXNE_RXFNE+0x8>
}
 8100e8e:	bf00      	nop
 8100e90:	bf00      	nop
 8100e92:	3724      	adds	r7, #36	; 0x24
 8100e94:	46bd      	mov	sp, r7
 8100e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e9a:	4770      	bx	lr

08100e9c <LL_USART_ReceiveData8>:
  * @rmtoll RDR          RDR           LL_USART_ReceiveData8
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(const USART_TypeDef *USARTx)
{
 8100e9c:	b480      	push	{r7}
 8100e9e:	b083      	sub	sp, #12
 8100ea0:	af00      	add	r7, sp, #0
 8100ea2:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 8100ea4:	687b      	ldr	r3, [r7, #4]
 8100ea6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8100ea8:	b2db      	uxtb	r3, r3
}
 8100eaa:	4618      	mov	r0, r3
 8100eac:	370c      	adds	r7, #12
 8100eae:	46bd      	mov	sp, r7
 8100eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100eb4:	4770      	bx	lr
	...

08100eb8 <App_UART_Init>:
// Zmienna dostępna z main.c:
extern char command_buffer[LINE_BUFFER_SIZE];
extern volatile bool command_ready;


void App_UART_Init(void) {
 8100eb8:	b580      	push	{r7, lr}
 8100eba:	af00      	add	r7, sp, #0
    LL_USART_EnableIT_RXNE(UART4);
 8100ebc:	4802      	ldr	r0, [pc, #8]	; (8100ec8 <App_UART_Init+0x10>)
 8100ebe:	f7ff ffcc 	bl	8100e5a <LL_USART_EnableIT_RXNE_RXFNE>
}
 8100ec2:	bf00      	nop
 8100ec4:	bd80      	pop	{r7, pc}
 8100ec6:	bf00      	nop
 8100ec8:	40004c00 	.word	0x40004c00

08100ecc <App_UART_IRQHandler>:

void App_UART_IRQHandler(void) {
 8100ecc:	b580      	push	{r7, lr}
 8100ece:	b082      	sub	sp, #8
 8100ed0:	af00      	add	r7, sp, #0
    if (LL_USART_IsActiveFlag_RXNE(UART4)) {
 8100ed2:	4822      	ldr	r0, [pc, #136]	; (8100f5c <App_UART_IRQHandler+0x90>)
 8100ed4:	f7ff ffae 	bl	8100e34 <LL_USART_IsActiveFlag_RXNE_RXFNE>
 8100ed8:	4603      	mov	r3, r0
 8100eda:	2b00      	cmp	r3, #0
 8100edc:	d03a      	beq.n	8100f54 <App_UART_IRQHandler+0x88>
        uint8_t byte = LL_USART_ReceiveData8(UART4);
 8100ede:	481f      	ldr	r0, [pc, #124]	; (8100f5c <App_UART_IRQHandler+0x90>)
 8100ee0:	f7ff ffdc 	bl	8100e9c <LL_USART_ReceiveData8>
 8100ee4:	4603      	mov	r3, r0
 8100ee6:	71fb      	strb	r3, [r7, #7]


        if (byte == '\r' || byte == '\n') {
 8100ee8:	79fb      	ldrb	r3, [r7, #7]
 8100eea:	2b0d      	cmp	r3, #13
 8100eec:	d002      	beq.n	8100ef4 <App_UART_IRQHandler+0x28>
 8100eee:	79fb      	ldrb	r3, [r7, #7]
 8100ef0:	2b0a      	cmp	r3, #10
 8100ef2:	d11d      	bne.n	8100f30 <App_UART_IRQHandler+0x64>
            if (line_index > 0 && !command_ready) {
 8100ef4:	4b1a      	ldr	r3, [pc, #104]	; (8100f60 <App_UART_IRQHandler+0x94>)
 8100ef6:	781b      	ldrb	r3, [r3, #0]
 8100ef8:	2b00      	cmp	r3, #0
 8100efa:	d015      	beq.n	8100f28 <App_UART_IRQHandler+0x5c>
 8100efc:	4b19      	ldr	r3, [pc, #100]	; (8100f64 <App_UART_IRQHandler+0x98>)
 8100efe:	781b      	ldrb	r3, [r3, #0]
 8100f00:	b2db      	uxtb	r3, r3
 8100f02:	f083 0301 	eor.w	r3, r3, #1
 8100f06:	b2db      	uxtb	r3, r3
 8100f08:	2b00      	cmp	r3, #0
 8100f0a:	d00d      	beq.n	8100f28 <App_UART_IRQHandler+0x5c>
                line_buffer[line_index] = '\0';
 8100f0c:	4b14      	ldr	r3, [pc, #80]	; (8100f60 <App_UART_IRQHandler+0x94>)
 8100f0e:	781b      	ldrb	r3, [r3, #0]
 8100f10:	461a      	mov	r2, r3
 8100f12:	4b15      	ldr	r3, [pc, #84]	; (8100f68 <App_UART_IRQHandler+0x9c>)
 8100f14:	2100      	movs	r1, #0
 8100f16:	5499      	strb	r1, [r3, r2]
                strncpy(command_buffer, line_buffer, LINE_BUFFER_SIZE);
 8100f18:	2220      	movs	r2, #32
 8100f1a:	4913      	ldr	r1, [pc, #76]	; (8100f68 <App_UART_IRQHandler+0x9c>)
 8100f1c:	4813      	ldr	r0, [pc, #76]	; (8100f6c <App_UART_IRQHandler+0xa0>)
 8100f1e:	f003 fc67 	bl	81047f0 <strncpy>
                command_ready = true;
 8100f22:	4b10      	ldr	r3, [pc, #64]	; (8100f64 <App_UART_IRQHandler+0x98>)
 8100f24:	2201      	movs	r2, #1
 8100f26:	701a      	strb	r2, [r3, #0]
            }
            line_index = 0; // reset bufora niezależnie
 8100f28:	4b0d      	ldr	r3, [pc, #52]	; (8100f60 <App_UART_IRQHandler+0x94>)
 8100f2a:	2200      	movs	r2, #0
 8100f2c:	701a      	strb	r2, [r3, #0]
            line_buffer[line_index++] = byte;
        } else {
            line_index = 0; // overflow: resetujemy
        }
    }
}
 8100f2e:	e011      	b.n	8100f54 <App_UART_IRQHandler+0x88>
        } else if (line_index < LINE_BUFFER_SIZE - 1) {
 8100f30:	4b0b      	ldr	r3, [pc, #44]	; (8100f60 <App_UART_IRQHandler+0x94>)
 8100f32:	781b      	ldrb	r3, [r3, #0]
 8100f34:	2b1e      	cmp	r3, #30
 8100f36:	d80a      	bhi.n	8100f4e <App_UART_IRQHandler+0x82>
            line_buffer[line_index++] = byte;
 8100f38:	4b09      	ldr	r3, [pc, #36]	; (8100f60 <App_UART_IRQHandler+0x94>)
 8100f3a:	781b      	ldrb	r3, [r3, #0]
 8100f3c:	1c5a      	adds	r2, r3, #1
 8100f3e:	b2d1      	uxtb	r1, r2
 8100f40:	4a07      	ldr	r2, [pc, #28]	; (8100f60 <App_UART_IRQHandler+0x94>)
 8100f42:	7011      	strb	r1, [r2, #0]
 8100f44:	4619      	mov	r1, r3
 8100f46:	4a08      	ldr	r2, [pc, #32]	; (8100f68 <App_UART_IRQHandler+0x9c>)
 8100f48:	79fb      	ldrb	r3, [r7, #7]
 8100f4a:	5453      	strb	r3, [r2, r1]
}
 8100f4c:	e002      	b.n	8100f54 <App_UART_IRQHandler+0x88>
            line_index = 0; // overflow: resetujemy
 8100f4e:	4b04      	ldr	r3, [pc, #16]	; (8100f60 <App_UART_IRQHandler+0x94>)
 8100f50:	2200      	movs	r2, #0
 8100f52:	701a      	strb	r2, [r3, #0]
}
 8100f54:	bf00      	nop
 8100f56:	3708      	adds	r7, #8
 8100f58:	46bd      	mov	sp, r7
 8100f5a:	bd80      	pop	{r7, pc}
 8100f5c:	40004c00 	.word	0x40004c00
 8100f60:	10000204 	.word	0x10000204
 8100f64:	10000228 	.word	0x10000228
 8100f68:	100001e4 	.word	0x100001e4
 8100f6c:	10000208 	.word	0x10000208

08100f70 <LL_USART_IsActiveFlag_TXE_TXFNF>:
{
 8100f70:	b480      	push	{r7}
 8100f72:	b083      	sub	sp, #12
 8100f74:	af00      	add	r7, sp, #0
 8100f76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE_TXFNF) == (USART_ISR_TXE_TXFNF)) ? 1UL : 0UL);
 8100f78:	687b      	ldr	r3, [r7, #4]
 8100f7a:	69db      	ldr	r3, [r3, #28]
 8100f7c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8100f80:	2b80      	cmp	r3, #128	; 0x80
 8100f82:	d101      	bne.n	8100f88 <LL_USART_IsActiveFlag_TXE_TXFNF+0x18>
 8100f84:	2301      	movs	r3, #1
 8100f86:	e000      	b.n	8100f8a <LL_USART_IsActiveFlag_TXE_TXFNF+0x1a>
 8100f88:	2300      	movs	r3, #0
}
 8100f8a:	4618      	mov	r0, r3
 8100f8c:	370c      	adds	r7, #12
 8100f8e:	46bd      	mov	sp, r7
 8100f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100f94:	4770      	bx	lr

08100f96 <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 8100f96:	b480      	push	{r7}
 8100f98:	b083      	sub	sp, #12
 8100f9a:	af00      	add	r7, sp, #0
 8100f9c:	6078      	str	r0, [r7, #4]
 8100f9e:	460b      	mov	r3, r1
 8100fa0:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 8100fa2:	78fa      	ldrb	r2, [r7, #3]
 8100fa4:	687b      	ldr	r3, [r7, #4]
 8100fa6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8100fa8:	bf00      	nop
 8100faa:	370c      	adds	r7, #12
 8100fac:	46bd      	mov	sp, r7
 8100fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100fb2:	4770      	bx	lr

08100fb4 <uart_send_char>:
extern float voltage_measured;

/**
 * @brief  Low-level send of a single character over UART4
 */
static void uart_send_char(char c) {
 8100fb4:	b580      	push	{r7, lr}
 8100fb6:	b082      	sub	sp, #8
 8100fb8:	af00      	add	r7, sp, #0
 8100fba:	4603      	mov	r3, r0
 8100fbc:	71fb      	strb	r3, [r7, #7]
    // Wait until TXE (Transmit Data Register Empty)
    while (!LL_USART_IsActiveFlag_TXE(UART4));
 8100fbe:	bf00      	nop
 8100fc0:	4807      	ldr	r0, [pc, #28]	; (8100fe0 <uart_send_char+0x2c>)
 8100fc2:	f7ff ffd5 	bl	8100f70 <LL_USART_IsActiveFlag_TXE_TXFNF>
 8100fc6:	4603      	mov	r3, r0
 8100fc8:	2b00      	cmp	r3, #0
 8100fca:	d0f9      	beq.n	8100fc0 <uart_send_char+0xc>
    LL_USART_TransmitData8(UART4, (uint8_t)c);
 8100fcc:	79fb      	ldrb	r3, [r7, #7]
 8100fce:	4619      	mov	r1, r3
 8100fd0:	4803      	ldr	r0, [pc, #12]	; (8100fe0 <uart_send_char+0x2c>)
 8100fd2:	f7ff ffe0 	bl	8100f96 <LL_USART_TransmitData8>
}
 8100fd6:	bf00      	nop
 8100fd8:	3708      	adds	r7, #8
 8100fda:	46bd      	mov	sp, r7
 8100fdc:	bd80      	pop	{r7, pc}
 8100fde:	bf00      	nop
 8100fe0:	40004c00 	.word	0x40004c00

08100fe4 <uart_send_str>:

/**
 * @brief  Send a NUL-terminated string over UART4
 */
static void uart_send_str(const char *s) {
 8100fe4:	b580      	push	{r7, lr}
 8100fe6:	b082      	sub	sp, #8
 8100fe8:	af00      	add	r7, sp, #0
 8100fea:	6078      	str	r0, [r7, #4]
    while (*s) {
 8100fec:	e006      	b.n	8100ffc <uart_send_str+0x18>
        uart_send_char(*s++);
 8100fee:	687b      	ldr	r3, [r7, #4]
 8100ff0:	1c5a      	adds	r2, r3, #1
 8100ff2:	607a      	str	r2, [r7, #4]
 8100ff4:	781b      	ldrb	r3, [r3, #0]
 8100ff6:	4618      	mov	r0, r3
 8100ff8:	f7ff ffdc 	bl	8100fb4 <uart_send_char>
    while (*s) {
 8100ffc:	687b      	ldr	r3, [r7, #4]
 8100ffe:	781b      	ldrb	r3, [r3, #0]
 8101000:	2b00      	cmp	r3, #0
 8101002:	d1f4      	bne.n	8100fee <uart_send_str+0xa>
    }
}
 8101004:	bf00      	nop
 8101006:	bf00      	nop
 8101008:	3708      	adds	r7, #8
 810100a:	46bd      	mov	sp, r7
 810100c:	bd80      	pop	{r7, pc}
	...

08101010 <response_output_enable>:

/**
 * @brief  Respond with current output state: '0' or '1' followed by '\n'
 */
static void response_output_enable(void) {
 8101010:	b580      	push	{r7, lr}
 8101012:	b088      	sub	sp, #32
 8101014:	af00      	add	r7, sp, #0
	char buff[32] = {0};
 8101016:	2300      	movs	r3, #0
 8101018:	603b      	str	r3, [r7, #0]
 810101a:	1d3b      	adds	r3, r7, #4
 810101c:	2200      	movs	r2, #0
 810101e:	601a      	str	r2, [r3, #0]
 8101020:	605a      	str	r2, [r3, #4]
 8101022:	609a      	str	r2, [r3, #8]
 8101024:	60da      	str	r2, [r3, #12]
 8101026:	611a      	str	r2, [r3, #16]
 8101028:	615a      	str	r2, [r3, #20]
 810102a:	619a      	str	r2, [r3, #24]


	snprintf(buff, sizeof(buff), "%d\n", output_enable);
 810102c:	4b07      	ldr	r3, [pc, #28]	; (810104c <response_output_enable+0x3c>)
 810102e:	681b      	ldr	r3, [r3, #0]
 8101030:	4638      	mov	r0, r7
 8101032:	4a07      	ldr	r2, [pc, #28]	; (8101050 <response_output_enable+0x40>)
 8101034:	2120      	movs	r1, #32
 8101036:	f003 fb29 	bl	810468c <sniprintf>

    uart_send_str(buff);
 810103a:	463b      	mov	r3, r7
 810103c:	4618      	mov	r0, r3
 810103e:	f7ff ffd1 	bl	8100fe4 <uart_send_str>
}
 8101042:	bf00      	nop
 8101044:	3720      	adds	r7, #32
 8101046:	46bd      	mov	sp, r7
 8101048:	bd80      	pop	{r7, pc}
 810104a:	bf00      	nop
 810104c:	1000022c 	.word	0x1000022c
 8101050:	08107348 	.word	0x08107348
 8101054:	00000000 	.word	0x00000000

08101058 <response_vset>:

/**
 * @brief  Respond with set voltage (vset) formatted as X.YY\n
 */
static void response_vset(void) {
 8101058:	b580      	push	{r7, lr}
 810105a:	b08c      	sub	sp, #48	; 0x30
 810105c:	af02      	add	r7, sp, #8
    char buf[32];
    // snprintf rounds correctly (adds +0.005)
    int intPart = (int)vset;
 810105e:	4b22      	ldr	r3, [pc, #136]	; (81010e8 <response_vset+0x90>)
 8101060:	edd3 7a00 	vldr	s15, [r3]
 8101064:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8101068:	ee17 3a90 	vmov	r3, s15
 810106c:	627b      	str	r3, [r7, #36]	; 0x24
    int fracPart = (int)((vset - intPart + 0.005) * 100);
 810106e:	4b1e      	ldr	r3, [pc, #120]	; (81010e8 <response_vset+0x90>)
 8101070:	ed93 7a00 	vldr	s14, [r3]
 8101074:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8101076:	ee07 3a90 	vmov	s15, r3
 810107a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810107e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101082:	ee17 0a90 	vmov	r0, s15
 8101086:	f7ff fae7 	bl	8100658 <__aeabi_f2d>
 810108a:	a315      	add	r3, pc, #84	; (adr r3, 81010e0 <response_vset+0x88>)
 810108c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101090:	f7ff f984 	bl	810039c <__adddf3>
 8101094:	4602      	mov	r2, r0
 8101096:	460b      	mov	r3, r1
 8101098:	4610      	mov	r0, r2
 810109a:	4619      	mov	r1, r3
 810109c:	f04f 0200 	mov.w	r2, #0
 81010a0:	4b12      	ldr	r3, [pc, #72]	; (81010ec <response_vset+0x94>)
 81010a2:	f7ff fb31 	bl	8100708 <__aeabi_dmul>
 81010a6:	4602      	mov	r2, r0
 81010a8:	460b      	mov	r3, r1
 81010aa:	4610      	mov	r0, r2
 81010ac:	4619      	mov	r1, r3
 81010ae:	f7ff fddb 	bl	8100c68 <__aeabi_d2iz>
 81010b2:	4603      	mov	r3, r0
 81010b4:	623b      	str	r3, [r7, #32]

    snprintf(buf, sizeof(buf), "%d,%02d\n", intPart, abs(fracPart));
 81010b6:	6a3b      	ldr	r3, [r7, #32]
 81010b8:	2b00      	cmp	r3, #0
 81010ba:	bfb8      	it	lt
 81010bc:	425b      	neglt	r3, r3
 81010be:	4638      	mov	r0, r7
 81010c0:	9300      	str	r3, [sp, #0]
 81010c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 81010c4:	4a0a      	ldr	r2, [pc, #40]	; (81010f0 <response_vset+0x98>)
 81010c6:	2120      	movs	r1, #32
 81010c8:	f003 fae0 	bl	810468c <sniprintf>
    uart_send_str(buf);
 81010cc:	463b      	mov	r3, r7
 81010ce:	4618      	mov	r0, r3
 81010d0:	f7ff ff88 	bl	8100fe4 <uart_send_str>
}
 81010d4:	bf00      	nop
 81010d6:	3728      	adds	r7, #40	; 0x28
 81010d8:	46bd      	mov	sp, r7
 81010da:	bd80      	pop	{r7, pc}
 81010dc:	f3af 8000 	nop.w
 81010e0:	47ae147b 	.word	0x47ae147b
 81010e4:	3f747ae1 	.word	0x3f747ae1
 81010e8:	10000230 	.word	0x10000230
 81010ec:	40590000 	.word	0x40590000
 81010f0:	0810734c 	.word	0x0810734c
 81010f4:	00000000 	.word	0x00000000

081010f8 <response_vmeas>:

/**
 * @brief  Respond with measured voltage via external ADC function
 */
static void response_vmeas(void) {
 81010f8:	b580      	push	{r7, lr}
 81010fa:	b08e      	sub	sp, #56	; 0x38
 81010fc:	af02      	add	r7, sp, #8
    /*extern float get_measured_voltage(void);*/
    float vmeas = voltage_measured;
 81010fe:	4b22      	ldr	r3, [pc, #136]	; (8101188 <response_vmeas+0x90>)
 8101100:	681b      	ldr	r3, [r3, #0]
 8101102:	62fb      	str	r3, [r7, #44]	; 0x2c
    char buf[32];
    int intPart = (int)vmeas;
 8101104:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8101108:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 810110c:	ee17 3a90 	vmov	r3, s15
 8101110:	62bb      	str	r3, [r7, #40]	; 0x28
    int fracPart = (int)((vmeas - intPart + 0.005) * 100);
 8101112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101114:	ee07 3a90 	vmov	s15, r3
 8101118:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 810111c:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8101120:	ee77 7a67 	vsub.f32	s15, s14, s15
 8101124:	ee17 0a90 	vmov	r0, s15
 8101128:	f7ff fa96 	bl	8100658 <__aeabi_f2d>
 810112c:	a314      	add	r3, pc, #80	; (adr r3, 8101180 <response_vmeas+0x88>)
 810112e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101132:	f7ff f933 	bl	810039c <__adddf3>
 8101136:	4602      	mov	r2, r0
 8101138:	460b      	mov	r3, r1
 810113a:	4610      	mov	r0, r2
 810113c:	4619      	mov	r1, r3
 810113e:	f04f 0200 	mov.w	r2, #0
 8101142:	4b12      	ldr	r3, [pc, #72]	; (810118c <response_vmeas+0x94>)
 8101144:	f7ff fae0 	bl	8100708 <__aeabi_dmul>
 8101148:	4602      	mov	r2, r0
 810114a:	460b      	mov	r3, r1
 810114c:	4610      	mov	r0, r2
 810114e:	4619      	mov	r1, r3
 8101150:	f7ff fd8a 	bl	8100c68 <__aeabi_d2iz>
 8101154:	4603      	mov	r3, r0
 8101156:	627b      	str	r3, [r7, #36]	; 0x24

    snprintf(buf, sizeof(buf), "%d,%02d\n", intPart, abs(fracPart));
 8101158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 810115a:	2b00      	cmp	r3, #0
 810115c:	bfb8      	it	lt
 810115e:	425b      	neglt	r3, r3
 8101160:	1d38      	adds	r0, r7, #4
 8101162:	9300      	str	r3, [sp, #0]
 8101164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8101166:	4a0a      	ldr	r2, [pc, #40]	; (8101190 <response_vmeas+0x98>)
 8101168:	2120      	movs	r1, #32
 810116a:	f003 fa8f 	bl	810468c <sniprintf>
    uart_send_str(buf);
 810116e:	1d3b      	adds	r3, r7, #4
 8101170:	4618      	mov	r0, r3
 8101172:	f7ff ff37 	bl	8100fe4 <uart_send_str>
}
 8101176:	bf00      	nop
 8101178:	3730      	adds	r7, #48	; 0x30
 810117a:	46bd      	mov	sp, r7
 810117c:	bd80      	pop	{r7, pc}
 810117e:	bf00      	nop
 8101180:	47ae147b 	.word	0x47ae147b
 8101184:	3f747ae1 	.word	0x3f747ae1
 8101188:	10000234 	.word	0x10000234
 810118c:	40590000 	.word	0x40590000
 8101190:	0810734c 	.word	0x0810734c

08101194 <command_parser_process_line>:

/**
 * @brief  Parse and handle a received command line
 * @param  line: NUL-terminated string without CR/LF
 */
void command_parser_process_line(const char *line) {
 8101194:	b580      	push	{r7, lr}
 8101196:	b086      	sub	sp, #24
 8101198:	af00      	add	r7, sp, #0
 810119a:	6078      	str	r0, [r7, #4]
    if (line == NULL || *line == '\0')
 810119c:	687b      	ldr	r3, [r7, #4]
 810119e:	2b00      	cmp	r3, #0
 81011a0:	d07f      	beq.n	81012a2 <command_parser_process_line+0x10e>
 81011a2:	687b      	ldr	r3, [r7, #4]
 81011a4:	781b      	ldrb	r3, [r3, #0]
 81011a6:	2b00      	cmp	r3, #0
 81011a8:	d07b      	beq.n	81012a2 <command_parser_process_line+0x10e>
        return;

    // Skip leading whitespace
    while (isspace((unsigned char)*line))
 81011aa:	e002      	b.n	81011b2 <command_parser_process_line+0x1e>
        line++;
 81011ac:	687b      	ldr	r3, [r7, #4]
 81011ae:	3301      	adds	r3, #1
 81011b0:	607b      	str	r3, [r7, #4]
    while (isspace((unsigned char)*line))
 81011b2:	687b      	ldr	r3, [r7, #4]
 81011b4:	781b      	ldrb	r3, [r3, #0]
 81011b6:	3301      	adds	r3, #1
 81011b8:	4a3d      	ldr	r2, [pc, #244]	; (81012b0 <command_parser_process_line+0x11c>)
 81011ba:	4413      	add	r3, r2
 81011bc:	781b      	ldrb	r3, [r3, #0]
 81011be:	f003 0308 	and.w	r3, r3, #8
 81011c2:	2b00      	cmp	r3, #0
 81011c4:	d1f2      	bne.n	81011ac <command_parser_process_line+0x18>

    // OUTPUT? -> query output state
    if (strncasecmp(line, "OUTPUT?", 7) == 0) {
 81011c6:	2207      	movs	r2, #7
 81011c8:	493a      	ldr	r1, [pc, #232]	; (81012b4 <command_parser_process_line+0x120>)
 81011ca:	6878      	ldr	r0, [r7, #4]
 81011cc:	f003 fade 	bl	810478c <strncasecmp>
 81011d0:	4603      	mov	r3, r0
 81011d2:	2b00      	cmp	r3, #0
 81011d4:	d102      	bne.n	81011dc <command_parser_process_line+0x48>
        response_output_enable();
 81011d6:	f7ff ff1b 	bl	8101010 <response_output_enable>
        return;
 81011da:	e065      	b.n	81012a8 <command_parser_process_line+0x114>
    }

    // OUTPUT <0|1|ON|OFF>
    if (strncasecmp(line, "OUTPUT ", 7) == 0) {
 81011dc:	2207      	movs	r2, #7
 81011de:	4936      	ldr	r1, [pc, #216]	; (81012b8 <command_parser_process_line+0x124>)
 81011e0:	6878      	ldr	r0, [r7, #4]
 81011e2:	f003 fad3 	bl	810478c <strncasecmp>
 81011e6:	4603      	mov	r3, r0
 81011e8:	2b00      	cmp	r3, #0
 81011ea:	d128      	bne.n	810123e <command_parser_process_line+0xaa>
        const char *arg = line + 7;
 81011ec:	687b      	ldr	r3, [r7, #4]
 81011ee:	3307      	adds	r3, #7
 81011f0:	613b      	str	r3, [r7, #16]
        if (strncasecmp(arg, "ON", 2) == 0) {
 81011f2:	2202      	movs	r2, #2
 81011f4:	4931      	ldr	r1, [pc, #196]	; (81012bc <command_parser_process_line+0x128>)
 81011f6:	6938      	ldr	r0, [r7, #16]
 81011f8:	f003 fac8 	bl	810478c <strncasecmp>
 81011fc:	4603      	mov	r3, r0
 81011fe:	2b00      	cmp	r3, #0
 8101200:	d103      	bne.n	810120a <command_parser_process_line+0x76>
            output_enable = 1;
 8101202:	4b2f      	ldr	r3, [pc, #188]	; (81012c0 <command_parser_process_line+0x12c>)
 8101204:	2201      	movs	r2, #1
 8101206:	601a      	str	r2, [r3, #0]
        } else {
            int val = atoi(arg);
            if (val == 0 || val == 1)
                output_enable = val;
        }
        return;
 8101208:	e04d      	b.n	81012a6 <command_parser_process_line+0x112>
        } else if (strncasecmp(arg, "OFF", 3) == 0) {
 810120a:	2203      	movs	r2, #3
 810120c:	492d      	ldr	r1, [pc, #180]	; (81012c4 <command_parser_process_line+0x130>)
 810120e:	6938      	ldr	r0, [r7, #16]
 8101210:	f003 fabc 	bl	810478c <strncasecmp>
 8101214:	4603      	mov	r3, r0
 8101216:	2b00      	cmp	r3, #0
 8101218:	d103      	bne.n	8101222 <command_parser_process_line+0x8e>
            output_enable = 0;
 810121a:	4b29      	ldr	r3, [pc, #164]	; (81012c0 <command_parser_process_line+0x12c>)
 810121c:	2200      	movs	r2, #0
 810121e:	601a      	str	r2, [r3, #0]
        return;
 8101220:	e041      	b.n	81012a6 <command_parser_process_line+0x112>
            int val = atoi(arg);
 8101222:	6938      	ldr	r0, [r7, #16]
 8101224:	f001 fe06 	bl	8102e34 <atoi>
 8101228:	60f8      	str	r0, [r7, #12]
            if (val == 0 || val == 1)
 810122a:	68fb      	ldr	r3, [r7, #12]
 810122c:	2b00      	cmp	r3, #0
 810122e:	d002      	beq.n	8101236 <command_parser_process_line+0xa2>
 8101230:	68fb      	ldr	r3, [r7, #12]
 8101232:	2b01      	cmp	r3, #1
 8101234:	d137      	bne.n	81012a6 <command_parser_process_line+0x112>
                output_enable = val;
 8101236:	4a22      	ldr	r2, [pc, #136]	; (81012c0 <command_parser_process_line+0x12c>)
 8101238:	68fb      	ldr	r3, [r7, #12]
 810123a:	6013      	str	r3, [r2, #0]
        return;
 810123c:	e033      	b.n	81012a6 <command_parser_process_line+0x112>
    }

    // VOLT? -> query set voltage
    if (strncasecmp(line, "VOLT?", 5) == 0) {
 810123e:	2205      	movs	r2, #5
 8101240:	4921      	ldr	r1, [pc, #132]	; (81012c8 <command_parser_process_line+0x134>)
 8101242:	6878      	ldr	r0, [r7, #4]
 8101244:	f003 faa2 	bl	810478c <strncasecmp>
 8101248:	4603      	mov	r3, r0
 810124a:	2b00      	cmp	r3, #0
 810124c:	d102      	bne.n	8101254 <command_parser_process_line+0xc0>
        response_vset();
 810124e:	f7ff ff03 	bl	8101058 <response_vset>
        return;
 8101252:	e029      	b.n	81012a8 <command_parser_process_line+0x114>
    }

    // VOLT <float>
    if (strncasecmp(line, "VOLT ", 5) == 0) {
 8101254:	2205      	movs	r2, #5
 8101256:	491d      	ldr	r1, [pc, #116]	; (81012cc <command_parser_process_line+0x138>)
 8101258:	6878      	ldr	r0, [r7, #4]
 810125a:	f003 fa97 	bl	810478c <strncasecmp>
 810125e:	4603      	mov	r3, r0
 8101260:	2b00      	cmp	r3, #0
 8101262:	d10b      	bne.n	810127c <command_parser_process_line+0xe8>
        float tmp = strtof(line + 5, NULL);
 8101264:	687b      	ldr	r3, [r7, #4]
 8101266:	3305      	adds	r3, #5
 8101268:	2100      	movs	r1, #0
 810126a:	4618      	mov	r0, r3
 810126c:	f002 fbf4 	bl	8103a58 <strtof>
 8101270:	ed87 0a05 	vstr	s0, [r7, #20]
        vset = tmp;
 8101274:	4a16      	ldr	r2, [pc, #88]	; (81012d0 <command_parser_process_line+0x13c>)
 8101276:	697b      	ldr	r3, [r7, #20]
 8101278:	6013      	str	r3, [r2, #0]
        return;
 810127a:	e015      	b.n	81012a8 <command_parser_process_line+0x114>
    }

    // FETCH:VOLT? or FETC:VOLT? -> query measured voltage
    if (strncasecmp(line, "FETCH:VOLT?", 11) == 0 ||
 810127c:	220b      	movs	r2, #11
 810127e:	4915      	ldr	r1, [pc, #84]	; (81012d4 <command_parser_process_line+0x140>)
 8101280:	6878      	ldr	r0, [r7, #4]
 8101282:	f003 fa83 	bl	810478c <strncasecmp>
 8101286:	4603      	mov	r3, r0
 8101288:	2b00      	cmp	r3, #0
 810128a:	d007      	beq.n	810129c <command_parser_process_line+0x108>
        strncasecmp(line, "FETC:VOLT?", 10) == 0) {
 810128c:	220a      	movs	r2, #10
 810128e:	4912      	ldr	r1, [pc, #72]	; (81012d8 <command_parser_process_line+0x144>)
 8101290:	6878      	ldr	r0, [r7, #4]
 8101292:	f003 fa7b 	bl	810478c <strncasecmp>
 8101296:	4603      	mov	r3, r0
    if (strncasecmp(line, "FETCH:VOLT?", 11) == 0 ||
 8101298:	2b00      	cmp	r3, #0
 810129a:	d105      	bne.n	81012a8 <command_parser_process_line+0x114>
        response_vmeas();
 810129c:	f7ff ff2c 	bl	81010f8 <response_vmeas>
        return;
 81012a0:	e002      	b.n	81012a8 <command_parser_process_line+0x114>
        return;
 81012a2:	bf00      	nop
 81012a4:	e000      	b.n	81012a8 <command_parser_process_line+0x114>
        return;
 81012a6:	bf00      	nop
    }

    // Unknown command: ignore or implement error response here
}
 81012a8:	3718      	adds	r7, #24
 81012aa:	46bd      	mov	sp, r7
 81012ac:	bd80      	pop	{r7, pc}
 81012ae:	bf00      	nop
 81012b0:	08107430 	.word	0x08107430
 81012b4:	08107358 	.word	0x08107358
 81012b8:	08107360 	.word	0x08107360
 81012bc:	08107368 	.word	0x08107368
 81012c0:	1000022c 	.word	0x1000022c
 81012c4:	0810736c 	.word	0x0810736c
 81012c8:	08107370 	.word	0x08107370
 81012cc:	08107378 	.word	0x08107378
 81012d0:	10000230 	.word	0x10000230
 81012d4:	08107380 	.word	0x08107380
 81012d8:	0810738c 	.word	0x0810738c

081012dc <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 81012dc:	b480      	push	{r7}
 81012de:	b085      	sub	sp, #20
 81012e0:	af00      	add	r7, sp, #0
 81012e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 81012e4:	4b0a      	ldr	r3, [pc, #40]	; (8101310 <LL_AHB1_GRP1_EnableClock+0x34>)
 81012e6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 81012ea:	4909      	ldr	r1, [pc, #36]	; (8101310 <LL_AHB1_GRP1_EnableClock+0x34>)
 81012ec:	687b      	ldr	r3, [r7, #4]
 81012ee:	4313      	orrs	r3, r2
 81012f0:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 81012f4:	4b06      	ldr	r3, [pc, #24]	; (8101310 <LL_AHB1_GRP1_EnableClock+0x34>)
 81012f6:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 81012fa:	687b      	ldr	r3, [r7, #4]
 81012fc:	4013      	ands	r3, r2
 81012fe:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8101300:	68fb      	ldr	r3, [r7, #12]
}
 8101302:	bf00      	nop
 8101304:	3714      	adds	r7, #20
 8101306:	46bd      	mov	sp, r7
 8101308:	f85d 7b04 	ldr.w	r7, [sp], #4
 810130c:	4770      	bx	lr
 810130e:	bf00      	nop
 8101310:	58024400 	.word	0x58024400

08101314 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8101314:	b580      	push	{r7, lr}
 8101316:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8101318:	2001      	movs	r0, #1
 810131a:	f7ff ffdf 	bl	81012dc <LL_AHB1_GRP1_EnableClock>

}
 810131e:	bf00      	nop
 8101320:	bd80      	pop	{r7, pc}
	...

08101324 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 8101324:	b480      	push	{r7}
 8101326:	b085      	sub	sp, #20
 8101328:	af00      	add	r7, sp, #0
 810132a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 810132c:	4b0a      	ldr	r3, [pc, #40]	; (8101358 <LL_AHB4_GRP1_EnableClock+0x34>)
 810132e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101332:	4909      	ldr	r1, [pc, #36]	; (8101358 <LL_AHB4_GRP1_EnableClock+0x34>)
 8101334:	687b      	ldr	r3, [r7, #4]
 8101336:	4313      	orrs	r3, r2
 8101338:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 810133c:	4b06      	ldr	r3, [pc, #24]	; (8101358 <LL_AHB4_GRP1_EnableClock+0x34>)
 810133e:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 8101342:	687b      	ldr	r3, [r7, #4]
 8101344:	4013      	ands	r3, r2
 8101346:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8101348:	68fb      	ldr	r3, [r7, #12]
}
 810134a:	bf00      	nop
 810134c:	3714      	adds	r7, #20
 810134e:	46bd      	mov	sp, r7
 8101350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101354:	4770      	bx	lr
 8101356:	bf00      	nop
 8101358:	58024400 	.word	0x58024400

0810135c <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Pinout Configuration
*/
void MX_GPIO_Init(void)
{
 810135c:	b580      	push	{r7, lr}
 810135e:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8101360:	2001      	movs	r0, #1
 8101362:	f7ff ffdf 	bl	8101324 <LL_AHB4_GRP1_EnableClock>

}
 8101366:	bf00      	nop
 8101368:	bd80      	pop	{r7, pc}
	...

0810136c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810136c:	b480      	push	{r7}
 810136e:	b085      	sub	sp, #20
 8101370:	af00      	add	r7, sp, #0
 8101372:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8101374:	687b      	ldr	r3, [r7, #4]
 8101376:	f003 0307 	and.w	r3, r3, #7
 810137a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810137c:	4b0c      	ldr	r3, [pc, #48]	; (81013b0 <__NVIC_SetPriorityGrouping+0x44>)
 810137e:	68db      	ldr	r3, [r3, #12]
 8101380:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8101382:	68ba      	ldr	r2, [r7, #8]
 8101384:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8101388:	4013      	ands	r3, r2
 810138a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810138c:	68fb      	ldr	r3, [r7, #12]
 810138e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8101390:	68bb      	ldr	r3, [r7, #8]
 8101392:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8101394:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8101398:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810139c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810139e:	4a04      	ldr	r2, [pc, #16]	; (81013b0 <__NVIC_SetPriorityGrouping+0x44>)
 81013a0:	68bb      	ldr	r3, [r7, #8]
 81013a2:	60d3      	str	r3, [r2, #12]
}
 81013a4:	bf00      	nop
 81013a6:	3714      	adds	r7, #20
 81013a8:	46bd      	mov	sp, r7
 81013aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013ae:	4770      	bx	lr
 81013b0:	e000ed00 	.word	0xe000ed00

081013b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81013b4:	b480      	push	{r7}
 81013b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81013b8:	4b04      	ldr	r3, [pc, #16]	; (81013cc <__NVIC_GetPriorityGrouping+0x18>)
 81013ba:	68db      	ldr	r3, [r3, #12]
 81013bc:	0a1b      	lsrs	r3, r3, #8
 81013be:	f003 0307 	and.w	r3, r3, #7
}
 81013c2:	4618      	mov	r0, r3
 81013c4:	46bd      	mov	sp, r7
 81013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81013ca:	4770      	bx	lr
 81013cc:	e000ed00 	.word	0xe000ed00

081013d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81013d0:	b480      	push	{r7}
 81013d2:	b083      	sub	sp, #12
 81013d4:	af00      	add	r7, sp, #0
 81013d6:	4603      	mov	r3, r0
 81013d8:	6039      	str	r1, [r7, #0]
 81013da:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81013dc:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81013e0:	2b00      	cmp	r3, #0
 81013e2:	db0a      	blt.n	81013fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81013e4:	683b      	ldr	r3, [r7, #0]
 81013e6:	b2da      	uxtb	r2, r3
 81013e8:	490c      	ldr	r1, [pc, #48]	; (810141c <__NVIC_SetPriority+0x4c>)
 81013ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81013ee:	0112      	lsls	r2, r2, #4
 81013f0:	b2d2      	uxtb	r2, r2
 81013f2:	440b      	add	r3, r1
 81013f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 81013f8:	e00a      	b.n	8101410 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81013fa:	683b      	ldr	r3, [r7, #0]
 81013fc:	b2da      	uxtb	r2, r3
 81013fe:	4908      	ldr	r1, [pc, #32]	; (8101420 <__NVIC_SetPriority+0x50>)
 8101400:	88fb      	ldrh	r3, [r7, #6]
 8101402:	f003 030f 	and.w	r3, r3, #15
 8101406:	3b04      	subs	r3, #4
 8101408:	0112      	lsls	r2, r2, #4
 810140a:	b2d2      	uxtb	r2, r2
 810140c:	440b      	add	r3, r1
 810140e:	761a      	strb	r2, [r3, #24]
}
 8101410:	bf00      	nop
 8101412:	370c      	adds	r7, #12
 8101414:	46bd      	mov	sp, r7
 8101416:	f85d 7b04 	ldr.w	r7, [sp], #4
 810141a:	4770      	bx	lr
 810141c:	e000e100 	.word	0xe000e100
 8101420:	e000ed00 	.word	0xe000ed00

08101424 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8101424:	b480      	push	{r7}
 8101426:	b089      	sub	sp, #36	; 0x24
 8101428:	af00      	add	r7, sp, #0
 810142a:	60f8      	str	r0, [r7, #12]
 810142c:	60b9      	str	r1, [r7, #8]
 810142e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8101430:	68fb      	ldr	r3, [r7, #12]
 8101432:	f003 0307 	and.w	r3, r3, #7
 8101436:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8101438:	69fb      	ldr	r3, [r7, #28]
 810143a:	f1c3 0307 	rsb	r3, r3, #7
 810143e:	2b04      	cmp	r3, #4
 8101440:	bf28      	it	cs
 8101442:	2304      	movcs	r3, #4
 8101444:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101446:	69fb      	ldr	r3, [r7, #28]
 8101448:	3304      	adds	r3, #4
 810144a:	2b06      	cmp	r3, #6
 810144c:	d902      	bls.n	8101454 <NVIC_EncodePriority+0x30>
 810144e:	69fb      	ldr	r3, [r7, #28]
 8101450:	3b03      	subs	r3, #3
 8101452:	e000      	b.n	8101456 <NVIC_EncodePriority+0x32>
 8101454:	2300      	movs	r3, #0
 8101456:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101458:	f04f 32ff 	mov.w	r2, #4294967295
 810145c:	69bb      	ldr	r3, [r7, #24]
 810145e:	fa02 f303 	lsl.w	r3, r2, r3
 8101462:	43da      	mvns	r2, r3
 8101464:	68bb      	ldr	r3, [r7, #8]
 8101466:	401a      	ands	r2, r3
 8101468:	697b      	ldr	r3, [r7, #20]
 810146a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810146c:	f04f 31ff 	mov.w	r1, #4294967295
 8101470:	697b      	ldr	r3, [r7, #20]
 8101472:	fa01 f303 	lsl.w	r3, r1, r3
 8101476:	43d9      	mvns	r1, r3
 8101478:	687b      	ldr	r3, [r7, #4]
 810147a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810147c:	4313      	orrs	r3, r2
         );
}
 810147e:	4618      	mov	r0, r3
 8101480:	3724      	adds	r7, #36	; 0x24
 8101482:	46bd      	mov	sp, r7
 8101484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101488:	4770      	bx	lr
	...

0810148c <LL_APB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB4_GRP1_EnableClock(uint32_t Periphs)
{
 810148c:	b480      	push	{r7}
 810148e:	b085      	sub	sp, #20
 8101490:	af00      	add	r7, sp, #0
 8101492:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB4ENR, Periphs);
 8101494:	4b0a      	ldr	r3, [pc, #40]	; (81014c0 <LL_APB4_GRP1_EnableClock+0x34>)
 8101496:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 810149a:	4909      	ldr	r1, [pc, #36]	; (81014c0 <LL_APB4_GRP1_EnableClock+0x34>)
 810149c:	687b      	ldr	r3, [r7, #4]
 810149e:	4313      	orrs	r3, r2
 81014a0:	f8c1 30f4 	str.w	r3, [r1, #244]	; 0xf4
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB4ENR, Periphs);
 81014a4:	4b06      	ldr	r3, [pc, #24]	; (81014c0 <LL_APB4_GRP1_EnableClock+0x34>)
 81014a6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 81014aa:	687b      	ldr	r3, [r7, #4]
 81014ac:	4013      	ands	r3, r2
 81014ae:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 81014b0:	68fb      	ldr	r3, [r7, #12]
}
 81014b2:	bf00      	nop
 81014b4:	3714      	adds	r7, #20
 81014b6:	46bd      	mov	sp, r7
 81014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81014bc:	4770      	bx	lr
 81014be:	bf00      	nop
 81014c0:	58024400 	.word	0x58024400

081014c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 81014c4:	b580      	push	{r7, lr}
 81014c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB4_GRP1_EnableClock(LL_APB4_GRP1_PERIPH_SYSCFG);
 81014c8:	2002      	movs	r0, #2
 81014ca:	f7ff ffdf 	bl	810148c <LL_APB4_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 81014ce:	2003      	movs	r0, #3
 81014d0:	f7ff ff4c 	bl	810136c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 81014d4:	f7ff ff6e 	bl	81013b4 <__NVIC_GetPriorityGrouping>
 81014d8:	4603      	mov	r3, r0
 81014da:	2200      	movs	r2, #0
 81014dc:	210f      	movs	r1, #15
 81014de:	4618      	mov	r0, r3
 81014e0:	f7ff ffa0 	bl	8101424 <NVIC_EncodePriority>
 81014e4:	4603      	mov	r3, r0
 81014e6:	4619      	mov	r1, r3
 81014e8:	f04f 30ff 	mov.w	r0, #4294967295
 81014ec:	f7ff ff70 	bl	81013d0 <__NVIC_SetPriority>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_DMA_Init();
 81014f0:	f7ff ff10 	bl	8101314 <MX_DMA_Init>
  MX_GPIO_Init();
 81014f4:	f7ff ff32 	bl	810135c <MX_GPIO_Init>
  MX_UART4_Init();
 81014f8:	f000 fac2 	bl	8101a80 <MX_UART4_Init>
  /* USER CODE BEGIN 2 */
  App_UART_Init();
 81014fc:	f7ff fcdc 	bl	8100eb8 <App_UART_Init>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	    if (command_ready) {
 8101500:	4b0d      	ldr	r3, [pc, #52]	; (8101538 <main+0x74>)
 8101502:	781b      	ldrb	r3, [r3, #0]
 8101504:	b2db      	uxtb	r3, r3
 8101506:	2b00      	cmp	r3, #0
 8101508:	d005      	beq.n	8101516 <main+0x52>
	        command_parser_process_line(command_buffer);
 810150a:	480c      	ldr	r0, [pc, #48]	; (810153c <main+0x78>)
 810150c:	f7ff fe42 	bl	8101194 <command_parser_process_line>
	        command_ready = false;
 8101510:	4b09      	ldr	r3, [pc, #36]	; (8101538 <main+0x74>)
 8101512:	2200      	movs	r2, #0
 8101514:	701a      	strb	r2, [r3, #0]
//	            // Odczyt danych sterujących od CM4 (opcjonalny: np. do logów lub logiki sterowania)
//
//	    	testcm4++;
	            // Zapis napięcia wyjściowego z przekształtnika do współdzielonej struktury

	    		voltage_measured = IPC_SHARED->nap_wejsciowe;
 8101516:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 810151a:	685b      	ldr	r3, [r3, #4]
 810151c:	4a08      	ldr	r2, [pc, #32]	; (8101540 <main+0x7c>)
 810151e:	6013      	str	r3, [r2, #0]
  				IPC_SHARED->stan_przeksztaltnika = output_enable;
 8101520:	4b08      	ldr	r3, [pc, #32]	; (8101544 <main+0x80>)
 8101522:	681a      	ldr	r2, [r3, #0]
 8101524:	f04f 5360 	mov.w	r3, #939524096	; 0x38000000
 8101528:	b2d2      	uxtb	r2, r2
 810152a:	721a      	strb	r2, [r3, #8]
  				IPC_SHARED->nap_zadane = vset;
 810152c:	f04f 5260 	mov.w	r2, #939524096	; 0x38000000
 8101530:	4b05      	ldr	r3, [pc, #20]	; (8101548 <main+0x84>)
 8101532:	681b      	ldr	r3, [r3, #0]
 8101534:	6013      	str	r3, [r2, #0]
	    if (command_ready) {
 8101536:	e7e3      	b.n	8101500 <main+0x3c>
 8101538:	10000228 	.word	0x10000228
 810153c:	10000208 	.word	0x10000208
 8101540:	10000234 	.word	0x10000234
 8101544:	1000022c 	.word	0x1000022c
 8101548:	10000230 	.word	0x10000230

0810154c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 810154c:	b480      	push	{r7}
 810154e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8101550:	e7fe      	b.n	8101550 <NMI_Handler+0x4>

08101552 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8101552:	b480      	push	{r7}
 8101554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8101556:	e7fe      	b.n	8101556 <HardFault_Handler+0x4>

08101558 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8101558:	b480      	push	{r7}
 810155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 810155c:	e7fe      	b.n	810155c <MemManage_Handler+0x4>

0810155e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 810155e:	b480      	push	{r7}
 8101560:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8101562:	e7fe      	b.n	8101562 <BusFault_Handler+0x4>

08101564 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8101564:	b480      	push	{r7}
 8101566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8101568:	e7fe      	b.n	8101568 <UsageFault_Handler+0x4>

0810156a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 810156a:	b480      	push	{r7}
 810156c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 810156e:	bf00      	nop
 8101570:	46bd      	mov	sp, r7
 8101572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101576:	4770      	bx	lr

08101578 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8101578:	b480      	push	{r7}
 810157a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 810157c:	bf00      	nop
 810157e:	46bd      	mov	sp, r7
 8101580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101584:	4770      	bx	lr

08101586 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8101586:	b480      	push	{r7}
 8101588:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 810158a:	bf00      	nop
 810158c:	46bd      	mov	sp, r7
 810158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101592:	4770      	bx	lr

08101594 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101594:	b480      	push	{r7}
 8101596:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8101598:	bf00      	nop
 810159a:	46bd      	mov	sp, r7
 810159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015a0:	4770      	bx	lr

081015a2 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 81015a2:	b580      	push	{r7, lr}
 81015a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */
	App_UART_IRQHandler();
 81015a6:	f7ff fc91 	bl	8100ecc <App_UART_IRQHandler>
  /* USER CODE END UART4_IRQn 0 */
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 81015aa:	bf00      	nop
 81015ac:	bd80      	pop	{r7, pc}

081015ae <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 81015ae:	b480      	push	{r7}
 81015b0:	af00      	add	r7, sp, #0
  return 1;
 81015b2:	2301      	movs	r3, #1
}
 81015b4:	4618      	mov	r0, r3
 81015b6:	46bd      	mov	sp, r7
 81015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81015bc:	4770      	bx	lr

081015be <_kill>:

int _kill(int pid, int sig)
{
 81015be:	b580      	push	{r7, lr}
 81015c0:	b082      	sub	sp, #8
 81015c2:	af00      	add	r7, sp, #0
 81015c4:	6078      	str	r0, [r7, #4]
 81015c6:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 81015c8:	f003 f970 	bl	81048ac <__errno>
 81015cc:	4603      	mov	r3, r0
 81015ce:	2216      	movs	r2, #22
 81015d0:	601a      	str	r2, [r3, #0]
  return -1;
 81015d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 81015d6:	4618      	mov	r0, r3
 81015d8:	3708      	adds	r7, #8
 81015da:	46bd      	mov	sp, r7
 81015dc:	bd80      	pop	{r7, pc}

081015de <_exit>:

void _exit (int status)
{
 81015de:	b580      	push	{r7, lr}
 81015e0:	b082      	sub	sp, #8
 81015e2:	af00      	add	r7, sp, #0
 81015e4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 81015e6:	f04f 31ff 	mov.w	r1, #4294967295
 81015ea:	6878      	ldr	r0, [r7, #4]
 81015ec:	f7ff ffe7 	bl	81015be <_kill>
  while (1) {}    /* Make sure we hang here */
 81015f0:	e7fe      	b.n	81015f0 <_exit+0x12>

081015f2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 81015f2:	b580      	push	{r7, lr}
 81015f4:	b086      	sub	sp, #24
 81015f6:	af00      	add	r7, sp, #0
 81015f8:	60f8      	str	r0, [r7, #12]
 81015fa:	60b9      	str	r1, [r7, #8]
 81015fc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 81015fe:	2300      	movs	r3, #0
 8101600:	617b      	str	r3, [r7, #20]
 8101602:	e00a      	b.n	810161a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8101604:	f3af 8000 	nop.w
 8101608:	4601      	mov	r1, r0
 810160a:	68bb      	ldr	r3, [r7, #8]
 810160c:	1c5a      	adds	r2, r3, #1
 810160e:	60ba      	str	r2, [r7, #8]
 8101610:	b2ca      	uxtb	r2, r1
 8101612:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101614:	697b      	ldr	r3, [r7, #20]
 8101616:	3301      	adds	r3, #1
 8101618:	617b      	str	r3, [r7, #20]
 810161a:	697a      	ldr	r2, [r7, #20]
 810161c:	687b      	ldr	r3, [r7, #4]
 810161e:	429a      	cmp	r2, r3
 8101620:	dbf0      	blt.n	8101604 <_read+0x12>
  }

  return len;
 8101622:	687b      	ldr	r3, [r7, #4]
}
 8101624:	4618      	mov	r0, r3
 8101626:	3718      	adds	r7, #24
 8101628:	46bd      	mov	sp, r7
 810162a:	bd80      	pop	{r7, pc}

0810162c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 810162c:	b580      	push	{r7, lr}
 810162e:	b086      	sub	sp, #24
 8101630:	af00      	add	r7, sp, #0
 8101632:	60f8      	str	r0, [r7, #12]
 8101634:	60b9      	str	r1, [r7, #8]
 8101636:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8101638:	2300      	movs	r3, #0
 810163a:	617b      	str	r3, [r7, #20]
 810163c:	e009      	b.n	8101652 <_write+0x26>
  {
    __io_putchar(*ptr++);
 810163e:	68bb      	ldr	r3, [r7, #8]
 8101640:	1c5a      	adds	r2, r3, #1
 8101642:	60ba      	str	r2, [r7, #8]
 8101644:	781b      	ldrb	r3, [r3, #0]
 8101646:	4618      	mov	r0, r3
 8101648:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 810164c:	697b      	ldr	r3, [r7, #20]
 810164e:	3301      	adds	r3, #1
 8101650:	617b      	str	r3, [r7, #20]
 8101652:	697a      	ldr	r2, [r7, #20]
 8101654:	687b      	ldr	r3, [r7, #4]
 8101656:	429a      	cmp	r2, r3
 8101658:	dbf1      	blt.n	810163e <_write+0x12>
  }
  return len;
 810165a:	687b      	ldr	r3, [r7, #4]
}
 810165c:	4618      	mov	r0, r3
 810165e:	3718      	adds	r7, #24
 8101660:	46bd      	mov	sp, r7
 8101662:	bd80      	pop	{r7, pc}

08101664 <_close>:

int _close(int file)
{
 8101664:	b480      	push	{r7}
 8101666:	b083      	sub	sp, #12
 8101668:	af00      	add	r7, sp, #0
 810166a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 810166c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8101670:	4618      	mov	r0, r3
 8101672:	370c      	adds	r7, #12
 8101674:	46bd      	mov	sp, r7
 8101676:	f85d 7b04 	ldr.w	r7, [sp], #4
 810167a:	4770      	bx	lr

0810167c <_fstat>:


int _fstat(int file, struct stat *st)
{
 810167c:	b480      	push	{r7}
 810167e:	b083      	sub	sp, #12
 8101680:	af00      	add	r7, sp, #0
 8101682:	6078      	str	r0, [r7, #4]
 8101684:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8101686:	683b      	ldr	r3, [r7, #0]
 8101688:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 810168c:	605a      	str	r2, [r3, #4]
  return 0;
 810168e:	2300      	movs	r3, #0
}
 8101690:	4618      	mov	r0, r3
 8101692:	370c      	adds	r7, #12
 8101694:	46bd      	mov	sp, r7
 8101696:	f85d 7b04 	ldr.w	r7, [sp], #4
 810169a:	4770      	bx	lr

0810169c <_isatty>:

int _isatty(int file)
{
 810169c:	b480      	push	{r7}
 810169e:	b083      	sub	sp, #12
 81016a0:	af00      	add	r7, sp, #0
 81016a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 81016a4:	2301      	movs	r3, #1
}
 81016a6:	4618      	mov	r0, r3
 81016a8:	370c      	adds	r7, #12
 81016aa:	46bd      	mov	sp, r7
 81016ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016b0:	4770      	bx	lr

081016b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 81016b2:	b480      	push	{r7}
 81016b4:	b085      	sub	sp, #20
 81016b6:	af00      	add	r7, sp, #0
 81016b8:	60f8      	str	r0, [r7, #12]
 81016ba:	60b9      	str	r1, [r7, #8]
 81016bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 81016be:	2300      	movs	r3, #0
}
 81016c0:	4618      	mov	r0, r3
 81016c2:	3714      	adds	r7, #20
 81016c4:	46bd      	mov	sp, r7
 81016c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81016ca:	4770      	bx	lr

081016cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 81016cc:	b580      	push	{r7, lr}
 81016ce:	b086      	sub	sp, #24
 81016d0:	af00      	add	r7, sp, #0
 81016d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 81016d4:	4a14      	ldr	r2, [pc, #80]	; (8101728 <_sbrk+0x5c>)
 81016d6:	4b15      	ldr	r3, [pc, #84]	; (810172c <_sbrk+0x60>)
 81016d8:	1ad3      	subs	r3, r2, r3
 81016da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 81016dc:	697b      	ldr	r3, [r7, #20]
 81016de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 81016e0:	4b13      	ldr	r3, [pc, #76]	; (8101730 <_sbrk+0x64>)
 81016e2:	681b      	ldr	r3, [r3, #0]
 81016e4:	2b00      	cmp	r3, #0
 81016e6:	d102      	bne.n	81016ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 81016e8:	4b11      	ldr	r3, [pc, #68]	; (8101730 <_sbrk+0x64>)
 81016ea:	4a12      	ldr	r2, [pc, #72]	; (8101734 <_sbrk+0x68>)
 81016ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 81016ee:	4b10      	ldr	r3, [pc, #64]	; (8101730 <_sbrk+0x64>)
 81016f0:	681a      	ldr	r2, [r3, #0]
 81016f2:	687b      	ldr	r3, [r7, #4]
 81016f4:	4413      	add	r3, r2
 81016f6:	693a      	ldr	r2, [r7, #16]
 81016f8:	429a      	cmp	r2, r3
 81016fa:	d207      	bcs.n	810170c <_sbrk+0x40>
  {
    errno = ENOMEM;
 81016fc:	f003 f8d6 	bl	81048ac <__errno>
 8101700:	4603      	mov	r3, r0
 8101702:	220c      	movs	r2, #12
 8101704:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8101706:	f04f 33ff 	mov.w	r3, #4294967295
 810170a:	e009      	b.n	8101720 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 810170c:	4b08      	ldr	r3, [pc, #32]	; (8101730 <_sbrk+0x64>)
 810170e:	681b      	ldr	r3, [r3, #0]
 8101710:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8101712:	4b07      	ldr	r3, [pc, #28]	; (8101730 <_sbrk+0x64>)
 8101714:	681a      	ldr	r2, [r3, #0]
 8101716:	687b      	ldr	r3, [r7, #4]
 8101718:	4413      	add	r3, r2
 810171a:	4a05      	ldr	r2, [pc, #20]	; (8101730 <_sbrk+0x64>)
 810171c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 810171e:	68fb      	ldr	r3, [r7, #12]
}
 8101720:	4618      	mov	r0, r3
 8101722:	3718      	adds	r7, #24
 8101724:	46bd      	mov	sp, r7
 8101726:	bd80      	pop	{r7, pc}
 8101728:	10048000 	.word	0x10048000
 810172c:	00000400 	.word	0x00000400
 8101730:	10000238 	.word	0x10000238
 8101734:	10000388 	.word	0x10000388

08101738 <__NVIC_GetPriorityGrouping>:
{
 8101738:	b480      	push	{r7}
 810173a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 810173c:	4b04      	ldr	r3, [pc, #16]	; (8101750 <__NVIC_GetPriorityGrouping+0x18>)
 810173e:	68db      	ldr	r3, [r3, #12]
 8101740:	0a1b      	lsrs	r3, r3, #8
 8101742:	f003 0307 	and.w	r3, r3, #7
}
 8101746:	4618      	mov	r0, r3
 8101748:	46bd      	mov	sp, r7
 810174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810174e:	4770      	bx	lr
 8101750:	e000ed00 	.word	0xe000ed00

08101754 <__NVIC_EnableIRQ>:
{
 8101754:	b480      	push	{r7}
 8101756:	b083      	sub	sp, #12
 8101758:	af00      	add	r7, sp, #0
 810175a:	4603      	mov	r3, r0
 810175c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810175e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101762:	2b00      	cmp	r3, #0
 8101764:	db0b      	blt.n	810177e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8101766:	88fb      	ldrh	r3, [r7, #6]
 8101768:	f003 021f 	and.w	r2, r3, #31
 810176c:	4907      	ldr	r1, [pc, #28]	; (810178c <__NVIC_EnableIRQ+0x38>)
 810176e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8101772:	095b      	lsrs	r3, r3, #5
 8101774:	2001      	movs	r0, #1
 8101776:	fa00 f202 	lsl.w	r2, r0, r2
 810177a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 810177e:	bf00      	nop
 8101780:	370c      	adds	r7, #12
 8101782:	46bd      	mov	sp, r7
 8101784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101788:	4770      	bx	lr
 810178a:	bf00      	nop
 810178c:	e000e100 	.word	0xe000e100

08101790 <__NVIC_SetPriority>:
{
 8101790:	b480      	push	{r7}
 8101792:	b083      	sub	sp, #12
 8101794:	af00      	add	r7, sp, #0
 8101796:	4603      	mov	r3, r0
 8101798:	6039      	str	r1, [r7, #0]
 810179a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 810179c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81017a0:	2b00      	cmp	r3, #0
 81017a2:	db0a      	blt.n	81017ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81017a4:	683b      	ldr	r3, [r7, #0]
 81017a6:	b2da      	uxtb	r2, r3
 81017a8:	490c      	ldr	r1, [pc, #48]	; (81017dc <__NVIC_SetPriority+0x4c>)
 81017aa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81017ae:	0112      	lsls	r2, r2, #4
 81017b0:	b2d2      	uxtb	r2, r2
 81017b2:	440b      	add	r3, r1
 81017b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 81017b8:	e00a      	b.n	81017d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 81017ba:	683b      	ldr	r3, [r7, #0]
 81017bc:	b2da      	uxtb	r2, r3
 81017be:	4908      	ldr	r1, [pc, #32]	; (81017e0 <__NVIC_SetPriority+0x50>)
 81017c0:	88fb      	ldrh	r3, [r7, #6]
 81017c2:	f003 030f 	and.w	r3, r3, #15
 81017c6:	3b04      	subs	r3, #4
 81017c8:	0112      	lsls	r2, r2, #4
 81017ca:	b2d2      	uxtb	r2, r2
 81017cc:	440b      	add	r3, r1
 81017ce:	761a      	strb	r2, [r3, #24]
}
 81017d0:	bf00      	nop
 81017d2:	370c      	adds	r7, #12
 81017d4:	46bd      	mov	sp, r7
 81017d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017da:	4770      	bx	lr
 81017dc:	e000e100 	.word	0xe000e100
 81017e0:	e000ed00 	.word	0xe000ed00

081017e4 <NVIC_EncodePriority>:
{
 81017e4:	b480      	push	{r7}
 81017e6:	b089      	sub	sp, #36	; 0x24
 81017e8:	af00      	add	r7, sp, #0
 81017ea:	60f8      	str	r0, [r7, #12]
 81017ec:	60b9      	str	r1, [r7, #8]
 81017ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 81017f0:	68fb      	ldr	r3, [r7, #12]
 81017f2:	f003 0307 	and.w	r3, r3, #7
 81017f6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 81017f8:	69fb      	ldr	r3, [r7, #28]
 81017fa:	f1c3 0307 	rsb	r3, r3, #7
 81017fe:	2b04      	cmp	r3, #4
 8101800:	bf28      	it	cs
 8101802:	2304      	movcs	r3, #4
 8101804:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8101806:	69fb      	ldr	r3, [r7, #28]
 8101808:	3304      	adds	r3, #4
 810180a:	2b06      	cmp	r3, #6
 810180c:	d902      	bls.n	8101814 <NVIC_EncodePriority+0x30>
 810180e:	69fb      	ldr	r3, [r7, #28]
 8101810:	3b03      	subs	r3, #3
 8101812:	e000      	b.n	8101816 <NVIC_EncodePriority+0x32>
 8101814:	2300      	movs	r3, #0
 8101816:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8101818:	f04f 32ff 	mov.w	r2, #4294967295
 810181c:	69bb      	ldr	r3, [r7, #24]
 810181e:	fa02 f303 	lsl.w	r3, r2, r3
 8101822:	43da      	mvns	r2, r3
 8101824:	68bb      	ldr	r3, [r7, #8]
 8101826:	401a      	ands	r2, r3
 8101828:	697b      	ldr	r3, [r7, #20]
 810182a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 810182c:	f04f 31ff 	mov.w	r1, #4294967295
 8101830:	697b      	ldr	r3, [r7, #20]
 8101832:	fa01 f303 	lsl.w	r3, r1, r3
 8101836:	43d9      	mvns	r1, r3
 8101838:	687b      	ldr	r3, [r7, #4]
 810183a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 810183c:	4313      	orrs	r3, r2
}
 810183e:	4618      	mov	r0, r3
 8101840:	3724      	adds	r7, #36	; 0x24
 8101842:	46bd      	mov	sp, r7
 8101844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101848:	4770      	bx	lr
	...

0810184c <LL_RCC_SetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetClockSource(uint32_t ClkSource)
{
 810184c:	b480      	push	{r7}
 810184e:	b085      	sub	sp, #20
 8101850:	af00      	add	r7, sp, #0
 8101852:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->D1CCIPR + LL_CLKSOURCE_REG(ClkSource));
 8101854:	687b      	ldr	r3, [r7, #4]
 8101856:	b2da      	uxtb	r2, r3
 8101858:	4b10      	ldr	r3, [pc, #64]	; (810189c <LL_RCC_SetClockSource+0x50>)
 810185a:	4413      	add	r3, r2
 810185c:	60fb      	str	r3, [r7, #12]
#else
  uint32_t *pReg = (uint32_t *)((uint32_t)&RCC->CDCCIPR + LL_CLKSOURCE_REG(ClkSource));
#endif /*  */
  MODIFY_REG(*pReg, LL_CLKSOURCE_MASK(ClkSource), LL_CLKSOURCE_CONFIG(ClkSource));
 810185e:	68fb      	ldr	r3, [r7, #12]
 8101860:	681a      	ldr	r2, [r3, #0]
 8101862:	687b      	ldr	r3, [r7, #4]
 8101864:	0e19      	lsrs	r1, r3, #24
 8101866:	687b      	ldr	r3, [r7, #4]
 8101868:	0a1b      	lsrs	r3, r3, #8
 810186a:	f003 031f 	and.w	r3, r3, #31
 810186e:	fa01 f303 	lsl.w	r3, r1, r3
 8101872:	43db      	mvns	r3, r3
 8101874:	401a      	ands	r2, r3
 8101876:	687b      	ldr	r3, [r7, #4]
 8101878:	0c1b      	lsrs	r3, r3, #16
 810187a:	b2d9      	uxtb	r1, r3
 810187c:	687b      	ldr	r3, [r7, #4]
 810187e:	0a1b      	lsrs	r3, r3, #8
 8101880:	f003 031f 	and.w	r3, r3, #31
 8101884:	fa01 f303 	lsl.w	r3, r1, r3
 8101888:	431a      	orrs	r2, r3
 810188a:	68fb      	ldr	r3, [r7, #12]
 810188c:	601a      	str	r2, [r3, #0]
}
 810188e:	bf00      	nop
 8101890:	3714      	adds	r7, #20
 8101892:	46bd      	mov	sp, r7
 8101894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101898:	4770      	bx	lr
 810189a:	bf00      	nop
 810189c:	5802444c 	.word	0x5802444c

081018a0 <LL_RCC_SetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t ClkSource)
{
 81018a0:	b580      	push	{r7, lr}
 81018a2:	b082      	sub	sp, #8
 81018a4:	af00      	add	r7, sp, #0
 81018a6:	6078      	str	r0, [r7, #4]
  LL_RCC_SetClockSource(ClkSource);
 81018a8:	6878      	ldr	r0, [r7, #4]
 81018aa:	f7ff ffcf 	bl	810184c <LL_RCC_SetClockSource>
}
 81018ae:	bf00      	nop
 81018b0:	3708      	adds	r7, #8
 81018b2:	46bd      	mov	sp, r7
 81018b4:	bd80      	pop	{r7, pc}
	...

081018b8 <LL_AHB4_GRP1_EnableClock>:
{
 81018b8:	b480      	push	{r7}
 81018ba:	b085      	sub	sp, #20
 81018bc:	af00      	add	r7, sp, #0
 81018be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB4ENR, Periphs);
 81018c0:	4b0a      	ldr	r3, [pc, #40]	; (81018ec <LL_AHB4_GRP1_EnableClock+0x34>)
 81018c2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81018c6:	4909      	ldr	r1, [pc, #36]	; (81018ec <LL_AHB4_GRP1_EnableClock+0x34>)
 81018c8:	687b      	ldr	r3, [r7, #4]
 81018ca:	4313      	orrs	r3, r2
 81018cc:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 81018d0:	4b06      	ldr	r3, [pc, #24]	; (81018ec <LL_AHB4_GRP1_EnableClock+0x34>)
 81018d2:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 81018d6:	687b      	ldr	r3, [r7, #4]
 81018d8:	4013      	ands	r3, r2
 81018da:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 81018dc:	68fb      	ldr	r3, [r7, #12]
}
 81018de:	bf00      	nop
 81018e0:	3714      	adds	r7, #20
 81018e2:	46bd      	mov	sp, r7
 81018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018e8:	4770      	bx	lr
 81018ea:	bf00      	nop
 81018ec:	58024400 	.word	0x58024400

081018f0 <LL_APB1_GRP1_EnableClock>:
{
 81018f0:	b480      	push	{r7}
 81018f2:	b085      	sub	sp, #20
 81018f4:	af00      	add	r7, sp, #0
 81018f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1LENR, Periphs);
 81018f8:	4b0a      	ldr	r3, [pc, #40]	; (8101924 <LL_APB1_GRP1_EnableClock+0x34>)
 81018fa:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 81018fe:	4909      	ldr	r1, [pc, #36]	; (8101924 <LL_APB1_GRP1_EnableClock+0x34>)
 8101900:	687b      	ldr	r3, [r7, #4]
 8101902:	4313      	orrs	r3, r2
 8101904:	f8c1 30e8 	str.w	r3, [r1, #232]	; 0xe8
  tmpreg = READ_BIT(RCC->APB1LENR, Periphs);
 8101908:	4b06      	ldr	r3, [pc, #24]	; (8101924 <LL_APB1_GRP1_EnableClock+0x34>)
 810190a:	f8d3 20e8 	ldr.w	r2, [r3, #232]	; 0xe8
 810190e:	687b      	ldr	r3, [r7, #4]
 8101910:	4013      	ands	r3, r2
 8101912:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8101914:	68fb      	ldr	r3, [r7, #12]
}
 8101916:	bf00      	nop
 8101918:	3714      	adds	r7, #20
 810191a:	46bd      	mov	sp, r7
 810191c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101920:	4770      	bx	lr
 8101922:	bf00      	nop
 8101924:	58024400 	.word	0x58024400

08101928 <LL_USART_Enable>:
{
 8101928:	b480      	push	{r7}
 810192a:	b083      	sub	sp, #12
 810192c:	af00      	add	r7, sp, #0
 810192e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8101930:	687b      	ldr	r3, [r7, #4]
 8101932:	681b      	ldr	r3, [r3, #0]
 8101934:	f043 0201 	orr.w	r2, r3, #1
 8101938:	687b      	ldr	r3, [r7, #4]
 810193a:	601a      	str	r2, [r3, #0]
}
 810193c:	bf00      	nop
 810193e:	370c      	adds	r7, #12
 8101940:	46bd      	mov	sp, r7
 8101942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101946:	4770      	bx	lr

08101948 <LL_USART_DisableFIFO>:
{
 8101948:	b480      	push	{r7}
 810194a:	b083      	sub	sp, #12
 810194c:	af00      	add	r7, sp, #0
 810194e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR1, USART_CR1_FIFOEN);
 8101950:	687b      	ldr	r3, [r7, #4]
 8101952:	681b      	ldr	r3, [r3, #0]
 8101954:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8101958:	687b      	ldr	r3, [r7, #4]
 810195a:	601a      	str	r2, [r3, #0]
}
 810195c:	bf00      	nop
 810195e:	370c      	adds	r7, #12
 8101960:	46bd      	mov	sp, r7
 8101962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101966:	4770      	bx	lr

08101968 <LL_USART_SetTXFIFOThreshold>:
{
 8101968:	b480      	push	{r7}
 810196a:	b089      	sub	sp, #36	; 0x24
 810196c:	af00      	add	r7, sp, #0
 810196e:	6078      	str	r0, [r7, #4]
 8101970:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_TXFTCFG, Threshold << USART_CR3_TXFTCFG_Pos);
 8101972:	687b      	ldr	r3, [r7, #4]
 8101974:	3308      	adds	r3, #8
 8101976:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8101978:	68fb      	ldr	r3, [r7, #12]
 810197a:	e853 3f00 	ldrex	r3, [r3]
 810197e:	60bb      	str	r3, [r7, #8]
   return(result);
 8101980:	68bb      	ldr	r3, [r7, #8]
 8101982:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8101986:	683b      	ldr	r3, [r7, #0]
 8101988:	075b      	lsls	r3, r3, #29
 810198a:	4313      	orrs	r3, r2
 810198c:	61fb      	str	r3, [r7, #28]
 810198e:	687b      	ldr	r3, [r7, #4]
 8101990:	3308      	adds	r3, #8
 8101992:	69fa      	ldr	r2, [r7, #28]
 8101994:	61ba      	str	r2, [r7, #24]
 8101996:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8101998:	6979      	ldr	r1, [r7, #20]
 810199a:	69ba      	ldr	r2, [r7, #24]
 810199c:	e841 2300 	strex	r3, r2, [r1]
 81019a0:	613b      	str	r3, [r7, #16]
   return(result);
 81019a2:	693b      	ldr	r3, [r7, #16]
 81019a4:	2b00      	cmp	r3, #0
 81019a6:	d1e4      	bne.n	8101972 <LL_USART_SetTXFIFOThreshold+0xa>
}
 81019a8:	bf00      	nop
 81019aa:	bf00      	nop
 81019ac:	3724      	adds	r7, #36	; 0x24
 81019ae:	46bd      	mov	sp, r7
 81019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019b4:	4770      	bx	lr

081019b6 <LL_USART_SetRXFIFOThreshold>:
{
 81019b6:	b480      	push	{r7}
 81019b8:	b089      	sub	sp, #36	; 0x24
 81019ba:	af00      	add	r7, sp, #0
 81019bc:	6078      	str	r0, [r7, #4]
 81019be:	6039      	str	r1, [r7, #0]
  ATOMIC_MODIFY_REG(USARTx->CR3, USART_CR3_RXFTCFG, Threshold << USART_CR3_RXFTCFG_Pos);
 81019c0:	687b      	ldr	r3, [r7, #4]
 81019c2:	3308      	adds	r3, #8
 81019c4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 81019c6:	68fb      	ldr	r3, [r7, #12]
 81019c8:	e853 3f00 	ldrex	r3, [r3]
 81019cc:	60bb      	str	r3, [r7, #8]
   return(result);
 81019ce:	68bb      	ldr	r3, [r7, #8]
 81019d0:	f023 6260 	bic.w	r2, r3, #234881024	; 0xe000000
 81019d4:	683b      	ldr	r3, [r7, #0]
 81019d6:	065b      	lsls	r3, r3, #25
 81019d8:	4313      	orrs	r3, r2
 81019da:	61fb      	str	r3, [r7, #28]
 81019dc:	687b      	ldr	r3, [r7, #4]
 81019de:	3308      	adds	r3, #8
 81019e0:	69fa      	ldr	r2, [r7, #28]
 81019e2:	61ba      	str	r2, [r7, #24]
 81019e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 81019e6:	6979      	ldr	r1, [r7, #20]
 81019e8:	69ba      	ldr	r2, [r7, #24]
 81019ea:	e841 2300 	strex	r3, r2, [r1]
 81019ee:	613b      	str	r3, [r7, #16]
   return(result);
 81019f0:	693b      	ldr	r3, [r7, #16]
 81019f2:	2b00      	cmp	r3, #0
 81019f4:	d1e4      	bne.n	81019c0 <LL_USART_SetRXFIFOThreshold+0xa>
}
 81019f6:	bf00      	nop
 81019f8:	bf00      	nop
 81019fa:	3724      	adds	r7, #36	; 0x24
 81019fc:	46bd      	mov	sp, r7
 81019fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a02:	4770      	bx	lr

08101a04 <LL_USART_ConfigAsyncMode>:
{
 8101a04:	b480      	push	{r7}
 8101a06:	b083      	sub	sp, #12
 8101a08:	af00      	add	r7, sp, #0
 8101a0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8101a0c:	687b      	ldr	r3, [r7, #4]
 8101a0e:	685b      	ldr	r3, [r3, #4]
 8101a10:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8101a14:	687b      	ldr	r3, [r7, #4]
 8101a16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8101a18:	687b      	ldr	r3, [r7, #4]
 8101a1a:	689b      	ldr	r3, [r3, #8]
 8101a1c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8101a20:	687b      	ldr	r3, [r7, #4]
 8101a22:	609a      	str	r2, [r3, #8]
}
 8101a24:	bf00      	nop
 8101a26:	370c      	adds	r7, #12
 8101a28:	46bd      	mov	sp, r7
 8101a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a2e:	4770      	bx	lr

08101a30 <LL_USART_IsActiveFlag_TEACK>:
{
 8101a30:	b480      	push	{r7}
 8101a32:	b083      	sub	sp, #12
 8101a34:	af00      	add	r7, sp, #0
 8101a36:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TEACK) == (USART_ISR_TEACK)) ? 1UL : 0UL);
 8101a38:	687b      	ldr	r3, [r7, #4]
 8101a3a:	69db      	ldr	r3, [r3, #28]
 8101a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8101a40:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8101a44:	d101      	bne.n	8101a4a <LL_USART_IsActiveFlag_TEACK+0x1a>
 8101a46:	2301      	movs	r3, #1
 8101a48:	e000      	b.n	8101a4c <LL_USART_IsActiveFlag_TEACK+0x1c>
 8101a4a:	2300      	movs	r3, #0
}
 8101a4c:	4618      	mov	r0, r3
 8101a4e:	370c      	adds	r7, #12
 8101a50:	46bd      	mov	sp, r7
 8101a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a56:	4770      	bx	lr

08101a58 <LL_USART_IsActiveFlag_REACK>:
{
 8101a58:	b480      	push	{r7}
 8101a5a:	b083      	sub	sp, #12
 8101a5c:	af00      	add	r7, sp, #0
 8101a5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_REACK) == (USART_ISR_REACK)) ? 1UL : 0UL);
 8101a60:	687b      	ldr	r3, [r7, #4]
 8101a62:	69db      	ldr	r3, [r3, #28]
 8101a64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8101a68:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8101a6c:	d101      	bne.n	8101a72 <LL_USART_IsActiveFlag_REACK+0x1a>
 8101a6e:	2301      	movs	r3, #1
 8101a70:	e000      	b.n	8101a74 <LL_USART_IsActiveFlag_REACK+0x1c>
 8101a72:	2300      	movs	r3, #0
}
 8101a74:	4618      	mov	r0, r3
 8101a76:	370c      	adds	r7, #12
 8101a78:	46bd      	mov	sp, r7
 8101a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a7e:	4770      	bx	lr

08101a80 <MX_UART4_Init>:

/* USER CODE END 0 */

/* UART4 init function */
void MX_UART4_Init(void)
{
 8101a80:	b580      	push	{r7, lr}
 8101a82:	b08e      	sub	sp, #56	; 0x38
 8101a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef UART_InitStruct = {0};
 8101a86:	f107 0318 	add.w	r3, r7, #24
 8101a8a:	2220      	movs	r2, #32
 8101a8c:	2100      	movs	r1, #0
 8101a8e:	4618      	mov	r0, r3
 8101a90:	f002 fe73 	bl	810477a <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101a94:	463b      	mov	r3, r7
 8101a96:	2200      	movs	r2, #0
 8101a98:	601a      	str	r2, [r3, #0]
 8101a9a:	605a      	str	r2, [r3, #4]
 8101a9c:	609a      	str	r2, [r3, #8]
 8101a9e:	60da      	str	r2, [r3, #12]
 8101aa0:	611a      	str	r2, [r3, #16]
 8101aa2:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART234578_CLKSOURCE_HSI);
 8101aa4:	4832      	ldr	r0, [pc, #200]	; (8101b70 <MX_UART4_Init+0xf0>)
 8101aa6:	f7ff fefb 	bl	81018a0 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8101aaa:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8101aae:	f7ff ff1f 	bl	81018f0 <LL_APB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8101ab2:	2001      	movs	r0, #1
 8101ab4:	f7ff ff00 	bl	81018b8 <LL_AHB4_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PA11   ------> UART4_RX
  PA12   ------> UART4_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8101ab8:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8101abc:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8101abe:	2302      	movs	r3, #2
 8101ac0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8101ac2:	2300      	movs	r3, #0
 8101ac4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8101ac6:	2300      	movs	r3, #0
 8101ac8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8101aca:	2300      	movs	r3, #0
 8101acc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8101ace:	2306      	movs	r3, #6
 8101ad0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8101ad2:	463b      	mov	r3, r7
 8101ad4:	4619      	mov	r1, r3
 8101ad6:	4827      	ldr	r0, [pc, #156]	; (8101b74 <MX_UART4_Init+0xf4>)
 8101ad8:	f000 f953 	bl	8101d82 <LL_GPIO_Init>

  /* UART4 interrupt Init */
  NVIC_SetPriority(UART4_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8101adc:	f7ff fe2c 	bl	8101738 <__NVIC_GetPriorityGrouping>
 8101ae0:	4603      	mov	r3, r0
 8101ae2:	2200      	movs	r2, #0
 8101ae4:	2100      	movs	r1, #0
 8101ae6:	4618      	mov	r0, r3
 8101ae8:	f7ff fe7c 	bl	81017e4 <NVIC_EncodePriority>
 8101aec:	4603      	mov	r3, r0
 8101aee:	4619      	mov	r1, r3
 8101af0:	2034      	movs	r0, #52	; 0x34
 8101af2:	f7ff fe4d 	bl	8101790 <__NVIC_SetPriority>
  NVIC_EnableIRQ(UART4_IRQn);
 8101af6:	2034      	movs	r0, #52	; 0x34
 8101af8:	f7ff fe2c 	bl	8101754 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  UART_InitStruct.PrescalerValue = LL_USART_PRESCALER_DIV1;
 8101afc:	2300      	movs	r3, #0
 8101afe:	61bb      	str	r3, [r7, #24]
  UART_InitStruct.BaudRate = 115200;
 8101b00:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8101b04:	61fb      	str	r3, [r7, #28]
  UART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8101b06:	2300      	movs	r3, #0
 8101b08:	623b      	str	r3, [r7, #32]
  UART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8101b0a:	2300      	movs	r3, #0
 8101b0c:	627b      	str	r3, [r7, #36]	; 0x24
  UART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8101b0e:	2300      	movs	r3, #0
 8101b10:	62bb      	str	r3, [r7, #40]	; 0x28
  UART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8101b12:	230c      	movs	r3, #12
 8101b14:	62fb      	str	r3, [r7, #44]	; 0x2c
  UART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8101b16:	2300      	movs	r3, #0
 8101b18:	633b      	str	r3, [r7, #48]	; 0x30
  UART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8101b1a:	2300      	movs	r3, #0
 8101b1c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &UART_InitStruct);
 8101b1e:	f107 0318 	add.w	r3, r7, #24
 8101b22:	4619      	mov	r1, r3
 8101b24:	4814      	ldr	r0, [pc, #80]	; (8101b78 <MX_UART4_Init+0xf8>)
 8101b26:	f001 f8db 	bl	8102ce0 <LL_USART_Init>
  LL_USART_DisableFIFO(UART4);
 8101b2a:	4813      	ldr	r0, [pc, #76]	; (8101b78 <MX_UART4_Init+0xf8>)
 8101b2c:	f7ff ff0c 	bl	8101948 <LL_USART_DisableFIFO>
  LL_USART_SetTXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 8101b30:	2100      	movs	r1, #0
 8101b32:	4811      	ldr	r0, [pc, #68]	; (8101b78 <MX_UART4_Init+0xf8>)
 8101b34:	f7ff ff18 	bl	8101968 <LL_USART_SetTXFIFOThreshold>
  LL_USART_SetRXFIFOThreshold(UART4, LL_USART_FIFOTHRESHOLD_1_8);
 8101b38:	2100      	movs	r1, #0
 8101b3a:	480f      	ldr	r0, [pc, #60]	; (8101b78 <MX_UART4_Init+0xf8>)
 8101b3c:	f7ff ff3b 	bl	81019b6 <LL_USART_SetRXFIFOThreshold>
  LL_USART_ConfigAsyncMode(UART4);
 8101b40:	480d      	ldr	r0, [pc, #52]	; (8101b78 <MX_UART4_Init+0xf8>)
 8101b42:	f7ff ff5f 	bl	8101a04 <LL_USART_ConfigAsyncMode>

  /* USER CODE BEGIN WKUPType UART4 */

  /* USER CODE END WKUPType UART4 */

  LL_USART_Enable(UART4);
 8101b46:	480c      	ldr	r0, [pc, #48]	; (8101b78 <MX_UART4_Init+0xf8>)
 8101b48:	f7ff feee 	bl	8101928 <LL_USART_Enable>

  /* Polling UART4 initialisation */
  while((!(LL_USART_IsActiveFlag_TEACK(UART4))) || (!(LL_USART_IsActiveFlag_REACK(UART4))))
 8101b4c:	bf00      	nop
 8101b4e:	480a      	ldr	r0, [pc, #40]	; (8101b78 <MX_UART4_Init+0xf8>)
 8101b50:	f7ff ff6e 	bl	8101a30 <LL_USART_IsActiveFlag_TEACK>
 8101b54:	4603      	mov	r3, r0
 8101b56:	2b00      	cmp	r3, #0
 8101b58:	d0f9      	beq.n	8101b4e <MX_UART4_Init+0xce>
 8101b5a:	4807      	ldr	r0, [pc, #28]	; (8101b78 <MX_UART4_Init+0xf8>)
 8101b5c:	f7ff ff7c 	bl	8101a58 <LL_USART_IsActiveFlag_REACK>
 8101b60:	4603      	mov	r3, r0
 8101b62:	2b00      	cmp	r3, #0
 8101b64:	d0f3      	beq.n	8101b4e <MX_UART4_Init+0xce>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8101b66:	bf00      	nop
 8101b68:	bf00      	nop
 8101b6a:	3738      	adds	r7, #56	; 0x38
 8101b6c:	46bd      	mov	sp, r7
 8101b6e:	bd80      	pop	{r7, pc}
 8101b70:	07030008 	.word	0x07030008
 8101b74:	58020000 	.word	0x58020000
 8101b78:	40004c00 	.word	0x40004c00

08101b7c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8101b7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101bb4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8101b80:	f7ff f940 	bl	8100e04 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8101b84:	480c      	ldr	r0, [pc, #48]	; (8101bb8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8101b86:	490d      	ldr	r1, [pc, #52]	; (8101bbc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8101b88:	4a0d      	ldr	r2, [pc, #52]	; (8101bc0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8101b8a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8101b8c:	e002      	b.n	8101b94 <LoopCopyDataInit>

08101b8e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8101b8e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8101b90:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8101b92:	3304      	adds	r3, #4

08101b94 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101b94:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101b96:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101b98:	d3f9      	bcc.n	8101b8e <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101b9a:	4a0a      	ldr	r2, [pc, #40]	; (8101bc4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101b9c:	4c0a      	ldr	r4, [pc, #40]	; (8101bc8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8101b9e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8101ba0:	e001      	b.n	8101ba6 <LoopFillZerobss>

08101ba2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8101ba2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101ba4:	3204      	adds	r2, #4

08101ba6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101ba6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101ba8:	d3fb      	bcc.n	8101ba2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101baa:	f002 fe85 	bl	81048b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8101bae:	f7ff fc89 	bl	81014c4 <main>
  bx  lr
 8101bb2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101bb4:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101bb8:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101bbc:	100001c8 	.word	0x100001c8
  ldr r2, =_sidata
 8101bc0:	0810780c 	.word	0x0810780c
  ldr r2, =_sbss
 8101bc4:	100001c8 	.word	0x100001c8
  ldr r4, =_ebss
 8101bc8:	10000388 	.word	0x10000388

08101bcc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101bcc:	e7fe      	b.n	8101bcc <ADC3_IRQHandler>

08101bce <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8101bce:	b480      	push	{r7}
 8101bd0:	b085      	sub	sp, #20
 8101bd2:	af00      	add	r7, sp, #0
 8101bd4:	60f8      	str	r0, [r7, #12]
 8101bd6:	60b9      	str	r1, [r7, #8]
 8101bd8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 8101bda:	68fb      	ldr	r3, [r7, #12]
 8101bdc:	6819      	ldr	r1, [r3, #0]
 8101bde:	68bb      	ldr	r3, [r7, #8]
 8101be0:	fb03 f203 	mul.w	r2, r3, r3
 8101be4:	4613      	mov	r3, r2
 8101be6:	005b      	lsls	r3, r3, #1
 8101be8:	4413      	add	r3, r2
 8101bea:	43db      	mvns	r3, r3
 8101bec:	ea01 0203 	and.w	r2, r1, r3
 8101bf0:	68bb      	ldr	r3, [r7, #8]
 8101bf2:	fb03 f303 	mul.w	r3, r3, r3
 8101bf6:	6879      	ldr	r1, [r7, #4]
 8101bf8:	fb01 f303 	mul.w	r3, r1, r3
 8101bfc:	431a      	orrs	r2, r3
 8101bfe:	68fb      	ldr	r3, [r7, #12]
 8101c00:	601a      	str	r2, [r3, #0]
}
 8101c02:	bf00      	nop
 8101c04:	3714      	adds	r7, #20
 8101c06:	46bd      	mov	sp, r7
 8101c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c0c:	4770      	bx	lr

08101c0e <LL_GPIO_SetPinOutputType>:
  *         @arg @ref LL_GPIO_OUTPUT_PUSHPULL
  *         @arg @ref LL_GPIO_OUTPUT_OPENDRAIN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinOutputType(GPIO_TypeDef *GPIOx, uint32_t PinMask, uint32_t OutputType)
{
 8101c0e:	b480      	push	{r7}
 8101c10:	b085      	sub	sp, #20
 8101c12:	af00      	add	r7, sp, #0
 8101c14:	60f8      	str	r0, [r7, #12]
 8101c16:	60b9      	str	r1, [r7, #8]
 8101c18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8101c1a:	68fb      	ldr	r3, [r7, #12]
 8101c1c:	685a      	ldr	r2, [r3, #4]
 8101c1e:	68bb      	ldr	r3, [r7, #8]
 8101c20:	43db      	mvns	r3, r3
 8101c22:	401a      	ands	r2, r3
 8101c24:	68bb      	ldr	r3, [r7, #8]
 8101c26:	6879      	ldr	r1, [r7, #4]
 8101c28:	fb01 f303 	mul.w	r3, r1, r3
 8101c2c:	431a      	orrs	r2, r3
 8101c2e:	68fb      	ldr	r3, [r7, #12]
 8101c30:	605a      	str	r2, [r3, #4]
}
 8101c32:	bf00      	nop
 8101c34:	3714      	adds	r7, #20
 8101c36:	46bd      	mov	sp, r7
 8101c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c3c:	4770      	bx	lr

08101c3e <LL_GPIO_SetPinSpeed>:
  *         @arg @ref LL_GPIO_SPEED_FREQ_HIGH
  *         @arg @ref LL_GPIO_SPEED_FREQ_VERY_HIGH
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinSpeed(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t  Speed)
{
 8101c3e:	b480      	push	{r7}
 8101c40:	b085      	sub	sp, #20
 8101c42:	af00      	add	r7, sp, #0
 8101c44:	60f8      	str	r0, [r7, #12]
 8101c46:	60b9      	str	r1, [r7, #8]
 8101c48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 8101c4a:	68fb      	ldr	r3, [r7, #12]
 8101c4c:	6899      	ldr	r1, [r3, #8]
 8101c4e:	68bb      	ldr	r3, [r7, #8]
 8101c50:	fb03 f203 	mul.w	r2, r3, r3
 8101c54:	4613      	mov	r3, r2
 8101c56:	005b      	lsls	r3, r3, #1
 8101c58:	4413      	add	r3, r2
 8101c5a:	43db      	mvns	r3, r3
 8101c5c:	ea01 0203 	and.w	r2, r1, r3
 8101c60:	68bb      	ldr	r3, [r7, #8]
 8101c62:	fb03 f303 	mul.w	r3, r3, r3
 8101c66:	6879      	ldr	r1, [r7, #4]
 8101c68:	fb01 f303 	mul.w	r3, r1, r3
 8101c6c:	431a      	orrs	r2, r3
 8101c6e:	68fb      	ldr	r3, [r7, #12]
 8101c70:	609a      	str	r2, [r3, #8]
}
 8101c72:	bf00      	nop
 8101c74:	3714      	adds	r7, #20
 8101c76:	46bd      	mov	sp, r7
 8101c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101c7c:	4770      	bx	lr

08101c7e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8101c7e:	b480      	push	{r7}
 8101c80:	b085      	sub	sp, #20
 8101c82:	af00      	add	r7, sp, #0
 8101c84:	60f8      	str	r0, [r7, #12]
 8101c86:	60b9      	str	r1, [r7, #8]
 8101c88:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 8101c8a:	68fb      	ldr	r3, [r7, #12]
 8101c8c:	68d9      	ldr	r1, [r3, #12]
 8101c8e:	68bb      	ldr	r3, [r7, #8]
 8101c90:	fb03 f203 	mul.w	r2, r3, r3
 8101c94:	4613      	mov	r3, r2
 8101c96:	005b      	lsls	r3, r3, #1
 8101c98:	4413      	add	r3, r2
 8101c9a:	43db      	mvns	r3, r3
 8101c9c:	ea01 0203 	and.w	r2, r1, r3
 8101ca0:	68bb      	ldr	r3, [r7, #8]
 8101ca2:	fb03 f303 	mul.w	r3, r3, r3
 8101ca6:	6879      	ldr	r1, [r7, #4]
 8101ca8:	fb01 f303 	mul.w	r3, r1, r3
 8101cac:	431a      	orrs	r2, r3
 8101cae:	68fb      	ldr	r3, [r7, #12]
 8101cb0:	60da      	str	r2, [r3, #12]
}
 8101cb2:	bf00      	nop
 8101cb4:	3714      	adds	r7, #20
 8101cb6:	46bd      	mov	sp, r7
 8101cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101cbc:	4770      	bx	lr

08101cbe <LL_GPIO_SetAFPin_0_7>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_0_7(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8101cbe:	b480      	push	{r7}
 8101cc0:	b085      	sub	sp, #20
 8101cc2:	af00      	add	r7, sp, #0
 8101cc4:	60f8      	str	r0, [r7, #12]
 8101cc6:	60b9      	str	r1, [r7, #8]
 8101cc8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 8101cca:	68fb      	ldr	r3, [r7, #12]
 8101ccc:	6a19      	ldr	r1, [r3, #32]
 8101cce:	68bb      	ldr	r3, [r7, #8]
 8101cd0:	fb03 f303 	mul.w	r3, r3, r3
 8101cd4:	68ba      	ldr	r2, [r7, #8]
 8101cd6:	fb02 f303 	mul.w	r3, r2, r3
 8101cda:	68ba      	ldr	r2, [r7, #8]
 8101cdc:	fb03 f202 	mul.w	r2, r3, r2
 8101ce0:	4613      	mov	r3, r2
 8101ce2:	011b      	lsls	r3, r3, #4
 8101ce4:	1a9b      	subs	r3, r3, r2
 8101ce6:	43db      	mvns	r3, r3
 8101ce8:	ea01 0203 	and.w	r2, r1, r3
 8101cec:	68bb      	ldr	r3, [r7, #8]
 8101cee:	fb03 f303 	mul.w	r3, r3, r3
 8101cf2:	68b9      	ldr	r1, [r7, #8]
 8101cf4:	fb01 f303 	mul.w	r3, r1, r3
 8101cf8:	68b9      	ldr	r1, [r7, #8]
 8101cfa:	fb01 f303 	mul.w	r3, r1, r3
 8101cfe:	6879      	ldr	r1, [r7, #4]
 8101d00:	fb01 f303 	mul.w	r3, r1, r3
 8101d04:	431a      	orrs	r2, r3
 8101d06:	68fb      	ldr	r3, [r7, #12]
 8101d08:	621a      	str	r2, [r3, #32]
             ((((Pin * Pin) * Pin) * Pin) * Alternate));
}
 8101d0a:	bf00      	nop
 8101d0c:	3714      	adds	r7, #20
 8101d0e:	46bd      	mov	sp, r7
 8101d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d14:	4770      	bx	lr

08101d16 <LL_GPIO_SetAFPin_8_15>:
  *         @arg @ref LL_GPIO_AF_14
  *         @arg @ref LL_GPIO_AF_15
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetAFPin_8_15(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Alternate)
{
 8101d16:	b480      	push	{r7}
 8101d18:	b085      	sub	sp, #20
 8101d1a:	af00      	add	r7, sp, #0
 8101d1c:	60f8      	str	r0, [r7, #12]
 8101d1e:	60b9      	str	r1, [r7, #8]
 8101d20:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8101d22:	68fb      	ldr	r3, [r7, #12]
 8101d24:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8101d26:	68bb      	ldr	r3, [r7, #8]
 8101d28:	0a1b      	lsrs	r3, r3, #8
 8101d2a:	68ba      	ldr	r2, [r7, #8]
 8101d2c:	0a12      	lsrs	r2, r2, #8
 8101d2e:	fb02 f303 	mul.w	r3, r2, r3
 8101d32:	68ba      	ldr	r2, [r7, #8]
 8101d34:	0a12      	lsrs	r2, r2, #8
 8101d36:	fb02 f303 	mul.w	r3, r2, r3
 8101d3a:	68ba      	ldr	r2, [r7, #8]
 8101d3c:	0a12      	lsrs	r2, r2, #8
 8101d3e:	fb03 f202 	mul.w	r2, r3, r2
 8101d42:	4613      	mov	r3, r2
 8101d44:	011b      	lsls	r3, r3, #4
 8101d46:	1a9b      	subs	r3, r3, r2
 8101d48:	43db      	mvns	r3, r3
 8101d4a:	ea01 0203 	and.w	r2, r1, r3
 8101d4e:	68bb      	ldr	r3, [r7, #8]
 8101d50:	0a1b      	lsrs	r3, r3, #8
 8101d52:	68b9      	ldr	r1, [r7, #8]
 8101d54:	0a09      	lsrs	r1, r1, #8
 8101d56:	fb01 f303 	mul.w	r3, r1, r3
 8101d5a:	68b9      	ldr	r1, [r7, #8]
 8101d5c:	0a09      	lsrs	r1, r1, #8
 8101d5e:	fb01 f303 	mul.w	r3, r1, r3
 8101d62:	68b9      	ldr	r1, [r7, #8]
 8101d64:	0a09      	lsrs	r1, r1, #8
 8101d66:	fb01 f303 	mul.w	r3, r1, r3
 8101d6a:	6879      	ldr	r1, [r7, #4]
 8101d6c:	fb01 f303 	mul.w	r3, r1, r3
 8101d70:	431a      	orrs	r2, r3
 8101d72:	68fb      	ldr	r3, [r7, #12]
 8101d74:	625a      	str	r2, [r3, #36]	; 0x24
             (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * Alternate));
}
 8101d76:	bf00      	nop
 8101d78:	3714      	adds	r7, #20
 8101d7a:	46bd      	mov	sp, r7
 8101d7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101d80:	4770      	bx	lr

08101d82 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8101d82:	b580      	push	{r7, lr}
 8101d84:	b088      	sub	sp, #32
 8101d86:	af00      	add	r7, sp, #0
 8101d88:	6078      	str	r0, [r7, #4]
 8101d8a:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8101d8c:	683b      	ldr	r3, [r7, #0]
 8101d8e:	681b      	ldr	r3, [r3, #0]
 8101d90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8101d92:	693b      	ldr	r3, [r7, #16]
 8101d94:	fa93 f3a3 	rbit	r3, r3
 8101d98:	60fb      	str	r3, [r7, #12]
  return result;
 8101d9a:	68fb      	ldr	r3, [r7, #12]
 8101d9c:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8101d9e:	697b      	ldr	r3, [r7, #20]
 8101da0:	2b00      	cmp	r3, #0
 8101da2:	d101      	bne.n	8101da8 <LL_GPIO_Init+0x26>
    return 32U;
 8101da4:	2320      	movs	r3, #32
 8101da6:	e003      	b.n	8101db0 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8101da8:	697b      	ldr	r3, [r7, #20]
 8101daa:	fab3 f383 	clz	r3, r3
 8101dae:	b2db      	uxtb	r3, r3
 8101db0:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8101db2:	e048      	b.n	8101e46 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 8101db4:	683b      	ldr	r3, [r7, #0]
 8101db6:	681a      	ldr	r2, [r3, #0]
 8101db8:	2101      	movs	r1, #1
 8101dba:	69fb      	ldr	r3, [r7, #28]
 8101dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8101dc0:	4013      	ands	r3, r2
 8101dc2:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 8101dc4:	69bb      	ldr	r3, [r7, #24]
 8101dc6:	2b00      	cmp	r3, #0
 8101dc8:	d03a      	beq.n	8101e40 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8101dca:	683b      	ldr	r3, [r7, #0]
 8101dcc:	685b      	ldr	r3, [r3, #4]
 8101dce:	2b01      	cmp	r3, #1
 8101dd0:	d003      	beq.n	8101dda <LL_GPIO_Init+0x58>
 8101dd2:	683b      	ldr	r3, [r7, #0]
 8101dd4:	685b      	ldr	r3, [r3, #4]
 8101dd6:	2b02      	cmp	r3, #2
 8101dd8:	d10e      	bne.n	8101df8 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8101dda:	683b      	ldr	r3, [r7, #0]
 8101ddc:	689b      	ldr	r3, [r3, #8]
 8101dde:	461a      	mov	r2, r3
 8101de0:	69b9      	ldr	r1, [r7, #24]
 8101de2:	6878      	ldr	r0, [r7, #4]
 8101de4:	f7ff ff2b 	bl	8101c3e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8101de8:	683b      	ldr	r3, [r7, #0]
 8101dea:	6819      	ldr	r1, [r3, #0]
 8101dec:	683b      	ldr	r3, [r7, #0]
 8101dee:	68db      	ldr	r3, [r3, #12]
 8101df0:	461a      	mov	r2, r3
 8101df2:	6878      	ldr	r0, [r7, #4]
 8101df4:	f7ff ff0b 	bl	8101c0e <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8101df8:	683b      	ldr	r3, [r7, #0]
 8101dfa:	691b      	ldr	r3, [r3, #16]
 8101dfc:	461a      	mov	r2, r3
 8101dfe:	69b9      	ldr	r1, [r7, #24]
 8101e00:	6878      	ldr	r0, [r7, #4]
 8101e02:	f7ff ff3c 	bl	8101c7e <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8101e06:	683b      	ldr	r3, [r7, #0]
 8101e08:	685b      	ldr	r3, [r3, #4]
 8101e0a:	2b02      	cmp	r3, #2
 8101e0c:	d111      	bne.n	8101e32 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8101e0e:	69bb      	ldr	r3, [r7, #24]
 8101e10:	2bff      	cmp	r3, #255	; 0xff
 8101e12:	d807      	bhi.n	8101e24 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8101e14:	683b      	ldr	r3, [r7, #0]
 8101e16:	695b      	ldr	r3, [r3, #20]
 8101e18:	461a      	mov	r2, r3
 8101e1a:	69b9      	ldr	r1, [r7, #24]
 8101e1c:	6878      	ldr	r0, [r7, #4]
 8101e1e:	f7ff ff4e 	bl	8101cbe <LL_GPIO_SetAFPin_0_7>
 8101e22:	e006      	b.n	8101e32 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8101e24:	683b      	ldr	r3, [r7, #0]
 8101e26:	695b      	ldr	r3, [r3, #20]
 8101e28:	461a      	mov	r2, r3
 8101e2a:	69b9      	ldr	r1, [r7, #24]
 8101e2c:	6878      	ldr	r0, [r7, #4]
 8101e2e:	f7ff ff72 	bl	8101d16 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8101e32:	683b      	ldr	r3, [r7, #0]
 8101e34:	685b      	ldr	r3, [r3, #4]
 8101e36:	461a      	mov	r2, r3
 8101e38:	69b9      	ldr	r1, [r7, #24]
 8101e3a:	6878      	ldr	r0, [r7, #4]
 8101e3c:	f7ff fec7 	bl	8101bce <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8101e40:	69fb      	ldr	r3, [r7, #28]
 8101e42:	3301      	adds	r3, #1
 8101e44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8101e46:	683b      	ldr	r3, [r7, #0]
 8101e48:	681a      	ldr	r2, [r3, #0]
 8101e4a:	69fb      	ldr	r3, [r7, #28]
 8101e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8101e50:	2b00      	cmp	r3, #0
 8101e52:	d1af      	bne.n	8101db4 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8101e54:	2300      	movs	r3, #0
}
 8101e56:	4618      	mov	r0, r3
 8101e58:	3720      	adds	r7, #32
 8101e5a:	46bd      	mov	sp, r7
 8101e5c:	bd80      	pop	{r7, pc}
	...

08101e60 <LL_RCC_HSE_IsReady>:
{
 8101e60:	b480      	push	{r7}
 8101e62:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY)) ? 1UL : 0UL);
 8101e64:	4b07      	ldr	r3, [pc, #28]	; (8101e84 <LL_RCC_HSE_IsReady+0x24>)
 8101e66:	681b      	ldr	r3, [r3, #0]
 8101e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8101e6c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8101e70:	d101      	bne.n	8101e76 <LL_RCC_HSE_IsReady+0x16>
 8101e72:	2301      	movs	r3, #1
 8101e74:	e000      	b.n	8101e78 <LL_RCC_HSE_IsReady+0x18>
 8101e76:	2300      	movs	r3, #0
}
 8101e78:	4618      	mov	r0, r3
 8101e7a:	46bd      	mov	sp, r7
 8101e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101e80:	4770      	bx	lr
 8101e82:	bf00      	nop
 8101e84:	58024400 	.word	0x58024400

08101e88 <LL_RCC_HSI_IsReady>:
{
 8101e88:	b480      	push	{r7}
 8101e8a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8101e8c:	4b06      	ldr	r3, [pc, #24]	; (8101ea8 <LL_RCC_HSI_IsReady+0x20>)
 8101e8e:	681b      	ldr	r3, [r3, #0]
 8101e90:	f003 0304 	and.w	r3, r3, #4
 8101e94:	2b04      	cmp	r3, #4
 8101e96:	d101      	bne.n	8101e9c <LL_RCC_HSI_IsReady+0x14>
 8101e98:	2301      	movs	r3, #1
 8101e9a:	e000      	b.n	8101e9e <LL_RCC_HSI_IsReady+0x16>
 8101e9c:	2300      	movs	r3, #0
}
 8101e9e:	4618      	mov	r0, r3
 8101ea0:	46bd      	mov	sp, r7
 8101ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ea6:	4770      	bx	lr
 8101ea8:	58024400 	.word	0x58024400

08101eac <LL_RCC_HSI_GetDivider>:
{
 8101eac:	b480      	push	{r7}
 8101eae:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSIDIV));
 8101eb0:	4b04      	ldr	r3, [pc, #16]	; (8101ec4 <LL_RCC_HSI_GetDivider+0x18>)
 8101eb2:	681b      	ldr	r3, [r3, #0]
 8101eb4:	f003 0318 	and.w	r3, r3, #24
}
 8101eb8:	4618      	mov	r0, r3
 8101eba:	46bd      	mov	sp, r7
 8101ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ec0:	4770      	bx	lr
 8101ec2:	bf00      	nop
 8101ec4:	58024400 	.word	0x58024400

08101ec8 <LL_RCC_CSI_IsReady>:
{
 8101ec8:	b480      	push	{r7}
 8101eca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_CSIRDY) == (RCC_CR_CSIRDY)) ? 1UL : 0UL);
 8101ecc:	4b07      	ldr	r3, [pc, #28]	; (8101eec <LL_RCC_CSI_IsReady+0x24>)
 8101ece:	681b      	ldr	r3, [r3, #0]
 8101ed0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8101ed4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8101ed8:	d101      	bne.n	8101ede <LL_RCC_CSI_IsReady+0x16>
 8101eda:	2301      	movs	r3, #1
 8101edc:	e000      	b.n	8101ee0 <LL_RCC_CSI_IsReady+0x18>
 8101ede:	2300      	movs	r3, #0
}
 8101ee0:	4618      	mov	r0, r3
 8101ee2:	46bd      	mov	sp, r7
 8101ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ee8:	4770      	bx	lr
 8101eea:	bf00      	nop
 8101eec:	58024400 	.word	0x58024400

08101ef0 <LL_RCC_LSE_IsReady>:
{
 8101ef0:	b480      	push	{r7}
 8101ef2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == (RCC_BDCR_LSERDY)) ? 1UL : 0UL);
 8101ef4:	4b06      	ldr	r3, [pc, #24]	; (8101f10 <LL_RCC_LSE_IsReady+0x20>)
 8101ef6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8101ef8:	f003 0302 	and.w	r3, r3, #2
 8101efc:	2b02      	cmp	r3, #2
 8101efe:	d101      	bne.n	8101f04 <LL_RCC_LSE_IsReady+0x14>
 8101f00:	2301      	movs	r3, #1
 8101f02:	e000      	b.n	8101f06 <LL_RCC_LSE_IsReady+0x16>
 8101f04:	2300      	movs	r3, #0
}
 8101f06:	4618      	mov	r0, r3
 8101f08:	46bd      	mov	sp, r7
 8101f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f0e:	4770      	bx	lr
 8101f10:	58024400 	.word	0x58024400

08101f14 <LL_RCC_GetSysClkSource>:
{
 8101f14:	b480      	push	{r7}
 8101f16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8101f18:	4b04      	ldr	r3, [pc, #16]	; (8101f2c <LL_RCC_GetSysClkSource+0x18>)
 8101f1a:	691b      	ldr	r3, [r3, #16]
 8101f1c:	f003 0338 	and.w	r3, r3, #56	; 0x38
}
 8101f20:	4618      	mov	r0, r3
 8101f22:	46bd      	mov	sp, r7
 8101f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f28:	4770      	bx	lr
 8101f2a:	bf00      	nop
 8101f2c:	58024400 	.word	0x58024400

08101f30 <LL_RCC_GetSysPrescaler>:
{
 8101f30:	b480      	push	{r7}
 8101f32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_D1CPRE));
 8101f34:	4b04      	ldr	r3, [pc, #16]	; (8101f48 <LL_RCC_GetSysPrescaler+0x18>)
 8101f36:	699b      	ldr	r3, [r3, #24]
 8101f38:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8101f3c:	4618      	mov	r0, r3
 8101f3e:	46bd      	mov	sp, r7
 8101f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f44:	4770      	bx	lr
 8101f46:	bf00      	nop
 8101f48:	58024400 	.word	0x58024400

08101f4c <LL_RCC_GetAHBPrescaler>:
{
 8101f4c:	b480      	push	{r7}
 8101f4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->D1CFGR, RCC_D1CFGR_HPRE));
 8101f50:	4b04      	ldr	r3, [pc, #16]	; (8101f64 <LL_RCC_GetAHBPrescaler+0x18>)
 8101f52:	699b      	ldr	r3, [r3, #24]
 8101f54:	f003 030f 	and.w	r3, r3, #15
}
 8101f58:	4618      	mov	r0, r3
 8101f5a:	46bd      	mov	sp, r7
 8101f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f60:	4770      	bx	lr
 8101f62:	bf00      	nop
 8101f64:	58024400 	.word	0x58024400

08101f68 <LL_RCC_GetAPB1Prescaler>:
{
 8101f68:	b480      	push	{r7}
 8101f6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1));
 8101f6c:	4b04      	ldr	r3, [pc, #16]	; (8101f80 <LL_RCC_GetAPB1Prescaler+0x18>)
 8101f6e:	69db      	ldr	r3, [r3, #28]
 8101f70:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8101f74:	4618      	mov	r0, r3
 8101f76:	46bd      	mov	sp, r7
 8101f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f7c:	4770      	bx	lr
 8101f7e:	bf00      	nop
 8101f80:	58024400 	.word	0x58024400

08101f84 <LL_RCC_GetAPB2Prescaler>:
{
 8101f84:	b480      	push	{r7}
 8101f86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2));
 8101f88:	4b04      	ldr	r3, [pc, #16]	; (8101f9c <LL_RCC_GetAPB2Prescaler+0x18>)
 8101f8a:	69db      	ldr	r3, [r3, #28]
 8101f8c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8101f90:	4618      	mov	r0, r3
 8101f92:	46bd      	mov	sp, r7
 8101f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101f98:	4770      	bx	lr
 8101f9a:	bf00      	nop
 8101f9c:	58024400 	.word	0x58024400

08101fa0 <LL_RCC_GetClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE uint32_t LL_RCC_GetClockSource(uint32_t Periph)
{
 8101fa0:	b480      	push	{r7}
 8101fa2:	b085      	sub	sp, #20
 8101fa4:	af00      	add	r7, sp, #0
 8101fa6:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CCIPR_FMCSEL)
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->D1CCIPR) + LL_CLKSOURCE_REG(Periph)));
 8101fa8:	687b      	ldr	r3, [r7, #4]
 8101faa:	b2da      	uxtb	r2, r3
 8101fac:	4b0e      	ldr	r3, [pc, #56]	; (8101fe8 <LL_RCC_GetClockSource+0x48>)
 8101fae:	4413      	add	r3, r2
 8101fb0:	60fb      	str	r3, [r7, #12]
#else
  const uint32_t *pReg = (uint32_t *)((uint32_t)((uint32_t)(&RCC->CDCCIPR) + LL_CLKSOURCE_REG(Periph)));
#endif /* RCC_D1CCIPR_FMCSEL */
  return (uint32_t)(Periph | (((READ_BIT(*pReg, LL_CLKSOURCE_MASK(Periph))) >> LL_CLKSOURCE_SHIFT(Periph)) << LL_RCC_CONFIG_SHIFT));
 8101fb2:	68fb      	ldr	r3, [r7, #12]
 8101fb4:	681a      	ldr	r2, [r3, #0]
 8101fb6:	687b      	ldr	r3, [r7, #4]
 8101fb8:	0e19      	lsrs	r1, r3, #24
 8101fba:	687b      	ldr	r3, [r7, #4]
 8101fbc:	0a1b      	lsrs	r3, r3, #8
 8101fbe:	f003 031f 	and.w	r3, r3, #31
 8101fc2:	fa01 f303 	lsl.w	r3, r1, r3
 8101fc6:	401a      	ands	r2, r3
 8101fc8:	687b      	ldr	r3, [r7, #4]
 8101fca:	0a1b      	lsrs	r3, r3, #8
 8101fcc:	f003 031f 	and.w	r3, r3, #31
 8101fd0:	fa22 f303 	lsr.w	r3, r2, r3
 8101fd4:	041a      	lsls	r2, r3, #16
 8101fd6:	687b      	ldr	r3, [r7, #4]
 8101fd8:	4313      	orrs	r3, r2
}
 8101fda:	4618      	mov	r0, r3
 8101fdc:	3714      	adds	r7, #20
 8101fde:	46bd      	mov	sp, r7
 8101fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101fe4:	4770      	bx	lr
 8101fe6:	bf00      	nop
 8101fe8:	5802444c 	.word	0x5802444c

08101fec <LL_RCC_GetUSARTClockSource>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_HSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_CSI
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE_LSE
  */
__STATIC_INLINE uint32_t LL_RCC_GetUSARTClockSource(uint32_t Periph)
{
 8101fec:	b580      	push	{r7, lr}
 8101fee:	b082      	sub	sp, #8
 8101ff0:	af00      	add	r7, sp, #0
 8101ff2:	6078      	str	r0, [r7, #4]
  return LL_RCC_GetClockSource(Periph);
 8101ff4:	6878      	ldr	r0, [r7, #4]
 8101ff6:	f7ff ffd3 	bl	8101fa0 <LL_RCC_GetClockSource>
 8101ffa:	4603      	mov	r3, r0
}
 8101ffc:	4618      	mov	r0, r3
 8101ffe:	3708      	adds	r7, #8
 8102000:	46bd      	mov	sp, r7
 8102002:	bd80      	pop	{r7, pc}

08102004 <LL_RCC_PLL_GetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_CSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetSource(void)
{
 8102004:	b480      	push	{r7}
 8102006:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC));
 8102008:	4b04      	ldr	r3, [pc, #16]	; (810201c <LL_RCC_PLL_GetSource+0x18>)
 810200a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810200c:	f003 0303 	and.w	r3, r3, #3
}
 8102010:	4618      	mov	r0, r3
 8102012:	46bd      	mov	sp, r7
 8102014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102018:	4770      	bx	lr
 810201a:	bf00      	nop
 810201c:	58024400 	.word	0x58024400

08102020 <LL_RCC_PLL1P_IsEnabled>:
  * @brief  Check if PLL1 P is enabled
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1P_IsEnabled(void)
{
 8102020:	b480      	push	{r7}
 8102022:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN) == RCC_PLLCFGR_DIVP1EN) ? 1UL : 0UL);
 8102024:	4b07      	ldr	r3, [pc, #28]	; (8102044 <LL_RCC_PLL1P_IsEnabled+0x24>)
 8102026:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102028:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 810202c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102030:	d101      	bne.n	8102036 <LL_RCC_PLL1P_IsEnabled+0x16>
 8102032:	2301      	movs	r3, #1
 8102034:	e000      	b.n	8102038 <LL_RCC_PLL1P_IsEnabled+0x18>
 8102036:	2300      	movs	r3, #0
}
 8102038:	4618      	mov	r0, r3
 810203a:	46bd      	mov	sp, r7
 810203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102040:	4770      	bx	lr
 8102042:	bf00      	nop
 8102044:	58024400 	.word	0x58024400

08102048 <LL_RCC_PLL1Q_IsEnabled>:
  * @brief  Check if PLL1 Q is enabled
  * @rmtoll PLLCFGR           DIVQ1EN         LL_RCC_PLL1Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1Q_IsEnabled(void)
{
 8102048:	b480      	push	{r7}
 810204a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ1EN) == RCC_PLLCFGR_DIVQ1EN) ? 1UL : 0UL);
 810204c:	4b07      	ldr	r3, [pc, #28]	; (810206c <LL_RCC_PLL1Q_IsEnabled+0x24>)
 810204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102050:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8102054:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102058:	d101      	bne.n	810205e <LL_RCC_PLL1Q_IsEnabled+0x16>
 810205a:	2301      	movs	r3, #1
 810205c:	e000      	b.n	8102060 <LL_RCC_PLL1Q_IsEnabled+0x18>
 810205e:	2300      	movs	r3, #0
}
 8102060:	4618      	mov	r0, r3
 8102062:	46bd      	mov	sp, r7
 8102064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102068:	4770      	bx	lr
 810206a:	bf00      	nop
 810206c:	58024400 	.word	0x58024400

08102070 <LL_RCC_PLL1R_IsEnabled>:
  * @brief  Check if PLL1 R is enabled
  * @rmtoll PLLCFGR           DIVR1EN         LL_RCC_PLL1R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1R_IsEnabled(void)
{
 8102070:	b480      	push	{r7}
 8102072:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR1EN) == RCC_PLLCFGR_DIVR1EN) ? 1UL : 0UL);
 8102074:	4b07      	ldr	r3, [pc, #28]	; (8102094 <LL_RCC_PLL1R_IsEnabled+0x24>)
 8102076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102078:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 810207c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102080:	d101      	bne.n	8102086 <LL_RCC_PLL1R_IsEnabled+0x16>
 8102082:	2301      	movs	r3, #1
 8102084:	e000      	b.n	8102088 <LL_RCC_PLL1R_IsEnabled+0x18>
 8102086:	2300      	movs	r3, #0
}
 8102088:	4618      	mov	r0, r3
 810208a:	46bd      	mov	sp, r7
 810208c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102090:	4770      	bx	lr
 8102092:	bf00      	nop
 8102094:	58024400 	.word	0x58024400

08102098 <LL_RCC_PLL1FRACN_IsEnabled>:
  * @brief  Check if PLL1 FRACN is enabled
  * @rmtoll PLLCFGR           PLL1FRACEN         LL_RCC_PLL1FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1FRACN_IsEnabled(void)
{
 8102098:	b480      	push	{r7}
 810209a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL1FRACEN) == RCC_PLLCFGR_PLL1FRACEN) ? 1UL : 0UL);
 810209c:	4b06      	ldr	r3, [pc, #24]	; (81020b8 <LL_RCC_PLL1FRACN_IsEnabled+0x20>)
 810209e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81020a0:	f003 0301 	and.w	r3, r3, #1
 81020a4:	2b01      	cmp	r3, #1
 81020a6:	d101      	bne.n	81020ac <LL_RCC_PLL1FRACN_IsEnabled+0x14>
 81020a8:	2301      	movs	r3, #1
 81020aa:	e000      	b.n	81020ae <LL_RCC_PLL1FRACN_IsEnabled+0x16>
 81020ac:	2300      	movs	r3, #0
}
 81020ae:	4618      	mov	r0, r3
 81020b0:	46bd      	mov	sp, r7
 81020b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020b6:	4770      	bx	lr
 81020b8:	58024400 	.word	0x58024400

081020bc <LL_RCC_PLL1_GetN>:
  * @brief  Get PLL1 N Coefficient
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetN(void)
{
 81020bc:	b480      	push	{r7}
 81020be:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_N1) >>  RCC_PLL1DIVR_N1_Pos) + 1UL);
 81020c0:	4b04      	ldr	r3, [pc, #16]	; (81020d4 <LL_RCC_PLL1_GetN+0x18>)
 81020c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81020c4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81020c8:	3301      	adds	r3, #1
}
 81020ca:	4618      	mov	r0, r3
 81020cc:	46bd      	mov	sp, r7
 81020ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020d2:	4770      	bx	lr
 81020d4:	58024400 	.word	0x58024400

081020d8 <LL_RCC_PLL1_GetM>:
  * @brief  Get PLL1 M Coefficient
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetM(void)
{
 81020d8:	b480      	push	{r7}
 81020da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1) >>  RCC_PLLCKSELR_DIVM1_Pos);
 81020dc:	4b04      	ldr	r3, [pc, #16]	; (81020f0 <LL_RCC_PLL1_GetM+0x18>)
 81020de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81020e0:	091b      	lsrs	r3, r3, #4
 81020e2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 81020e6:	4618      	mov	r0, r3
 81020e8:	46bd      	mov	sp, r7
 81020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 81020ee:	4770      	bx	lr
 81020f0:	58024400 	.word	0x58024400

081020f4 <LL_RCC_PLL1_GetP>:
  * @brief  Get PLL1 P Coefficient
  * @rmtoll PLL1DIVR        P1          LL_RCC_PLL1_GetP
  * @retval A value between 2 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetP(void)
{
 81020f4:	b480      	push	{r7}
 81020f6:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_P1) >>  RCC_PLL1DIVR_P1_Pos) + 1UL);
 81020f8:	4b05      	ldr	r3, [pc, #20]	; (8102110 <LL_RCC_PLL1_GetP+0x1c>)
 81020fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 81020fc:	0a5b      	lsrs	r3, r3, #9
 81020fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102102:	3301      	adds	r3, #1
}
 8102104:	4618      	mov	r0, r3
 8102106:	46bd      	mov	sp, r7
 8102108:	f85d 7b04 	ldr.w	r7, [sp], #4
 810210c:	4770      	bx	lr
 810210e:	bf00      	nop
 8102110:	58024400 	.word	0x58024400

08102114 <LL_RCC_PLL1_GetQ>:
  * @brief  Get PLL1 Q Coefficient
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetQ(void)
{
 8102114:	b480      	push	{r7}
 8102116:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1) >>  RCC_PLL1DIVR_Q1_Pos) + 1UL);
 8102118:	4b05      	ldr	r3, [pc, #20]	; (8102130 <LL_RCC_PLL1_GetQ+0x1c>)
 810211a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810211c:	0c1b      	lsrs	r3, r3, #16
 810211e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102122:	3301      	adds	r3, #1
}
 8102124:	4618      	mov	r0, r3
 8102126:	46bd      	mov	sp, r7
 8102128:	f85d 7b04 	ldr.w	r7, [sp], #4
 810212c:	4770      	bx	lr
 810212e:	bf00      	nop
 8102130:	58024400 	.word	0x58024400

08102134 <LL_RCC_PLL1_GetR>:
  * @brief  Get PLL1 R Coefficient
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetR(void)
{
 8102134:	b480      	push	{r7}
 8102136:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL1DIVR, RCC_PLL1DIVR_R1) >>  RCC_PLL1DIVR_R1_Pos) + 1UL);
 8102138:	4b05      	ldr	r3, [pc, #20]	; (8102150 <LL_RCC_PLL1_GetR+0x1c>)
 810213a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 810213c:	0e1b      	lsrs	r3, r3, #24
 810213e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102142:	3301      	adds	r3, #1
}
 8102144:	4618      	mov	r0, r3
 8102146:	46bd      	mov	sp, r7
 8102148:	f85d 7b04 	ldr.w	r7, [sp], #4
 810214c:	4770      	bx	lr
 810214e:	bf00      	nop
 8102150:	58024400 	.word	0x58024400

08102154 <LL_RCC_PLL1_GetFRACN>:
  * @brief  Get PLL1 FRACN Coefficient
  * @rmtoll PLL1FRACR      FRACN1          LL_RCC_PLL1_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_GetFRACN(void)
{
 8102154:	b480      	push	{r7}
 8102156:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL1FRACR, RCC_PLL1FRACR_FRACN1) >>  RCC_PLL1FRACR_FRACN1_Pos);
 8102158:	4b04      	ldr	r3, [pc, #16]	; (810216c <LL_RCC_PLL1_GetFRACN+0x18>)
 810215a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 810215c:	08db      	lsrs	r3, r3, #3
 810215e:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8102162:	4618      	mov	r0, r3
 8102164:	46bd      	mov	sp, r7
 8102166:	f85d 7b04 	ldr.w	r7, [sp], #4
 810216a:	4770      	bx	lr
 810216c:	58024400 	.word	0x58024400

08102170 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8102170:	b480      	push	{r7}
 8102172:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8102174:	4b07      	ldr	r3, [pc, #28]	; (8102194 <LL_RCC_PLL2_IsReady+0x24>)
 8102176:	681b      	ldr	r3, [r3, #0]
 8102178:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 810217c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8102180:	d101      	bne.n	8102186 <LL_RCC_PLL2_IsReady+0x16>
 8102182:	2301      	movs	r3, #1
 8102184:	e000      	b.n	8102188 <LL_RCC_PLL2_IsReady+0x18>
 8102186:	2300      	movs	r3, #0
}
 8102188:	4618      	mov	r0, r3
 810218a:	46bd      	mov	sp, r7
 810218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102190:	4770      	bx	lr
 8102192:	bf00      	nop
 8102194:	58024400 	.word	0x58024400

08102198 <LL_RCC_PLL2P_IsEnabled>:
  * @brief  Check if PLL2 P is enabled
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2P_IsEnabled(void)
{
 8102198:	b480      	push	{r7}
 810219a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN) == RCC_PLLCFGR_DIVP2EN) ? 1UL : 0UL);
 810219c:	4b07      	ldr	r3, [pc, #28]	; (81021bc <LL_RCC_PLL2P_IsEnabled+0x24>)
 810219e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81021a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 81021a4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81021a8:	d101      	bne.n	81021ae <LL_RCC_PLL2P_IsEnabled+0x16>
 81021aa:	2301      	movs	r3, #1
 81021ac:	e000      	b.n	81021b0 <LL_RCC_PLL2P_IsEnabled+0x18>
 81021ae:	2300      	movs	r3, #0
}
 81021b0:	4618      	mov	r0, r3
 81021b2:	46bd      	mov	sp, r7
 81021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021b8:	4770      	bx	lr
 81021ba:	bf00      	nop
 81021bc:	58024400 	.word	0x58024400

081021c0 <LL_RCC_PLL2Q_IsEnabled>:
  * @brief  Check if PLL2 Q is enabled
  * @rmtoll PLLCFGR           DIVQ2EN         LL_RCC_PLL2Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2Q_IsEnabled(void)
{
 81021c0:	b480      	push	{r7}
 81021c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ2EN) == RCC_PLLCFGR_DIVQ2EN) ? 1UL : 0UL);
 81021c4:	4b07      	ldr	r3, [pc, #28]	; (81021e4 <LL_RCC_PLL2Q_IsEnabled+0x24>)
 81021c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81021c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 81021cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81021d0:	d101      	bne.n	81021d6 <LL_RCC_PLL2Q_IsEnabled+0x16>
 81021d2:	2301      	movs	r3, #1
 81021d4:	e000      	b.n	81021d8 <LL_RCC_PLL2Q_IsEnabled+0x18>
 81021d6:	2300      	movs	r3, #0
}
 81021d8:	4618      	mov	r0, r3
 81021da:	46bd      	mov	sp, r7
 81021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81021e0:	4770      	bx	lr
 81021e2:	bf00      	nop
 81021e4:	58024400 	.word	0x58024400

081021e8 <LL_RCC_PLL2R_IsEnabled>:
  * @brief  Check if PLL2 R is enabled
  * @rmtoll PLLCFGR           DIVR2EN         LL_RCC_PLL2R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2R_IsEnabled(void)
{
 81021e8:	b480      	push	{r7}
 81021ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR2EN) == RCC_PLLCFGR_DIVR2EN) ? 1UL : 0UL);
 81021ec:	4b07      	ldr	r3, [pc, #28]	; (810220c <LL_RCC_PLL2R_IsEnabled+0x24>)
 81021ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81021f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81021f4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 81021f8:	d101      	bne.n	81021fe <LL_RCC_PLL2R_IsEnabled+0x16>
 81021fa:	2301      	movs	r3, #1
 81021fc:	e000      	b.n	8102200 <LL_RCC_PLL2R_IsEnabled+0x18>
 81021fe:	2300      	movs	r3, #0
}
 8102200:	4618      	mov	r0, r3
 8102202:	46bd      	mov	sp, r7
 8102204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102208:	4770      	bx	lr
 810220a:	bf00      	nop
 810220c:	58024400 	.word	0x58024400

08102210 <LL_RCC_PLL2FRACN_IsEnabled>:
  * @brief  Check if PLL2 FRACN is enabled
  * @rmtoll PLLCFGR           PLL2FRACEN         LL_RCC_PLL2FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2FRACN_IsEnabled(void)
{
 8102210:	b480      	push	{r7}
 8102212:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL2FRACEN) == RCC_PLLCFGR_PLL2FRACEN) ? 1UL : 0UL);
 8102214:	4b06      	ldr	r3, [pc, #24]	; (8102230 <LL_RCC_PLL2FRACN_IsEnabled+0x20>)
 8102216:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102218:	f003 0310 	and.w	r3, r3, #16
 810221c:	2b10      	cmp	r3, #16
 810221e:	d101      	bne.n	8102224 <LL_RCC_PLL2FRACN_IsEnabled+0x14>
 8102220:	2301      	movs	r3, #1
 8102222:	e000      	b.n	8102226 <LL_RCC_PLL2FRACN_IsEnabled+0x16>
 8102224:	2300      	movs	r3, #0
}
 8102226:	4618      	mov	r0, r3
 8102228:	46bd      	mov	sp, r7
 810222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810222e:	4770      	bx	lr
 8102230:	58024400 	.word	0x58024400

08102234 <LL_RCC_PLL2_GetN>:
  * @brief  Get PLL2 N Coefficient
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetN(void)
{
 8102234:	b480      	push	{r7}
 8102236:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_N2) >>  RCC_PLL2DIVR_N2_Pos) + 1UL);
 8102238:	4b04      	ldr	r3, [pc, #16]	; (810224c <LL_RCC_PLL2_GetN+0x18>)
 810223a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810223c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8102240:	3301      	adds	r3, #1
}
 8102242:	4618      	mov	r0, r3
 8102244:	46bd      	mov	sp, r7
 8102246:	f85d 7b04 	ldr.w	r7, [sp], #4
 810224a:	4770      	bx	lr
 810224c:	58024400 	.word	0x58024400

08102250 <LL_RCC_PLL2_GetM>:
  * @brief  Get PLL2 M Coefficient
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetM(void)
{
 8102250:	b480      	push	{r7}
 8102252:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2) >>  RCC_PLLCKSELR_DIVM2_Pos);
 8102254:	4b04      	ldr	r3, [pc, #16]	; (8102268 <LL_RCC_PLL2_GetM+0x18>)
 8102256:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8102258:	0b1b      	lsrs	r3, r3, #12
 810225a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 810225e:	4618      	mov	r0, r3
 8102260:	46bd      	mov	sp, r7
 8102262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102266:	4770      	bx	lr
 8102268:	58024400 	.word	0x58024400

0810226c <LL_RCC_PLL2_GetP>:
  * @brief  Get PLL2 P Coefficient
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetP(void)
{
 810226c:	b480      	push	{r7}
 810226e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_P2) >>  RCC_PLL2DIVR_P2_Pos) + 1UL);
 8102270:	4b05      	ldr	r3, [pc, #20]	; (8102288 <LL_RCC_PLL2_GetP+0x1c>)
 8102272:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102274:	0a5b      	lsrs	r3, r3, #9
 8102276:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810227a:	3301      	adds	r3, #1
}
 810227c:	4618      	mov	r0, r3
 810227e:	46bd      	mov	sp, r7
 8102280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102284:	4770      	bx	lr
 8102286:	bf00      	nop
 8102288:	58024400 	.word	0x58024400

0810228c <LL_RCC_PLL2_GetQ>:
  * @brief  Get PLL2 Q Coefficient
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetQ(void)
{
 810228c:	b480      	push	{r7}
 810228e:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2) >>  RCC_PLL2DIVR_Q2_Pos) + 1UL);
 8102290:	4b05      	ldr	r3, [pc, #20]	; (81022a8 <LL_RCC_PLL2_GetQ+0x1c>)
 8102292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8102294:	0c1b      	lsrs	r3, r3, #16
 8102296:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810229a:	3301      	adds	r3, #1
}
 810229c:	4618      	mov	r0, r3
 810229e:	46bd      	mov	sp, r7
 81022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022a4:	4770      	bx	lr
 81022a6:	bf00      	nop
 81022a8:	58024400 	.word	0x58024400

081022ac <LL_RCC_PLL2_GetR>:
  * @brief  Get PLL2 R Coefficient
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetR(void)
{
 81022ac:	b480      	push	{r7}
 81022ae:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL2DIVR, RCC_PLL2DIVR_R2) >>  RCC_PLL2DIVR_R2_Pos) + 1UL);
 81022b0:	4b05      	ldr	r3, [pc, #20]	; (81022c8 <LL_RCC_PLL2_GetR+0x1c>)
 81022b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81022b4:	0e1b      	lsrs	r3, r3, #24
 81022b6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81022ba:	3301      	adds	r3, #1
}
 81022bc:	4618      	mov	r0, r3
 81022be:	46bd      	mov	sp, r7
 81022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022c4:	4770      	bx	lr
 81022c6:	bf00      	nop
 81022c8:	58024400 	.word	0x58024400

081022cc <LL_RCC_PLL2_GetFRACN>:
  * @brief  Get PLL2 FRACN Coefficient
  * @rmtoll PLL2FRACR      FRACN2          LL_RCC_PLL2_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_GetFRACN(void)
{
 81022cc:	b480      	push	{r7}
 81022ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL2FRACR, RCC_PLL2FRACR_FRACN2) >>  RCC_PLL2FRACR_FRACN2_Pos);
 81022d0:	4b04      	ldr	r3, [pc, #16]	; (81022e4 <LL_RCC_PLL2_GetFRACN+0x18>)
 81022d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 81022d4:	08db      	lsrs	r3, r3, #3
 81022d6:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 81022da:	4618      	mov	r0, r3
 81022dc:	46bd      	mov	sp, r7
 81022de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81022e2:	4770      	bx	lr
 81022e4:	58024400 	.word	0x58024400

081022e8 <LL_RCC_PLL3_IsReady>:
  * @brief  Check if PLL3 Ready
  * @rmtoll CR           PLL3RDY        LL_RCC_PLL3_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_IsReady(void)
{
 81022e8:	b480      	push	{r7}
 81022ea:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL3RDY) == (RCC_CR_PLL3RDY)) ? 1UL : 0UL);
 81022ec:	4b07      	ldr	r3, [pc, #28]	; (810230c <LL_RCC_PLL3_IsReady+0x24>)
 81022ee:	681b      	ldr	r3, [r3, #0]
 81022f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81022f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81022f8:	d101      	bne.n	81022fe <LL_RCC_PLL3_IsReady+0x16>
 81022fa:	2301      	movs	r3, #1
 81022fc:	e000      	b.n	8102300 <LL_RCC_PLL3_IsReady+0x18>
 81022fe:	2300      	movs	r3, #0
}
 8102300:	4618      	mov	r0, r3
 8102302:	46bd      	mov	sp, r7
 8102304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102308:	4770      	bx	lr
 810230a:	bf00      	nop
 810230c:	58024400 	.word	0x58024400

08102310 <LL_RCC_PLL3P_IsEnabled>:
  * @brief  Check if PLL3 P is enabled
  * @rmtoll PLLCFGR           DIVP3EN         LL_RCC_PLL3P_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3P_IsEnabled(void)
{
 8102310:	b480      	push	{r7}
 8102312:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP3EN) == RCC_PLLCFGR_DIVP3EN) ? 1UL : 0UL);
 8102314:	4b07      	ldr	r3, [pc, #28]	; (8102334 <LL_RCC_PLL3P_IsEnabled+0x24>)
 8102316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102318:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 810231c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8102320:	d101      	bne.n	8102326 <LL_RCC_PLL3P_IsEnabled+0x16>
 8102322:	2301      	movs	r3, #1
 8102324:	e000      	b.n	8102328 <LL_RCC_PLL3P_IsEnabled+0x18>
 8102326:	2300      	movs	r3, #0
}
 8102328:	4618      	mov	r0, r3
 810232a:	46bd      	mov	sp, r7
 810232c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102330:	4770      	bx	lr
 8102332:	bf00      	nop
 8102334:	58024400 	.word	0x58024400

08102338 <LL_RCC_PLL3Q_IsEnabled>:
  * @brief  Check if PLL3 Q is enabled
  * @rmtoll PLLCFGR           DIVQ3EN         LL_RCC_PLL3Q_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3Q_IsEnabled(void)
{
 8102338:	b480      	push	{r7}
 810233a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVQ3EN) == RCC_PLLCFGR_DIVQ3EN) ? 1UL : 0UL);
 810233c:	4b07      	ldr	r3, [pc, #28]	; (810235c <LL_RCC_PLL3Q_IsEnabled+0x24>)
 810233e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102340:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102344:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8102348:	d101      	bne.n	810234e <LL_RCC_PLL3Q_IsEnabled+0x16>
 810234a:	2301      	movs	r3, #1
 810234c:	e000      	b.n	8102350 <LL_RCC_PLL3Q_IsEnabled+0x18>
 810234e:	2300      	movs	r3, #0
}
 8102350:	4618      	mov	r0, r3
 8102352:	46bd      	mov	sp, r7
 8102354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102358:	4770      	bx	lr
 810235a:	bf00      	nop
 810235c:	58024400 	.word	0x58024400

08102360 <LL_RCC_PLL3R_IsEnabled>:
  * @brief  Check if PLL3 R is enabled
  * @rmtoll PLLCFGR           DIVR3EN         LL_RCC_PLL3R_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3R_IsEnabled(void)
{
 8102360:	b480      	push	{r7}
 8102362:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVR3EN) == RCC_PLLCFGR_DIVR3EN) ? 1UL : 0UL);
 8102364:	4b07      	ldr	r3, [pc, #28]	; (8102384 <LL_RCC_PLL3R_IsEnabled+0x24>)
 8102366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102368:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 810236c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8102370:	d101      	bne.n	8102376 <LL_RCC_PLL3R_IsEnabled+0x16>
 8102372:	2301      	movs	r3, #1
 8102374:	e000      	b.n	8102378 <LL_RCC_PLL3R_IsEnabled+0x18>
 8102376:	2300      	movs	r3, #0
}
 8102378:	4618      	mov	r0, r3
 810237a:	46bd      	mov	sp, r7
 810237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102380:	4770      	bx	lr
 8102382:	bf00      	nop
 8102384:	58024400 	.word	0x58024400

08102388 <LL_RCC_PLL3FRACN_IsEnabled>:
  * @brief  Check if PLL3 FRACN is enabled
  * @rmtoll PLLCFGR           PLL3FRACEN         LL_RCC_PLL3FRACN_IsEnabled
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3FRACN_IsEnabled(void)
{
 8102388:	b480      	push	{r7}
 810238a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLL3FRACEN) == RCC_PLLCFGR_PLL3FRACEN) ? 1UL : 0UL);
 810238c:	4b07      	ldr	r3, [pc, #28]	; (81023ac <LL_RCC_PLL3FRACN_IsEnabled+0x24>)
 810238e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8102394:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8102398:	d101      	bne.n	810239e <LL_RCC_PLL3FRACN_IsEnabled+0x16>
 810239a:	2301      	movs	r3, #1
 810239c:	e000      	b.n	81023a0 <LL_RCC_PLL3FRACN_IsEnabled+0x18>
 810239e:	2300      	movs	r3, #0
}
 81023a0:	4618      	mov	r0, r3
 81023a2:	46bd      	mov	sp, r7
 81023a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023a8:	4770      	bx	lr
 81023aa:	bf00      	nop
 81023ac:	58024400 	.word	0x58024400

081023b0 <LL_RCC_PLL3_GetN>:
  * @brief  Get PLL3 N Coefficient
  * @rmtoll PLL3DIVR        N3          LL_RCC_PLL3_GetN
  * @retval A value between 4 and 512
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetN(void)
{
 81023b0:	b480      	push	{r7}
 81023b2:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_N3) >>  RCC_PLL3DIVR_N3_Pos) + 1UL);
 81023b4:	4b04      	ldr	r3, [pc, #16]	; (81023c8 <LL_RCC_PLL3_GetN+0x18>)
 81023b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81023b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81023bc:	3301      	adds	r3, #1
}
 81023be:	4618      	mov	r0, r3
 81023c0:	46bd      	mov	sp, r7
 81023c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023c6:	4770      	bx	lr
 81023c8:	58024400 	.word	0x58024400

081023cc <LL_RCC_PLL3_GetM>:
  * @brief  Get PLL3 M Coefficient
  * @rmtoll PLLCKSELR       DIVM3          LL_RCC_PLL3_GetM
  * @retval A value between 0 and 63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetM(void)
{
 81023cc:	b480      	push	{r7}
 81023ce:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM3) >>  RCC_PLLCKSELR_DIVM3_Pos);
 81023d0:	4b04      	ldr	r3, [pc, #16]	; (81023e4 <LL_RCC_PLL3_GetM+0x18>)
 81023d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81023d4:	0d1b      	lsrs	r3, r3, #20
 81023d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 81023da:	4618      	mov	r0, r3
 81023dc:	46bd      	mov	sp, r7
 81023de:	f85d 7b04 	ldr.w	r7, [sp], #4
 81023e2:	4770      	bx	lr
 81023e4:	58024400 	.word	0x58024400

081023e8 <LL_RCC_PLL3_GetP>:
  * @brief  Get PLL3 P Coefficient
  * @rmtoll PLL3DIVR        P3          LL_RCC_PLL3_GetP
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetP(void)
{
 81023e8:	b480      	push	{r7}
 81023ea:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_P3) >>  RCC_PLL3DIVR_P3_Pos) + 1UL);
 81023ec:	4b05      	ldr	r3, [pc, #20]	; (8102404 <LL_RCC_PLL3_GetP+0x1c>)
 81023ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81023f0:	0a5b      	lsrs	r3, r3, #9
 81023f2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81023f6:	3301      	adds	r3, #1
}
 81023f8:	4618      	mov	r0, r3
 81023fa:	46bd      	mov	sp, r7
 81023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102400:	4770      	bx	lr
 8102402:	bf00      	nop
 8102404:	58024400 	.word	0x58024400

08102408 <LL_RCC_PLL3_GetQ>:
  * @brief  Get PLL3 Q Coefficient
  * @rmtoll PLL3DIVR        Q3          LL_RCC_PLL3_GetQ
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetQ(void)
{
 8102408:	b480      	push	{r7}
 810240a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_Q3) >>  RCC_PLL3DIVR_Q3_Pos) + 1UL);
 810240c:	4b05      	ldr	r3, [pc, #20]	; (8102424 <LL_RCC_PLL3_GetQ+0x1c>)
 810240e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102410:	0c1b      	lsrs	r3, r3, #16
 8102412:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102416:	3301      	adds	r3, #1
}
 8102418:	4618      	mov	r0, r3
 810241a:	46bd      	mov	sp, r7
 810241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102420:	4770      	bx	lr
 8102422:	bf00      	nop
 8102424:	58024400 	.word	0x58024400

08102428 <LL_RCC_PLL3_GetR>:
  * @brief  Get PLL3 R Coefficient
  * @rmtoll PLL3DIVR        R3          LL_RCC_PLL3_GetR
  * @retval A value between 1 and 128
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetR(void)
{
 8102428:	b480      	push	{r7}
 810242a:	af00      	add	r7, sp, #0
  return (uint32_t)((READ_BIT(RCC->PLL3DIVR, RCC_PLL3DIVR_R3) >>  RCC_PLL3DIVR_R3_Pos) + 1UL);
 810242c:	4b05      	ldr	r3, [pc, #20]	; (8102444 <LL_RCC_PLL3_GetR+0x1c>)
 810242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8102430:	0e1b      	lsrs	r3, r3, #24
 8102432:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8102436:	3301      	adds	r3, #1
}
 8102438:	4618      	mov	r0, r3
 810243a:	46bd      	mov	sp, r7
 810243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102440:	4770      	bx	lr
 8102442:	bf00      	nop
 8102444:	58024400 	.word	0x58024400

08102448 <LL_RCC_PLL3_GetFRACN>:
  * @brief  Get PLL3 FRACN Coefficient
  * @rmtoll PLL3FRACR      FRACN3          LL_RCC_PLL3_GetFRACN
  * @retval A value between 0 and 8191 (0x1FFF)
  */
__STATIC_INLINE uint32_t LL_RCC_PLL3_GetFRACN(void)
{
 8102448:	b480      	push	{r7}
 810244a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLL3FRACR, RCC_PLL3FRACR_FRACN3) >>  RCC_PLL3FRACR_FRACN3_Pos);
 810244c:	4b04      	ldr	r3, [pc, #16]	; (8102460 <LL_RCC_PLL3_GetFRACN+0x18>)
 810244e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8102450:	08db      	lsrs	r3, r3, #3
 8102452:	f3c3 030c 	ubfx	r3, r3, #0, #13
}
 8102456:	4618      	mov	r0, r3
 8102458:	46bd      	mov	sp, r7
 810245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810245e:	4770      	bx	lr
 8102460:	58024400 	.word	0x58024400

08102464 <LL_RCC_GetPLL1ClockFreq>:
  * @brief  Return PLL1 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL1ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8102464:	b580      	push	{r7, lr}
 8102466:	b08a      	sub	sp, #40	; 0x28
 8102468:	af02      	add	r7, sp, #8
 810246a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 810246c:	2300      	movs	r3, #0
 810246e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 8102470:	2300      	movs	r3, #0
 8102472:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 8102474:	f7ff fdc6 	bl	8102004 <LL_RCC_PLL_GetSource>
 8102478:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 810247a:	697b      	ldr	r3, [r7, #20]
 810247c:	2b02      	cmp	r3, #2
 810247e:	d01f      	beq.n	81024c0 <LL_RCC_GetPLL1ClockFreq+0x5c>
 8102480:	697b      	ldr	r3, [r7, #20]
 8102482:	2b02      	cmp	r3, #2
 8102484:	d824      	bhi.n	81024d0 <LL_RCC_GetPLL1ClockFreq+0x6c>
 8102486:	697b      	ldr	r3, [r7, #20]
 8102488:	2b00      	cmp	r3, #0
 810248a:	d003      	beq.n	8102494 <LL_RCC_GetPLL1ClockFreq+0x30>
 810248c:	697b      	ldr	r3, [r7, #20]
 810248e:	2b01      	cmp	r3, #1
 8102490:	d00e      	beq.n	81024b0 <LL_RCC_GetPLL1ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 8102492:	e01d      	b.n	81024d0 <LL_RCC_GetPLL1ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 8102494:	f7ff fcf8 	bl	8101e88 <LL_RCC_HSI_IsReady>
 8102498:	4603      	mov	r3, r0
 810249a:	2b00      	cmp	r3, #0
 810249c:	d01a      	beq.n	81024d4 <LL_RCC_GetPLL1ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 810249e:	f7ff fd05 	bl	8101eac <LL_RCC_HSI_GetDivider>
 81024a2:	4603      	mov	r3, r0
 81024a4:	08db      	lsrs	r3, r3, #3
 81024a6:	4a38      	ldr	r2, [pc, #224]	; (8102588 <LL_RCC_GetPLL1ClockFreq+0x124>)
 81024a8:	fa42 f303 	asr.w	r3, r2, r3
 81024ac:	61fb      	str	r3, [r7, #28]
      break;
 81024ae:	e011      	b.n	81024d4 <LL_RCC_GetPLL1ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 81024b0:	f7ff fd0a 	bl	8101ec8 <LL_RCC_CSI_IsReady>
 81024b4:	4603      	mov	r3, r0
 81024b6:	2b00      	cmp	r3, #0
 81024b8:	d00e      	beq.n	81024d8 <LL_RCC_GetPLL1ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 81024ba:	4b34      	ldr	r3, [pc, #208]	; (810258c <LL_RCC_GetPLL1ClockFreq+0x128>)
 81024bc:	61fb      	str	r3, [r7, #28]
      break;
 81024be:	e00b      	b.n	81024d8 <LL_RCC_GetPLL1ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 81024c0:	f7ff fcce 	bl	8101e60 <LL_RCC_HSE_IsReady>
 81024c4:	4603      	mov	r3, r0
 81024c6:	2b00      	cmp	r3, #0
 81024c8:	d008      	beq.n	81024dc <LL_RCC_GetPLL1ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 81024ca:	4b31      	ldr	r3, [pc, #196]	; (8102590 <LL_RCC_GetPLL1ClockFreq+0x12c>)
 81024cc:	61fb      	str	r3, [r7, #28]
      break;
 81024ce:	e005      	b.n	81024dc <LL_RCC_GetPLL1ClockFreq+0x78>
      break;
 81024d0:	bf00      	nop
 81024d2:	e004      	b.n	81024de <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 81024d4:	bf00      	nop
 81024d6:	e002      	b.n	81024de <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 81024d8:	bf00      	nop
 81024da:	e000      	b.n	81024de <LL_RCC_GetPLL1ClockFreq+0x7a>
      break;
 81024dc:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 81024de:	687b      	ldr	r3, [r7, #4]
 81024e0:	2200      	movs	r2, #0
 81024e2:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 81024e4:	687b      	ldr	r3, [r7, #4]
 81024e6:	2200      	movs	r2, #0
 81024e8:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 81024ea:	687b      	ldr	r3, [r7, #4]
 81024ec:	2200      	movs	r2, #0
 81024ee:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL1_GetM();
 81024f0:	f7ff fdf2 	bl	81020d8 <LL_RCC_PLL1_GetM>
 81024f4:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL1_GetN();
 81024f6:	f7ff fde1 	bl	81020bc <LL_RCC_PLL1_GetN>
 81024fa:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL1FRACN_IsEnabled() != 0U)
 81024fc:	f7ff fdcc 	bl	8102098 <LL_RCC_PLL1FRACN_IsEnabled>
 8102500:	4603      	mov	r3, r0
 8102502:	2b00      	cmp	r3, #0
 8102504:	d002      	beq.n	810250c <LL_RCC_GetPLL1ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL1_GetFRACN();
 8102506:	f7ff fe25 	bl	8102154 <LL_RCC_PLL1_GetFRACN>
 810250a:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 810250c:	693b      	ldr	r3, [r7, #16]
 810250e:	2b00      	cmp	r3, #0
 8102510:	d035      	beq.n	810257e <LL_RCC_GetPLL1ClockFreq+0x11a>
  {
    if (LL_RCC_PLL1P_IsEnabled() != 0U)
 8102512:	f7ff fd85 	bl	8102020 <LL_RCC_PLL1P_IsEnabled>
 8102516:	4603      	mov	r3, r0
 8102518:	2b00      	cmp	r3, #0
 810251a:	d00c      	beq.n	8102536 <LL_RCC_GetPLL1ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetP());
 810251c:	f7ff fdea 	bl	81020f4 <LL_RCC_PLL1_GetP>
 8102520:	4603      	mov	r3, r0
 8102522:	9300      	str	r3, [sp, #0]
 8102524:	69bb      	ldr	r3, [r7, #24]
 8102526:	68fa      	ldr	r2, [r7, #12]
 8102528:	6939      	ldr	r1, [r7, #16]
 810252a:	69f8      	ldr	r0, [r7, #28]
 810252c:	f000 f964 	bl	81027f8 <LL_RCC_CalcPLLClockFreq>
 8102530:	4602      	mov	r2, r0
 8102532:	687b      	ldr	r3, [r7, #4]
 8102534:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL1Q_IsEnabled() != 0U)
 8102536:	f7ff fd87 	bl	8102048 <LL_RCC_PLL1Q_IsEnabled>
 810253a:	4603      	mov	r3, r0
 810253c:	2b00      	cmp	r3, #0
 810253e:	d00c      	beq.n	810255a <LL_RCC_GetPLL1ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetQ());
 8102540:	f7ff fde8 	bl	8102114 <LL_RCC_PLL1_GetQ>
 8102544:	4603      	mov	r3, r0
 8102546:	9300      	str	r3, [sp, #0]
 8102548:	69bb      	ldr	r3, [r7, #24]
 810254a:	68fa      	ldr	r2, [r7, #12]
 810254c:	6939      	ldr	r1, [r7, #16]
 810254e:	69f8      	ldr	r0, [r7, #28]
 8102550:	f000 f952 	bl	81027f8 <LL_RCC_CalcPLLClockFreq>
 8102554:	4602      	mov	r2, r0
 8102556:	687b      	ldr	r3, [r7, #4]
 8102558:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL1R_IsEnabled() != 0U)
 810255a:	f7ff fd89 	bl	8102070 <LL_RCC_PLL1R_IsEnabled>
 810255e:	4603      	mov	r3, r0
 8102560:	2b00      	cmp	r3, #0
 8102562:	d00c      	beq.n	810257e <LL_RCC_GetPLL1ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL1_GetR());
 8102564:	f7ff fde6 	bl	8102134 <LL_RCC_PLL1_GetR>
 8102568:	4603      	mov	r3, r0
 810256a:	9300      	str	r3, [sp, #0]
 810256c:	69bb      	ldr	r3, [r7, #24]
 810256e:	68fa      	ldr	r2, [r7, #12]
 8102570:	6939      	ldr	r1, [r7, #16]
 8102572:	69f8      	ldr	r0, [r7, #28]
 8102574:	f000 f940 	bl	81027f8 <LL_RCC_CalcPLLClockFreq>
 8102578:	4602      	mov	r2, r0
 810257a:	687b      	ldr	r3, [r7, #4]
 810257c:	609a      	str	r2, [r3, #8]
    }
  }
}
 810257e:	bf00      	nop
 8102580:	3720      	adds	r7, #32
 8102582:	46bd      	mov	sp, r7
 8102584:	bd80      	pop	{r7, pc}
 8102586:	bf00      	nop
 8102588:	03d09000 	.word	0x03d09000
 810258c:	003d0900 	.word	0x003d0900
 8102590:	017d7840 	.word	0x017d7840

08102594 <LL_RCC_GetPLL2ClockFreq>:
  * @brief  Return PLL2 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL2ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 8102594:	b580      	push	{r7, lr}
 8102596:	b08a      	sub	sp, #40	; 0x28
 8102598:	af02      	add	r7, sp, #8
 810259a:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 810259c:	2300      	movs	r3, #0
 810259e:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 81025a0:	2300      	movs	r3, #0
 81025a2:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 81025a4:	f7ff fd2e 	bl	8102004 <LL_RCC_PLL_GetSource>
 81025a8:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 81025aa:	697b      	ldr	r3, [r7, #20]
 81025ac:	2b02      	cmp	r3, #2
 81025ae:	d01f      	beq.n	81025f0 <LL_RCC_GetPLL2ClockFreq+0x5c>
 81025b0:	697b      	ldr	r3, [r7, #20]
 81025b2:	2b02      	cmp	r3, #2
 81025b4:	d824      	bhi.n	8102600 <LL_RCC_GetPLL2ClockFreq+0x6c>
 81025b6:	697b      	ldr	r3, [r7, #20]
 81025b8:	2b00      	cmp	r3, #0
 81025ba:	d003      	beq.n	81025c4 <LL_RCC_GetPLL2ClockFreq+0x30>
 81025bc:	697b      	ldr	r3, [r7, #20]
 81025be:	2b01      	cmp	r3, #1
 81025c0:	d00e      	beq.n	81025e0 <LL_RCC_GetPLL2ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 81025c2:	e01d      	b.n	8102600 <LL_RCC_GetPLL2ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 81025c4:	f7ff fc60 	bl	8101e88 <LL_RCC_HSI_IsReady>
 81025c8:	4603      	mov	r3, r0
 81025ca:	2b00      	cmp	r3, #0
 81025cc:	d01a      	beq.n	8102604 <LL_RCC_GetPLL2ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 81025ce:	f7ff fc6d 	bl	8101eac <LL_RCC_HSI_GetDivider>
 81025d2:	4603      	mov	r3, r0
 81025d4:	08db      	lsrs	r3, r3, #3
 81025d6:	4a38      	ldr	r2, [pc, #224]	; (81026b8 <LL_RCC_GetPLL2ClockFreq+0x124>)
 81025d8:	fa42 f303 	asr.w	r3, r2, r3
 81025dc:	61fb      	str	r3, [r7, #28]
      break;
 81025de:	e011      	b.n	8102604 <LL_RCC_GetPLL2ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 81025e0:	f7ff fc72 	bl	8101ec8 <LL_RCC_CSI_IsReady>
 81025e4:	4603      	mov	r3, r0
 81025e6:	2b00      	cmp	r3, #0
 81025e8:	d00e      	beq.n	8102608 <LL_RCC_GetPLL2ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 81025ea:	4b34      	ldr	r3, [pc, #208]	; (81026bc <LL_RCC_GetPLL2ClockFreq+0x128>)
 81025ec:	61fb      	str	r3, [r7, #28]
      break;
 81025ee:	e00b      	b.n	8102608 <LL_RCC_GetPLL2ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 81025f0:	f7ff fc36 	bl	8101e60 <LL_RCC_HSE_IsReady>
 81025f4:	4603      	mov	r3, r0
 81025f6:	2b00      	cmp	r3, #0
 81025f8:	d008      	beq.n	810260c <LL_RCC_GetPLL2ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 81025fa:	4b31      	ldr	r3, [pc, #196]	; (81026c0 <LL_RCC_GetPLL2ClockFreq+0x12c>)
 81025fc:	61fb      	str	r3, [r7, #28]
      break;
 81025fe:	e005      	b.n	810260c <LL_RCC_GetPLL2ClockFreq+0x78>
      break;
 8102600:	bf00      	nop
 8102602:	e004      	b.n	810260e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8102604:	bf00      	nop
 8102606:	e002      	b.n	810260e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 8102608:	bf00      	nop
 810260a:	e000      	b.n	810260e <LL_RCC_GetPLL2ClockFreq+0x7a>
      break;
 810260c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 810260e:	687b      	ldr	r3, [r7, #4]
 8102610:	2200      	movs	r2, #0
 8102612:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8102614:	687b      	ldr	r3, [r7, #4]
 8102616:	2200      	movs	r2, #0
 8102618:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 810261a:	687b      	ldr	r3, [r7, #4]
 810261c:	2200      	movs	r2, #0
 810261e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL2_GetM();
 8102620:	f7ff fe16 	bl	8102250 <LL_RCC_PLL2_GetM>
 8102624:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL2_GetN();
 8102626:	f7ff fe05 	bl	8102234 <LL_RCC_PLL2_GetN>
 810262a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL2FRACN_IsEnabled() != 0U)
 810262c:	f7ff fdf0 	bl	8102210 <LL_RCC_PLL2FRACN_IsEnabled>
 8102630:	4603      	mov	r3, r0
 8102632:	2b00      	cmp	r3, #0
 8102634:	d002      	beq.n	810263c <LL_RCC_GetPLL2ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL2_GetFRACN();
 8102636:	f7ff fe49 	bl	81022cc <LL_RCC_PLL2_GetFRACN>
 810263a:	61b8      	str	r0, [r7, #24]
  }

  if (m != 0U)
 810263c:	693b      	ldr	r3, [r7, #16]
 810263e:	2b00      	cmp	r3, #0
 8102640:	d035      	beq.n	81026ae <LL_RCC_GetPLL2ClockFreq+0x11a>
  {
    if (LL_RCC_PLL2P_IsEnabled() != 0U)
 8102642:	f7ff fda9 	bl	8102198 <LL_RCC_PLL2P_IsEnabled>
 8102646:	4603      	mov	r3, r0
 8102648:	2b00      	cmp	r3, #0
 810264a:	d00c      	beq.n	8102666 <LL_RCC_GetPLL2ClockFreq+0xd2>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetP());
 810264c:	f7ff fe0e 	bl	810226c <LL_RCC_PLL2_GetP>
 8102650:	4603      	mov	r3, r0
 8102652:	9300      	str	r3, [sp, #0]
 8102654:	69bb      	ldr	r3, [r7, #24]
 8102656:	68fa      	ldr	r2, [r7, #12]
 8102658:	6939      	ldr	r1, [r7, #16]
 810265a:	69f8      	ldr	r0, [r7, #28]
 810265c:	f000 f8cc 	bl	81027f8 <LL_RCC_CalcPLLClockFreq>
 8102660:	4602      	mov	r2, r0
 8102662:	687b      	ldr	r3, [r7, #4]
 8102664:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL2Q_IsEnabled() != 0U)
 8102666:	f7ff fdab 	bl	81021c0 <LL_RCC_PLL2Q_IsEnabled>
 810266a:	4603      	mov	r3, r0
 810266c:	2b00      	cmp	r3, #0
 810266e:	d00c      	beq.n	810268a <LL_RCC_GetPLL2ClockFreq+0xf6>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetQ());
 8102670:	f7ff fe0c 	bl	810228c <LL_RCC_PLL2_GetQ>
 8102674:	4603      	mov	r3, r0
 8102676:	9300      	str	r3, [sp, #0]
 8102678:	69bb      	ldr	r3, [r7, #24]
 810267a:	68fa      	ldr	r2, [r7, #12]
 810267c:	6939      	ldr	r1, [r7, #16]
 810267e:	69f8      	ldr	r0, [r7, #28]
 8102680:	f000 f8ba 	bl	81027f8 <LL_RCC_CalcPLLClockFreq>
 8102684:	4602      	mov	r2, r0
 8102686:	687b      	ldr	r3, [r7, #4]
 8102688:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL2R_IsEnabled() != 0U)
 810268a:	f7ff fdad 	bl	81021e8 <LL_RCC_PLL2R_IsEnabled>
 810268e:	4603      	mov	r3, r0
 8102690:	2b00      	cmp	r3, #0
 8102692:	d00c      	beq.n	81026ae <LL_RCC_GetPLL2ClockFreq+0x11a>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL2_GetR());
 8102694:	f7ff fe0a 	bl	81022ac <LL_RCC_PLL2_GetR>
 8102698:	4603      	mov	r3, r0
 810269a:	9300      	str	r3, [sp, #0]
 810269c:	69bb      	ldr	r3, [r7, #24]
 810269e:	68fa      	ldr	r2, [r7, #12]
 81026a0:	6939      	ldr	r1, [r7, #16]
 81026a2:	69f8      	ldr	r0, [r7, #28]
 81026a4:	f000 f8a8 	bl	81027f8 <LL_RCC_CalcPLLClockFreq>
 81026a8:	4602      	mov	r2, r0
 81026aa:	687b      	ldr	r3, [r7, #4]
 81026ac:	609a      	str	r2, [r3, #8]
    }
  }
}
 81026ae:	bf00      	nop
 81026b0:	3720      	adds	r7, #32
 81026b2:	46bd      	mov	sp, r7
 81026b4:	bd80      	pop	{r7, pc}
 81026b6:	bf00      	nop
 81026b8:	03d09000 	.word	0x03d09000
 81026bc:	003d0900 	.word	0x003d0900
 81026c0:	017d7840 	.word	0x017d7840

081026c4 <LL_RCC_GetPLL3ClockFreq>:
  * @brief  Return PLL3 clocks frequencies
  * @note   LL_RCC_PERIPH_FREQUENCY_NO returned for non activated output or oscillator not ready
  * @retval None
  */
void LL_RCC_GetPLL3ClockFreq(LL_PLL_ClocksTypeDef *PLL_Clocks)
{
 81026c4:	b580      	push	{r7, lr}
 81026c6:	b08a      	sub	sp, #40	; 0x28
 81026c8:	af02      	add	r7, sp, #8
 81026ca:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = LL_RCC_PERIPH_FREQUENCY_NO, pllsource;
 81026cc:	2300      	movs	r3, #0
 81026ce:	61fb      	str	r3, [r7, #28]
  uint32_t m, n, fracn = 0U;
 81026d0:	2300      	movs	r3, #0
 81026d2:	61bb      	str	r3, [r7, #24]

  /* PLL_VCO = (HSE_VALUE, CSI_VALUE or HSI_VALUE/HSIDIV) / PLLM * (PLLN + FRACN)
     SYSCLK = PLL_VCO / PLLP
  */
  pllsource = LL_RCC_PLL_GetSource();
 81026d4:	f7ff fc96 	bl	8102004 <LL_RCC_PLL_GetSource>
 81026d8:	6178      	str	r0, [r7, #20]

  switch (pllsource)
 81026da:	697b      	ldr	r3, [r7, #20]
 81026dc:	2b02      	cmp	r3, #2
 81026de:	d01f      	beq.n	8102720 <LL_RCC_GetPLL3ClockFreq+0x5c>
 81026e0:	697b      	ldr	r3, [r7, #20]
 81026e2:	2b02      	cmp	r3, #2
 81026e4:	d824      	bhi.n	8102730 <LL_RCC_GetPLL3ClockFreq+0x6c>
 81026e6:	697b      	ldr	r3, [r7, #20]
 81026e8:	2b00      	cmp	r3, #0
 81026ea:	d003      	beq.n	81026f4 <LL_RCC_GetPLL3ClockFreq+0x30>
 81026ec:	697b      	ldr	r3, [r7, #20]
 81026ee:	2b01      	cmp	r3, #1
 81026f0:	d00e      	beq.n	8102710 <LL_RCC_GetPLL3ClockFreq+0x4c>
      break;

    case LL_RCC_PLLSOURCE_NONE:
    default:
      /* PLL clock disabled */
      break;
 81026f2:	e01d      	b.n	8102730 <LL_RCC_GetPLL3ClockFreq+0x6c>
      if (LL_RCC_HSI_IsReady() != 0U)
 81026f4:	f7ff fbc8 	bl	8101e88 <LL_RCC_HSI_IsReady>
 81026f8:	4603      	mov	r3, r0
 81026fa:	2b00      	cmp	r3, #0
 81026fc:	d01a      	beq.n	8102734 <LL_RCC_GetPLL3ClockFreq+0x70>
        pllinputfreq = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 81026fe:	f7ff fbd5 	bl	8101eac <LL_RCC_HSI_GetDivider>
 8102702:	4603      	mov	r3, r0
 8102704:	08db      	lsrs	r3, r3, #3
 8102706:	4a39      	ldr	r2, [pc, #228]	; (81027ec <LL_RCC_GetPLL3ClockFreq+0x128>)
 8102708:	fa42 f303 	asr.w	r3, r2, r3
 810270c:	61fb      	str	r3, [r7, #28]
      break;
 810270e:	e011      	b.n	8102734 <LL_RCC_GetPLL3ClockFreq+0x70>
      if (LL_RCC_CSI_IsReady() != 0U)
 8102710:	f7ff fbda 	bl	8101ec8 <LL_RCC_CSI_IsReady>
 8102714:	4603      	mov	r3, r0
 8102716:	2b00      	cmp	r3, #0
 8102718:	d00e      	beq.n	8102738 <LL_RCC_GetPLL3ClockFreq+0x74>
        pllinputfreq = CSI_VALUE;
 810271a:	4b35      	ldr	r3, [pc, #212]	; (81027f0 <LL_RCC_GetPLL3ClockFreq+0x12c>)
 810271c:	61fb      	str	r3, [r7, #28]
      break;
 810271e:	e00b      	b.n	8102738 <LL_RCC_GetPLL3ClockFreq+0x74>
      if (LL_RCC_HSE_IsReady() != 0U)
 8102720:	f7ff fb9e 	bl	8101e60 <LL_RCC_HSE_IsReady>
 8102724:	4603      	mov	r3, r0
 8102726:	2b00      	cmp	r3, #0
 8102728:	d008      	beq.n	810273c <LL_RCC_GetPLL3ClockFreq+0x78>
        pllinputfreq = HSE_VALUE;
 810272a:	4b32      	ldr	r3, [pc, #200]	; (81027f4 <LL_RCC_GetPLL3ClockFreq+0x130>)
 810272c:	61fb      	str	r3, [r7, #28]
      break;
 810272e:	e005      	b.n	810273c <LL_RCC_GetPLL3ClockFreq+0x78>
      break;
 8102730:	bf00      	nop
 8102732:	e004      	b.n	810273e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8102734:	bf00      	nop
 8102736:	e002      	b.n	810273e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 8102738:	bf00      	nop
 810273a:	e000      	b.n	810273e <LL_RCC_GetPLL3ClockFreq+0x7a>
      break;
 810273c:	bf00      	nop
  }

  PLL_Clocks->PLL_P_Frequency = 0U;
 810273e:	687b      	ldr	r3, [r7, #4]
 8102740:	2200      	movs	r2, #0
 8102742:	601a      	str	r2, [r3, #0]
  PLL_Clocks->PLL_Q_Frequency = 0U;
 8102744:	687b      	ldr	r3, [r7, #4]
 8102746:	2200      	movs	r2, #0
 8102748:	605a      	str	r2, [r3, #4]
  PLL_Clocks->PLL_R_Frequency = 0U;
 810274a:	687b      	ldr	r3, [r7, #4]
 810274c:	2200      	movs	r2, #0
 810274e:	609a      	str	r2, [r3, #8]

  m = LL_RCC_PLL3_GetM();
 8102750:	f7ff fe3c 	bl	81023cc <LL_RCC_PLL3_GetM>
 8102754:	6138      	str	r0, [r7, #16]
  n = LL_RCC_PLL3_GetN();
 8102756:	f7ff fe2b 	bl	81023b0 <LL_RCC_PLL3_GetN>
 810275a:	60f8      	str	r0, [r7, #12]
  if (LL_RCC_PLL3FRACN_IsEnabled() != 0U)
 810275c:	f7ff fe14 	bl	8102388 <LL_RCC_PLL3FRACN_IsEnabled>
 8102760:	4603      	mov	r3, r0
 8102762:	2b00      	cmp	r3, #0
 8102764:	d002      	beq.n	810276c <LL_RCC_GetPLL3ClockFreq+0xa8>
  {
    fracn = LL_RCC_PLL3_GetFRACN();
 8102766:	f7ff fe6f 	bl	8102448 <LL_RCC_PLL3_GetFRACN>
 810276a:	61b8      	str	r0, [r7, #24]
  }

  if ((m != 0U) && (pllinputfreq != 0U))
 810276c:	693b      	ldr	r3, [r7, #16]
 810276e:	2b00      	cmp	r3, #0
 8102770:	d038      	beq.n	81027e4 <LL_RCC_GetPLL3ClockFreq+0x120>
 8102772:	69fb      	ldr	r3, [r7, #28]
 8102774:	2b00      	cmp	r3, #0
 8102776:	d035      	beq.n	81027e4 <LL_RCC_GetPLL3ClockFreq+0x120>
  {
    if (LL_RCC_PLL3P_IsEnabled() != 0U)
 8102778:	f7ff fdca 	bl	8102310 <LL_RCC_PLL3P_IsEnabled>
 810277c:	4603      	mov	r3, r0
 810277e:	2b00      	cmp	r3, #0
 8102780:	d00c      	beq.n	810279c <LL_RCC_GetPLL3ClockFreq+0xd8>
    {
      PLL_Clocks->PLL_P_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetP());
 8102782:	f7ff fe31 	bl	81023e8 <LL_RCC_PLL3_GetP>
 8102786:	4603      	mov	r3, r0
 8102788:	9300      	str	r3, [sp, #0]
 810278a:	69bb      	ldr	r3, [r7, #24]
 810278c:	68fa      	ldr	r2, [r7, #12]
 810278e:	6939      	ldr	r1, [r7, #16]
 8102790:	69f8      	ldr	r0, [r7, #28]
 8102792:	f000 f831 	bl	81027f8 <LL_RCC_CalcPLLClockFreq>
 8102796:	4602      	mov	r2, r0
 8102798:	687b      	ldr	r3, [r7, #4]
 810279a:	601a      	str	r2, [r3, #0]
    }

    if (LL_RCC_PLL3Q_IsEnabled() != 0U)
 810279c:	f7ff fdcc 	bl	8102338 <LL_RCC_PLL3Q_IsEnabled>
 81027a0:	4603      	mov	r3, r0
 81027a2:	2b00      	cmp	r3, #0
 81027a4:	d00c      	beq.n	81027c0 <LL_RCC_GetPLL3ClockFreq+0xfc>
    {
      PLL_Clocks->PLL_Q_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetQ());
 81027a6:	f7ff fe2f 	bl	8102408 <LL_RCC_PLL3_GetQ>
 81027aa:	4603      	mov	r3, r0
 81027ac:	9300      	str	r3, [sp, #0]
 81027ae:	69bb      	ldr	r3, [r7, #24]
 81027b0:	68fa      	ldr	r2, [r7, #12]
 81027b2:	6939      	ldr	r1, [r7, #16]
 81027b4:	69f8      	ldr	r0, [r7, #28]
 81027b6:	f000 f81f 	bl	81027f8 <LL_RCC_CalcPLLClockFreq>
 81027ba:	4602      	mov	r2, r0
 81027bc:	687b      	ldr	r3, [r7, #4]
 81027be:	605a      	str	r2, [r3, #4]
    }

    if (LL_RCC_PLL3R_IsEnabled() != 0U)
 81027c0:	f7ff fdce 	bl	8102360 <LL_RCC_PLL3R_IsEnabled>
 81027c4:	4603      	mov	r3, r0
 81027c6:	2b00      	cmp	r3, #0
 81027c8:	d00c      	beq.n	81027e4 <LL_RCC_GetPLL3ClockFreq+0x120>
    {
      PLL_Clocks->PLL_R_Frequency = LL_RCC_CalcPLLClockFreq(pllinputfreq, m, n, fracn, LL_RCC_PLL3_GetR());
 81027ca:	f7ff fe2d 	bl	8102428 <LL_RCC_PLL3_GetR>
 81027ce:	4603      	mov	r3, r0
 81027d0:	9300      	str	r3, [sp, #0]
 81027d2:	69bb      	ldr	r3, [r7, #24]
 81027d4:	68fa      	ldr	r2, [r7, #12]
 81027d6:	6939      	ldr	r1, [r7, #16]
 81027d8:	69f8      	ldr	r0, [r7, #28]
 81027da:	f000 f80d 	bl	81027f8 <LL_RCC_CalcPLLClockFreq>
 81027de:	4602      	mov	r2, r0
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	609a      	str	r2, [r3, #8]
    }
  }
}
 81027e4:	bf00      	nop
 81027e6:	3720      	adds	r7, #32
 81027e8:	46bd      	mov	sp, r7
 81027ea:	bd80      	pop	{r7, pc}
 81027ec:	03d09000 	.word	0x03d09000
 81027f0:	003d0900 	.word	0x003d0900
 81027f4:	017d7840 	.word	0x017d7840

081027f8 <LL_RCC_CalcPLLClockFreq>:
  * @param  PQR    VCO output divider (P, Q or R)
  *                Between 1 and 128, except for PLL1P Odd value not allowed
  * @retval PLL1 clock frequency (in Hz)
  */
uint32_t LL_RCC_CalcPLLClockFreq(uint32_t PLLInputFreq, uint32_t M, uint32_t N, uint32_t FRACN, uint32_t PQR)
{
 81027f8:	b480      	push	{r7}
 81027fa:	b087      	sub	sp, #28
 81027fc:	af00      	add	r7, sp, #0
 81027fe:	60f8      	str	r0, [r7, #12]
 8102800:	60b9      	str	r1, [r7, #8]
 8102802:	607a      	str	r2, [r7, #4]
 8102804:	603b      	str	r3, [r7, #0]
  float_t freq;

  freq = ((float_t)PLLInputFreq / (float_t)M) * ((float_t)N + ((float_t)FRACN / (float_t)0x2000));
 8102806:	68fb      	ldr	r3, [r7, #12]
 8102808:	ee07 3a90 	vmov	s15, r3
 810280c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102810:	68bb      	ldr	r3, [r7, #8]
 8102812:	ee07 3a90 	vmov	s15, r3
 8102816:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810281a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810281e:	687b      	ldr	r3, [r7, #4]
 8102820:	ee07 3a90 	vmov	s15, r3
 8102824:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8102828:	683b      	ldr	r3, [r7, #0]
 810282a:	ee07 3a90 	vmov	s15, r3
 810282e:	eeb8 6a67 	vcvt.f32.u32	s12, s15
 8102832:	eddf 5a10 	vldr	s11, [pc, #64]	; 8102874 <LL_RCC_CalcPLLClockFreq+0x7c>
 8102836:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810283a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810283e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8102842:	edc7 7a05 	vstr	s15, [r7, #20]

  freq = freq / (float_t)PQR;
 8102846:	6a3b      	ldr	r3, [r7, #32]
 8102848:	ee07 3a90 	vmov	s15, r3
 810284c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8102850:	edd7 6a05 	vldr	s13, [r7, #20]
 8102854:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8102858:	edc7 7a05 	vstr	s15, [r7, #20]

  return (uint32_t)freq;
 810285c:	edd7 7a05 	vldr	s15, [r7, #20]
 8102860:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8102864:	ee17 3a90 	vmov	r3, s15
}
 8102868:	4618      	mov	r0, r3
 810286a:	371c      	adds	r7, #28
 810286c:	46bd      	mov	sp, r7
 810286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102872:	4770      	bx	lr
 8102874:	46000000 	.word	0x46000000

08102878 <LL_RCC_GetUSARTClockFreq>:
  *         @arg @ref LL_RCC_USART234578_CLKSOURCE
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8102878:	b590      	push	{r4, r7, lr}
 810287a:	b087      	sub	sp, #28
 810287c:	af00      	add	r7, sp, #0
 810287e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8102880:	2300      	movs	r3, #0
 8102882:	617b      	str	r3, [r7, #20]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8102884:	6878      	ldr	r0, [r7, #4]
 8102886:	f7ff fbb1 	bl	8101fec <LL_RCC_GetUSARTClockSource>
 810288a:	4603      	mov	r3, r0
 810288c:	4a62      	ldr	r2, [pc, #392]	; (8102a18 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 810288e:	4293      	cmp	r3, r2
 8102890:	f000 80a9 	beq.w	81029e6 <LL_RCC_GetUSARTClockFreq+0x16e>
 8102894:	4a60      	ldr	r2, [pc, #384]	; (8102a18 <LL_RCC_GetUSARTClockFreq+0x1a0>)
 8102896:	4293      	cmp	r3, r2
 8102898:	f200 80ae 	bhi.w	81029f8 <LL_RCC_GetUSARTClockFreq+0x180>
 810289c:	4a5f      	ldr	r2, [pc, #380]	; (8102a1c <LL_RCC_GetUSARTClockFreq+0x1a4>)
 810289e:	4293      	cmp	r3, r2
 81028a0:	f000 80a1 	beq.w	81029e6 <LL_RCC_GetUSARTClockFreq+0x16e>
 81028a4:	4a5d      	ldr	r2, [pc, #372]	; (8102a1c <LL_RCC_GetUSARTClockFreq+0x1a4>)
 81028a6:	4293      	cmp	r3, r2
 81028a8:	f200 80a6 	bhi.w	81029f8 <LL_RCC_GetUSARTClockFreq+0x180>
 81028ac:	4a5c      	ldr	r2, [pc, #368]	; (8102a20 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 81028ae:	4293      	cmp	r3, r2
 81028b0:	f000 8091 	beq.w	81029d6 <LL_RCC_GetUSARTClockFreq+0x15e>
 81028b4:	4a5a      	ldr	r2, [pc, #360]	; (8102a20 <LL_RCC_GetUSARTClockFreq+0x1a8>)
 81028b6:	4293      	cmp	r3, r2
 81028b8:	f200 809e 	bhi.w	81029f8 <LL_RCC_GetUSARTClockFreq+0x180>
 81028bc:	4a59      	ldr	r2, [pc, #356]	; (8102a24 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 81028be:	4293      	cmp	r3, r2
 81028c0:	f000 8089 	beq.w	81029d6 <LL_RCC_GetUSARTClockFreq+0x15e>
 81028c4:	4a57      	ldr	r2, [pc, #348]	; (8102a24 <LL_RCC_GetUSARTClockFreq+0x1ac>)
 81028c6:	4293      	cmp	r3, r2
 81028c8:	f200 8096 	bhi.w	81029f8 <LL_RCC_GetUSARTClockFreq+0x180>
 81028cc:	4a56      	ldr	r2, [pc, #344]	; (8102a28 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 81028ce:	4293      	cmp	r3, r2
 81028d0:	d073      	beq.n	81029ba <LL_RCC_GetUSARTClockFreq+0x142>
 81028d2:	4a55      	ldr	r2, [pc, #340]	; (8102a28 <LL_RCC_GetUSARTClockFreq+0x1b0>)
 81028d4:	4293      	cmp	r3, r2
 81028d6:	f200 808f 	bhi.w	81029f8 <LL_RCC_GetUSARTClockFreq+0x180>
 81028da:	4a54      	ldr	r2, [pc, #336]	; (8102a2c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 81028dc:	4293      	cmp	r3, r2
 81028de:	d06c      	beq.n	81029ba <LL_RCC_GetUSARTClockFreq+0x142>
 81028e0:	4a52      	ldr	r2, [pc, #328]	; (8102a2c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 81028e2:	4293      	cmp	r3, r2
 81028e4:	f200 8088 	bhi.w	81029f8 <LL_RCC_GetUSARTClockFreq+0x180>
 81028e8:	4a51      	ldr	r2, [pc, #324]	; (8102a30 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 81028ea:	4293      	cmp	r3, r2
 81028ec:	d058      	beq.n	81029a0 <LL_RCC_GetUSARTClockFreq+0x128>
 81028ee:	4a50      	ldr	r2, [pc, #320]	; (8102a30 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 81028f0:	4293      	cmp	r3, r2
 81028f2:	f200 8081 	bhi.w	81029f8 <LL_RCC_GetUSARTClockFreq+0x180>
 81028f6:	4a4f      	ldr	r2, [pc, #316]	; (8102a34 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 81028f8:	4293      	cmp	r3, r2
 81028fa:	d051      	beq.n	81029a0 <LL_RCC_GetUSARTClockFreq+0x128>
 81028fc:	4a4d      	ldr	r2, [pc, #308]	; (8102a34 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 81028fe:	4293      	cmp	r3, r2
 8102900:	d87a      	bhi.n	81029f8 <LL_RCC_GetUSARTClockFreq+0x180>
 8102902:	4a4d      	ldr	r2, [pc, #308]	; (8102a38 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8102904:	4293      	cmp	r3, r2
 8102906:	d03e      	beq.n	8102986 <LL_RCC_GetUSARTClockFreq+0x10e>
 8102908:	4a4b      	ldr	r2, [pc, #300]	; (8102a38 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 810290a:	4293      	cmp	r3, r2
 810290c:	d874      	bhi.n	81029f8 <LL_RCC_GetUSARTClockFreq+0x180>
 810290e:	4a4b      	ldr	r2, [pc, #300]	; (8102a3c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8102910:	4293      	cmp	r3, r2
 8102912:	d038      	beq.n	8102986 <LL_RCC_GetUSARTClockFreq+0x10e>
 8102914:	4a49      	ldr	r2, [pc, #292]	; (8102a3c <LL_RCC_GetUSARTClockFreq+0x1c4>)
 8102916:	4293      	cmp	r3, r2
 8102918:	d86e      	bhi.n	81029f8 <LL_RCC_GetUSARTClockFreq+0x180>
 810291a:	4a49      	ldr	r2, [pc, #292]	; (8102a40 <LL_RCC_GetUSARTClockFreq+0x1c8>)
 810291c:	4293      	cmp	r3, r2
 810291e:	d01a      	beq.n	8102956 <LL_RCC_GetUSARTClockFreq+0xde>
 8102920:	4a48      	ldr	r2, [pc, #288]	; (8102a44 <LL_RCC_GetUSARTClockFreq+0x1cc>)
 8102922:	4293      	cmp	r3, r2
 8102924:	d168      	bne.n	81029f8 <LL_RCC_GetUSARTClockFreq+0x180>
  {
    case LL_RCC_USART16_CLKSOURCE_PCLK2:
      usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8102926:	f000 f895 	bl	8102a54 <RCC_GetSystemClockFreq>
 810292a:	4604      	mov	r4, r0
 810292c:	f7ff fb00 	bl	8101f30 <LL_RCC_GetSysPrescaler>
 8102930:	4603      	mov	r3, r0
 8102932:	0a1b      	lsrs	r3, r3, #8
 8102934:	f003 030f 	and.w	r3, r3, #15
 8102938:	4a43      	ldr	r2, [pc, #268]	; (8102a48 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 810293a:	5cd3      	ldrb	r3, [r2, r3]
 810293c:	f003 031f 	and.w	r3, r3, #31
 8102940:	fa24 f303 	lsr.w	r3, r4, r3
 8102944:	4618      	mov	r0, r3
 8102946:	f000 f8e7 	bl	8102b18 <RCC_GetHCLKClockFreq>
 810294a:	4603      	mov	r3, r0
 810294c:	4618      	mov	r0, r3
 810294e:	f000 f911 	bl	8102b74 <RCC_GetPCLK2ClockFreq>
 8102952:	6178      	str	r0, [r7, #20]
      break;
 8102954:	e05b      	b.n	8102a0e <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART234578_CLKSOURCE_PCLK1:
      usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(LL_RCC_CALC_SYSCLK_FREQ(RCC_GetSystemClockFreq(), LL_RCC_GetSysPrescaler())));
 8102956:	f000 f87d 	bl	8102a54 <RCC_GetSystemClockFreq>
 810295a:	4604      	mov	r4, r0
 810295c:	f7ff fae8 	bl	8101f30 <LL_RCC_GetSysPrescaler>
 8102960:	4603      	mov	r3, r0
 8102962:	0a1b      	lsrs	r3, r3, #8
 8102964:	f003 030f 	and.w	r3, r3, #15
 8102968:	4a37      	ldr	r2, [pc, #220]	; (8102a48 <LL_RCC_GetUSARTClockFreq+0x1d0>)
 810296a:	5cd3      	ldrb	r3, [r2, r3]
 810296c:	f003 031f 	and.w	r3, r3, #31
 8102970:	fa24 f303 	lsr.w	r3, r4, r3
 8102974:	4618      	mov	r0, r3
 8102976:	f000 f8cf 	bl	8102b18 <RCC_GetHCLKClockFreq>
 810297a:	4603      	mov	r3, r0
 810297c:	4618      	mov	r0, r3
 810297e:	f000 f8e1 	bl	8102b44 <RCC_GetPCLK1ClockFreq>
 8102982:	6178      	str	r0, [r7, #20]
      break;
 8102984:	e043      	b.n	8102a0e <LL_RCC_GetUSARTClockFreq+0x196>

    case LL_RCC_USART16_CLKSOURCE_PLL2Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL2Q:
      if (LL_RCC_PLL2_IsReady() != 0U)
 8102986:	f7ff fbf3 	bl	8102170 <LL_RCC_PLL2_IsReady>
 810298a:	4603      	mov	r3, r0
 810298c:	2b00      	cmp	r3, #0
 810298e:	d035      	beq.n	81029fc <LL_RCC_GetUSARTClockFreq+0x184>
      {
        LL_RCC_GetPLL2ClockFreq(&PLL_Clocks);
 8102990:	f107 0308 	add.w	r3, r7, #8
 8102994:	4618      	mov	r0, r3
 8102996:	f7ff fdfd 	bl	8102594 <LL_RCC_GetPLL2ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 810299a:	68fb      	ldr	r3, [r7, #12]
 810299c:	617b      	str	r3, [r7, #20]
      }
      break;
 810299e:	e02d      	b.n	81029fc <LL_RCC_GetUSARTClockFreq+0x184>

    case LL_RCC_USART16_CLKSOURCE_PLL3Q:
    case LL_RCC_USART234578_CLKSOURCE_PLL3Q:
      if (LL_RCC_PLL3_IsReady() != 0U)
 81029a0:	f7ff fca2 	bl	81022e8 <LL_RCC_PLL3_IsReady>
 81029a4:	4603      	mov	r3, r0
 81029a6:	2b00      	cmp	r3, #0
 81029a8:	d02a      	beq.n	8102a00 <LL_RCC_GetUSARTClockFreq+0x188>
      {
        LL_RCC_GetPLL3ClockFreq(&PLL_Clocks);
 81029aa:	f107 0308 	add.w	r3, r7, #8
 81029ae:	4618      	mov	r0, r3
 81029b0:	f7ff fe88 	bl	81026c4 <LL_RCC_GetPLL3ClockFreq>
        usart_frequency = PLL_Clocks.PLL_Q_Frequency;
 81029b4:	68fb      	ldr	r3, [r7, #12]
 81029b6:	617b      	str	r3, [r7, #20]
      }
      break;
 81029b8:	e022      	b.n	8102a00 <LL_RCC_GetUSARTClockFreq+0x188>

    case LL_RCC_USART16_CLKSOURCE_HSI:
    case LL_RCC_USART234578_CLKSOURCE_HSI:
      if (LL_RCC_HSI_IsReady() != 0U)
 81029ba:	f7ff fa65 	bl	8101e88 <LL_RCC_HSI_IsReady>
 81029be:	4603      	mov	r3, r0
 81029c0:	2b00      	cmp	r3, #0
 81029c2:	d01f      	beq.n	8102a04 <LL_RCC_GetUSARTClockFreq+0x18c>
      {
        usart_frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 81029c4:	f7ff fa72 	bl	8101eac <LL_RCC_HSI_GetDivider>
 81029c8:	4603      	mov	r3, r0
 81029ca:	08db      	lsrs	r3, r3, #3
 81029cc:	4a1f      	ldr	r2, [pc, #124]	; (8102a4c <LL_RCC_GetUSARTClockFreq+0x1d4>)
 81029ce:	fa42 f303 	asr.w	r3, r2, r3
 81029d2:	617b      	str	r3, [r7, #20]
      }
      break;
 81029d4:	e016      	b.n	8102a04 <LL_RCC_GetUSARTClockFreq+0x18c>

    case LL_RCC_USART16_CLKSOURCE_CSI:
    case LL_RCC_USART234578_CLKSOURCE_CSI:
      if (LL_RCC_CSI_IsReady() != 0U)
 81029d6:	f7ff fa77 	bl	8101ec8 <LL_RCC_CSI_IsReady>
 81029da:	4603      	mov	r3, r0
 81029dc:	2b00      	cmp	r3, #0
 81029de:	d013      	beq.n	8102a08 <LL_RCC_GetUSARTClockFreq+0x190>
      {
        usart_frequency = CSI_VALUE;
 81029e0:	4b1b      	ldr	r3, [pc, #108]	; (8102a50 <LL_RCC_GetUSARTClockFreq+0x1d8>)
 81029e2:	617b      	str	r3, [r7, #20]
      }
      break;
 81029e4:	e010      	b.n	8102a08 <LL_RCC_GetUSARTClockFreq+0x190>

    case LL_RCC_USART16_CLKSOURCE_LSE:
    case LL_RCC_USART234578_CLKSOURCE_LSE:
      if (LL_RCC_LSE_IsReady() != 0U)
 81029e6:	f7ff fa83 	bl	8101ef0 <LL_RCC_LSE_IsReady>
 81029ea:	4603      	mov	r3, r0
 81029ec:	2b00      	cmp	r3, #0
 81029ee:	d00d      	beq.n	8102a0c <LL_RCC_GetUSARTClockFreq+0x194>
      {
        usart_frequency = LSE_VALUE;
 81029f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 81029f4:	617b      	str	r3, [r7, #20]
      }
      break;
 81029f6:	e009      	b.n	8102a0c <LL_RCC_GetUSARTClockFreq+0x194>

    default:
      /* Kernel clock disabled */
      break;
 81029f8:	bf00      	nop
 81029fa:	e008      	b.n	8102a0e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 81029fc:	bf00      	nop
 81029fe:	e006      	b.n	8102a0e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8102a00:	bf00      	nop
 8102a02:	e004      	b.n	8102a0e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8102a04:	bf00      	nop
 8102a06:	e002      	b.n	8102a0e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8102a08:	bf00      	nop
 8102a0a:	e000      	b.n	8102a0e <LL_RCC_GetUSARTClockFreq+0x196>
      break;
 8102a0c:	bf00      	nop
  }

  return usart_frequency;
 8102a0e:	697b      	ldr	r3, [r7, #20]
}
 8102a10:	4618      	mov	r0, r3
 8102a12:	371c      	adds	r7, #28
 8102a14:	46bd      	mov	sp, r7
 8102a16:	bd90      	pop	{r4, r7, pc}
 8102a18:	07050308 	.word	0x07050308
 8102a1c:	07050008 	.word	0x07050008
 8102a20:	07040308 	.word	0x07040308
 8102a24:	07040008 	.word	0x07040008
 8102a28:	07030308 	.word	0x07030308
 8102a2c:	07030008 	.word	0x07030008
 8102a30:	07020308 	.word	0x07020308
 8102a34:	07020008 	.word	0x07020008
 8102a38:	07010308 	.word	0x07010308
 8102a3c:	07010008 	.word	0x07010008
 8102a40:	07000008 	.word	0x07000008
 8102a44:	07000308 	.word	0x07000308
 8102a48:	08107398 	.word	0x08107398
 8102a4c:	03d09000 	.word	0x03d09000
 8102a50:	003d0900 	.word	0x003d0900

08102a54 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 8102a54:	b580      	push	{r7, lr}
 8102a56:	b084      	sub	sp, #16
 8102a58:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 8102a5a:	2300      	movs	r3, #0
 8102a5c:	60fb      	str	r3, [r7, #12]
  LL_PLL_ClocksTypeDef PLL_Clocks;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8102a5e:	f7ff fa59 	bl	8101f14 <LL_RCC_GetSysClkSource>
 8102a62:	4603      	mov	r3, r0
 8102a64:	2b18      	cmp	r3, #24
 8102a66:	d84b      	bhi.n	8102b00 <RCC_GetSystemClockFreq+0xac>
 8102a68:	a201      	add	r2, pc, #4	; (adr r2, 8102a70 <RCC_GetSystemClockFreq+0x1c>)
 8102a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8102a6e:	bf00      	nop
 8102a70:	08102ad5 	.word	0x08102ad5
 8102a74:	08102b01 	.word	0x08102b01
 8102a78:	08102b01 	.word	0x08102b01
 8102a7c:	08102b01 	.word	0x08102b01
 8102a80:	08102b01 	.word	0x08102b01
 8102a84:	08102b01 	.word	0x08102b01
 8102a88:	08102b01 	.word	0x08102b01
 8102a8c:	08102b01 	.word	0x08102b01
 8102a90:	08102ae7 	.word	0x08102ae7
 8102a94:	08102b01 	.word	0x08102b01
 8102a98:	08102b01 	.word	0x08102b01
 8102a9c:	08102b01 	.word	0x08102b01
 8102aa0:	08102b01 	.word	0x08102b01
 8102aa4:	08102b01 	.word	0x08102b01
 8102aa8:	08102b01 	.word	0x08102b01
 8102aac:	08102b01 	.word	0x08102b01
 8102ab0:	08102aed 	.word	0x08102aed
 8102ab4:	08102b01 	.word	0x08102b01
 8102ab8:	08102b01 	.word	0x08102b01
 8102abc:	08102b01 	.word	0x08102b01
 8102ac0:	08102b01 	.word	0x08102b01
 8102ac4:	08102b01 	.word	0x08102b01
 8102ac8:	08102b01 	.word	0x08102b01
 8102acc:	08102b01 	.word	0x08102b01
 8102ad0:	08102af3 	.word	0x08102af3
  {
    /* No check on Ready: Won't be selected by hardware if not */
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:
      frequency = HSI_VALUE >> (LL_RCC_HSI_GetDivider() >> RCC_CR_HSIDIV_Pos);
 8102ad4:	f7ff f9ea 	bl	8101eac <LL_RCC_HSI_GetDivider>
 8102ad8:	4603      	mov	r3, r0
 8102ada:	08db      	lsrs	r3, r3, #3
 8102adc:	4a0b      	ldr	r2, [pc, #44]	; (8102b0c <RCC_GetSystemClockFreq+0xb8>)
 8102ade:	fa42 f303 	asr.w	r3, r2, r3
 8102ae2:	60fb      	str	r3, [r7, #12]
      break;
 8102ae4:	e00d      	b.n	8102b02 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_CSI:
      frequency = CSI_VALUE;
 8102ae6:	4b0a      	ldr	r3, [pc, #40]	; (8102b10 <RCC_GetSystemClockFreq+0xbc>)
 8102ae8:	60fb      	str	r3, [r7, #12]
      break;
 8102aea:	e00a      	b.n	8102b02 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:
      frequency = HSE_VALUE;
 8102aec:	4b09      	ldr	r3, [pc, #36]	; (8102b14 <RCC_GetSystemClockFreq+0xc0>)
 8102aee:	60fb      	str	r3, [r7, #12]
      break;
 8102af0:	e007      	b.n	8102b02 <RCC_GetSystemClockFreq+0xae>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL1:
      LL_RCC_GetPLL1ClockFreq(&PLL_Clocks);
 8102af2:	463b      	mov	r3, r7
 8102af4:	4618      	mov	r0, r3
 8102af6:	f7ff fcb5 	bl	8102464 <LL_RCC_GetPLL1ClockFreq>
      frequency = PLL_Clocks.PLL_P_Frequency;
 8102afa:	683b      	ldr	r3, [r7, #0]
 8102afc:	60fb      	str	r3, [r7, #12]
      break;
 8102afe:	e000      	b.n	8102b02 <RCC_GetSystemClockFreq+0xae>

    default:
      /* Nothing to do */
      break;
 8102b00:	bf00      	nop
  }

  return frequency;
 8102b02:	68fb      	ldr	r3, [r7, #12]
}
 8102b04:	4618      	mov	r0, r3
 8102b06:	3710      	adds	r7, #16
 8102b08:	46bd      	mov	sp, r7
 8102b0a:	bd80      	pop	{r7, pc}
 8102b0c:	03d09000 	.word	0x03d09000
 8102b10:	003d0900 	.word	0x003d0900
 8102b14:	017d7840 	.word	0x017d7840

08102b18 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8102b18:	b580      	push	{r7, lr}
 8102b1a:	b082      	sub	sp, #8
 8102b1c:	af00      	add	r7, sp, #0
 8102b1e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8102b20:	f7ff fa14 	bl	8101f4c <LL_RCC_GetAHBPrescaler>
 8102b24:	4603      	mov	r3, r0
 8102b26:	f003 030f 	and.w	r3, r3, #15
 8102b2a:	4a05      	ldr	r2, [pc, #20]	; (8102b40 <RCC_GetHCLKClockFreq+0x28>)
 8102b2c:	5cd3      	ldrb	r3, [r2, r3]
 8102b2e:	f003 031f 	and.w	r3, r3, #31
 8102b32:	687a      	ldr	r2, [r7, #4]
 8102b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8102b38:	4618      	mov	r0, r3
 8102b3a:	3708      	adds	r7, #8
 8102b3c:	46bd      	mov	sp, r7
 8102b3e:	bd80      	pop	{r7, pc}
 8102b40:	08107398 	.word	0x08107398

08102b44 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8102b44:	b580      	push	{r7, lr}
 8102b46:	b082      	sub	sp, #8
 8102b48:	af00      	add	r7, sp, #0
 8102b4a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8102b4c:	f7ff fa0c 	bl	8101f68 <LL_RCC_GetAPB1Prescaler>
 8102b50:	4603      	mov	r3, r0
 8102b52:	091b      	lsrs	r3, r3, #4
 8102b54:	f003 0307 	and.w	r3, r3, #7
 8102b58:	4a05      	ldr	r2, [pc, #20]	; (8102b70 <RCC_GetPCLK1ClockFreq+0x2c>)
 8102b5a:	5cd3      	ldrb	r3, [r2, r3]
 8102b5c:	f003 031f 	and.w	r3, r3, #31
 8102b60:	687a      	ldr	r2, [r7, #4]
 8102b62:	fa22 f303 	lsr.w	r3, r2, r3
}
 8102b66:	4618      	mov	r0, r3
 8102b68:	3708      	adds	r7, #8
 8102b6a:	46bd      	mov	sp, r7
 8102b6c:	bd80      	pop	{r7, pc}
 8102b6e:	bf00      	nop
 8102b70:	08107398 	.word	0x08107398

08102b74 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8102b74:	b580      	push	{r7, lr}
 8102b76:	b082      	sub	sp, #8
 8102b78:	af00      	add	r7, sp, #0
 8102b7a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8102b7c:	f7ff fa02 	bl	8101f84 <LL_RCC_GetAPB2Prescaler>
 8102b80:	4603      	mov	r3, r0
 8102b82:	0a1b      	lsrs	r3, r3, #8
 8102b84:	f003 0307 	and.w	r3, r3, #7
 8102b88:	4a05      	ldr	r2, [pc, #20]	; (8102ba0 <RCC_GetPCLK2ClockFreq+0x2c>)
 8102b8a:	5cd3      	ldrb	r3, [r2, r3]
 8102b8c:	f003 031f 	and.w	r3, r3, #31
 8102b90:	687a      	ldr	r2, [r7, #4]
 8102b92:	fa22 f303 	lsr.w	r3, r2, r3
}
 8102b96:	4618      	mov	r0, r3
 8102b98:	3708      	adds	r7, #8
 8102b9a:	46bd      	mov	sp, r7
 8102b9c:	bd80      	pop	{r7, pc}
 8102b9e:	bf00      	nop
 8102ba0:	08107398 	.word	0x08107398

08102ba4 <LL_USART_IsEnabled>:
{
 8102ba4:	b480      	push	{r7}
 8102ba6:	b083      	sub	sp, #12
 8102ba8:	af00      	add	r7, sp, #0
 8102baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8102bac:	687b      	ldr	r3, [r7, #4]
 8102bae:	681b      	ldr	r3, [r3, #0]
 8102bb0:	f003 0301 	and.w	r3, r3, #1
 8102bb4:	2b01      	cmp	r3, #1
 8102bb6:	d101      	bne.n	8102bbc <LL_USART_IsEnabled+0x18>
 8102bb8:	2301      	movs	r3, #1
 8102bba:	e000      	b.n	8102bbe <LL_USART_IsEnabled+0x1a>
 8102bbc:	2300      	movs	r3, #0
}
 8102bbe:	4618      	mov	r0, r3
 8102bc0:	370c      	adds	r7, #12
 8102bc2:	46bd      	mov	sp, r7
 8102bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bc8:	4770      	bx	lr

08102bca <LL_USART_SetPrescaler>:
{
 8102bca:	b480      	push	{r7}
 8102bcc:	b083      	sub	sp, #12
 8102bce:	af00      	add	r7, sp, #0
 8102bd0:	6078      	str	r0, [r7, #4]
 8102bd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->PRESC, USART_PRESC_PRESCALER, (uint16_t)PrescalerValue);
 8102bd4:	687b      	ldr	r3, [r7, #4]
 8102bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8102bd8:	f023 030f 	bic.w	r3, r3, #15
 8102bdc:	683a      	ldr	r2, [r7, #0]
 8102bde:	b292      	uxth	r2, r2
 8102be0:	431a      	orrs	r2, r3
 8102be2:	687b      	ldr	r3, [r7, #4]
 8102be4:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8102be6:	bf00      	nop
 8102be8:	370c      	adds	r7, #12
 8102bea:	46bd      	mov	sp, r7
 8102bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102bf0:	4770      	bx	lr

08102bf2 <LL_USART_SetStopBitsLength>:
{
 8102bf2:	b480      	push	{r7}
 8102bf4:	b083      	sub	sp, #12
 8102bf6:	af00      	add	r7, sp, #0
 8102bf8:	6078      	str	r0, [r7, #4]
 8102bfa:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8102bfc:	687b      	ldr	r3, [r7, #4]
 8102bfe:	685b      	ldr	r3, [r3, #4]
 8102c00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8102c04:	683b      	ldr	r3, [r7, #0]
 8102c06:	431a      	orrs	r2, r3
 8102c08:	687b      	ldr	r3, [r7, #4]
 8102c0a:	605a      	str	r2, [r3, #4]
}
 8102c0c:	bf00      	nop
 8102c0e:	370c      	adds	r7, #12
 8102c10:	46bd      	mov	sp, r7
 8102c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c16:	4770      	bx	lr

08102c18 <LL_USART_SetHWFlowCtrl>:
{
 8102c18:	b480      	push	{r7}
 8102c1a:	b083      	sub	sp, #12
 8102c1c:	af00      	add	r7, sp, #0
 8102c1e:	6078      	str	r0, [r7, #4]
 8102c20:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8102c22:	687b      	ldr	r3, [r7, #4]
 8102c24:	689b      	ldr	r3, [r3, #8]
 8102c26:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102c2a:	683b      	ldr	r3, [r7, #0]
 8102c2c:	431a      	orrs	r2, r3
 8102c2e:	687b      	ldr	r3, [r7, #4]
 8102c30:	609a      	str	r2, [r3, #8]
}
 8102c32:	bf00      	nop
 8102c34:	370c      	adds	r7, #12
 8102c36:	46bd      	mov	sp, r7
 8102c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102c3c:	4770      	bx	lr
	...

08102c40 <LL_USART_SetBaudRate>:
{
 8102c40:	b480      	push	{r7}
 8102c42:	b087      	sub	sp, #28
 8102c44:	af00      	add	r7, sp, #0
 8102c46:	60f8      	str	r0, [r7, #12]
 8102c48:	60b9      	str	r1, [r7, #8]
 8102c4a:	607a      	str	r2, [r7, #4]
 8102c4c:	603b      	str	r3, [r7, #0]
  if (PrescalerValue > LL_USART_PRESCALER_DIV256)
 8102c4e:	687b      	ldr	r3, [r7, #4]
 8102c50:	2b0b      	cmp	r3, #11
 8102c52:	d83c      	bhi.n	8102cce <LL_USART_SetBaudRate+0x8e>
  else if (BaudRate == 0U)
 8102c54:	6a3b      	ldr	r3, [r7, #32]
 8102c56:	2b00      	cmp	r3, #0
 8102c58:	d039      	beq.n	8102cce <LL_USART_SetBaudRate+0x8e>
  else if (OverSampling == LL_USART_OVERSAMPLING_8)
 8102c5a:	683b      	ldr	r3, [r7, #0]
 8102c5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8102c60:	d122      	bne.n	8102ca8 <LL_USART_SetBaudRate+0x68>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8102c62:	687b      	ldr	r3, [r7, #4]
 8102c64:	b2db      	uxtb	r3, r3
 8102c66:	461a      	mov	r2, r3
 8102c68:	4b1c      	ldr	r3, [pc, #112]	; (8102cdc <LL_USART_SetBaudRate+0x9c>)
 8102c6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102c6e:	68ba      	ldr	r2, [r7, #8]
 8102c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8102c74:	005a      	lsls	r2, r3, #1
 8102c76:	6a3b      	ldr	r3, [r7, #32]
 8102c78:	085b      	lsrs	r3, r3, #1
 8102c7a:	441a      	add	r2, r3
 8102c7c:	6a3b      	ldr	r3, [r7, #32]
 8102c7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8102c82:	b29b      	uxth	r3, r3
 8102c84:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8102c86:	697a      	ldr	r2, [r7, #20]
 8102c88:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8102c8c:	4013      	ands	r3, r2
 8102c8e:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8102c90:	697b      	ldr	r3, [r7, #20]
 8102c92:	085b      	lsrs	r3, r3, #1
 8102c94:	b29b      	uxth	r3, r3
 8102c96:	f003 0307 	and.w	r3, r3, #7
 8102c9a:	693a      	ldr	r2, [r7, #16]
 8102c9c:	4313      	orrs	r3, r2
 8102c9e:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8102ca0:	68fb      	ldr	r3, [r7, #12]
 8102ca2:	693a      	ldr	r2, [r7, #16]
 8102ca4:	60da      	str	r2, [r3, #12]
}
 8102ca6:	e012      	b.n	8102cce <LL_USART_SetBaudRate+0x8e>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, (uint8_t)PrescalerValue, BaudRate));
 8102ca8:	687b      	ldr	r3, [r7, #4]
 8102caa:	b2db      	uxtb	r3, r3
 8102cac:	461a      	mov	r2, r3
 8102cae:	4b0b      	ldr	r3, [pc, #44]	; (8102cdc <LL_USART_SetBaudRate+0x9c>)
 8102cb0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8102cb4:	68ba      	ldr	r2, [r7, #8]
 8102cb6:	fbb2 f2f3 	udiv	r2, r2, r3
 8102cba:	6a3b      	ldr	r3, [r7, #32]
 8102cbc:	085b      	lsrs	r3, r3, #1
 8102cbe:	441a      	add	r2, r3
 8102cc0:	6a3b      	ldr	r3, [r7, #32]
 8102cc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8102cc6:	b29b      	uxth	r3, r3
 8102cc8:	461a      	mov	r2, r3
 8102cca:	68fb      	ldr	r3, [r7, #12]
 8102ccc:	60da      	str	r2, [r3, #12]
}
 8102cce:	bf00      	nop
 8102cd0:	371c      	adds	r7, #28
 8102cd2:	46bd      	mov	sp, r7
 8102cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102cd8:	4770      	bx	lr
 8102cda:	bf00      	nop
 8102cdc:	081073a8 	.word	0x081073a8

08102ce0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8102ce0:	b580      	push	{r7, lr}
 8102ce2:	b086      	sub	sp, #24
 8102ce4:	af02      	add	r7, sp, #8
 8102ce6:	6078      	str	r0, [r7, #4]
 8102ce8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8102cea:	2301      	movs	r3, #1
 8102cec:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8102cee:	2300      	movs	r3, #0
 8102cf0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8102cf2:	6878      	ldr	r0, [r7, #4]
 8102cf4:	f7ff ff56 	bl	8102ba4 <LL_USART_IsEnabled>
 8102cf8:	4603      	mov	r3, r0
 8102cfa:	2b00      	cmp	r3, #0
 8102cfc:	d17f      	bne.n	8102dfe <LL_USART_Init+0x11e>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8102cfe:	687b      	ldr	r3, [r7, #4]
 8102d00:	681a      	ldr	r2, [r3, #0]
 8102d02:	4b41      	ldr	r3, [pc, #260]	; (8102e08 <LL_USART_Init+0x128>)
 8102d04:	4013      	ands	r3, r2
 8102d06:	683a      	ldr	r2, [r7, #0]
 8102d08:	6891      	ldr	r1, [r2, #8]
 8102d0a:	683a      	ldr	r2, [r7, #0]
 8102d0c:	6912      	ldr	r2, [r2, #16]
 8102d0e:	4311      	orrs	r1, r2
 8102d10:	683a      	ldr	r2, [r7, #0]
 8102d12:	6952      	ldr	r2, [r2, #20]
 8102d14:	4311      	orrs	r1, r2
 8102d16:	683a      	ldr	r2, [r7, #0]
 8102d18:	69d2      	ldr	r2, [r2, #28]
 8102d1a:	430a      	orrs	r2, r1
 8102d1c:	431a      	orrs	r2, r3
 8102d1e:	687b      	ldr	r3, [r7, #4]
 8102d20:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8102d22:	683b      	ldr	r3, [r7, #0]
 8102d24:	68db      	ldr	r3, [r3, #12]
 8102d26:	4619      	mov	r1, r3
 8102d28:	6878      	ldr	r0, [r7, #4]
 8102d2a:	f7ff ff62 	bl	8102bf2 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8102d2e:	683b      	ldr	r3, [r7, #0]
 8102d30:	699b      	ldr	r3, [r3, #24]
 8102d32:	4619      	mov	r1, r3
 8102d34:	6878      	ldr	r0, [r7, #4]
 8102d36:	f7ff ff6f 	bl	8102c18 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8102d3a:	687b      	ldr	r3, [r7, #4]
 8102d3c:	4a33      	ldr	r2, [pc, #204]	; (8102e0c <LL_USART_Init+0x12c>)
 8102d3e:	4293      	cmp	r3, r2
 8102d40:	d104      	bne.n	8102d4c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8102d42:	4833      	ldr	r0, [pc, #204]	; (8102e10 <LL_USART_Init+0x130>)
 8102d44:	f7ff fd98 	bl	8102878 <LL_RCC_GetUSARTClockFreq>
 8102d48:	60b8      	str	r0, [r7, #8]
 8102d4a:	e03d      	b.n	8102dc8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART2)
 8102d4c:	687b      	ldr	r3, [r7, #4]
 8102d4e:	4a31      	ldr	r2, [pc, #196]	; (8102e14 <LL_USART_Init+0x134>)
 8102d50:	4293      	cmp	r3, r2
 8102d52:	d104      	bne.n	8102d5e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8102d54:	4830      	ldr	r0, [pc, #192]	; (8102e18 <LL_USART_Init+0x138>)
 8102d56:	f7ff fd8f 	bl	8102878 <LL_RCC_GetUSARTClockFreq>
 8102d5a:	60b8      	str	r0, [r7, #8]
 8102d5c:	e034      	b.n	8102dc8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART3)
 8102d5e:	687b      	ldr	r3, [r7, #4]
 8102d60:	4a2e      	ldr	r2, [pc, #184]	; (8102e1c <LL_USART_Init+0x13c>)
 8102d62:	4293      	cmp	r3, r2
 8102d64:	d104      	bne.n	8102d70 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8102d66:	482c      	ldr	r0, [pc, #176]	; (8102e18 <LL_USART_Init+0x138>)
 8102d68:	f7ff fd86 	bl	8102878 <LL_RCC_GetUSARTClockFreq>
 8102d6c:	60b8      	str	r0, [r7, #8]
 8102d6e:	e02b      	b.n	8102dc8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART4)
 8102d70:	687b      	ldr	r3, [r7, #4]
 8102d72:	4a2b      	ldr	r2, [pc, #172]	; (8102e20 <LL_USART_Init+0x140>)
 8102d74:	4293      	cmp	r3, r2
 8102d76:	d104      	bne.n	8102d82 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8102d78:	4827      	ldr	r0, [pc, #156]	; (8102e18 <LL_USART_Init+0x138>)
 8102d7a:	f7ff fd7d 	bl	8102878 <LL_RCC_GetUSARTClockFreq>
 8102d7e:	60b8      	str	r0, [r7, #8]
 8102d80:	e022      	b.n	8102dc8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART5)
 8102d82:	687b      	ldr	r3, [r7, #4]
 8102d84:	4a27      	ldr	r2, [pc, #156]	; (8102e24 <LL_USART_Init+0x144>)
 8102d86:	4293      	cmp	r3, r2
 8102d88:	d104      	bne.n	8102d94 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8102d8a:	4823      	ldr	r0, [pc, #140]	; (8102e18 <LL_USART_Init+0x138>)
 8102d8c:	f7ff fd74 	bl	8102878 <LL_RCC_GetUSARTClockFreq>
 8102d90:	60b8      	str	r0, [r7, #8]
 8102d92:	e019      	b.n	8102dc8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == USART6)
 8102d94:	687b      	ldr	r3, [r7, #4]
 8102d96:	4a24      	ldr	r2, [pc, #144]	; (8102e28 <LL_USART_Init+0x148>)
 8102d98:	4293      	cmp	r3, r2
 8102d9a:	d104      	bne.n	8102da6 <LL_USART_Init+0xc6>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART16_CLKSOURCE);
 8102d9c:	481c      	ldr	r0, [pc, #112]	; (8102e10 <LL_USART_Init+0x130>)
 8102d9e:	f7ff fd6b 	bl	8102878 <LL_RCC_GetUSARTClockFreq>
 8102da2:	60b8      	str	r0, [r7, #8]
 8102da4:	e010      	b.n	8102dc8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART7)
 8102da6:	687b      	ldr	r3, [r7, #4]
 8102da8:	4a20      	ldr	r2, [pc, #128]	; (8102e2c <LL_USART_Init+0x14c>)
 8102daa:	4293      	cmp	r3, r2
 8102dac:	d104      	bne.n	8102db8 <LL_USART_Init+0xd8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8102dae:	481a      	ldr	r0, [pc, #104]	; (8102e18 <LL_USART_Init+0x138>)
 8102db0:	f7ff fd62 	bl	8102878 <LL_RCC_GetUSARTClockFreq>
 8102db4:	60b8      	str	r0, [r7, #8]
 8102db6:	e007      	b.n	8102dc8 <LL_USART_Init+0xe8>
    }
    else if (USARTx == UART8)
 8102db8:	687b      	ldr	r3, [r7, #4]
 8102dba:	4a1d      	ldr	r2, [pc, #116]	; (8102e30 <LL_USART_Init+0x150>)
 8102dbc:	4293      	cmp	r3, r2
 8102dbe:	d103      	bne.n	8102dc8 <LL_USART_Init+0xe8>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART234578_CLKSOURCE);
 8102dc0:	4815      	ldr	r0, [pc, #84]	; (8102e18 <LL_USART_Init+0x138>)
 8102dc2:	f7ff fd59 	bl	8102878 <LL_RCC_GetUSARTClockFreq>
 8102dc6:	60b8      	str	r0, [r7, #8]
    /* Configure the USART Baud Rate :
       - prescaler value is required
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8102dc8:	68bb      	ldr	r3, [r7, #8]
 8102dca:	2b00      	cmp	r3, #0
 8102dcc:	d011      	beq.n	8102df2 <LL_USART_Init+0x112>
        && (USART_InitStruct->BaudRate != 0U))
 8102dce:	683b      	ldr	r3, [r7, #0]
 8102dd0:	685b      	ldr	r3, [r3, #4]
 8102dd2:	2b00      	cmp	r3, #0
 8102dd4:	d00d      	beq.n	8102df2 <LL_USART_Init+0x112>
    {
      status = SUCCESS;
 8102dd6:	2300      	movs	r3, #0
 8102dd8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
                           USART_InitStruct->PrescalerValue,
 8102dda:	683b      	ldr	r3, [r7, #0]
 8102ddc:	681a      	ldr	r2, [r3, #0]
                           USART_InitStruct->OverSampling,
 8102dde:	683b      	ldr	r3, [r7, #0]
 8102de0:	69d9      	ldr	r1, [r3, #28]
                           USART_InitStruct->BaudRate);
 8102de2:	683b      	ldr	r3, [r7, #0]
 8102de4:	685b      	ldr	r3, [r3, #4]
      LL_USART_SetBaudRate(USARTx,
 8102de6:	9300      	str	r3, [sp, #0]
 8102de8:	460b      	mov	r3, r1
 8102dea:	68b9      	ldr	r1, [r7, #8]
 8102dec:	6878      	ldr	r0, [r7, #4]
 8102dee:	f7ff ff27 	bl	8102c40 <LL_USART_SetBaudRate>

    /*---------------------------- USART PRESC Configuration -----------------------
     * Configure USARTx PRESC (Prescaler) with parameters:
     * - PrescalerValue: USART_PRESC_PRESCALER bits according to USART_InitStruct->PrescalerValue value.
     */
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
 8102df2:	683b      	ldr	r3, [r7, #0]
 8102df4:	681b      	ldr	r3, [r3, #0]
 8102df6:	4619      	mov	r1, r3
 8102df8:	6878      	ldr	r0, [r7, #4]
 8102dfa:	f7ff fee6 	bl	8102bca <LL_USART_SetPrescaler>
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8102dfe:	7bfb      	ldrb	r3, [r7, #15]
}
 8102e00:	4618      	mov	r0, r3
 8102e02:	3710      	adds	r7, #16
 8102e04:	46bd      	mov	sp, r7
 8102e06:	bd80      	pop	{r7, pc}
 8102e08:	efff69f3 	.word	0xefff69f3
 8102e0c:	40011000 	.word	0x40011000
 8102e10:	07000308 	.word	0x07000308
 8102e14:	40004400 	.word	0x40004400
 8102e18:	07000008 	.word	0x07000008
 8102e1c:	40004800 	.word	0x40004800
 8102e20:	40004c00 	.word	0x40004c00
 8102e24:	40005000 	.word	0x40005000
 8102e28:	40011400 	.word	0x40011400
 8102e2c:	40007800 	.word	0x40007800
 8102e30:	40007c00 	.word	0x40007c00

08102e34 <atoi>:
 8102e34:	220a      	movs	r2, #10
 8102e36:	2100      	movs	r1, #0
 8102e38:	f000 bef6 	b.w	8103c28 <strtol>

08102e3c <sulp>:
 8102e3c:	b570      	push	{r4, r5, r6, lr}
 8102e3e:	4604      	mov	r4, r0
 8102e40:	460d      	mov	r5, r1
 8102e42:	ec45 4b10 	vmov	d0, r4, r5
 8102e46:	4616      	mov	r6, r2
 8102e48:	f003 fbce 	bl	81065e8 <__ulp>
 8102e4c:	ec51 0b10 	vmov	r0, r1, d0
 8102e50:	b17e      	cbz	r6, 8102e72 <sulp+0x36>
 8102e52:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8102e56:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8102e5a:	2b00      	cmp	r3, #0
 8102e5c:	dd09      	ble.n	8102e72 <sulp+0x36>
 8102e5e:	051b      	lsls	r3, r3, #20
 8102e60:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8102e64:	2400      	movs	r4, #0
 8102e66:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 8102e6a:	4622      	mov	r2, r4
 8102e6c:	462b      	mov	r3, r5
 8102e6e:	f7fd fc4b 	bl	8100708 <__aeabi_dmul>
 8102e72:	bd70      	pop	{r4, r5, r6, pc}
 8102e74:	0000      	movs	r0, r0
	...

08102e78 <_strtod_l>:
 8102e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8102e7c:	ed2d 8b02 	vpush	{d8}
 8102e80:	b09b      	sub	sp, #108	; 0x6c
 8102e82:	4604      	mov	r4, r0
 8102e84:	9213      	str	r2, [sp, #76]	; 0x4c
 8102e86:	2200      	movs	r2, #0
 8102e88:	9216      	str	r2, [sp, #88]	; 0x58
 8102e8a:	460d      	mov	r5, r1
 8102e8c:	f04f 0800 	mov.w	r8, #0
 8102e90:	f04f 0900 	mov.w	r9, #0
 8102e94:	460a      	mov	r2, r1
 8102e96:	9215      	str	r2, [sp, #84]	; 0x54
 8102e98:	7811      	ldrb	r1, [r2, #0]
 8102e9a:	292b      	cmp	r1, #43	; 0x2b
 8102e9c:	d04c      	beq.n	8102f38 <_strtod_l+0xc0>
 8102e9e:	d83a      	bhi.n	8102f16 <_strtod_l+0x9e>
 8102ea0:	290d      	cmp	r1, #13
 8102ea2:	d834      	bhi.n	8102f0e <_strtod_l+0x96>
 8102ea4:	2908      	cmp	r1, #8
 8102ea6:	d834      	bhi.n	8102f12 <_strtod_l+0x9a>
 8102ea8:	2900      	cmp	r1, #0
 8102eaa:	d03d      	beq.n	8102f28 <_strtod_l+0xb0>
 8102eac:	2200      	movs	r2, #0
 8102eae:	920a      	str	r2, [sp, #40]	; 0x28
 8102eb0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8102eb2:	7832      	ldrb	r2, [r6, #0]
 8102eb4:	2a30      	cmp	r2, #48	; 0x30
 8102eb6:	f040 80b4 	bne.w	8103022 <_strtod_l+0x1aa>
 8102eba:	7872      	ldrb	r2, [r6, #1]
 8102ebc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 8102ec0:	2a58      	cmp	r2, #88	; 0x58
 8102ec2:	d170      	bne.n	8102fa6 <_strtod_l+0x12e>
 8102ec4:	9302      	str	r3, [sp, #8]
 8102ec6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8102ec8:	9301      	str	r3, [sp, #4]
 8102eca:	ab16      	add	r3, sp, #88	; 0x58
 8102ecc:	9300      	str	r3, [sp, #0]
 8102ece:	4a8e      	ldr	r2, [pc, #568]	; (8103108 <_strtod_l+0x290>)
 8102ed0:	ab17      	add	r3, sp, #92	; 0x5c
 8102ed2:	a915      	add	r1, sp, #84	; 0x54
 8102ed4:	4620      	mov	r0, r4
 8102ed6:	f002 fc65 	bl	81057a4 <__gethex>
 8102eda:	f010 070f 	ands.w	r7, r0, #15
 8102ede:	4605      	mov	r5, r0
 8102ee0:	d005      	beq.n	8102eee <_strtod_l+0x76>
 8102ee2:	2f06      	cmp	r7, #6
 8102ee4:	d12a      	bne.n	8102f3c <_strtod_l+0xc4>
 8102ee6:	3601      	adds	r6, #1
 8102ee8:	2300      	movs	r3, #0
 8102eea:	9615      	str	r6, [sp, #84]	; 0x54
 8102eec:	930a      	str	r3, [sp, #40]	; 0x28
 8102eee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8102ef0:	2b00      	cmp	r3, #0
 8102ef2:	f040 857f 	bne.w	81039f4 <_strtod_l+0xb7c>
 8102ef6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8102ef8:	b1db      	cbz	r3, 8102f32 <_strtod_l+0xba>
 8102efa:	4642      	mov	r2, r8
 8102efc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8102f00:	ec43 2b10 	vmov	d0, r2, r3
 8102f04:	b01b      	add	sp, #108	; 0x6c
 8102f06:	ecbd 8b02 	vpop	{d8}
 8102f0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8102f0e:	2920      	cmp	r1, #32
 8102f10:	d1cc      	bne.n	8102eac <_strtod_l+0x34>
 8102f12:	3201      	adds	r2, #1
 8102f14:	e7bf      	b.n	8102e96 <_strtod_l+0x1e>
 8102f16:	292d      	cmp	r1, #45	; 0x2d
 8102f18:	d1c8      	bne.n	8102eac <_strtod_l+0x34>
 8102f1a:	2101      	movs	r1, #1
 8102f1c:	910a      	str	r1, [sp, #40]	; 0x28
 8102f1e:	1c51      	adds	r1, r2, #1
 8102f20:	9115      	str	r1, [sp, #84]	; 0x54
 8102f22:	7852      	ldrb	r2, [r2, #1]
 8102f24:	2a00      	cmp	r2, #0
 8102f26:	d1c3      	bne.n	8102eb0 <_strtod_l+0x38>
 8102f28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8102f2a:	9515      	str	r5, [sp, #84]	; 0x54
 8102f2c:	2b00      	cmp	r3, #0
 8102f2e:	f040 855f 	bne.w	81039f0 <_strtod_l+0xb78>
 8102f32:	4642      	mov	r2, r8
 8102f34:	464b      	mov	r3, r9
 8102f36:	e7e3      	b.n	8102f00 <_strtod_l+0x88>
 8102f38:	2100      	movs	r1, #0
 8102f3a:	e7ef      	b.n	8102f1c <_strtod_l+0xa4>
 8102f3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8102f3e:	b13a      	cbz	r2, 8102f50 <_strtod_l+0xd8>
 8102f40:	2135      	movs	r1, #53	; 0x35
 8102f42:	a818      	add	r0, sp, #96	; 0x60
 8102f44:	f003 fc4d 	bl	81067e2 <__copybits>
 8102f48:	9916      	ldr	r1, [sp, #88]	; 0x58
 8102f4a:	4620      	mov	r0, r4
 8102f4c:	f003 f820 	bl	8105f90 <_Bfree>
 8102f50:	3f01      	subs	r7, #1
 8102f52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8102f54:	2f04      	cmp	r7, #4
 8102f56:	d806      	bhi.n	8102f66 <_strtod_l+0xee>
 8102f58:	e8df f007 	tbb	[pc, r7]
 8102f5c:	201d0314 	.word	0x201d0314
 8102f60:	14          	.byte	0x14
 8102f61:	00          	.byte	0x00
 8102f62:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 8102f66:	05e9      	lsls	r1, r5, #23
 8102f68:	bf48      	it	mi
 8102f6a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 8102f6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8102f72:	0d1b      	lsrs	r3, r3, #20
 8102f74:	051b      	lsls	r3, r3, #20
 8102f76:	2b00      	cmp	r3, #0
 8102f78:	d1b9      	bne.n	8102eee <_strtod_l+0x76>
 8102f7a:	f001 fc97 	bl	81048ac <__errno>
 8102f7e:	2322      	movs	r3, #34	; 0x22
 8102f80:	6003      	str	r3, [r0, #0]
 8102f82:	e7b4      	b.n	8102eee <_strtod_l+0x76>
 8102f84:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 8102f88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8102f8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8102f90:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 8102f94:	e7e7      	b.n	8102f66 <_strtod_l+0xee>
 8102f96:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8103110 <_strtod_l+0x298>
 8102f9a:	e7e4      	b.n	8102f66 <_strtod_l+0xee>
 8102f9c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8102fa0:	f04f 38ff 	mov.w	r8, #4294967295
 8102fa4:	e7df      	b.n	8102f66 <_strtod_l+0xee>
 8102fa6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8102fa8:	1c5a      	adds	r2, r3, #1
 8102faa:	9215      	str	r2, [sp, #84]	; 0x54
 8102fac:	785b      	ldrb	r3, [r3, #1]
 8102fae:	2b30      	cmp	r3, #48	; 0x30
 8102fb0:	d0f9      	beq.n	8102fa6 <_strtod_l+0x12e>
 8102fb2:	2b00      	cmp	r3, #0
 8102fb4:	d09b      	beq.n	8102eee <_strtod_l+0x76>
 8102fb6:	2301      	movs	r3, #1
 8102fb8:	f04f 0a00 	mov.w	sl, #0
 8102fbc:	9304      	str	r3, [sp, #16]
 8102fbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8102fc0:	930b      	str	r3, [sp, #44]	; 0x2c
 8102fc2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 8102fc6:	46d3      	mov	fp, sl
 8102fc8:	220a      	movs	r2, #10
 8102fca:	9815      	ldr	r0, [sp, #84]	; 0x54
 8102fcc:	7806      	ldrb	r6, [r0, #0]
 8102fce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8102fd2:	b2d9      	uxtb	r1, r3
 8102fd4:	2909      	cmp	r1, #9
 8102fd6:	d926      	bls.n	8103026 <_strtod_l+0x1ae>
 8102fd8:	494c      	ldr	r1, [pc, #304]	; (810310c <_strtod_l+0x294>)
 8102fda:	2201      	movs	r2, #1
 8102fdc:	f001 fbf6 	bl	81047cc <strncmp>
 8102fe0:	2800      	cmp	r0, #0
 8102fe2:	d030      	beq.n	8103046 <_strtod_l+0x1ce>
 8102fe4:	2000      	movs	r0, #0
 8102fe6:	4632      	mov	r2, r6
 8102fe8:	9005      	str	r0, [sp, #20]
 8102fea:	465e      	mov	r6, fp
 8102fec:	4603      	mov	r3, r0
 8102fee:	2a65      	cmp	r2, #101	; 0x65
 8102ff0:	d001      	beq.n	8102ff6 <_strtod_l+0x17e>
 8102ff2:	2a45      	cmp	r2, #69	; 0x45
 8102ff4:	d113      	bne.n	810301e <_strtod_l+0x1a6>
 8102ff6:	b91e      	cbnz	r6, 8103000 <_strtod_l+0x188>
 8102ff8:	9a04      	ldr	r2, [sp, #16]
 8102ffa:	4302      	orrs	r2, r0
 8102ffc:	d094      	beq.n	8102f28 <_strtod_l+0xb0>
 8102ffe:	2600      	movs	r6, #0
 8103000:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8103002:	1c6a      	adds	r2, r5, #1
 8103004:	9215      	str	r2, [sp, #84]	; 0x54
 8103006:	786a      	ldrb	r2, [r5, #1]
 8103008:	2a2b      	cmp	r2, #43	; 0x2b
 810300a:	d074      	beq.n	81030f6 <_strtod_l+0x27e>
 810300c:	2a2d      	cmp	r2, #45	; 0x2d
 810300e:	d078      	beq.n	8103102 <_strtod_l+0x28a>
 8103010:	f04f 0c00 	mov.w	ip, #0
 8103014:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8103018:	2909      	cmp	r1, #9
 810301a:	d97f      	bls.n	810311c <_strtod_l+0x2a4>
 810301c:	9515      	str	r5, [sp, #84]	; 0x54
 810301e:	2700      	movs	r7, #0
 8103020:	e09e      	b.n	8103160 <_strtod_l+0x2e8>
 8103022:	2300      	movs	r3, #0
 8103024:	e7c8      	b.n	8102fb8 <_strtod_l+0x140>
 8103026:	f1bb 0f08 	cmp.w	fp, #8
 810302a:	bfd8      	it	le
 810302c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 810302e:	f100 0001 	add.w	r0, r0, #1
 8103032:	bfda      	itte	le
 8103034:	fb02 3301 	mlale	r3, r2, r1, r3
 8103038:	9309      	strle	r3, [sp, #36]	; 0x24
 810303a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 810303e:	f10b 0b01 	add.w	fp, fp, #1
 8103042:	9015      	str	r0, [sp, #84]	; 0x54
 8103044:	e7c1      	b.n	8102fca <_strtod_l+0x152>
 8103046:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8103048:	1c5a      	adds	r2, r3, #1
 810304a:	9215      	str	r2, [sp, #84]	; 0x54
 810304c:	785a      	ldrb	r2, [r3, #1]
 810304e:	f1bb 0f00 	cmp.w	fp, #0
 8103052:	d037      	beq.n	81030c4 <_strtod_l+0x24c>
 8103054:	9005      	str	r0, [sp, #20]
 8103056:	465e      	mov	r6, fp
 8103058:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 810305c:	2b09      	cmp	r3, #9
 810305e:	d912      	bls.n	8103086 <_strtod_l+0x20e>
 8103060:	2301      	movs	r3, #1
 8103062:	e7c4      	b.n	8102fee <_strtod_l+0x176>
 8103064:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8103066:	1c5a      	adds	r2, r3, #1
 8103068:	9215      	str	r2, [sp, #84]	; 0x54
 810306a:	785a      	ldrb	r2, [r3, #1]
 810306c:	3001      	adds	r0, #1
 810306e:	2a30      	cmp	r2, #48	; 0x30
 8103070:	d0f8      	beq.n	8103064 <_strtod_l+0x1ec>
 8103072:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8103076:	2b08      	cmp	r3, #8
 8103078:	f200 84c1 	bhi.w	81039fe <_strtod_l+0xb86>
 810307c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 810307e:	9005      	str	r0, [sp, #20]
 8103080:	2000      	movs	r0, #0
 8103082:	930b      	str	r3, [sp, #44]	; 0x2c
 8103084:	4606      	mov	r6, r0
 8103086:	3a30      	subs	r2, #48	; 0x30
 8103088:	f100 0301 	add.w	r3, r0, #1
 810308c:	d014      	beq.n	81030b8 <_strtod_l+0x240>
 810308e:	9905      	ldr	r1, [sp, #20]
 8103090:	4419      	add	r1, r3
 8103092:	9105      	str	r1, [sp, #20]
 8103094:	4633      	mov	r3, r6
 8103096:	eb00 0c06 	add.w	ip, r0, r6
 810309a:	210a      	movs	r1, #10
 810309c:	4563      	cmp	r3, ip
 810309e:	d113      	bne.n	81030c8 <_strtod_l+0x250>
 81030a0:	1833      	adds	r3, r6, r0
 81030a2:	2b08      	cmp	r3, #8
 81030a4:	f106 0601 	add.w	r6, r6, #1
 81030a8:	4406      	add	r6, r0
 81030aa:	dc1a      	bgt.n	81030e2 <_strtod_l+0x26a>
 81030ac:	9909      	ldr	r1, [sp, #36]	; 0x24
 81030ae:	230a      	movs	r3, #10
 81030b0:	fb03 2301 	mla	r3, r3, r1, r2
 81030b4:	9309      	str	r3, [sp, #36]	; 0x24
 81030b6:	2300      	movs	r3, #0
 81030b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 81030ba:	1c51      	adds	r1, r2, #1
 81030bc:	9115      	str	r1, [sp, #84]	; 0x54
 81030be:	7852      	ldrb	r2, [r2, #1]
 81030c0:	4618      	mov	r0, r3
 81030c2:	e7c9      	b.n	8103058 <_strtod_l+0x1e0>
 81030c4:	4658      	mov	r0, fp
 81030c6:	e7d2      	b.n	810306e <_strtod_l+0x1f6>
 81030c8:	2b08      	cmp	r3, #8
 81030ca:	f103 0301 	add.w	r3, r3, #1
 81030ce:	dc03      	bgt.n	81030d8 <_strtod_l+0x260>
 81030d0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 81030d2:	434f      	muls	r7, r1
 81030d4:	9709      	str	r7, [sp, #36]	; 0x24
 81030d6:	e7e1      	b.n	810309c <_strtod_l+0x224>
 81030d8:	2b10      	cmp	r3, #16
 81030da:	bfd8      	it	le
 81030dc:	fb01 fa0a 	mulle.w	sl, r1, sl
 81030e0:	e7dc      	b.n	810309c <_strtod_l+0x224>
 81030e2:	2e10      	cmp	r6, #16
 81030e4:	bfdc      	itt	le
 81030e6:	230a      	movle	r3, #10
 81030e8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 81030ec:	e7e3      	b.n	81030b6 <_strtod_l+0x23e>
 81030ee:	2300      	movs	r3, #0
 81030f0:	9305      	str	r3, [sp, #20]
 81030f2:	2301      	movs	r3, #1
 81030f4:	e780      	b.n	8102ff8 <_strtod_l+0x180>
 81030f6:	f04f 0c00 	mov.w	ip, #0
 81030fa:	1caa      	adds	r2, r5, #2
 81030fc:	9215      	str	r2, [sp, #84]	; 0x54
 81030fe:	78aa      	ldrb	r2, [r5, #2]
 8103100:	e788      	b.n	8103014 <_strtod_l+0x19c>
 8103102:	f04f 0c01 	mov.w	ip, #1
 8103106:	e7f8      	b.n	81030fa <_strtod_l+0x282>
 8103108:	081073dc 	.word	0x081073dc
 810310c:	081073d8 	.word	0x081073d8
 8103110:	7ff00000 	.word	0x7ff00000
 8103114:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8103116:	1c51      	adds	r1, r2, #1
 8103118:	9115      	str	r1, [sp, #84]	; 0x54
 810311a:	7852      	ldrb	r2, [r2, #1]
 810311c:	2a30      	cmp	r2, #48	; 0x30
 810311e:	d0f9      	beq.n	8103114 <_strtod_l+0x29c>
 8103120:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8103124:	2908      	cmp	r1, #8
 8103126:	f63f af7a 	bhi.w	810301e <_strtod_l+0x1a6>
 810312a:	3a30      	subs	r2, #48	; 0x30
 810312c:	9208      	str	r2, [sp, #32]
 810312e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8103130:	920c      	str	r2, [sp, #48]	; 0x30
 8103132:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8103134:	1c57      	adds	r7, r2, #1
 8103136:	9715      	str	r7, [sp, #84]	; 0x54
 8103138:	7852      	ldrb	r2, [r2, #1]
 810313a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 810313e:	f1be 0f09 	cmp.w	lr, #9
 8103142:	d938      	bls.n	81031b6 <_strtod_l+0x33e>
 8103144:	990c      	ldr	r1, [sp, #48]	; 0x30
 8103146:	1a7f      	subs	r7, r7, r1
 8103148:	2f08      	cmp	r7, #8
 810314a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 810314e:	dc03      	bgt.n	8103158 <_strtod_l+0x2e0>
 8103150:	9908      	ldr	r1, [sp, #32]
 8103152:	428f      	cmp	r7, r1
 8103154:	bfa8      	it	ge
 8103156:	460f      	movge	r7, r1
 8103158:	f1bc 0f00 	cmp.w	ip, #0
 810315c:	d000      	beq.n	8103160 <_strtod_l+0x2e8>
 810315e:	427f      	negs	r7, r7
 8103160:	2e00      	cmp	r6, #0
 8103162:	d14f      	bne.n	8103204 <_strtod_l+0x38c>
 8103164:	9904      	ldr	r1, [sp, #16]
 8103166:	4301      	orrs	r1, r0
 8103168:	f47f aec1 	bne.w	8102eee <_strtod_l+0x76>
 810316c:	2b00      	cmp	r3, #0
 810316e:	f47f aedb 	bne.w	8102f28 <_strtod_l+0xb0>
 8103172:	2a69      	cmp	r2, #105	; 0x69
 8103174:	d029      	beq.n	81031ca <_strtod_l+0x352>
 8103176:	dc26      	bgt.n	81031c6 <_strtod_l+0x34e>
 8103178:	2a49      	cmp	r2, #73	; 0x49
 810317a:	d026      	beq.n	81031ca <_strtod_l+0x352>
 810317c:	2a4e      	cmp	r2, #78	; 0x4e
 810317e:	f47f aed3 	bne.w	8102f28 <_strtod_l+0xb0>
 8103182:	499b      	ldr	r1, [pc, #620]	; (81033f0 <_strtod_l+0x578>)
 8103184:	a815      	add	r0, sp, #84	; 0x54
 8103186:	f002 fd4d 	bl	8105c24 <__match>
 810318a:	2800      	cmp	r0, #0
 810318c:	f43f aecc 	beq.w	8102f28 <_strtod_l+0xb0>
 8103190:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8103192:	781b      	ldrb	r3, [r3, #0]
 8103194:	2b28      	cmp	r3, #40	; 0x28
 8103196:	d12f      	bne.n	81031f8 <_strtod_l+0x380>
 8103198:	4996      	ldr	r1, [pc, #600]	; (81033f4 <_strtod_l+0x57c>)
 810319a:	aa18      	add	r2, sp, #96	; 0x60
 810319c:	a815      	add	r0, sp, #84	; 0x54
 810319e:	f002 fd55 	bl	8105c4c <__hexnan>
 81031a2:	2805      	cmp	r0, #5
 81031a4:	d128      	bne.n	81031f8 <_strtod_l+0x380>
 81031a6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 81031a8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 81031ac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 81031b0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 81031b4:	e69b      	b.n	8102eee <_strtod_l+0x76>
 81031b6:	9f08      	ldr	r7, [sp, #32]
 81031b8:	210a      	movs	r1, #10
 81031ba:	fb01 2107 	mla	r1, r1, r7, r2
 81031be:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 81031c2:	9208      	str	r2, [sp, #32]
 81031c4:	e7b5      	b.n	8103132 <_strtod_l+0x2ba>
 81031c6:	2a6e      	cmp	r2, #110	; 0x6e
 81031c8:	e7d9      	b.n	810317e <_strtod_l+0x306>
 81031ca:	498b      	ldr	r1, [pc, #556]	; (81033f8 <_strtod_l+0x580>)
 81031cc:	a815      	add	r0, sp, #84	; 0x54
 81031ce:	f002 fd29 	bl	8105c24 <__match>
 81031d2:	2800      	cmp	r0, #0
 81031d4:	f43f aea8 	beq.w	8102f28 <_strtod_l+0xb0>
 81031d8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 81031da:	4988      	ldr	r1, [pc, #544]	; (81033fc <_strtod_l+0x584>)
 81031dc:	3b01      	subs	r3, #1
 81031de:	a815      	add	r0, sp, #84	; 0x54
 81031e0:	9315      	str	r3, [sp, #84]	; 0x54
 81031e2:	f002 fd1f 	bl	8105c24 <__match>
 81031e6:	b910      	cbnz	r0, 81031ee <_strtod_l+0x376>
 81031e8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 81031ea:	3301      	adds	r3, #1
 81031ec:	9315      	str	r3, [sp, #84]	; 0x54
 81031ee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 810340c <_strtod_l+0x594>
 81031f2:	f04f 0800 	mov.w	r8, #0
 81031f6:	e67a      	b.n	8102eee <_strtod_l+0x76>
 81031f8:	4881      	ldr	r0, [pc, #516]	; (8103400 <_strtod_l+0x588>)
 81031fa:	f001 fb95 	bl	8104928 <nan>
 81031fe:	ec59 8b10 	vmov	r8, r9, d0
 8103202:	e674      	b.n	8102eee <_strtod_l+0x76>
 8103204:	9b05      	ldr	r3, [sp, #20]
 8103206:	9809      	ldr	r0, [sp, #36]	; 0x24
 8103208:	1afb      	subs	r3, r7, r3
 810320a:	f1bb 0f00 	cmp.w	fp, #0
 810320e:	bf08      	it	eq
 8103210:	46b3      	moveq	fp, r6
 8103212:	2e10      	cmp	r6, #16
 8103214:	9308      	str	r3, [sp, #32]
 8103216:	4635      	mov	r5, r6
 8103218:	bfa8      	it	ge
 810321a:	2510      	movge	r5, #16
 810321c:	f7fd f9fa 	bl	8100614 <__aeabi_ui2d>
 8103220:	2e09      	cmp	r6, #9
 8103222:	4680      	mov	r8, r0
 8103224:	4689      	mov	r9, r1
 8103226:	dd13      	ble.n	8103250 <_strtod_l+0x3d8>
 8103228:	4b76      	ldr	r3, [pc, #472]	; (8103404 <_strtod_l+0x58c>)
 810322a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 810322e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8103232:	f7fd fa69 	bl	8100708 <__aeabi_dmul>
 8103236:	4680      	mov	r8, r0
 8103238:	4650      	mov	r0, sl
 810323a:	4689      	mov	r9, r1
 810323c:	f7fd f9ea 	bl	8100614 <__aeabi_ui2d>
 8103240:	4602      	mov	r2, r0
 8103242:	460b      	mov	r3, r1
 8103244:	4640      	mov	r0, r8
 8103246:	4649      	mov	r1, r9
 8103248:	f7fd f8a8 	bl	810039c <__adddf3>
 810324c:	4680      	mov	r8, r0
 810324e:	4689      	mov	r9, r1
 8103250:	2e0f      	cmp	r6, #15
 8103252:	dc38      	bgt.n	81032c6 <_strtod_l+0x44e>
 8103254:	9b08      	ldr	r3, [sp, #32]
 8103256:	2b00      	cmp	r3, #0
 8103258:	f43f ae49 	beq.w	8102eee <_strtod_l+0x76>
 810325c:	dd24      	ble.n	81032a8 <_strtod_l+0x430>
 810325e:	2b16      	cmp	r3, #22
 8103260:	dc0b      	bgt.n	810327a <_strtod_l+0x402>
 8103262:	4968      	ldr	r1, [pc, #416]	; (8103404 <_strtod_l+0x58c>)
 8103264:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8103268:	e9d1 0100 	ldrd	r0, r1, [r1]
 810326c:	4642      	mov	r2, r8
 810326e:	464b      	mov	r3, r9
 8103270:	f7fd fa4a 	bl	8100708 <__aeabi_dmul>
 8103274:	4680      	mov	r8, r0
 8103276:	4689      	mov	r9, r1
 8103278:	e639      	b.n	8102eee <_strtod_l+0x76>
 810327a:	9a08      	ldr	r2, [sp, #32]
 810327c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 8103280:	4293      	cmp	r3, r2
 8103282:	db20      	blt.n	81032c6 <_strtod_l+0x44e>
 8103284:	4c5f      	ldr	r4, [pc, #380]	; (8103404 <_strtod_l+0x58c>)
 8103286:	f1c6 060f 	rsb	r6, r6, #15
 810328a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 810328e:	4642      	mov	r2, r8
 8103290:	464b      	mov	r3, r9
 8103292:	e9d1 0100 	ldrd	r0, r1, [r1]
 8103296:	f7fd fa37 	bl	8100708 <__aeabi_dmul>
 810329a:	9b08      	ldr	r3, [sp, #32]
 810329c:	1b9e      	subs	r6, r3, r6
 810329e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 81032a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 81032a6:	e7e3      	b.n	8103270 <_strtod_l+0x3f8>
 81032a8:	9b08      	ldr	r3, [sp, #32]
 81032aa:	3316      	adds	r3, #22
 81032ac:	db0b      	blt.n	81032c6 <_strtod_l+0x44e>
 81032ae:	9b05      	ldr	r3, [sp, #20]
 81032b0:	1bdf      	subs	r7, r3, r7
 81032b2:	4b54      	ldr	r3, [pc, #336]	; (8103404 <_strtod_l+0x58c>)
 81032b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 81032b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 81032bc:	4640      	mov	r0, r8
 81032be:	4649      	mov	r1, r9
 81032c0:	f7fd fb4c 	bl	810095c <__aeabi_ddiv>
 81032c4:	e7d6      	b.n	8103274 <_strtod_l+0x3fc>
 81032c6:	9b08      	ldr	r3, [sp, #32]
 81032c8:	1b75      	subs	r5, r6, r5
 81032ca:	441d      	add	r5, r3
 81032cc:	2d00      	cmp	r5, #0
 81032ce:	dd70      	ble.n	81033b2 <_strtod_l+0x53a>
 81032d0:	f015 030f 	ands.w	r3, r5, #15
 81032d4:	d00a      	beq.n	81032ec <_strtod_l+0x474>
 81032d6:	494b      	ldr	r1, [pc, #300]	; (8103404 <_strtod_l+0x58c>)
 81032d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 81032dc:	4642      	mov	r2, r8
 81032de:	464b      	mov	r3, r9
 81032e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 81032e4:	f7fd fa10 	bl	8100708 <__aeabi_dmul>
 81032e8:	4680      	mov	r8, r0
 81032ea:	4689      	mov	r9, r1
 81032ec:	f035 050f 	bics.w	r5, r5, #15
 81032f0:	d04d      	beq.n	810338e <_strtod_l+0x516>
 81032f2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 81032f6:	dd22      	ble.n	810333e <_strtod_l+0x4c6>
 81032f8:	2500      	movs	r5, #0
 81032fa:	46ab      	mov	fp, r5
 81032fc:	9509      	str	r5, [sp, #36]	; 0x24
 81032fe:	9505      	str	r5, [sp, #20]
 8103300:	2322      	movs	r3, #34	; 0x22
 8103302:	f8df 9108 	ldr.w	r9, [pc, #264]	; 810340c <_strtod_l+0x594>
 8103306:	6023      	str	r3, [r4, #0]
 8103308:	f04f 0800 	mov.w	r8, #0
 810330c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810330e:	2b00      	cmp	r3, #0
 8103310:	f43f aded 	beq.w	8102eee <_strtod_l+0x76>
 8103314:	9916      	ldr	r1, [sp, #88]	; 0x58
 8103316:	4620      	mov	r0, r4
 8103318:	f002 fe3a 	bl	8105f90 <_Bfree>
 810331c:	9905      	ldr	r1, [sp, #20]
 810331e:	4620      	mov	r0, r4
 8103320:	f002 fe36 	bl	8105f90 <_Bfree>
 8103324:	4659      	mov	r1, fp
 8103326:	4620      	mov	r0, r4
 8103328:	f002 fe32 	bl	8105f90 <_Bfree>
 810332c:	9909      	ldr	r1, [sp, #36]	; 0x24
 810332e:	4620      	mov	r0, r4
 8103330:	f002 fe2e 	bl	8105f90 <_Bfree>
 8103334:	4629      	mov	r1, r5
 8103336:	4620      	mov	r0, r4
 8103338:	f002 fe2a 	bl	8105f90 <_Bfree>
 810333c:	e5d7      	b.n	8102eee <_strtod_l+0x76>
 810333e:	4b32      	ldr	r3, [pc, #200]	; (8103408 <_strtod_l+0x590>)
 8103340:	9304      	str	r3, [sp, #16]
 8103342:	2300      	movs	r3, #0
 8103344:	112d      	asrs	r5, r5, #4
 8103346:	4640      	mov	r0, r8
 8103348:	4649      	mov	r1, r9
 810334a:	469a      	mov	sl, r3
 810334c:	2d01      	cmp	r5, #1
 810334e:	dc21      	bgt.n	8103394 <_strtod_l+0x51c>
 8103350:	b10b      	cbz	r3, 8103356 <_strtod_l+0x4de>
 8103352:	4680      	mov	r8, r0
 8103354:	4689      	mov	r9, r1
 8103356:	492c      	ldr	r1, [pc, #176]	; (8103408 <_strtod_l+0x590>)
 8103358:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 810335c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8103360:	4642      	mov	r2, r8
 8103362:	464b      	mov	r3, r9
 8103364:	e9d1 0100 	ldrd	r0, r1, [r1]
 8103368:	f7fd f9ce 	bl	8100708 <__aeabi_dmul>
 810336c:	4b27      	ldr	r3, [pc, #156]	; (810340c <_strtod_l+0x594>)
 810336e:	460a      	mov	r2, r1
 8103370:	400b      	ands	r3, r1
 8103372:	4927      	ldr	r1, [pc, #156]	; (8103410 <_strtod_l+0x598>)
 8103374:	428b      	cmp	r3, r1
 8103376:	4680      	mov	r8, r0
 8103378:	d8be      	bhi.n	81032f8 <_strtod_l+0x480>
 810337a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 810337e:	428b      	cmp	r3, r1
 8103380:	bf86      	itte	hi
 8103382:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 8103414 <_strtod_l+0x59c>
 8103386:	f04f 38ff 	movhi.w	r8, #4294967295
 810338a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 810338e:	2300      	movs	r3, #0
 8103390:	9304      	str	r3, [sp, #16]
 8103392:	e07b      	b.n	810348c <_strtod_l+0x614>
 8103394:	07ea      	lsls	r2, r5, #31
 8103396:	d505      	bpl.n	81033a4 <_strtod_l+0x52c>
 8103398:	9b04      	ldr	r3, [sp, #16]
 810339a:	e9d3 2300 	ldrd	r2, r3, [r3]
 810339e:	f7fd f9b3 	bl	8100708 <__aeabi_dmul>
 81033a2:	2301      	movs	r3, #1
 81033a4:	9a04      	ldr	r2, [sp, #16]
 81033a6:	3208      	adds	r2, #8
 81033a8:	f10a 0a01 	add.w	sl, sl, #1
 81033ac:	106d      	asrs	r5, r5, #1
 81033ae:	9204      	str	r2, [sp, #16]
 81033b0:	e7cc      	b.n	810334c <_strtod_l+0x4d4>
 81033b2:	d0ec      	beq.n	810338e <_strtod_l+0x516>
 81033b4:	426d      	negs	r5, r5
 81033b6:	f015 020f 	ands.w	r2, r5, #15
 81033ba:	d00a      	beq.n	81033d2 <_strtod_l+0x55a>
 81033bc:	4b11      	ldr	r3, [pc, #68]	; (8103404 <_strtod_l+0x58c>)
 81033be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 81033c2:	4640      	mov	r0, r8
 81033c4:	4649      	mov	r1, r9
 81033c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81033ca:	f7fd fac7 	bl	810095c <__aeabi_ddiv>
 81033ce:	4680      	mov	r8, r0
 81033d0:	4689      	mov	r9, r1
 81033d2:	112d      	asrs	r5, r5, #4
 81033d4:	d0db      	beq.n	810338e <_strtod_l+0x516>
 81033d6:	2d1f      	cmp	r5, #31
 81033d8:	dd1e      	ble.n	8103418 <_strtod_l+0x5a0>
 81033da:	2500      	movs	r5, #0
 81033dc:	46ab      	mov	fp, r5
 81033de:	9509      	str	r5, [sp, #36]	; 0x24
 81033e0:	9505      	str	r5, [sp, #20]
 81033e2:	2322      	movs	r3, #34	; 0x22
 81033e4:	f04f 0800 	mov.w	r8, #0
 81033e8:	f04f 0900 	mov.w	r9, #0
 81033ec:	6023      	str	r3, [r4, #0]
 81033ee:	e78d      	b.n	810330c <_strtod_l+0x494>
 81033f0:	0810753e 	.word	0x0810753e
 81033f4:	081073f0 	.word	0x081073f0
 81033f8:	08107536 	.word	0x08107536
 81033fc:	08107570 	.word	0x08107570
 8103400:	08107800 	.word	0x08107800
 8103404:	081076e0 	.word	0x081076e0
 8103408:	081076b8 	.word	0x081076b8
 810340c:	7ff00000 	.word	0x7ff00000
 8103410:	7ca00000 	.word	0x7ca00000
 8103414:	7fefffff 	.word	0x7fefffff
 8103418:	f015 0310 	ands.w	r3, r5, #16
 810341c:	bf18      	it	ne
 810341e:	236a      	movne	r3, #106	; 0x6a
 8103420:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 81037c4 <_strtod_l+0x94c>
 8103424:	9304      	str	r3, [sp, #16]
 8103426:	4640      	mov	r0, r8
 8103428:	4649      	mov	r1, r9
 810342a:	2300      	movs	r3, #0
 810342c:	07ea      	lsls	r2, r5, #31
 810342e:	d504      	bpl.n	810343a <_strtod_l+0x5c2>
 8103430:	e9da 2300 	ldrd	r2, r3, [sl]
 8103434:	f7fd f968 	bl	8100708 <__aeabi_dmul>
 8103438:	2301      	movs	r3, #1
 810343a:	106d      	asrs	r5, r5, #1
 810343c:	f10a 0a08 	add.w	sl, sl, #8
 8103440:	d1f4      	bne.n	810342c <_strtod_l+0x5b4>
 8103442:	b10b      	cbz	r3, 8103448 <_strtod_l+0x5d0>
 8103444:	4680      	mov	r8, r0
 8103446:	4689      	mov	r9, r1
 8103448:	9b04      	ldr	r3, [sp, #16]
 810344a:	b1bb      	cbz	r3, 810347c <_strtod_l+0x604>
 810344c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 8103450:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8103454:	2b00      	cmp	r3, #0
 8103456:	4649      	mov	r1, r9
 8103458:	dd10      	ble.n	810347c <_strtod_l+0x604>
 810345a:	2b1f      	cmp	r3, #31
 810345c:	f340 811e 	ble.w	810369c <_strtod_l+0x824>
 8103460:	2b34      	cmp	r3, #52	; 0x34
 8103462:	bfde      	ittt	le
 8103464:	f04f 33ff 	movle.w	r3, #4294967295
 8103468:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 810346c:	4093      	lslle	r3, r2
 810346e:	f04f 0800 	mov.w	r8, #0
 8103472:	bfcc      	ite	gt
 8103474:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8103478:	ea03 0901 	andle.w	r9, r3, r1
 810347c:	2200      	movs	r2, #0
 810347e:	2300      	movs	r3, #0
 8103480:	4640      	mov	r0, r8
 8103482:	4649      	mov	r1, r9
 8103484:	f7fd fba8 	bl	8100bd8 <__aeabi_dcmpeq>
 8103488:	2800      	cmp	r0, #0
 810348a:	d1a6      	bne.n	81033da <_strtod_l+0x562>
 810348c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 810348e:	9300      	str	r3, [sp, #0]
 8103490:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8103492:	4633      	mov	r3, r6
 8103494:	465a      	mov	r2, fp
 8103496:	4620      	mov	r0, r4
 8103498:	f002 fde2 	bl	8106060 <__s2b>
 810349c:	9009      	str	r0, [sp, #36]	; 0x24
 810349e:	2800      	cmp	r0, #0
 81034a0:	f43f af2a 	beq.w	81032f8 <_strtod_l+0x480>
 81034a4:	9a08      	ldr	r2, [sp, #32]
 81034a6:	9b05      	ldr	r3, [sp, #20]
 81034a8:	2a00      	cmp	r2, #0
 81034aa:	eba3 0307 	sub.w	r3, r3, r7
 81034ae:	bfa8      	it	ge
 81034b0:	2300      	movge	r3, #0
 81034b2:	930c      	str	r3, [sp, #48]	; 0x30
 81034b4:	2500      	movs	r5, #0
 81034b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 81034ba:	9312      	str	r3, [sp, #72]	; 0x48
 81034bc:	46ab      	mov	fp, r5
 81034be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81034c0:	4620      	mov	r0, r4
 81034c2:	6859      	ldr	r1, [r3, #4]
 81034c4:	f002 fd24 	bl	8105f10 <_Balloc>
 81034c8:	9005      	str	r0, [sp, #20]
 81034ca:	2800      	cmp	r0, #0
 81034cc:	f43f af18 	beq.w	8103300 <_strtod_l+0x488>
 81034d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81034d2:	691a      	ldr	r2, [r3, #16]
 81034d4:	3202      	adds	r2, #2
 81034d6:	f103 010c 	add.w	r1, r3, #12
 81034da:	0092      	lsls	r2, r2, #2
 81034dc:	300c      	adds	r0, #12
 81034de:	f001 fa12 	bl	8104906 <memcpy>
 81034e2:	ec49 8b10 	vmov	d0, r8, r9
 81034e6:	aa18      	add	r2, sp, #96	; 0x60
 81034e8:	a917      	add	r1, sp, #92	; 0x5c
 81034ea:	4620      	mov	r0, r4
 81034ec:	f003 f8ec 	bl	81066c8 <__d2b>
 81034f0:	ec49 8b18 	vmov	d8, r8, r9
 81034f4:	9016      	str	r0, [sp, #88]	; 0x58
 81034f6:	2800      	cmp	r0, #0
 81034f8:	f43f af02 	beq.w	8103300 <_strtod_l+0x488>
 81034fc:	2101      	movs	r1, #1
 81034fe:	4620      	mov	r0, r4
 8103500:	f002 fe46 	bl	8106190 <__i2b>
 8103504:	4683      	mov	fp, r0
 8103506:	2800      	cmp	r0, #0
 8103508:	f43f aefa 	beq.w	8103300 <_strtod_l+0x488>
 810350c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 810350e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8103510:	2e00      	cmp	r6, #0
 8103512:	bfab      	itete	ge
 8103514:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 8103516:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 8103518:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 810351a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 810351e:	bfac      	ite	ge
 8103520:	eb06 0a03 	addge.w	sl, r6, r3
 8103524:	1b9f      	sublt	r7, r3, r6
 8103526:	9b04      	ldr	r3, [sp, #16]
 8103528:	1af6      	subs	r6, r6, r3
 810352a:	4416      	add	r6, r2
 810352c:	4ba0      	ldr	r3, [pc, #640]	; (81037b0 <_strtod_l+0x938>)
 810352e:	3e01      	subs	r6, #1
 8103530:	429e      	cmp	r6, r3
 8103532:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8103536:	f280 80c4 	bge.w	81036c2 <_strtod_l+0x84a>
 810353a:	1b9b      	subs	r3, r3, r6
 810353c:	2b1f      	cmp	r3, #31
 810353e:	eba2 0203 	sub.w	r2, r2, r3
 8103542:	f04f 0101 	mov.w	r1, #1
 8103546:	f300 80b0 	bgt.w	81036aa <_strtod_l+0x832>
 810354a:	fa01 f303 	lsl.w	r3, r1, r3
 810354e:	930e      	str	r3, [sp, #56]	; 0x38
 8103550:	2300      	movs	r3, #0
 8103552:	930d      	str	r3, [sp, #52]	; 0x34
 8103554:	eb0a 0602 	add.w	r6, sl, r2
 8103558:	9b04      	ldr	r3, [sp, #16]
 810355a:	45b2      	cmp	sl, r6
 810355c:	4417      	add	r7, r2
 810355e:	441f      	add	r7, r3
 8103560:	4653      	mov	r3, sl
 8103562:	bfa8      	it	ge
 8103564:	4633      	movge	r3, r6
 8103566:	42bb      	cmp	r3, r7
 8103568:	bfa8      	it	ge
 810356a:	463b      	movge	r3, r7
 810356c:	2b00      	cmp	r3, #0
 810356e:	bfc2      	ittt	gt
 8103570:	1af6      	subgt	r6, r6, r3
 8103572:	1aff      	subgt	r7, r7, r3
 8103574:	ebaa 0a03 	subgt.w	sl, sl, r3
 8103578:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 810357a:	2b00      	cmp	r3, #0
 810357c:	dd17      	ble.n	81035ae <_strtod_l+0x736>
 810357e:	4659      	mov	r1, fp
 8103580:	461a      	mov	r2, r3
 8103582:	4620      	mov	r0, r4
 8103584:	f002 fec4 	bl	8106310 <__pow5mult>
 8103588:	4683      	mov	fp, r0
 810358a:	2800      	cmp	r0, #0
 810358c:	f43f aeb8 	beq.w	8103300 <_strtod_l+0x488>
 8103590:	4601      	mov	r1, r0
 8103592:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8103594:	4620      	mov	r0, r4
 8103596:	f002 fe11 	bl	81061bc <__multiply>
 810359a:	900b      	str	r0, [sp, #44]	; 0x2c
 810359c:	2800      	cmp	r0, #0
 810359e:	f43f aeaf 	beq.w	8103300 <_strtod_l+0x488>
 81035a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 81035a4:	4620      	mov	r0, r4
 81035a6:	f002 fcf3 	bl	8105f90 <_Bfree>
 81035aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81035ac:	9316      	str	r3, [sp, #88]	; 0x58
 81035ae:	2e00      	cmp	r6, #0
 81035b0:	f300 808c 	bgt.w	81036cc <_strtod_l+0x854>
 81035b4:	9b08      	ldr	r3, [sp, #32]
 81035b6:	2b00      	cmp	r3, #0
 81035b8:	dd08      	ble.n	81035cc <_strtod_l+0x754>
 81035ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 81035bc:	9905      	ldr	r1, [sp, #20]
 81035be:	4620      	mov	r0, r4
 81035c0:	f002 fea6 	bl	8106310 <__pow5mult>
 81035c4:	9005      	str	r0, [sp, #20]
 81035c6:	2800      	cmp	r0, #0
 81035c8:	f43f ae9a 	beq.w	8103300 <_strtod_l+0x488>
 81035cc:	2f00      	cmp	r7, #0
 81035ce:	dd08      	ble.n	81035e2 <_strtod_l+0x76a>
 81035d0:	9905      	ldr	r1, [sp, #20]
 81035d2:	463a      	mov	r2, r7
 81035d4:	4620      	mov	r0, r4
 81035d6:	f002 fef5 	bl	81063c4 <__lshift>
 81035da:	9005      	str	r0, [sp, #20]
 81035dc:	2800      	cmp	r0, #0
 81035de:	f43f ae8f 	beq.w	8103300 <_strtod_l+0x488>
 81035e2:	f1ba 0f00 	cmp.w	sl, #0
 81035e6:	dd08      	ble.n	81035fa <_strtod_l+0x782>
 81035e8:	4659      	mov	r1, fp
 81035ea:	4652      	mov	r2, sl
 81035ec:	4620      	mov	r0, r4
 81035ee:	f002 fee9 	bl	81063c4 <__lshift>
 81035f2:	4683      	mov	fp, r0
 81035f4:	2800      	cmp	r0, #0
 81035f6:	f43f ae83 	beq.w	8103300 <_strtod_l+0x488>
 81035fa:	9a05      	ldr	r2, [sp, #20]
 81035fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 81035fe:	4620      	mov	r0, r4
 8103600:	f002 ff68 	bl	81064d4 <__mdiff>
 8103604:	4605      	mov	r5, r0
 8103606:	2800      	cmp	r0, #0
 8103608:	f43f ae7a 	beq.w	8103300 <_strtod_l+0x488>
 810360c:	68c3      	ldr	r3, [r0, #12]
 810360e:	930b      	str	r3, [sp, #44]	; 0x2c
 8103610:	2300      	movs	r3, #0
 8103612:	60c3      	str	r3, [r0, #12]
 8103614:	4659      	mov	r1, fp
 8103616:	f002 ff41 	bl	810649c <__mcmp>
 810361a:	2800      	cmp	r0, #0
 810361c:	da60      	bge.n	81036e0 <_strtod_l+0x868>
 810361e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8103620:	ea53 0308 	orrs.w	r3, r3, r8
 8103624:	f040 8084 	bne.w	8103730 <_strtod_l+0x8b8>
 8103628:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810362c:	2b00      	cmp	r3, #0
 810362e:	d17f      	bne.n	8103730 <_strtod_l+0x8b8>
 8103630:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8103634:	0d1b      	lsrs	r3, r3, #20
 8103636:	051b      	lsls	r3, r3, #20
 8103638:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 810363c:	d978      	bls.n	8103730 <_strtod_l+0x8b8>
 810363e:	696b      	ldr	r3, [r5, #20]
 8103640:	b913      	cbnz	r3, 8103648 <_strtod_l+0x7d0>
 8103642:	692b      	ldr	r3, [r5, #16]
 8103644:	2b01      	cmp	r3, #1
 8103646:	dd73      	ble.n	8103730 <_strtod_l+0x8b8>
 8103648:	4629      	mov	r1, r5
 810364a:	2201      	movs	r2, #1
 810364c:	4620      	mov	r0, r4
 810364e:	f002 feb9 	bl	81063c4 <__lshift>
 8103652:	4659      	mov	r1, fp
 8103654:	4605      	mov	r5, r0
 8103656:	f002 ff21 	bl	810649c <__mcmp>
 810365a:	2800      	cmp	r0, #0
 810365c:	dd68      	ble.n	8103730 <_strtod_l+0x8b8>
 810365e:	9904      	ldr	r1, [sp, #16]
 8103660:	4a54      	ldr	r2, [pc, #336]	; (81037b4 <_strtod_l+0x93c>)
 8103662:	464b      	mov	r3, r9
 8103664:	2900      	cmp	r1, #0
 8103666:	f000 8084 	beq.w	8103772 <_strtod_l+0x8fa>
 810366a:	ea02 0109 	and.w	r1, r2, r9
 810366e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8103672:	dc7e      	bgt.n	8103772 <_strtod_l+0x8fa>
 8103674:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8103678:	f77f aeb3 	ble.w	81033e2 <_strtod_l+0x56a>
 810367c:	4b4e      	ldr	r3, [pc, #312]	; (81037b8 <_strtod_l+0x940>)
 810367e:	4640      	mov	r0, r8
 8103680:	4649      	mov	r1, r9
 8103682:	2200      	movs	r2, #0
 8103684:	f7fd f840 	bl	8100708 <__aeabi_dmul>
 8103688:	4b4a      	ldr	r3, [pc, #296]	; (81037b4 <_strtod_l+0x93c>)
 810368a:	400b      	ands	r3, r1
 810368c:	4680      	mov	r8, r0
 810368e:	4689      	mov	r9, r1
 8103690:	2b00      	cmp	r3, #0
 8103692:	f47f ae3f 	bne.w	8103314 <_strtod_l+0x49c>
 8103696:	2322      	movs	r3, #34	; 0x22
 8103698:	6023      	str	r3, [r4, #0]
 810369a:	e63b      	b.n	8103314 <_strtod_l+0x49c>
 810369c:	f04f 32ff 	mov.w	r2, #4294967295
 81036a0:	fa02 f303 	lsl.w	r3, r2, r3
 81036a4:	ea03 0808 	and.w	r8, r3, r8
 81036a8:	e6e8      	b.n	810347c <_strtod_l+0x604>
 81036aa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 81036ae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 81036b2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 81036b6:	36e2      	adds	r6, #226	; 0xe2
 81036b8:	fa01 f306 	lsl.w	r3, r1, r6
 81036bc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 81036c0:	e748      	b.n	8103554 <_strtod_l+0x6dc>
 81036c2:	2100      	movs	r1, #0
 81036c4:	2301      	movs	r3, #1
 81036c6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 81036ca:	e743      	b.n	8103554 <_strtod_l+0x6dc>
 81036cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 81036ce:	4632      	mov	r2, r6
 81036d0:	4620      	mov	r0, r4
 81036d2:	f002 fe77 	bl	81063c4 <__lshift>
 81036d6:	9016      	str	r0, [sp, #88]	; 0x58
 81036d8:	2800      	cmp	r0, #0
 81036da:	f47f af6b 	bne.w	81035b4 <_strtod_l+0x73c>
 81036de:	e60f      	b.n	8103300 <_strtod_l+0x488>
 81036e0:	46ca      	mov	sl, r9
 81036e2:	d171      	bne.n	81037c8 <_strtod_l+0x950>
 81036e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 81036e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 81036ea:	b352      	cbz	r2, 8103742 <_strtod_l+0x8ca>
 81036ec:	4a33      	ldr	r2, [pc, #204]	; (81037bc <_strtod_l+0x944>)
 81036ee:	4293      	cmp	r3, r2
 81036f0:	d12a      	bne.n	8103748 <_strtod_l+0x8d0>
 81036f2:	9b04      	ldr	r3, [sp, #16]
 81036f4:	4641      	mov	r1, r8
 81036f6:	b1fb      	cbz	r3, 8103738 <_strtod_l+0x8c0>
 81036f8:	4b2e      	ldr	r3, [pc, #184]	; (81037b4 <_strtod_l+0x93c>)
 81036fa:	ea09 0303 	and.w	r3, r9, r3
 81036fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8103702:	f04f 32ff 	mov.w	r2, #4294967295
 8103706:	d81a      	bhi.n	810373e <_strtod_l+0x8c6>
 8103708:	0d1b      	lsrs	r3, r3, #20
 810370a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 810370e:	fa02 f303 	lsl.w	r3, r2, r3
 8103712:	4299      	cmp	r1, r3
 8103714:	d118      	bne.n	8103748 <_strtod_l+0x8d0>
 8103716:	4b2a      	ldr	r3, [pc, #168]	; (81037c0 <_strtod_l+0x948>)
 8103718:	459a      	cmp	sl, r3
 810371a:	d102      	bne.n	8103722 <_strtod_l+0x8aa>
 810371c:	3101      	adds	r1, #1
 810371e:	f43f adef 	beq.w	8103300 <_strtod_l+0x488>
 8103722:	4b24      	ldr	r3, [pc, #144]	; (81037b4 <_strtod_l+0x93c>)
 8103724:	ea0a 0303 	and.w	r3, sl, r3
 8103728:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 810372c:	f04f 0800 	mov.w	r8, #0
 8103730:	9b04      	ldr	r3, [sp, #16]
 8103732:	2b00      	cmp	r3, #0
 8103734:	d1a2      	bne.n	810367c <_strtod_l+0x804>
 8103736:	e5ed      	b.n	8103314 <_strtod_l+0x49c>
 8103738:	f04f 33ff 	mov.w	r3, #4294967295
 810373c:	e7e9      	b.n	8103712 <_strtod_l+0x89a>
 810373e:	4613      	mov	r3, r2
 8103740:	e7e7      	b.n	8103712 <_strtod_l+0x89a>
 8103742:	ea53 0308 	orrs.w	r3, r3, r8
 8103746:	d08a      	beq.n	810365e <_strtod_l+0x7e6>
 8103748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 810374a:	b1e3      	cbz	r3, 8103786 <_strtod_l+0x90e>
 810374c:	ea13 0f0a 	tst.w	r3, sl
 8103750:	d0ee      	beq.n	8103730 <_strtod_l+0x8b8>
 8103752:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8103754:	9a04      	ldr	r2, [sp, #16]
 8103756:	4640      	mov	r0, r8
 8103758:	4649      	mov	r1, r9
 810375a:	b1c3      	cbz	r3, 810378e <_strtod_l+0x916>
 810375c:	f7ff fb6e 	bl	8102e3c <sulp>
 8103760:	4602      	mov	r2, r0
 8103762:	460b      	mov	r3, r1
 8103764:	ec51 0b18 	vmov	r0, r1, d8
 8103768:	f7fc fe18 	bl	810039c <__adddf3>
 810376c:	4680      	mov	r8, r0
 810376e:	4689      	mov	r9, r1
 8103770:	e7de      	b.n	8103730 <_strtod_l+0x8b8>
 8103772:	4013      	ands	r3, r2
 8103774:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8103778:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 810377c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8103780:	f04f 38ff 	mov.w	r8, #4294967295
 8103784:	e7d4      	b.n	8103730 <_strtod_l+0x8b8>
 8103786:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8103788:	ea13 0f08 	tst.w	r3, r8
 810378c:	e7e0      	b.n	8103750 <_strtod_l+0x8d8>
 810378e:	f7ff fb55 	bl	8102e3c <sulp>
 8103792:	4602      	mov	r2, r0
 8103794:	460b      	mov	r3, r1
 8103796:	ec51 0b18 	vmov	r0, r1, d8
 810379a:	f7fc fdfd 	bl	8100398 <__aeabi_dsub>
 810379e:	2200      	movs	r2, #0
 81037a0:	2300      	movs	r3, #0
 81037a2:	4680      	mov	r8, r0
 81037a4:	4689      	mov	r9, r1
 81037a6:	f7fd fa17 	bl	8100bd8 <__aeabi_dcmpeq>
 81037aa:	2800      	cmp	r0, #0
 81037ac:	d0c0      	beq.n	8103730 <_strtod_l+0x8b8>
 81037ae:	e618      	b.n	81033e2 <_strtod_l+0x56a>
 81037b0:	fffffc02 	.word	0xfffffc02
 81037b4:	7ff00000 	.word	0x7ff00000
 81037b8:	39500000 	.word	0x39500000
 81037bc:	000fffff 	.word	0x000fffff
 81037c0:	7fefffff 	.word	0x7fefffff
 81037c4:	08107408 	.word	0x08107408
 81037c8:	4659      	mov	r1, fp
 81037ca:	4628      	mov	r0, r5
 81037cc:	f002 ffd6 	bl	810677c <__ratio>
 81037d0:	ec57 6b10 	vmov	r6, r7, d0
 81037d4:	ee10 0a10 	vmov	r0, s0
 81037d8:	2200      	movs	r2, #0
 81037da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 81037de:	4639      	mov	r1, r7
 81037e0:	f7fd fa0e 	bl	8100c00 <__aeabi_dcmple>
 81037e4:	2800      	cmp	r0, #0
 81037e6:	d071      	beq.n	81038cc <_strtod_l+0xa54>
 81037e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81037ea:	2b00      	cmp	r3, #0
 81037ec:	d17c      	bne.n	81038e8 <_strtod_l+0xa70>
 81037ee:	f1b8 0f00 	cmp.w	r8, #0
 81037f2:	d15a      	bne.n	81038aa <_strtod_l+0xa32>
 81037f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 81037f8:	2b00      	cmp	r3, #0
 81037fa:	d15d      	bne.n	81038b8 <_strtod_l+0xa40>
 81037fc:	4b90      	ldr	r3, [pc, #576]	; (8103a40 <_strtod_l+0xbc8>)
 81037fe:	2200      	movs	r2, #0
 8103800:	4630      	mov	r0, r6
 8103802:	4639      	mov	r1, r7
 8103804:	f7fd f9f2 	bl	8100bec <__aeabi_dcmplt>
 8103808:	2800      	cmp	r0, #0
 810380a:	d15c      	bne.n	81038c6 <_strtod_l+0xa4e>
 810380c:	4630      	mov	r0, r6
 810380e:	4639      	mov	r1, r7
 8103810:	4b8c      	ldr	r3, [pc, #560]	; (8103a44 <_strtod_l+0xbcc>)
 8103812:	2200      	movs	r2, #0
 8103814:	f7fc ff78 	bl	8100708 <__aeabi_dmul>
 8103818:	4606      	mov	r6, r0
 810381a:	460f      	mov	r7, r1
 810381c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8103820:	9606      	str	r6, [sp, #24]
 8103822:	9307      	str	r3, [sp, #28]
 8103824:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8103828:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 810382c:	4b86      	ldr	r3, [pc, #536]	; (8103a48 <_strtod_l+0xbd0>)
 810382e:	ea0a 0303 	and.w	r3, sl, r3
 8103832:	930d      	str	r3, [sp, #52]	; 0x34
 8103834:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8103836:	4b85      	ldr	r3, [pc, #532]	; (8103a4c <_strtod_l+0xbd4>)
 8103838:	429a      	cmp	r2, r3
 810383a:	f040 8090 	bne.w	810395e <_strtod_l+0xae6>
 810383e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 8103842:	ec49 8b10 	vmov	d0, r8, r9
 8103846:	f002 fecf 	bl	81065e8 <__ulp>
 810384a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 810384e:	ec51 0b10 	vmov	r0, r1, d0
 8103852:	f7fc ff59 	bl	8100708 <__aeabi_dmul>
 8103856:	4642      	mov	r2, r8
 8103858:	464b      	mov	r3, r9
 810385a:	f7fc fd9f 	bl	810039c <__adddf3>
 810385e:	460b      	mov	r3, r1
 8103860:	4979      	ldr	r1, [pc, #484]	; (8103a48 <_strtod_l+0xbd0>)
 8103862:	4a7b      	ldr	r2, [pc, #492]	; (8103a50 <_strtod_l+0xbd8>)
 8103864:	4019      	ands	r1, r3
 8103866:	4291      	cmp	r1, r2
 8103868:	4680      	mov	r8, r0
 810386a:	d944      	bls.n	81038f6 <_strtod_l+0xa7e>
 810386c:	ee18 2a90 	vmov	r2, s17
 8103870:	4b78      	ldr	r3, [pc, #480]	; (8103a54 <_strtod_l+0xbdc>)
 8103872:	429a      	cmp	r2, r3
 8103874:	d104      	bne.n	8103880 <_strtod_l+0xa08>
 8103876:	ee18 3a10 	vmov	r3, s16
 810387a:	3301      	adds	r3, #1
 810387c:	f43f ad40 	beq.w	8103300 <_strtod_l+0x488>
 8103880:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 8103a54 <_strtod_l+0xbdc>
 8103884:	f04f 38ff 	mov.w	r8, #4294967295
 8103888:	9916      	ldr	r1, [sp, #88]	; 0x58
 810388a:	4620      	mov	r0, r4
 810388c:	f002 fb80 	bl	8105f90 <_Bfree>
 8103890:	9905      	ldr	r1, [sp, #20]
 8103892:	4620      	mov	r0, r4
 8103894:	f002 fb7c 	bl	8105f90 <_Bfree>
 8103898:	4659      	mov	r1, fp
 810389a:	4620      	mov	r0, r4
 810389c:	f002 fb78 	bl	8105f90 <_Bfree>
 81038a0:	4629      	mov	r1, r5
 81038a2:	4620      	mov	r0, r4
 81038a4:	f002 fb74 	bl	8105f90 <_Bfree>
 81038a8:	e609      	b.n	81034be <_strtod_l+0x646>
 81038aa:	f1b8 0f01 	cmp.w	r8, #1
 81038ae:	d103      	bne.n	81038b8 <_strtod_l+0xa40>
 81038b0:	f1b9 0f00 	cmp.w	r9, #0
 81038b4:	f43f ad95 	beq.w	81033e2 <_strtod_l+0x56a>
 81038b8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 8103a10 <_strtod_l+0xb98>
 81038bc:	4f60      	ldr	r7, [pc, #384]	; (8103a40 <_strtod_l+0xbc8>)
 81038be:	ed8d 7b06 	vstr	d7, [sp, #24]
 81038c2:	2600      	movs	r6, #0
 81038c4:	e7ae      	b.n	8103824 <_strtod_l+0x9ac>
 81038c6:	4f5f      	ldr	r7, [pc, #380]	; (8103a44 <_strtod_l+0xbcc>)
 81038c8:	2600      	movs	r6, #0
 81038ca:	e7a7      	b.n	810381c <_strtod_l+0x9a4>
 81038cc:	4b5d      	ldr	r3, [pc, #372]	; (8103a44 <_strtod_l+0xbcc>)
 81038ce:	4630      	mov	r0, r6
 81038d0:	4639      	mov	r1, r7
 81038d2:	2200      	movs	r2, #0
 81038d4:	f7fc ff18 	bl	8100708 <__aeabi_dmul>
 81038d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 81038da:	4606      	mov	r6, r0
 81038dc:	460f      	mov	r7, r1
 81038de:	2b00      	cmp	r3, #0
 81038e0:	d09c      	beq.n	810381c <_strtod_l+0x9a4>
 81038e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 81038e6:	e79d      	b.n	8103824 <_strtod_l+0x9ac>
 81038e8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 8103a18 <_strtod_l+0xba0>
 81038ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 81038f0:	ec57 6b17 	vmov	r6, r7, d7
 81038f4:	e796      	b.n	8103824 <_strtod_l+0x9ac>
 81038f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 81038fa:	9b04      	ldr	r3, [sp, #16]
 81038fc:	46ca      	mov	sl, r9
 81038fe:	2b00      	cmp	r3, #0
 8103900:	d1c2      	bne.n	8103888 <_strtod_l+0xa10>
 8103902:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8103906:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8103908:	0d1b      	lsrs	r3, r3, #20
 810390a:	051b      	lsls	r3, r3, #20
 810390c:	429a      	cmp	r2, r3
 810390e:	d1bb      	bne.n	8103888 <_strtod_l+0xa10>
 8103910:	4630      	mov	r0, r6
 8103912:	4639      	mov	r1, r7
 8103914:	f7fd fa40 	bl	8100d98 <__aeabi_d2lz>
 8103918:	f7fc fec8 	bl	81006ac <__aeabi_l2d>
 810391c:	4602      	mov	r2, r0
 810391e:	460b      	mov	r3, r1
 8103920:	4630      	mov	r0, r6
 8103922:	4639      	mov	r1, r7
 8103924:	f7fc fd38 	bl	8100398 <__aeabi_dsub>
 8103928:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 810392a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 810392e:	ea43 0308 	orr.w	r3, r3, r8
 8103932:	4313      	orrs	r3, r2
 8103934:	4606      	mov	r6, r0
 8103936:	460f      	mov	r7, r1
 8103938:	d054      	beq.n	81039e4 <_strtod_l+0xb6c>
 810393a:	a339      	add	r3, pc, #228	; (adr r3, 8103a20 <_strtod_l+0xba8>)
 810393c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103940:	f7fd f954 	bl	8100bec <__aeabi_dcmplt>
 8103944:	2800      	cmp	r0, #0
 8103946:	f47f ace5 	bne.w	8103314 <_strtod_l+0x49c>
 810394a:	a337      	add	r3, pc, #220	; (adr r3, 8103a28 <_strtod_l+0xbb0>)
 810394c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103950:	4630      	mov	r0, r6
 8103952:	4639      	mov	r1, r7
 8103954:	f7fd f968 	bl	8100c28 <__aeabi_dcmpgt>
 8103958:	2800      	cmp	r0, #0
 810395a:	d095      	beq.n	8103888 <_strtod_l+0xa10>
 810395c:	e4da      	b.n	8103314 <_strtod_l+0x49c>
 810395e:	9b04      	ldr	r3, [sp, #16]
 8103960:	b333      	cbz	r3, 81039b0 <_strtod_l+0xb38>
 8103962:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8103964:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8103968:	d822      	bhi.n	81039b0 <_strtod_l+0xb38>
 810396a:	a331      	add	r3, pc, #196	; (adr r3, 8103a30 <_strtod_l+0xbb8>)
 810396c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8103970:	4630      	mov	r0, r6
 8103972:	4639      	mov	r1, r7
 8103974:	f7fd f944 	bl	8100c00 <__aeabi_dcmple>
 8103978:	b1a0      	cbz	r0, 81039a4 <_strtod_l+0xb2c>
 810397a:	4639      	mov	r1, r7
 810397c:	4630      	mov	r0, r6
 810397e:	f7fd f99b 	bl	8100cb8 <__aeabi_d2uiz>
 8103982:	2801      	cmp	r0, #1
 8103984:	bf38      	it	cc
 8103986:	2001      	movcc	r0, #1
 8103988:	f7fc fe44 	bl	8100614 <__aeabi_ui2d>
 810398c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 810398e:	4606      	mov	r6, r0
 8103990:	460f      	mov	r7, r1
 8103992:	bb23      	cbnz	r3, 81039de <_strtod_l+0xb66>
 8103994:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8103998:	9010      	str	r0, [sp, #64]	; 0x40
 810399a:	9311      	str	r3, [sp, #68]	; 0x44
 810399c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 81039a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 81039a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 81039a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 81039a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 81039ac:	1a9b      	subs	r3, r3, r2
 81039ae:	930f      	str	r3, [sp, #60]	; 0x3c
 81039b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 81039b4:	eeb0 0a48 	vmov.f32	s0, s16
 81039b8:	eef0 0a68 	vmov.f32	s1, s17
 81039bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 81039c0:	f002 fe12 	bl	81065e8 <__ulp>
 81039c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 81039c8:	ec53 2b10 	vmov	r2, r3, d0
 81039cc:	f7fc fe9c 	bl	8100708 <__aeabi_dmul>
 81039d0:	ec53 2b18 	vmov	r2, r3, d8
 81039d4:	f7fc fce2 	bl	810039c <__adddf3>
 81039d8:	4680      	mov	r8, r0
 81039da:	4689      	mov	r9, r1
 81039dc:	e78d      	b.n	81038fa <_strtod_l+0xa82>
 81039de:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 81039e2:	e7db      	b.n	810399c <_strtod_l+0xb24>
 81039e4:	a314      	add	r3, pc, #80	; (adr r3, 8103a38 <_strtod_l+0xbc0>)
 81039e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 81039ea:	f7fd f8ff 	bl	8100bec <__aeabi_dcmplt>
 81039ee:	e7b3      	b.n	8103958 <_strtod_l+0xae0>
 81039f0:	2300      	movs	r3, #0
 81039f2:	930a      	str	r3, [sp, #40]	; 0x28
 81039f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 81039f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 81039f8:	6013      	str	r3, [r2, #0]
 81039fa:	f7ff ba7c 	b.w	8102ef6 <_strtod_l+0x7e>
 81039fe:	2a65      	cmp	r2, #101	; 0x65
 8103a00:	f43f ab75 	beq.w	81030ee <_strtod_l+0x276>
 8103a04:	2a45      	cmp	r2, #69	; 0x45
 8103a06:	f43f ab72 	beq.w	81030ee <_strtod_l+0x276>
 8103a0a:	2301      	movs	r3, #1
 8103a0c:	f7ff bbaa 	b.w	8103164 <_strtod_l+0x2ec>
 8103a10:	00000000 	.word	0x00000000
 8103a14:	bff00000 	.word	0xbff00000
 8103a18:	00000000 	.word	0x00000000
 8103a1c:	3ff00000 	.word	0x3ff00000
 8103a20:	94a03595 	.word	0x94a03595
 8103a24:	3fdfffff 	.word	0x3fdfffff
 8103a28:	35afe535 	.word	0x35afe535
 8103a2c:	3fe00000 	.word	0x3fe00000
 8103a30:	ffc00000 	.word	0xffc00000
 8103a34:	41dfffff 	.word	0x41dfffff
 8103a38:	94a03595 	.word	0x94a03595
 8103a3c:	3fcfffff 	.word	0x3fcfffff
 8103a40:	3ff00000 	.word	0x3ff00000
 8103a44:	3fe00000 	.word	0x3fe00000
 8103a48:	7ff00000 	.word	0x7ff00000
 8103a4c:	7fe00000 	.word	0x7fe00000
 8103a50:	7c9fffff 	.word	0x7c9fffff
 8103a54:	7fefffff 	.word	0x7fefffff

08103a58 <strtof>:
 8103a58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8103a5c:	f8df 80c0 	ldr.w	r8, [pc, #192]	; 8103b20 <strtof+0xc8>
 8103a60:	4b2a      	ldr	r3, [pc, #168]	; (8103b0c <strtof+0xb4>)
 8103a62:	460a      	mov	r2, r1
 8103a64:	ed2d 8b02 	vpush	{d8}
 8103a68:	4601      	mov	r1, r0
 8103a6a:	f8d8 0000 	ldr.w	r0, [r8]
 8103a6e:	f7ff fa03 	bl	8102e78 <_strtod_l>
 8103a72:	ec55 4b10 	vmov	r4, r5, d0
 8103a76:	ee10 2a10 	vmov	r2, s0
 8103a7a:	ee10 0a10 	vmov	r0, s0
 8103a7e:	462b      	mov	r3, r5
 8103a80:	4629      	mov	r1, r5
 8103a82:	f7fd f8db 	bl	8100c3c <__aeabi_dcmpun>
 8103a86:	b190      	cbz	r0, 8103aae <strtof+0x56>
 8103a88:	2d00      	cmp	r5, #0
 8103a8a:	4821      	ldr	r0, [pc, #132]	; (8103b10 <strtof+0xb8>)
 8103a8c:	da09      	bge.n	8103aa2 <strtof+0x4a>
 8103a8e:	f000 ff53 	bl	8104938 <nanf>
 8103a92:	eeb1 8a40 	vneg.f32	s16, s0
 8103a96:	eeb0 0a48 	vmov.f32	s0, s16
 8103a9a:	ecbd 8b02 	vpop	{d8}
 8103a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8103aa2:	ecbd 8b02 	vpop	{d8}
 8103aa6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8103aaa:	f000 bf45 	b.w	8104938 <nanf>
 8103aae:	4620      	mov	r0, r4
 8103ab0:	4629      	mov	r1, r5
 8103ab2:	f7fd f921 	bl	8100cf8 <__aeabi_d2f>
 8103ab6:	ee08 0a10 	vmov	s16, r0
 8103aba:	eddf 7a16 	vldr	s15, [pc, #88]	; 8103b14 <strtof+0xbc>
 8103abe:	eeb0 7ac8 	vabs.f32	s14, s16
 8103ac2:	eeb4 7a67 	vcmp.f32	s14, s15
 8103ac6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8103aca:	dd11      	ble.n	8103af0 <strtof+0x98>
 8103acc:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 8103ad0:	4b11      	ldr	r3, [pc, #68]	; (8103b18 <strtof+0xc0>)
 8103ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8103ad6:	4620      	mov	r0, r4
 8103ad8:	4639      	mov	r1, r7
 8103ada:	f7fd f8af 	bl	8100c3c <__aeabi_dcmpun>
 8103ade:	b980      	cbnz	r0, 8103b02 <strtof+0xaa>
 8103ae0:	4b0d      	ldr	r3, [pc, #52]	; (8103b18 <strtof+0xc0>)
 8103ae2:	f04f 32ff 	mov.w	r2, #4294967295
 8103ae6:	4620      	mov	r0, r4
 8103ae8:	4639      	mov	r1, r7
 8103aea:	f7fd f889 	bl	8100c00 <__aeabi_dcmple>
 8103aee:	b940      	cbnz	r0, 8103b02 <strtof+0xaa>
 8103af0:	ee18 3a10 	vmov	r3, s16
 8103af4:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8103af8:	d1cd      	bne.n	8103a96 <strtof+0x3e>
 8103afa:	4b08      	ldr	r3, [pc, #32]	; (8103b1c <strtof+0xc4>)
 8103afc:	402b      	ands	r3, r5
 8103afe:	2b00      	cmp	r3, #0
 8103b00:	d0c9      	beq.n	8103a96 <strtof+0x3e>
 8103b02:	f8d8 3000 	ldr.w	r3, [r8]
 8103b06:	2222      	movs	r2, #34	; 0x22
 8103b08:	601a      	str	r2, [r3, #0]
 8103b0a:	e7c4      	b.n	8103a96 <strtof+0x3e>
 8103b0c:	1000000c 	.word	0x1000000c
 8103b10:	08107800 	.word	0x08107800
 8103b14:	7f7fffff 	.word	0x7f7fffff
 8103b18:	7fefffff 	.word	0x7fefffff
 8103b1c:	7ff00000 	.word	0x7ff00000
 8103b20:	100001c4 	.word	0x100001c4

08103b24 <_strtol_l.constprop.0>:
 8103b24:	2b01      	cmp	r3, #1
 8103b26:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8103b2a:	d001      	beq.n	8103b30 <_strtol_l.constprop.0+0xc>
 8103b2c:	2b24      	cmp	r3, #36	; 0x24
 8103b2e:	d906      	bls.n	8103b3e <_strtol_l.constprop.0+0x1a>
 8103b30:	f000 febc 	bl	81048ac <__errno>
 8103b34:	2316      	movs	r3, #22
 8103b36:	6003      	str	r3, [r0, #0]
 8103b38:	2000      	movs	r0, #0
 8103b3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8103b3e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8103c24 <_strtol_l.constprop.0+0x100>
 8103b42:	460d      	mov	r5, r1
 8103b44:	462e      	mov	r6, r5
 8103b46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8103b4a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8103b4e:	f017 0708 	ands.w	r7, r7, #8
 8103b52:	d1f7      	bne.n	8103b44 <_strtol_l.constprop.0+0x20>
 8103b54:	2c2d      	cmp	r4, #45	; 0x2d
 8103b56:	d132      	bne.n	8103bbe <_strtol_l.constprop.0+0x9a>
 8103b58:	782c      	ldrb	r4, [r5, #0]
 8103b5a:	2701      	movs	r7, #1
 8103b5c:	1cb5      	adds	r5, r6, #2
 8103b5e:	2b00      	cmp	r3, #0
 8103b60:	d05b      	beq.n	8103c1a <_strtol_l.constprop.0+0xf6>
 8103b62:	2b10      	cmp	r3, #16
 8103b64:	d109      	bne.n	8103b7a <_strtol_l.constprop.0+0x56>
 8103b66:	2c30      	cmp	r4, #48	; 0x30
 8103b68:	d107      	bne.n	8103b7a <_strtol_l.constprop.0+0x56>
 8103b6a:	782c      	ldrb	r4, [r5, #0]
 8103b6c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8103b70:	2c58      	cmp	r4, #88	; 0x58
 8103b72:	d14d      	bne.n	8103c10 <_strtol_l.constprop.0+0xec>
 8103b74:	786c      	ldrb	r4, [r5, #1]
 8103b76:	2310      	movs	r3, #16
 8103b78:	3502      	adds	r5, #2
 8103b7a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8103b7e:	f108 38ff 	add.w	r8, r8, #4294967295
 8103b82:	f04f 0e00 	mov.w	lr, #0
 8103b86:	fbb8 f9f3 	udiv	r9, r8, r3
 8103b8a:	4676      	mov	r6, lr
 8103b8c:	fb03 8a19 	mls	sl, r3, r9, r8
 8103b90:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8103b94:	f1bc 0f09 	cmp.w	ip, #9
 8103b98:	d816      	bhi.n	8103bc8 <_strtol_l.constprop.0+0xa4>
 8103b9a:	4664      	mov	r4, ip
 8103b9c:	42a3      	cmp	r3, r4
 8103b9e:	dd24      	ble.n	8103bea <_strtol_l.constprop.0+0xc6>
 8103ba0:	f1be 3fff 	cmp.w	lr, #4294967295
 8103ba4:	d008      	beq.n	8103bb8 <_strtol_l.constprop.0+0x94>
 8103ba6:	45b1      	cmp	r9, r6
 8103ba8:	d31c      	bcc.n	8103be4 <_strtol_l.constprop.0+0xc0>
 8103baa:	d101      	bne.n	8103bb0 <_strtol_l.constprop.0+0x8c>
 8103bac:	45a2      	cmp	sl, r4
 8103bae:	db19      	blt.n	8103be4 <_strtol_l.constprop.0+0xc0>
 8103bb0:	fb06 4603 	mla	r6, r6, r3, r4
 8103bb4:	f04f 0e01 	mov.w	lr, #1
 8103bb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8103bbc:	e7e8      	b.n	8103b90 <_strtol_l.constprop.0+0x6c>
 8103bbe:	2c2b      	cmp	r4, #43	; 0x2b
 8103bc0:	bf04      	itt	eq
 8103bc2:	782c      	ldrbeq	r4, [r5, #0]
 8103bc4:	1cb5      	addeq	r5, r6, #2
 8103bc6:	e7ca      	b.n	8103b5e <_strtol_l.constprop.0+0x3a>
 8103bc8:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8103bcc:	f1bc 0f19 	cmp.w	ip, #25
 8103bd0:	d801      	bhi.n	8103bd6 <_strtol_l.constprop.0+0xb2>
 8103bd2:	3c37      	subs	r4, #55	; 0x37
 8103bd4:	e7e2      	b.n	8103b9c <_strtol_l.constprop.0+0x78>
 8103bd6:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8103bda:	f1bc 0f19 	cmp.w	ip, #25
 8103bde:	d804      	bhi.n	8103bea <_strtol_l.constprop.0+0xc6>
 8103be0:	3c57      	subs	r4, #87	; 0x57
 8103be2:	e7db      	b.n	8103b9c <_strtol_l.constprop.0+0x78>
 8103be4:	f04f 3eff 	mov.w	lr, #4294967295
 8103be8:	e7e6      	b.n	8103bb8 <_strtol_l.constprop.0+0x94>
 8103bea:	f1be 3fff 	cmp.w	lr, #4294967295
 8103bee:	d105      	bne.n	8103bfc <_strtol_l.constprop.0+0xd8>
 8103bf0:	2322      	movs	r3, #34	; 0x22
 8103bf2:	6003      	str	r3, [r0, #0]
 8103bf4:	4646      	mov	r6, r8
 8103bf6:	b942      	cbnz	r2, 8103c0a <_strtol_l.constprop.0+0xe6>
 8103bf8:	4630      	mov	r0, r6
 8103bfa:	e79e      	b.n	8103b3a <_strtol_l.constprop.0+0x16>
 8103bfc:	b107      	cbz	r7, 8103c00 <_strtol_l.constprop.0+0xdc>
 8103bfe:	4276      	negs	r6, r6
 8103c00:	2a00      	cmp	r2, #0
 8103c02:	d0f9      	beq.n	8103bf8 <_strtol_l.constprop.0+0xd4>
 8103c04:	f1be 0f00 	cmp.w	lr, #0
 8103c08:	d000      	beq.n	8103c0c <_strtol_l.constprop.0+0xe8>
 8103c0a:	1e69      	subs	r1, r5, #1
 8103c0c:	6011      	str	r1, [r2, #0]
 8103c0e:	e7f3      	b.n	8103bf8 <_strtol_l.constprop.0+0xd4>
 8103c10:	2430      	movs	r4, #48	; 0x30
 8103c12:	2b00      	cmp	r3, #0
 8103c14:	d1b1      	bne.n	8103b7a <_strtol_l.constprop.0+0x56>
 8103c16:	2308      	movs	r3, #8
 8103c18:	e7af      	b.n	8103b7a <_strtol_l.constprop.0+0x56>
 8103c1a:	2c30      	cmp	r4, #48	; 0x30
 8103c1c:	d0a5      	beq.n	8103b6a <_strtol_l.constprop.0+0x46>
 8103c1e:	230a      	movs	r3, #10
 8103c20:	e7ab      	b.n	8103b7a <_strtol_l.constprop.0+0x56>
 8103c22:	bf00      	nop
 8103c24:	08107431 	.word	0x08107431

08103c28 <strtol>:
 8103c28:	4613      	mov	r3, r2
 8103c2a:	460a      	mov	r2, r1
 8103c2c:	4601      	mov	r1, r0
 8103c2e:	4802      	ldr	r0, [pc, #8]	; (8103c38 <strtol+0x10>)
 8103c30:	6800      	ldr	r0, [r0, #0]
 8103c32:	f7ff bf77 	b.w	8103b24 <_strtol_l.constprop.0>
 8103c36:	bf00      	nop
 8103c38:	100001c4 	.word	0x100001c4

08103c3c <__cvt>:
 8103c3c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8103c40:	ec55 4b10 	vmov	r4, r5, d0
 8103c44:	2d00      	cmp	r5, #0
 8103c46:	460e      	mov	r6, r1
 8103c48:	4619      	mov	r1, r3
 8103c4a:	462b      	mov	r3, r5
 8103c4c:	bfbb      	ittet	lt
 8103c4e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8103c52:	461d      	movlt	r5, r3
 8103c54:	2300      	movge	r3, #0
 8103c56:	232d      	movlt	r3, #45	; 0x2d
 8103c58:	700b      	strb	r3, [r1, #0]
 8103c5a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8103c5c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8103c60:	4691      	mov	r9, r2
 8103c62:	f023 0820 	bic.w	r8, r3, #32
 8103c66:	bfbc      	itt	lt
 8103c68:	4622      	movlt	r2, r4
 8103c6a:	4614      	movlt	r4, r2
 8103c6c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8103c70:	d005      	beq.n	8103c7e <__cvt+0x42>
 8103c72:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8103c76:	d100      	bne.n	8103c7a <__cvt+0x3e>
 8103c78:	3601      	adds	r6, #1
 8103c7a:	2102      	movs	r1, #2
 8103c7c:	e000      	b.n	8103c80 <__cvt+0x44>
 8103c7e:	2103      	movs	r1, #3
 8103c80:	ab03      	add	r3, sp, #12
 8103c82:	9301      	str	r3, [sp, #4]
 8103c84:	ab02      	add	r3, sp, #8
 8103c86:	9300      	str	r3, [sp, #0]
 8103c88:	ec45 4b10 	vmov	d0, r4, r5
 8103c8c:	4653      	mov	r3, sl
 8103c8e:	4632      	mov	r2, r6
 8103c90:	f000 fee2 	bl	8104a58 <_dtoa_r>
 8103c94:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8103c98:	4607      	mov	r7, r0
 8103c9a:	d102      	bne.n	8103ca2 <__cvt+0x66>
 8103c9c:	f019 0f01 	tst.w	r9, #1
 8103ca0:	d022      	beq.n	8103ce8 <__cvt+0xac>
 8103ca2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8103ca6:	eb07 0906 	add.w	r9, r7, r6
 8103caa:	d110      	bne.n	8103cce <__cvt+0x92>
 8103cac:	783b      	ldrb	r3, [r7, #0]
 8103cae:	2b30      	cmp	r3, #48	; 0x30
 8103cb0:	d10a      	bne.n	8103cc8 <__cvt+0x8c>
 8103cb2:	2200      	movs	r2, #0
 8103cb4:	2300      	movs	r3, #0
 8103cb6:	4620      	mov	r0, r4
 8103cb8:	4629      	mov	r1, r5
 8103cba:	f7fc ff8d 	bl	8100bd8 <__aeabi_dcmpeq>
 8103cbe:	b918      	cbnz	r0, 8103cc8 <__cvt+0x8c>
 8103cc0:	f1c6 0601 	rsb	r6, r6, #1
 8103cc4:	f8ca 6000 	str.w	r6, [sl]
 8103cc8:	f8da 3000 	ldr.w	r3, [sl]
 8103ccc:	4499      	add	r9, r3
 8103cce:	2200      	movs	r2, #0
 8103cd0:	2300      	movs	r3, #0
 8103cd2:	4620      	mov	r0, r4
 8103cd4:	4629      	mov	r1, r5
 8103cd6:	f7fc ff7f 	bl	8100bd8 <__aeabi_dcmpeq>
 8103cda:	b108      	cbz	r0, 8103ce0 <__cvt+0xa4>
 8103cdc:	f8cd 900c 	str.w	r9, [sp, #12]
 8103ce0:	2230      	movs	r2, #48	; 0x30
 8103ce2:	9b03      	ldr	r3, [sp, #12]
 8103ce4:	454b      	cmp	r3, r9
 8103ce6:	d307      	bcc.n	8103cf8 <__cvt+0xbc>
 8103ce8:	9b03      	ldr	r3, [sp, #12]
 8103cea:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8103cec:	1bdb      	subs	r3, r3, r7
 8103cee:	4638      	mov	r0, r7
 8103cf0:	6013      	str	r3, [r2, #0]
 8103cf2:	b004      	add	sp, #16
 8103cf4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8103cf8:	1c59      	adds	r1, r3, #1
 8103cfa:	9103      	str	r1, [sp, #12]
 8103cfc:	701a      	strb	r2, [r3, #0]
 8103cfe:	e7f0      	b.n	8103ce2 <__cvt+0xa6>

08103d00 <__exponent>:
 8103d00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8103d02:	4603      	mov	r3, r0
 8103d04:	2900      	cmp	r1, #0
 8103d06:	bfb8      	it	lt
 8103d08:	4249      	neglt	r1, r1
 8103d0a:	f803 2b02 	strb.w	r2, [r3], #2
 8103d0e:	bfb4      	ite	lt
 8103d10:	222d      	movlt	r2, #45	; 0x2d
 8103d12:	222b      	movge	r2, #43	; 0x2b
 8103d14:	2909      	cmp	r1, #9
 8103d16:	7042      	strb	r2, [r0, #1]
 8103d18:	dd2a      	ble.n	8103d70 <__exponent+0x70>
 8103d1a:	f10d 0207 	add.w	r2, sp, #7
 8103d1e:	4617      	mov	r7, r2
 8103d20:	260a      	movs	r6, #10
 8103d22:	4694      	mov	ip, r2
 8103d24:	fb91 f5f6 	sdiv	r5, r1, r6
 8103d28:	fb06 1415 	mls	r4, r6, r5, r1
 8103d2c:	3430      	adds	r4, #48	; 0x30
 8103d2e:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8103d32:	460c      	mov	r4, r1
 8103d34:	2c63      	cmp	r4, #99	; 0x63
 8103d36:	f102 32ff 	add.w	r2, r2, #4294967295
 8103d3a:	4629      	mov	r1, r5
 8103d3c:	dcf1      	bgt.n	8103d22 <__exponent+0x22>
 8103d3e:	3130      	adds	r1, #48	; 0x30
 8103d40:	f1ac 0402 	sub.w	r4, ip, #2
 8103d44:	f802 1c01 	strb.w	r1, [r2, #-1]
 8103d48:	1c41      	adds	r1, r0, #1
 8103d4a:	4622      	mov	r2, r4
 8103d4c:	42ba      	cmp	r2, r7
 8103d4e:	d30a      	bcc.n	8103d66 <__exponent+0x66>
 8103d50:	f10d 0209 	add.w	r2, sp, #9
 8103d54:	eba2 020c 	sub.w	r2, r2, ip
 8103d58:	42bc      	cmp	r4, r7
 8103d5a:	bf88      	it	hi
 8103d5c:	2200      	movhi	r2, #0
 8103d5e:	4413      	add	r3, r2
 8103d60:	1a18      	subs	r0, r3, r0
 8103d62:	b003      	add	sp, #12
 8103d64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8103d66:	f812 5b01 	ldrb.w	r5, [r2], #1
 8103d6a:	f801 5f01 	strb.w	r5, [r1, #1]!
 8103d6e:	e7ed      	b.n	8103d4c <__exponent+0x4c>
 8103d70:	2330      	movs	r3, #48	; 0x30
 8103d72:	3130      	adds	r1, #48	; 0x30
 8103d74:	7083      	strb	r3, [r0, #2]
 8103d76:	70c1      	strb	r1, [r0, #3]
 8103d78:	1d03      	adds	r3, r0, #4
 8103d7a:	e7f1      	b.n	8103d60 <__exponent+0x60>

08103d7c <_printf_float>:
 8103d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8103d80:	ed2d 8b02 	vpush	{d8}
 8103d84:	b08d      	sub	sp, #52	; 0x34
 8103d86:	460c      	mov	r4, r1
 8103d88:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8103d8c:	4616      	mov	r6, r2
 8103d8e:	461f      	mov	r7, r3
 8103d90:	4605      	mov	r5, r0
 8103d92:	f000 fd41 	bl	8104818 <_localeconv_r>
 8103d96:	f8d0 a000 	ldr.w	sl, [r0]
 8103d9a:	4650      	mov	r0, sl
 8103d9c:	f7fc faf0 	bl	8100380 <strlen>
 8103da0:	2300      	movs	r3, #0
 8103da2:	930a      	str	r3, [sp, #40]	; 0x28
 8103da4:	6823      	ldr	r3, [r4, #0]
 8103da6:	9305      	str	r3, [sp, #20]
 8103da8:	f8d8 3000 	ldr.w	r3, [r8]
 8103dac:	f894 b018 	ldrb.w	fp, [r4, #24]
 8103db0:	3307      	adds	r3, #7
 8103db2:	f023 0307 	bic.w	r3, r3, #7
 8103db6:	f103 0208 	add.w	r2, r3, #8
 8103dba:	f8c8 2000 	str.w	r2, [r8]
 8103dbe:	e9d3 8900 	ldrd	r8, r9, [r3]
 8103dc2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8103dc6:	9307      	str	r3, [sp, #28]
 8103dc8:	f8cd 8018 	str.w	r8, [sp, #24]
 8103dcc:	ee08 0a10 	vmov	s16, r0
 8103dd0:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8103dd4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8103dd8:	4b9e      	ldr	r3, [pc, #632]	; (8104054 <_printf_float+0x2d8>)
 8103dda:	f04f 32ff 	mov.w	r2, #4294967295
 8103dde:	f7fc ff2d 	bl	8100c3c <__aeabi_dcmpun>
 8103de2:	bb88      	cbnz	r0, 8103e48 <_printf_float+0xcc>
 8103de4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8103de8:	4b9a      	ldr	r3, [pc, #616]	; (8104054 <_printf_float+0x2d8>)
 8103dea:	f04f 32ff 	mov.w	r2, #4294967295
 8103dee:	f7fc ff07 	bl	8100c00 <__aeabi_dcmple>
 8103df2:	bb48      	cbnz	r0, 8103e48 <_printf_float+0xcc>
 8103df4:	2200      	movs	r2, #0
 8103df6:	2300      	movs	r3, #0
 8103df8:	4640      	mov	r0, r8
 8103dfa:	4649      	mov	r1, r9
 8103dfc:	f7fc fef6 	bl	8100bec <__aeabi_dcmplt>
 8103e00:	b110      	cbz	r0, 8103e08 <_printf_float+0x8c>
 8103e02:	232d      	movs	r3, #45	; 0x2d
 8103e04:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8103e08:	4a93      	ldr	r2, [pc, #588]	; (8104058 <_printf_float+0x2dc>)
 8103e0a:	4b94      	ldr	r3, [pc, #592]	; (810405c <_printf_float+0x2e0>)
 8103e0c:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8103e10:	bf94      	ite	ls
 8103e12:	4690      	movls	r8, r2
 8103e14:	4698      	movhi	r8, r3
 8103e16:	2303      	movs	r3, #3
 8103e18:	6123      	str	r3, [r4, #16]
 8103e1a:	9b05      	ldr	r3, [sp, #20]
 8103e1c:	f023 0304 	bic.w	r3, r3, #4
 8103e20:	6023      	str	r3, [r4, #0]
 8103e22:	f04f 0900 	mov.w	r9, #0
 8103e26:	9700      	str	r7, [sp, #0]
 8103e28:	4633      	mov	r3, r6
 8103e2a:	aa0b      	add	r2, sp, #44	; 0x2c
 8103e2c:	4621      	mov	r1, r4
 8103e2e:	4628      	mov	r0, r5
 8103e30:	f000 f9da 	bl	81041e8 <_printf_common>
 8103e34:	3001      	adds	r0, #1
 8103e36:	f040 8090 	bne.w	8103f5a <_printf_float+0x1de>
 8103e3a:	f04f 30ff 	mov.w	r0, #4294967295
 8103e3e:	b00d      	add	sp, #52	; 0x34
 8103e40:	ecbd 8b02 	vpop	{d8}
 8103e44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8103e48:	4642      	mov	r2, r8
 8103e4a:	464b      	mov	r3, r9
 8103e4c:	4640      	mov	r0, r8
 8103e4e:	4649      	mov	r1, r9
 8103e50:	f7fc fef4 	bl	8100c3c <__aeabi_dcmpun>
 8103e54:	b140      	cbz	r0, 8103e68 <_printf_float+0xec>
 8103e56:	464b      	mov	r3, r9
 8103e58:	2b00      	cmp	r3, #0
 8103e5a:	bfbc      	itt	lt
 8103e5c:	232d      	movlt	r3, #45	; 0x2d
 8103e5e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8103e62:	4a7f      	ldr	r2, [pc, #508]	; (8104060 <_printf_float+0x2e4>)
 8103e64:	4b7f      	ldr	r3, [pc, #508]	; (8104064 <_printf_float+0x2e8>)
 8103e66:	e7d1      	b.n	8103e0c <_printf_float+0x90>
 8103e68:	6863      	ldr	r3, [r4, #4]
 8103e6a:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8103e6e:	9206      	str	r2, [sp, #24]
 8103e70:	1c5a      	adds	r2, r3, #1
 8103e72:	d13f      	bne.n	8103ef4 <_printf_float+0x178>
 8103e74:	2306      	movs	r3, #6
 8103e76:	6063      	str	r3, [r4, #4]
 8103e78:	9b05      	ldr	r3, [sp, #20]
 8103e7a:	6861      	ldr	r1, [r4, #4]
 8103e7c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8103e80:	2300      	movs	r3, #0
 8103e82:	9303      	str	r3, [sp, #12]
 8103e84:	ab0a      	add	r3, sp, #40	; 0x28
 8103e86:	e9cd b301 	strd	fp, r3, [sp, #4]
 8103e8a:	ab09      	add	r3, sp, #36	; 0x24
 8103e8c:	ec49 8b10 	vmov	d0, r8, r9
 8103e90:	9300      	str	r3, [sp, #0]
 8103e92:	6022      	str	r2, [r4, #0]
 8103e94:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8103e98:	4628      	mov	r0, r5
 8103e9a:	f7ff fecf 	bl	8103c3c <__cvt>
 8103e9e:	9b06      	ldr	r3, [sp, #24]
 8103ea0:	9909      	ldr	r1, [sp, #36]	; 0x24
 8103ea2:	2b47      	cmp	r3, #71	; 0x47
 8103ea4:	4680      	mov	r8, r0
 8103ea6:	d108      	bne.n	8103eba <_printf_float+0x13e>
 8103ea8:	1cc8      	adds	r0, r1, #3
 8103eaa:	db02      	blt.n	8103eb2 <_printf_float+0x136>
 8103eac:	6863      	ldr	r3, [r4, #4]
 8103eae:	4299      	cmp	r1, r3
 8103eb0:	dd41      	ble.n	8103f36 <_printf_float+0x1ba>
 8103eb2:	f1ab 0302 	sub.w	r3, fp, #2
 8103eb6:	fa5f fb83 	uxtb.w	fp, r3
 8103eba:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8103ebe:	d820      	bhi.n	8103f02 <_printf_float+0x186>
 8103ec0:	3901      	subs	r1, #1
 8103ec2:	465a      	mov	r2, fp
 8103ec4:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8103ec8:	9109      	str	r1, [sp, #36]	; 0x24
 8103eca:	f7ff ff19 	bl	8103d00 <__exponent>
 8103ece:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8103ed0:	1813      	adds	r3, r2, r0
 8103ed2:	2a01      	cmp	r2, #1
 8103ed4:	4681      	mov	r9, r0
 8103ed6:	6123      	str	r3, [r4, #16]
 8103ed8:	dc02      	bgt.n	8103ee0 <_printf_float+0x164>
 8103eda:	6822      	ldr	r2, [r4, #0]
 8103edc:	07d2      	lsls	r2, r2, #31
 8103ede:	d501      	bpl.n	8103ee4 <_printf_float+0x168>
 8103ee0:	3301      	adds	r3, #1
 8103ee2:	6123      	str	r3, [r4, #16]
 8103ee4:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8103ee8:	2b00      	cmp	r3, #0
 8103eea:	d09c      	beq.n	8103e26 <_printf_float+0xaa>
 8103eec:	232d      	movs	r3, #45	; 0x2d
 8103eee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8103ef2:	e798      	b.n	8103e26 <_printf_float+0xaa>
 8103ef4:	9a06      	ldr	r2, [sp, #24]
 8103ef6:	2a47      	cmp	r2, #71	; 0x47
 8103ef8:	d1be      	bne.n	8103e78 <_printf_float+0xfc>
 8103efa:	2b00      	cmp	r3, #0
 8103efc:	d1bc      	bne.n	8103e78 <_printf_float+0xfc>
 8103efe:	2301      	movs	r3, #1
 8103f00:	e7b9      	b.n	8103e76 <_printf_float+0xfa>
 8103f02:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8103f06:	d118      	bne.n	8103f3a <_printf_float+0x1be>
 8103f08:	2900      	cmp	r1, #0
 8103f0a:	6863      	ldr	r3, [r4, #4]
 8103f0c:	dd0b      	ble.n	8103f26 <_printf_float+0x1aa>
 8103f0e:	6121      	str	r1, [r4, #16]
 8103f10:	b913      	cbnz	r3, 8103f18 <_printf_float+0x19c>
 8103f12:	6822      	ldr	r2, [r4, #0]
 8103f14:	07d0      	lsls	r0, r2, #31
 8103f16:	d502      	bpl.n	8103f1e <_printf_float+0x1a2>
 8103f18:	3301      	adds	r3, #1
 8103f1a:	440b      	add	r3, r1
 8103f1c:	6123      	str	r3, [r4, #16]
 8103f1e:	65a1      	str	r1, [r4, #88]	; 0x58
 8103f20:	f04f 0900 	mov.w	r9, #0
 8103f24:	e7de      	b.n	8103ee4 <_printf_float+0x168>
 8103f26:	b913      	cbnz	r3, 8103f2e <_printf_float+0x1b2>
 8103f28:	6822      	ldr	r2, [r4, #0]
 8103f2a:	07d2      	lsls	r2, r2, #31
 8103f2c:	d501      	bpl.n	8103f32 <_printf_float+0x1b6>
 8103f2e:	3302      	adds	r3, #2
 8103f30:	e7f4      	b.n	8103f1c <_printf_float+0x1a0>
 8103f32:	2301      	movs	r3, #1
 8103f34:	e7f2      	b.n	8103f1c <_printf_float+0x1a0>
 8103f36:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8103f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8103f3c:	4299      	cmp	r1, r3
 8103f3e:	db05      	blt.n	8103f4c <_printf_float+0x1d0>
 8103f40:	6823      	ldr	r3, [r4, #0]
 8103f42:	6121      	str	r1, [r4, #16]
 8103f44:	07d8      	lsls	r0, r3, #31
 8103f46:	d5ea      	bpl.n	8103f1e <_printf_float+0x1a2>
 8103f48:	1c4b      	adds	r3, r1, #1
 8103f4a:	e7e7      	b.n	8103f1c <_printf_float+0x1a0>
 8103f4c:	2900      	cmp	r1, #0
 8103f4e:	bfd4      	ite	le
 8103f50:	f1c1 0202 	rsble	r2, r1, #2
 8103f54:	2201      	movgt	r2, #1
 8103f56:	4413      	add	r3, r2
 8103f58:	e7e0      	b.n	8103f1c <_printf_float+0x1a0>
 8103f5a:	6823      	ldr	r3, [r4, #0]
 8103f5c:	055a      	lsls	r2, r3, #21
 8103f5e:	d407      	bmi.n	8103f70 <_printf_float+0x1f4>
 8103f60:	6923      	ldr	r3, [r4, #16]
 8103f62:	4642      	mov	r2, r8
 8103f64:	4631      	mov	r1, r6
 8103f66:	4628      	mov	r0, r5
 8103f68:	47b8      	blx	r7
 8103f6a:	3001      	adds	r0, #1
 8103f6c:	d12c      	bne.n	8103fc8 <_printf_float+0x24c>
 8103f6e:	e764      	b.n	8103e3a <_printf_float+0xbe>
 8103f70:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8103f74:	f240 80e0 	bls.w	8104138 <_printf_float+0x3bc>
 8103f78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8103f7c:	2200      	movs	r2, #0
 8103f7e:	2300      	movs	r3, #0
 8103f80:	f7fc fe2a 	bl	8100bd8 <__aeabi_dcmpeq>
 8103f84:	2800      	cmp	r0, #0
 8103f86:	d034      	beq.n	8103ff2 <_printf_float+0x276>
 8103f88:	4a37      	ldr	r2, [pc, #220]	; (8104068 <_printf_float+0x2ec>)
 8103f8a:	2301      	movs	r3, #1
 8103f8c:	4631      	mov	r1, r6
 8103f8e:	4628      	mov	r0, r5
 8103f90:	47b8      	blx	r7
 8103f92:	3001      	adds	r0, #1
 8103f94:	f43f af51 	beq.w	8103e3a <_printf_float+0xbe>
 8103f98:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8103f9c:	429a      	cmp	r2, r3
 8103f9e:	db02      	blt.n	8103fa6 <_printf_float+0x22a>
 8103fa0:	6823      	ldr	r3, [r4, #0]
 8103fa2:	07d8      	lsls	r0, r3, #31
 8103fa4:	d510      	bpl.n	8103fc8 <_printf_float+0x24c>
 8103fa6:	ee18 3a10 	vmov	r3, s16
 8103faa:	4652      	mov	r2, sl
 8103fac:	4631      	mov	r1, r6
 8103fae:	4628      	mov	r0, r5
 8103fb0:	47b8      	blx	r7
 8103fb2:	3001      	adds	r0, #1
 8103fb4:	f43f af41 	beq.w	8103e3a <_printf_float+0xbe>
 8103fb8:	f04f 0800 	mov.w	r8, #0
 8103fbc:	f104 091a 	add.w	r9, r4, #26
 8103fc0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8103fc2:	3b01      	subs	r3, #1
 8103fc4:	4543      	cmp	r3, r8
 8103fc6:	dc09      	bgt.n	8103fdc <_printf_float+0x260>
 8103fc8:	6823      	ldr	r3, [r4, #0]
 8103fca:	079b      	lsls	r3, r3, #30
 8103fcc:	f100 8107 	bmi.w	81041de <_printf_float+0x462>
 8103fd0:	68e0      	ldr	r0, [r4, #12]
 8103fd2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8103fd4:	4298      	cmp	r0, r3
 8103fd6:	bfb8      	it	lt
 8103fd8:	4618      	movlt	r0, r3
 8103fda:	e730      	b.n	8103e3e <_printf_float+0xc2>
 8103fdc:	2301      	movs	r3, #1
 8103fde:	464a      	mov	r2, r9
 8103fe0:	4631      	mov	r1, r6
 8103fe2:	4628      	mov	r0, r5
 8103fe4:	47b8      	blx	r7
 8103fe6:	3001      	adds	r0, #1
 8103fe8:	f43f af27 	beq.w	8103e3a <_printf_float+0xbe>
 8103fec:	f108 0801 	add.w	r8, r8, #1
 8103ff0:	e7e6      	b.n	8103fc0 <_printf_float+0x244>
 8103ff2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8103ff4:	2b00      	cmp	r3, #0
 8103ff6:	dc39      	bgt.n	810406c <_printf_float+0x2f0>
 8103ff8:	4a1b      	ldr	r2, [pc, #108]	; (8104068 <_printf_float+0x2ec>)
 8103ffa:	2301      	movs	r3, #1
 8103ffc:	4631      	mov	r1, r6
 8103ffe:	4628      	mov	r0, r5
 8104000:	47b8      	blx	r7
 8104002:	3001      	adds	r0, #1
 8104004:	f43f af19 	beq.w	8103e3a <_printf_float+0xbe>
 8104008:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 810400c:	4313      	orrs	r3, r2
 810400e:	d102      	bne.n	8104016 <_printf_float+0x29a>
 8104010:	6823      	ldr	r3, [r4, #0]
 8104012:	07d9      	lsls	r1, r3, #31
 8104014:	d5d8      	bpl.n	8103fc8 <_printf_float+0x24c>
 8104016:	ee18 3a10 	vmov	r3, s16
 810401a:	4652      	mov	r2, sl
 810401c:	4631      	mov	r1, r6
 810401e:	4628      	mov	r0, r5
 8104020:	47b8      	blx	r7
 8104022:	3001      	adds	r0, #1
 8104024:	f43f af09 	beq.w	8103e3a <_printf_float+0xbe>
 8104028:	f04f 0900 	mov.w	r9, #0
 810402c:	f104 0a1a 	add.w	sl, r4, #26
 8104030:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8104032:	425b      	negs	r3, r3
 8104034:	454b      	cmp	r3, r9
 8104036:	dc01      	bgt.n	810403c <_printf_float+0x2c0>
 8104038:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 810403a:	e792      	b.n	8103f62 <_printf_float+0x1e6>
 810403c:	2301      	movs	r3, #1
 810403e:	4652      	mov	r2, sl
 8104040:	4631      	mov	r1, r6
 8104042:	4628      	mov	r0, r5
 8104044:	47b8      	blx	r7
 8104046:	3001      	adds	r0, #1
 8104048:	f43f aef7 	beq.w	8103e3a <_printf_float+0xbe>
 810404c:	f109 0901 	add.w	r9, r9, #1
 8104050:	e7ee      	b.n	8104030 <_printf_float+0x2b4>
 8104052:	bf00      	nop
 8104054:	7fefffff 	.word	0x7fefffff
 8104058:	08107531 	.word	0x08107531
 810405c:	08107535 	.word	0x08107535
 8104060:	08107539 	.word	0x08107539
 8104064:	0810753d 	.word	0x0810753d
 8104068:	08107541 	.word	0x08107541
 810406c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810406e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8104070:	429a      	cmp	r2, r3
 8104072:	bfa8      	it	ge
 8104074:	461a      	movge	r2, r3
 8104076:	2a00      	cmp	r2, #0
 8104078:	4691      	mov	r9, r2
 810407a:	dc37      	bgt.n	81040ec <_printf_float+0x370>
 810407c:	f04f 0b00 	mov.w	fp, #0
 8104080:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8104084:	f104 021a 	add.w	r2, r4, #26
 8104088:	6da3      	ldr	r3, [r4, #88]	; 0x58
 810408a:	9305      	str	r3, [sp, #20]
 810408c:	eba3 0309 	sub.w	r3, r3, r9
 8104090:	455b      	cmp	r3, fp
 8104092:	dc33      	bgt.n	81040fc <_printf_float+0x380>
 8104094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8104098:	429a      	cmp	r2, r3
 810409a:	db3b      	blt.n	8104114 <_printf_float+0x398>
 810409c:	6823      	ldr	r3, [r4, #0]
 810409e:	07da      	lsls	r2, r3, #31
 81040a0:	d438      	bmi.n	8104114 <_printf_float+0x398>
 81040a2:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 81040a6:	eba2 0903 	sub.w	r9, r2, r3
 81040aa:	9b05      	ldr	r3, [sp, #20]
 81040ac:	1ad2      	subs	r2, r2, r3
 81040ae:	4591      	cmp	r9, r2
 81040b0:	bfa8      	it	ge
 81040b2:	4691      	movge	r9, r2
 81040b4:	f1b9 0f00 	cmp.w	r9, #0
 81040b8:	dc35      	bgt.n	8104126 <_printf_float+0x3aa>
 81040ba:	f04f 0800 	mov.w	r8, #0
 81040be:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 81040c2:	f104 0a1a 	add.w	sl, r4, #26
 81040c6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 81040ca:	1a9b      	subs	r3, r3, r2
 81040cc:	eba3 0309 	sub.w	r3, r3, r9
 81040d0:	4543      	cmp	r3, r8
 81040d2:	f77f af79 	ble.w	8103fc8 <_printf_float+0x24c>
 81040d6:	2301      	movs	r3, #1
 81040d8:	4652      	mov	r2, sl
 81040da:	4631      	mov	r1, r6
 81040dc:	4628      	mov	r0, r5
 81040de:	47b8      	blx	r7
 81040e0:	3001      	adds	r0, #1
 81040e2:	f43f aeaa 	beq.w	8103e3a <_printf_float+0xbe>
 81040e6:	f108 0801 	add.w	r8, r8, #1
 81040ea:	e7ec      	b.n	81040c6 <_printf_float+0x34a>
 81040ec:	4613      	mov	r3, r2
 81040ee:	4631      	mov	r1, r6
 81040f0:	4642      	mov	r2, r8
 81040f2:	4628      	mov	r0, r5
 81040f4:	47b8      	blx	r7
 81040f6:	3001      	adds	r0, #1
 81040f8:	d1c0      	bne.n	810407c <_printf_float+0x300>
 81040fa:	e69e      	b.n	8103e3a <_printf_float+0xbe>
 81040fc:	2301      	movs	r3, #1
 81040fe:	4631      	mov	r1, r6
 8104100:	4628      	mov	r0, r5
 8104102:	9205      	str	r2, [sp, #20]
 8104104:	47b8      	blx	r7
 8104106:	3001      	adds	r0, #1
 8104108:	f43f ae97 	beq.w	8103e3a <_printf_float+0xbe>
 810410c:	9a05      	ldr	r2, [sp, #20]
 810410e:	f10b 0b01 	add.w	fp, fp, #1
 8104112:	e7b9      	b.n	8104088 <_printf_float+0x30c>
 8104114:	ee18 3a10 	vmov	r3, s16
 8104118:	4652      	mov	r2, sl
 810411a:	4631      	mov	r1, r6
 810411c:	4628      	mov	r0, r5
 810411e:	47b8      	blx	r7
 8104120:	3001      	adds	r0, #1
 8104122:	d1be      	bne.n	81040a2 <_printf_float+0x326>
 8104124:	e689      	b.n	8103e3a <_printf_float+0xbe>
 8104126:	9a05      	ldr	r2, [sp, #20]
 8104128:	464b      	mov	r3, r9
 810412a:	4442      	add	r2, r8
 810412c:	4631      	mov	r1, r6
 810412e:	4628      	mov	r0, r5
 8104130:	47b8      	blx	r7
 8104132:	3001      	adds	r0, #1
 8104134:	d1c1      	bne.n	81040ba <_printf_float+0x33e>
 8104136:	e680      	b.n	8103e3a <_printf_float+0xbe>
 8104138:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 810413a:	2a01      	cmp	r2, #1
 810413c:	dc01      	bgt.n	8104142 <_printf_float+0x3c6>
 810413e:	07db      	lsls	r3, r3, #31
 8104140:	d53a      	bpl.n	81041b8 <_printf_float+0x43c>
 8104142:	2301      	movs	r3, #1
 8104144:	4642      	mov	r2, r8
 8104146:	4631      	mov	r1, r6
 8104148:	4628      	mov	r0, r5
 810414a:	47b8      	blx	r7
 810414c:	3001      	adds	r0, #1
 810414e:	f43f ae74 	beq.w	8103e3a <_printf_float+0xbe>
 8104152:	ee18 3a10 	vmov	r3, s16
 8104156:	4652      	mov	r2, sl
 8104158:	4631      	mov	r1, r6
 810415a:	4628      	mov	r0, r5
 810415c:	47b8      	blx	r7
 810415e:	3001      	adds	r0, #1
 8104160:	f43f ae6b 	beq.w	8103e3a <_printf_float+0xbe>
 8104164:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8104168:	2200      	movs	r2, #0
 810416a:	2300      	movs	r3, #0
 810416c:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8104170:	f7fc fd32 	bl	8100bd8 <__aeabi_dcmpeq>
 8104174:	b9d8      	cbnz	r0, 81041ae <_printf_float+0x432>
 8104176:	f10a 33ff 	add.w	r3, sl, #4294967295
 810417a:	f108 0201 	add.w	r2, r8, #1
 810417e:	4631      	mov	r1, r6
 8104180:	4628      	mov	r0, r5
 8104182:	47b8      	blx	r7
 8104184:	3001      	adds	r0, #1
 8104186:	d10e      	bne.n	81041a6 <_printf_float+0x42a>
 8104188:	e657      	b.n	8103e3a <_printf_float+0xbe>
 810418a:	2301      	movs	r3, #1
 810418c:	4652      	mov	r2, sl
 810418e:	4631      	mov	r1, r6
 8104190:	4628      	mov	r0, r5
 8104192:	47b8      	blx	r7
 8104194:	3001      	adds	r0, #1
 8104196:	f43f ae50 	beq.w	8103e3a <_printf_float+0xbe>
 810419a:	f108 0801 	add.w	r8, r8, #1
 810419e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81041a0:	3b01      	subs	r3, #1
 81041a2:	4543      	cmp	r3, r8
 81041a4:	dcf1      	bgt.n	810418a <_printf_float+0x40e>
 81041a6:	464b      	mov	r3, r9
 81041a8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 81041ac:	e6da      	b.n	8103f64 <_printf_float+0x1e8>
 81041ae:	f04f 0800 	mov.w	r8, #0
 81041b2:	f104 0a1a 	add.w	sl, r4, #26
 81041b6:	e7f2      	b.n	810419e <_printf_float+0x422>
 81041b8:	2301      	movs	r3, #1
 81041ba:	4642      	mov	r2, r8
 81041bc:	e7df      	b.n	810417e <_printf_float+0x402>
 81041be:	2301      	movs	r3, #1
 81041c0:	464a      	mov	r2, r9
 81041c2:	4631      	mov	r1, r6
 81041c4:	4628      	mov	r0, r5
 81041c6:	47b8      	blx	r7
 81041c8:	3001      	adds	r0, #1
 81041ca:	f43f ae36 	beq.w	8103e3a <_printf_float+0xbe>
 81041ce:	f108 0801 	add.w	r8, r8, #1
 81041d2:	68e3      	ldr	r3, [r4, #12]
 81041d4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 81041d6:	1a5b      	subs	r3, r3, r1
 81041d8:	4543      	cmp	r3, r8
 81041da:	dcf0      	bgt.n	81041be <_printf_float+0x442>
 81041dc:	e6f8      	b.n	8103fd0 <_printf_float+0x254>
 81041de:	f04f 0800 	mov.w	r8, #0
 81041e2:	f104 0919 	add.w	r9, r4, #25
 81041e6:	e7f4      	b.n	81041d2 <_printf_float+0x456>

081041e8 <_printf_common>:
 81041e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81041ec:	4616      	mov	r6, r2
 81041ee:	4699      	mov	r9, r3
 81041f0:	688a      	ldr	r2, [r1, #8]
 81041f2:	690b      	ldr	r3, [r1, #16]
 81041f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 81041f8:	4293      	cmp	r3, r2
 81041fa:	bfb8      	it	lt
 81041fc:	4613      	movlt	r3, r2
 81041fe:	6033      	str	r3, [r6, #0]
 8104200:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8104204:	4607      	mov	r7, r0
 8104206:	460c      	mov	r4, r1
 8104208:	b10a      	cbz	r2, 810420e <_printf_common+0x26>
 810420a:	3301      	adds	r3, #1
 810420c:	6033      	str	r3, [r6, #0]
 810420e:	6823      	ldr	r3, [r4, #0]
 8104210:	0699      	lsls	r1, r3, #26
 8104212:	bf42      	ittt	mi
 8104214:	6833      	ldrmi	r3, [r6, #0]
 8104216:	3302      	addmi	r3, #2
 8104218:	6033      	strmi	r3, [r6, #0]
 810421a:	6825      	ldr	r5, [r4, #0]
 810421c:	f015 0506 	ands.w	r5, r5, #6
 8104220:	d106      	bne.n	8104230 <_printf_common+0x48>
 8104222:	f104 0a19 	add.w	sl, r4, #25
 8104226:	68e3      	ldr	r3, [r4, #12]
 8104228:	6832      	ldr	r2, [r6, #0]
 810422a:	1a9b      	subs	r3, r3, r2
 810422c:	42ab      	cmp	r3, r5
 810422e:	dc26      	bgt.n	810427e <_printf_common+0x96>
 8104230:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8104234:	1e13      	subs	r3, r2, #0
 8104236:	6822      	ldr	r2, [r4, #0]
 8104238:	bf18      	it	ne
 810423a:	2301      	movne	r3, #1
 810423c:	0692      	lsls	r2, r2, #26
 810423e:	d42b      	bmi.n	8104298 <_printf_common+0xb0>
 8104240:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8104244:	4649      	mov	r1, r9
 8104246:	4638      	mov	r0, r7
 8104248:	47c0      	blx	r8
 810424a:	3001      	adds	r0, #1
 810424c:	d01e      	beq.n	810428c <_printf_common+0xa4>
 810424e:	6823      	ldr	r3, [r4, #0]
 8104250:	6922      	ldr	r2, [r4, #16]
 8104252:	f003 0306 	and.w	r3, r3, #6
 8104256:	2b04      	cmp	r3, #4
 8104258:	bf02      	ittt	eq
 810425a:	68e5      	ldreq	r5, [r4, #12]
 810425c:	6833      	ldreq	r3, [r6, #0]
 810425e:	1aed      	subeq	r5, r5, r3
 8104260:	68a3      	ldr	r3, [r4, #8]
 8104262:	bf0c      	ite	eq
 8104264:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8104268:	2500      	movne	r5, #0
 810426a:	4293      	cmp	r3, r2
 810426c:	bfc4      	itt	gt
 810426e:	1a9b      	subgt	r3, r3, r2
 8104270:	18ed      	addgt	r5, r5, r3
 8104272:	2600      	movs	r6, #0
 8104274:	341a      	adds	r4, #26
 8104276:	42b5      	cmp	r5, r6
 8104278:	d11a      	bne.n	81042b0 <_printf_common+0xc8>
 810427a:	2000      	movs	r0, #0
 810427c:	e008      	b.n	8104290 <_printf_common+0xa8>
 810427e:	2301      	movs	r3, #1
 8104280:	4652      	mov	r2, sl
 8104282:	4649      	mov	r1, r9
 8104284:	4638      	mov	r0, r7
 8104286:	47c0      	blx	r8
 8104288:	3001      	adds	r0, #1
 810428a:	d103      	bne.n	8104294 <_printf_common+0xac>
 810428c:	f04f 30ff 	mov.w	r0, #4294967295
 8104290:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8104294:	3501      	adds	r5, #1
 8104296:	e7c6      	b.n	8104226 <_printf_common+0x3e>
 8104298:	18e1      	adds	r1, r4, r3
 810429a:	1c5a      	adds	r2, r3, #1
 810429c:	2030      	movs	r0, #48	; 0x30
 810429e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 81042a2:	4422      	add	r2, r4
 81042a4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 81042a8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 81042ac:	3302      	adds	r3, #2
 81042ae:	e7c7      	b.n	8104240 <_printf_common+0x58>
 81042b0:	2301      	movs	r3, #1
 81042b2:	4622      	mov	r2, r4
 81042b4:	4649      	mov	r1, r9
 81042b6:	4638      	mov	r0, r7
 81042b8:	47c0      	blx	r8
 81042ba:	3001      	adds	r0, #1
 81042bc:	d0e6      	beq.n	810428c <_printf_common+0xa4>
 81042be:	3601      	adds	r6, #1
 81042c0:	e7d9      	b.n	8104276 <_printf_common+0x8e>
	...

081042c4 <_printf_i>:
 81042c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 81042c8:	7e0f      	ldrb	r7, [r1, #24]
 81042ca:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 81042cc:	2f78      	cmp	r7, #120	; 0x78
 81042ce:	4691      	mov	r9, r2
 81042d0:	4680      	mov	r8, r0
 81042d2:	460c      	mov	r4, r1
 81042d4:	469a      	mov	sl, r3
 81042d6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 81042da:	d807      	bhi.n	81042ec <_printf_i+0x28>
 81042dc:	2f62      	cmp	r7, #98	; 0x62
 81042de:	d80a      	bhi.n	81042f6 <_printf_i+0x32>
 81042e0:	2f00      	cmp	r7, #0
 81042e2:	f000 80d4 	beq.w	810448e <_printf_i+0x1ca>
 81042e6:	2f58      	cmp	r7, #88	; 0x58
 81042e8:	f000 80c0 	beq.w	810446c <_printf_i+0x1a8>
 81042ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 81042f0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 81042f4:	e03a      	b.n	810436c <_printf_i+0xa8>
 81042f6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 81042fa:	2b15      	cmp	r3, #21
 81042fc:	d8f6      	bhi.n	81042ec <_printf_i+0x28>
 81042fe:	a101      	add	r1, pc, #4	; (adr r1, 8104304 <_printf_i+0x40>)
 8104300:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8104304:	0810435d 	.word	0x0810435d
 8104308:	08104371 	.word	0x08104371
 810430c:	081042ed 	.word	0x081042ed
 8104310:	081042ed 	.word	0x081042ed
 8104314:	081042ed 	.word	0x081042ed
 8104318:	081042ed 	.word	0x081042ed
 810431c:	08104371 	.word	0x08104371
 8104320:	081042ed 	.word	0x081042ed
 8104324:	081042ed 	.word	0x081042ed
 8104328:	081042ed 	.word	0x081042ed
 810432c:	081042ed 	.word	0x081042ed
 8104330:	08104475 	.word	0x08104475
 8104334:	0810439d 	.word	0x0810439d
 8104338:	0810442f 	.word	0x0810442f
 810433c:	081042ed 	.word	0x081042ed
 8104340:	081042ed 	.word	0x081042ed
 8104344:	08104497 	.word	0x08104497
 8104348:	081042ed 	.word	0x081042ed
 810434c:	0810439d 	.word	0x0810439d
 8104350:	081042ed 	.word	0x081042ed
 8104354:	081042ed 	.word	0x081042ed
 8104358:	08104437 	.word	0x08104437
 810435c:	682b      	ldr	r3, [r5, #0]
 810435e:	1d1a      	adds	r2, r3, #4
 8104360:	681b      	ldr	r3, [r3, #0]
 8104362:	602a      	str	r2, [r5, #0]
 8104364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8104368:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 810436c:	2301      	movs	r3, #1
 810436e:	e09f      	b.n	81044b0 <_printf_i+0x1ec>
 8104370:	6820      	ldr	r0, [r4, #0]
 8104372:	682b      	ldr	r3, [r5, #0]
 8104374:	0607      	lsls	r7, r0, #24
 8104376:	f103 0104 	add.w	r1, r3, #4
 810437a:	6029      	str	r1, [r5, #0]
 810437c:	d501      	bpl.n	8104382 <_printf_i+0xbe>
 810437e:	681e      	ldr	r6, [r3, #0]
 8104380:	e003      	b.n	810438a <_printf_i+0xc6>
 8104382:	0646      	lsls	r6, r0, #25
 8104384:	d5fb      	bpl.n	810437e <_printf_i+0xba>
 8104386:	f9b3 6000 	ldrsh.w	r6, [r3]
 810438a:	2e00      	cmp	r6, #0
 810438c:	da03      	bge.n	8104396 <_printf_i+0xd2>
 810438e:	232d      	movs	r3, #45	; 0x2d
 8104390:	4276      	negs	r6, r6
 8104392:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8104396:	485a      	ldr	r0, [pc, #360]	; (8104500 <_printf_i+0x23c>)
 8104398:	230a      	movs	r3, #10
 810439a:	e012      	b.n	81043c2 <_printf_i+0xfe>
 810439c:	682b      	ldr	r3, [r5, #0]
 810439e:	6820      	ldr	r0, [r4, #0]
 81043a0:	1d19      	adds	r1, r3, #4
 81043a2:	6029      	str	r1, [r5, #0]
 81043a4:	0605      	lsls	r5, r0, #24
 81043a6:	d501      	bpl.n	81043ac <_printf_i+0xe8>
 81043a8:	681e      	ldr	r6, [r3, #0]
 81043aa:	e002      	b.n	81043b2 <_printf_i+0xee>
 81043ac:	0641      	lsls	r1, r0, #25
 81043ae:	d5fb      	bpl.n	81043a8 <_printf_i+0xe4>
 81043b0:	881e      	ldrh	r6, [r3, #0]
 81043b2:	4853      	ldr	r0, [pc, #332]	; (8104500 <_printf_i+0x23c>)
 81043b4:	2f6f      	cmp	r7, #111	; 0x6f
 81043b6:	bf0c      	ite	eq
 81043b8:	2308      	moveq	r3, #8
 81043ba:	230a      	movne	r3, #10
 81043bc:	2100      	movs	r1, #0
 81043be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 81043c2:	6865      	ldr	r5, [r4, #4]
 81043c4:	60a5      	str	r5, [r4, #8]
 81043c6:	2d00      	cmp	r5, #0
 81043c8:	bfa2      	ittt	ge
 81043ca:	6821      	ldrge	r1, [r4, #0]
 81043cc:	f021 0104 	bicge.w	r1, r1, #4
 81043d0:	6021      	strge	r1, [r4, #0]
 81043d2:	b90e      	cbnz	r6, 81043d8 <_printf_i+0x114>
 81043d4:	2d00      	cmp	r5, #0
 81043d6:	d04b      	beq.n	8104470 <_printf_i+0x1ac>
 81043d8:	4615      	mov	r5, r2
 81043da:	fbb6 f1f3 	udiv	r1, r6, r3
 81043de:	fb03 6711 	mls	r7, r3, r1, r6
 81043e2:	5dc7      	ldrb	r7, [r0, r7]
 81043e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 81043e8:	4637      	mov	r7, r6
 81043ea:	42bb      	cmp	r3, r7
 81043ec:	460e      	mov	r6, r1
 81043ee:	d9f4      	bls.n	81043da <_printf_i+0x116>
 81043f0:	2b08      	cmp	r3, #8
 81043f2:	d10b      	bne.n	810440c <_printf_i+0x148>
 81043f4:	6823      	ldr	r3, [r4, #0]
 81043f6:	07de      	lsls	r6, r3, #31
 81043f8:	d508      	bpl.n	810440c <_printf_i+0x148>
 81043fa:	6923      	ldr	r3, [r4, #16]
 81043fc:	6861      	ldr	r1, [r4, #4]
 81043fe:	4299      	cmp	r1, r3
 8104400:	bfde      	ittt	le
 8104402:	2330      	movle	r3, #48	; 0x30
 8104404:	f805 3c01 	strble.w	r3, [r5, #-1]
 8104408:	f105 35ff 	addle.w	r5, r5, #4294967295
 810440c:	1b52      	subs	r2, r2, r5
 810440e:	6122      	str	r2, [r4, #16]
 8104410:	f8cd a000 	str.w	sl, [sp]
 8104414:	464b      	mov	r3, r9
 8104416:	aa03      	add	r2, sp, #12
 8104418:	4621      	mov	r1, r4
 810441a:	4640      	mov	r0, r8
 810441c:	f7ff fee4 	bl	81041e8 <_printf_common>
 8104420:	3001      	adds	r0, #1
 8104422:	d14a      	bne.n	81044ba <_printf_i+0x1f6>
 8104424:	f04f 30ff 	mov.w	r0, #4294967295
 8104428:	b004      	add	sp, #16
 810442a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810442e:	6823      	ldr	r3, [r4, #0]
 8104430:	f043 0320 	orr.w	r3, r3, #32
 8104434:	6023      	str	r3, [r4, #0]
 8104436:	4833      	ldr	r0, [pc, #204]	; (8104504 <_printf_i+0x240>)
 8104438:	2778      	movs	r7, #120	; 0x78
 810443a:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 810443e:	6823      	ldr	r3, [r4, #0]
 8104440:	6829      	ldr	r1, [r5, #0]
 8104442:	061f      	lsls	r7, r3, #24
 8104444:	f851 6b04 	ldr.w	r6, [r1], #4
 8104448:	d402      	bmi.n	8104450 <_printf_i+0x18c>
 810444a:	065f      	lsls	r7, r3, #25
 810444c:	bf48      	it	mi
 810444e:	b2b6      	uxthmi	r6, r6
 8104450:	07df      	lsls	r7, r3, #31
 8104452:	bf48      	it	mi
 8104454:	f043 0320 	orrmi.w	r3, r3, #32
 8104458:	6029      	str	r1, [r5, #0]
 810445a:	bf48      	it	mi
 810445c:	6023      	strmi	r3, [r4, #0]
 810445e:	b91e      	cbnz	r6, 8104468 <_printf_i+0x1a4>
 8104460:	6823      	ldr	r3, [r4, #0]
 8104462:	f023 0320 	bic.w	r3, r3, #32
 8104466:	6023      	str	r3, [r4, #0]
 8104468:	2310      	movs	r3, #16
 810446a:	e7a7      	b.n	81043bc <_printf_i+0xf8>
 810446c:	4824      	ldr	r0, [pc, #144]	; (8104500 <_printf_i+0x23c>)
 810446e:	e7e4      	b.n	810443a <_printf_i+0x176>
 8104470:	4615      	mov	r5, r2
 8104472:	e7bd      	b.n	81043f0 <_printf_i+0x12c>
 8104474:	682b      	ldr	r3, [r5, #0]
 8104476:	6826      	ldr	r6, [r4, #0]
 8104478:	6961      	ldr	r1, [r4, #20]
 810447a:	1d18      	adds	r0, r3, #4
 810447c:	6028      	str	r0, [r5, #0]
 810447e:	0635      	lsls	r5, r6, #24
 8104480:	681b      	ldr	r3, [r3, #0]
 8104482:	d501      	bpl.n	8104488 <_printf_i+0x1c4>
 8104484:	6019      	str	r1, [r3, #0]
 8104486:	e002      	b.n	810448e <_printf_i+0x1ca>
 8104488:	0670      	lsls	r0, r6, #25
 810448a:	d5fb      	bpl.n	8104484 <_printf_i+0x1c0>
 810448c:	8019      	strh	r1, [r3, #0]
 810448e:	2300      	movs	r3, #0
 8104490:	6123      	str	r3, [r4, #16]
 8104492:	4615      	mov	r5, r2
 8104494:	e7bc      	b.n	8104410 <_printf_i+0x14c>
 8104496:	682b      	ldr	r3, [r5, #0]
 8104498:	1d1a      	adds	r2, r3, #4
 810449a:	602a      	str	r2, [r5, #0]
 810449c:	681d      	ldr	r5, [r3, #0]
 810449e:	6862      	ldr	r2, [r4, #4]
 81044a0:	2100      	movs	r1, #0
 81044a2:	4628      	mov	r0, r5
 81044a4:	f7fb ff1c 	bl	81002e0 <memchr>
 81044a8:	b108      	cbz	r0, 81044ae <_printf_i+0x1ea>
 81044aa:	1b40      	subs	r0, r0, r5
 81044ac:	6060      	str	r0, [r4, #4]
 81044ae:	6863      	ldr	r3, [r4, #4]
 81044b0:	6123      	str	r3, [r4, #16]
 81044b2:	2300      	movs	r3, #0
 81044b4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 81044b8:	e7aa      	b.n	8104410 <_printf_i+0x14c>
 81044ba:	6923      	ldr	r3, [r4, #16]
 81044bc:	462a      	mov	r2, r5
 81044be:	4649      	mov	r1, r9
 81044c0:	4640      	mov	r0, r8
 81044c2:	47d0      	blx	sl
 81044c4:	3001      	adds	r0, #1
 81044c6:	d0ad      	beq.n	8104424 <_printf_i+0x160>
 81044c8:	6823      	ldr	r3, [r4, #0]
 81044ca:	079b      	lsls	r3, r3, #30
 81044cc:	d413      	bmi.n	81044f6 <_printf_i+0x232>
 81044ce:	68e0      	ldr	r0, [r4, #12]
 81044d0:	9b03      	ldr	r3, [sp, #12]
 81044d2:	4298      	cmp	r0, r3
 81044d4:	bfb8      	it	lt
 81044d6:	4618      	movlt	r0, r3
 81044d8:	e7a6      	b.n	8104428 <_printf_i+0x164>
 81044da:	2301      	movs	r3, #1
 81044dc:	4632      	mov	r2, r6
 81044de:	4649      	mov	r1, r9
 81044e0:	4640      	mov	r0, r8
 81044e2:	47d0      	blx	sl
 81044e4:	3001      	adds	r0, #1
 81044e6:	d09d      	beq.n	8104424 <_printf_i+0x160>
 81044e8:	3501      	adds	r5, #1
 81044ea:	68e3      	ldr	r3, [r4, #12]
 81044ec:	9903      	ldr	r1, [sp, #12]
 81044ee:	1a5b      	subs	r3, r3, r1
 81044f0:	42ab      	cmp	r3, r5
 81044f2:	dcf2      	bgt.n	81044da <_printf_i+0x216>
 81044f4:	e7eb      	b.n	81044ce <_printf_i+0x20a>
 81044f6:	2500      	movs	r5, #0
 81044f8:	f104 0619 	add.w	r6, r4, #25
 81044fc:	e7f5      	b.n	81044ea <_printf_i+0x226>
 81044fe:	bf00      	nop
 8104500:	08107543 	.word	0x08107543
 8104504:	08107554 	.word	0x08107554

08104508 <std>:
 8104508:	2300      	movs	r3, #0
 810450a:	b510      	push	{r4, lr}
 810450c:	4604      	mov	r4, r0
 810450e:	e9c0 3300 	strd	r3, r3, [r0]
 8104512:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8104516:	6083      	str	r3, [r0, #8]
 8104518:	8181      	strh	r1, [r0, #12]
 810451a:	6643      	str	r3, [r0, #100]	; 0x64
 810451c:	81c2      	strh	r2, [r0, #14]
 810451e:	6183      	str	r3, [r0, #24]
 8104520:	4619      	mov	r1, r3
 8104522:	2208      	movs	r2, #8
 8104524:	305c      	adds	r0, #92	; 0x5c
 8104526:	f000 f928 	bl	810477a <memset>
 810452a:	4b0d      	ldr	r3, [pc, #52]	; (8104560 <std+0x58>)
 810452c:	6263      	str	r3, [r4, #36]	; 0x24
 810452e:	4b0d      	ldr	r3, [pc, #52]	; (8104564 <std+0x5c>)
 8104530:	62a3      	str	r3, [r4, #40]	; 0x28
 8104532:	4b0d      	ldr	r3, [pc, #52]	; (8104568 <std+0x60>)
 8104534:	62e3      	str	r3, [r4, #44]	; 0x2c
 8104536:	4b0d      	ldr	r3, [pc, #52]	; (810456c <std+0x64>)
 8104538:	6323      	str	r3, [r4, #48]	; 0x30
 810453a:	4b0d      	ldr	r3, [pc, #52]	; (8104570 <std+0x68>)
 810453c:	6224      	str	r4, [r4, #32]
 810453e:	429c      	cmp	r4, r3
 8104540:	d006      	beq.n	8104550 <std+0x48>
 8104542:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8104546:	4294      	cmp	r4, r2
 8104548:	d002      	beq.n	8104550 <std+0x48>
 810454a:	33d0      	adds	r3, #208	; 0xd0
 810454c:	429c      	cmp	r4, r3
 810454e:	d105      	bne.n	810455c <std+0x54>
 8104550:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8104554:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8104558:	f000 b9d2 	b.w	8104900 <__retarget_lock_init_recursive>
 810455c:	bd10      	pop	{r4, pc}
 810455e:	bf00      	nop
 8104560:	081046f5 	.word	0x081046f5
 8104564:	08104717 	.word	0x08104717
 8104568:	0810474f 	.word	0x0810474f
 810456c:	08104773 	.word	0x08104773
 8104570:	1000023c 	.word	0x1000023c

08104574 <stdio_exit_handler>:
 8104574:	4a02      	ldr	r2, [pc, #8]	; (8104580 <stdio_exit_handler+0xc>)
 8104576:	4903      	ldr	r1, [pc, #12]	; (8104584 <stdio_exit_handler+0x10>)
 8104578:	4803      	ldr	r0, [pc, #12]	; (8104588 <stdio_exit_handler+0x14>)
 810457a:	f000 b869 	b.w	8104650 <_fwalk_sglue>
 810457e:	bf00      	nop
 8104580:	10000000 	.word	0x10000000
 8104584:	08106c41 	.word	0x08106c41
 8104588:	10000178 	.word	0x10000178

0810458c <cleanup_stdio>:
 810458c:	6841      	ldr	r1, [r0, #4]
 810458e:	4b0c      	ldr	r3, [pc, #48]	; (81045c0 <cleanup_stdio+0x34>)
 8104590:	4299      	cmp	r1, r3
 8104592:	b510      	push	{r4, lr}
 8104594:	4604      	mov	r4, r0
 8104596:	d001      	beq.n	810459c <cleanup_stdio+0x10>
 8104598:	f002 fb52 	bl	8106c40 <_fflush_r>
 810459c:	68a1      	ldr	r1, [r4, #8]
 810459e:	4b09      	ldr	r3, [pc, #36]	; (81045c4 <cleanup_stdio+0x38>)
 81045a0:	4299      	cmp	r1, r3
 81045a2:	d002      	beq.n	81045aa <cleanup_stdio+0x1e>
 81045a4:	4620      	mov	r0, r4
 81045a6:	f002 fb4b 	bl	8106c40 <_fflush_r>
 81045aa:	68e1      	ldr	r1, [r4, #12]
 81045ac:	4b06      	ldr	r3, [pc, #24]	; (81045c8 <cleanup_stdio+0x3c>)
 81045ae:	4299      	cmp	r1, r3
 81045b0:	d004      	beq.n	81045bc <cleanup_stdio+0x30>
 81045b2:	4620      	mov	r0, r4
 81045b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81045b8:	f002 bb42 	b.w	8106c40 <_fflush_r>
 81045bc:	bd10      	pop	{r4, pc}
 81045be:	bf00      	nop
 81045c0:	1000023c 	.word	0x1000023c
 81045c4:	100002a4 	.word	0x100002a4
 81045c8:	1000030c 	.word	0x1000030c

081045cc <global_stdio_init.part.0>:
 81045cc:	b510      	push	{r4, lr}
 81045ce:	4b0b      	ldr	r3, [pc, #44]	; (81045fc <global_stdio_init.part.0+0x30>)
 81045d0:	4c0b      	ldr	r4, [pc, #44]	; (8104600 <global_stdio_init.part.0+0x34>)
 81045d2:	4a0c      	ldr	r2, [pc, #48]	; (8104604 <global_stdio_init.part.0+0x38>)
 81045d4:	601a      	str	r2, [r3, #0]
 81045d6:	4620      	mov	r0, r4
 81045d8:	2200      	movs	r2, #0
 81045da:	2104      	movs	r1, #4
 81045dc:	f7ff ff94 	bl	8104508 <std>
 81045e0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 81045e4:	2201      	movs	r2, #1
 81045e6:	2109      	movs	r1, #9
 81045e8:	f7ff ff8e 	bl	8104508 <std>
 81045ec:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 81045f0:	2202      	movs	r2, #2
 81045f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 81045f6:	2112      	movs	r1, #18
 81045f8:	f7ff bf86 	b.w	8104508 <std>
 81045fc:	10000374 	.word	0x10000374
 8104600:	1000023c 	.word	0x1000023c
 8104604:	08104575 	.word	0x08104575

08104608 <__sfp_lock_acquire>:
 8104608:	4801      	ldr	r0, [pc, #4]	; (8104610 <__sfp_lock_acquire+0x8>)
 810460a:	f000 b97a 	b.w	8104902 <__retarget_lock_acquire_recursive>
 810460e:	bf00      	nop
 8104610:	1000037d 	.word	0x1000037d

08104614 <__sfp_lock_release>:
 8104614:	4801      	ldr	r0, [pc, #4]	; (810461c <__sfp_lock_release+0x8>)
 8104616:	f000 b975 	b.w	8104904 <__retarget_lock_release_recursive>
 810461a:	bf00      	nop
 810461c:	1000037d 	.word	0x1000037d

08104620 <__sinit>:
 8104620:	b510      	push	{r4, lr}
 8104622:	4604      	mov	r4, r0
 8104624:	f7ff fff0 	bl	8104608 <__sfp_lock_acquire>
 8104628:	6a23      	ldr	r3, [r4, #32]
 810462a:	b11b      	cbz	r3, 8104634 <__sinit+0x14>
 810462c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8104630:	f7ff bff0 	b.w	8104614 <__sfp_lock_release>
 8104634:	4b04      	ldr	r3, [pc, #16]	; (8104648 <__sinit+0x28>)
 8104636:	6223      	str	r3, [r4, #32]
 8104638:	4b04      	ldr	r3, [pc, #16]	; (810464c <__sinit+0x2c>)
 810463a:	681b      	ldr	r3, [r3, #0]
 810463c:	2b00      	cmp	r3, #0
 810463e:	d1f5      	bne.n	810462c <__sinit+0xc>
 8104640:	f7ff ffc4 	bl	81045cc <global_stdio_init.part.0>
 8104644:	e7f2      	b.n	810462c <__sinit+0xc>
 8104646:	bf00      	nop
 8104648:	0810458d 	.word	0x0810458d
 810464c:	10000374 	.word	0x10000374

08104650 <_fwalk_sglue>:
 8104650:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8104654:	4607      	mov	r7, r0
 8104656:	4688      	mov	r8, r1
 8104658:	4614      	mov	r4, r2
 810465a:	2600      	movs	r6, #0
 810465c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8104660:	f1b9 0901 	subs.w	r9, r9, #1
 8104664:	d505      	bpl.n	8104672 <_fwalk_sglue+0x22>
 8104666:	6824      	ldr	r4, [r4, #0]
 8104668:	2c00      	cmp	r4, #0
 810466a:	d1f7      	bne.n	810465c <_fwalk_sglue+0xc>
 810466c:	4630      	mov	r0, r6
 810466e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8104672:	89ab      	ldrh	r3, [r5, #12]
 8104674:	2b01      	cmp	r3, #1
 8104676:	d907      	bls.n	8104688 <_fwalk_sglue+0x38>
 8104678:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 810467c:	3301      	adds	r3, #1
 810467e:	d003      	beq.n	8104688 <_fwalk_sglue+0x38>
 8104680:	4629      	mov	r1, r5
 8104682:	4638      	mov	r0, r7
 8104684:	47c0      	blx	r8
 8104686:	4306      	orrs	r6, r0
 8104688:	3568      	adds	r5, #104	; 0x68
 810468a:	e7e9      	b.n	8104660 <_fwalk_sglue+0x10>

0810468c <sniprintf>:
 810468c:	b40c      	push	{r2, r3}
 810468e:	b530      	push	{r4, r5, lr}
 8104690:	4b17      	ldr	r3, [pc, #92]	; (81046f0 <sniprintf+0x64>)
 8104692:	1e0c      	subs	r4, r1, #0
 8104694:	681d      	ldr	r5, [r3, #0]
 8104696:	b09d      	sub	sp, #116	; 0x74
 8104698:	da08      	bge.n	81046ac <sniprintf+0x20>
 810469a:	238b      	movs	r3, #139	; 0x8b
 810469c:	602b      	str	r3, [r5, #0]
 810469e:	f04f 30ff 	mov.w	r0, #4294967295
 81046a2:	b01d      	add	sp, #116	; 0x74
 81046a4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 81046a8:	b002      	add	sp, #8
 81046aa:	4770      	bx	lr
 81046ac:	f44f 7302 	mov.w	r3, #520	; 0x208
 81046b0:	f8ad 3014 	strh.w	r3, [sp, #20]
 81046b4:	bf14      	ite	ne
 81046b6:	f104 33ff 	addne.w	r3, r4, #4294967295
 81046ba:	4623      	moveq	r3, r4
 81046bc:	9304      	str	r3, [sp, #16]
 81046be:	9307      	str	r3, [sp, #28]
 81046c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 81046c4:	9002      	str	r0, [sp, #8]
 81046c6:	9006      	str	r0, [sp, #24]
 81046c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 81046cc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 81046ce:	ab21      	add	r3, sp, #132	; 0x84
 81046d0:	a902      	add	r1, sp, #8
 81046d2:	4628      	mov	r0, r5
 81046d4:	9301      	str	r3, [sp, #4]
 81046d6:	f002 f92f 	bl	8106938 <_svfiprintf_r>
 81046da:	1c43      	adds	r3, r0, #1
 81046dc:	bfbc      	itt	lt
 81046de:	238b      	movlt	r3, #139	; 0x8b
 81046e0:	602b      	strlt	r3, [r5, #0]
 81046e2:	2c00      	cmp	r4, #0
 81046e4:	d0dd      	beq.n	81046a2 <sniprintf+0x16>
 81046e6:	9b02      	ldr	r3, [sp, #8]
 81046e8:	2200      	movs	r2, #0
 81046ea:	701a      	strb	r2, [r3, #0]
 81046ec:	e7d9      	b.n	81046a2 <sniprintf+0x16>
 81046ee:	bf00      	nop
 81046f0:	100001c4 	.word	0x100001c4

081046f4 <__sread>:
 81046f4:	b510      	push	{r4, lr}
 81046f6:	460c      	mov	r4, r1
 81046f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 81046fc:	f000 f8b2 	bl	8104864 <_read_r>
 8104700:	2800      	cmp	r0, #0
 8104702:	bfab      	itete	ge
 8104704:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8104706:	89a3      	ldrhlt	r3, [r4, #12]
 8104708:	181b      	addge	r3, r3, r0
 810470a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 810470e:	bfac      	ite	ge
 8104710:	6563      	strge	r3, [r4, #84]	; 0x54
 8104712:	81a3      	strhlt	r3, [r4, #12]
 8104714:	bd10      	pop	{r4, pc}

08104716 <__swrite>:
 8104716:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 810471a:	461f      	mov	r7, r3
 810471c:	898b      	ldrh	r3, [r1, #12]
 810471e:	05db      	lsls	r3, r3, #23
 8104720:	4605      	mov	r5, r0
 8104722:	460c      	mov	r4, r1
 8104724:	4616      	mov	r6, r2
 8104726:	d505      	bpl.n	8104734 <__swrite+0x1e>
 8104728:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 810472c:	2302      	movs	r3, #2
 810472e:	2200      	movs	r2, #0
 8104730:	f000 f886 	bl	8104840 <_lseek_r>
 8104734:	89a3      	ldrh	r3, [r4, #12]
 8104736:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 810473a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 810473e:	81a3      	strh	r3, [r4, #12]
 8104740:	4632      	mov	r2, r6
 8104742:	463b      	mov	r3, r7
 8104744:	4628      	mov	r0, r5
 8104746:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 810474a:	f000 b89d 	b.w	8104888 <_write_r>

0810474e <__sseek>:
 810474e:	b510      	push	{r4, lr}
 8104750:	460c      	mov	r4, r1
 8104752:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8104756:	f000 f873 	bl	8104840 <_lseek_r>
 810475a:	1c43      	adds	r3, r0, #1
 810475c:	89a3      	ldrh	r3, [r4, #12]
 810475e:	bf15      	itete	ne
 8104760:	6560      	strne	r0, [r4, #84]	; 0x54
 8104762:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8104766:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 810476a:	81a3      	strheq	r3, [r4, #12]
 810476c:	bf18      	it	ne
 810476e:	81a3      	strhne	r3, [r4, #12]
 8104770:	bd10      	pop	{r4, pc}

08104772 <__sclose>:
 8104772:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8104776:	f000 b853 	b.w	8104820 <_close_r>

0810477a <memset>:
 810477a:	4402      	add	r2, r0
 810477c:	4603      	mov	r3, r0
 810477e:	4293      	cmp	r3, r2
 8104780:	d100      	bne.n	8104784 <memset+0xa>
 8104782:	4770      	bx	lr
 8104784:	f803 1b01 	strb.w	r1, [r3], #1
 8104788:	e7f9      	b.n	810477e <memset+0x4>
	...

0810478c <strncasecmp>:
 810478c:	b570      	push	{r4, r5, r6, lr}
 810478e:	4e0e      	ldr	r6, [pc, #56]	; (81047c8 <strncasecmp+0x3c>)
 8104790:	4605      	mov	r5, r0
 8104792:	440a      	add	r2, r1
 8104794:	428a      	cmp	r2, r1
 8104796:	d101      	bne.n	810479c <strncasecmp+0x10>
 8104798:	2000      	movs	r0, #0
 810479a:	e013      	b.n	81047c4 <strncasecmp+0x38>
 810479c:	f815 3b01 	ldrb.w	r3, [r5], #1
 81047a0:	f811 4b01 	ldrb.w	r4, [r1], #1
 81047a4:	5cf0      	ldrb	r0, [r6, r3]
 81047a6:	f000 0003 	and.w	r0, r0, #3
 81047aa:	2801      	cmp	r0, #1
 81047ac:	5d30      	ldrb	r0, [r6, r4]
 81047ae:	f000 0003 	and.w	r0, r0, #3
 81047b2:	bf08      	it	eq
 81047b4:	3320      	addeq	r3, #32
 81047b6:	2801      	cmp	r0, #1
 81047b8:	bf08      	it	eq
 81047ba:	3420      	addeq	r4, #32
 81047bc:	1b18      	subs	r0, r3, r4
 81047be:	d101      	bne.n	81047c4 <strncasecmp+0x38>
 81047c0:	2c00      	cmp	r4, #0
 81047c2:	d1e7      	bne.n	8104794 <strncasecmp+0x8>
 81047c4:	bd70      	pop	{r4, r5, r6, pc}
 81047c6:	bf00      	nop
 81047c8:	08107431 	.word	0x08107431

081047cc <strncmp>:
 81047cc:	b510      	push	{r4, lr}
 81047ce:	b16a      	cbz	r2, 81047ec <strncmp+0x20>
 81047d0:	3901      	subs	r1, #1
 81047d2:	1884      	adds	r4, r0, r2
 81047d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 81047d8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 81047dc:	429a      	cmp	r2, r3
 81047de:	d103      	bne.n	81047e8 <strncmp+0x1c>
 81047e0:	42a0      	cmp	r0, r4
 81047e2:	d001      	beq.n	81047e8 <strncmp+0x1c>
 81047e4:	2a00      	cmp	r2, #0
 81047e6:	d1f5      	bne.n	81047d4 <strncmp+0x8>
 81047e8:	1ad0      	subs	r0, r2, r3
 81047ea:	bd10      	pop	{r4, pc}
 81047ec:	4610      	mov	r0, r2
 81047ee:	e7fc      	b.n	81047ea <strncmp+0x1e>

081047f0 <strncpy>:
 81047f0:	b510      	push	{r4, lr}
 81047f2:	3901      	subs	r1, #1
 81047f4:	4603      	mov	r3, r0
 81047f6:	b132      	cbz	r2, 8104806 <strncpy+0x16>
 81047f8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 81047fc:	f803 4b01 	strb.w	r4, [r3], #1
 8104800:	3a01      	subs	r2, #1
 8104802:	2c00      	cmp	r4, #0
 8104804:	d1f7      	bne.n	81047f6 <strncpy+0x6>
 8104806:	441a      	add	r2, r3
 8104808:	2100      	movs	r1, #0
 810480a:	4293      	cmp	r3, r2
 810480c:	d100      	bne.n	8104810 <strncpy+0x20>
 810480e:	bd10      	pop	{r4, pc}
 8104810:	f803 1b01 	strb.w	r1, [r3], #1
 8104814:	e7f9      	b.n	810480a <strncpy+0x1a>
	...

08104818 <_localeconv_r>:
 8104818:	4800      	ldr	r0, [pc, #0]	; (810481c <_localeconv_r+0x4>)
 810481a:	4770      	bx	lr
 810481c:	100000fc 	.word	0x100000fc

08104820 <_close_r>:
 8104820:	b538      	push	{r3, r4, r5, lr}
 8104822:	4d06      	ldr	r5, [pc, #24]	; (810483c <_close_r+0x1c>)
 8104824:	2300      	movs	r3, #0
 8104826:	4604      	mov	r4, r0
 8104828:	4608      	mov	r0, r1
 810482a:	602b      	str	r3, [r5, #0]
 810482c:	f7fc ff1a 	bl	8101664 <_close>
 8104830:	1c43      	adds	r3, r0, #1
 8104832:	d102      	bne.n	810483a <_close_r+0x1a>
 8104834:	682b      	ldr	r3, [r5, #0]
 8104836:	b103      	cbz	r3, 810483a <_close_r+0x1a>
 8104838:	6023      	str	r3, [r4, #0]
 810483a:	bd38      	pop	{r3, r4, r5, pc}
 810483c:	10000378 	.word	0x10000378

08104840 <_lseek_r>:
 8104840:	b538      	push	{r3, r4, r5, lr}
 8104842:	4d07      	ldr	r5, [pc, #28]	; (8104860 <_lseek_r+0x20>)
 8104844:	4604      	mov	r4, r0
 8104846:	4608      	mov	r0, r1
 8104848:	4611      	mov	r1, r2
 810484a:	2200      	movs	r2, #0
 810484c:	602a      	str	r2, [r5, #0]
 810484e:	461a      	mov	r2, r3
 8104850:	f7fc ff2f 	bl	81016b2 <_lseek>
 8104854:	1c43      	adds	r3, r0, #1
 8104856:	d102      	bne.n	810485e <_lseek_r+0x1e>
 8104858:	682b      	ldr	r3, [r5, #0]
 810485a:	b103      	cbz	r3, 810485e <_lseek_r+0x1e>
 810485c:	6023      	str	r3, [r4, #0]
 810485e:	bd38      	pop	{r3, r4, r5, pc}
 8104860:	10000378 	.word	0x10000378

08104864 <_read_r>:
 8104864:	b538      	push	{r3, r4, r5, lr}
 8104866:	4d07      	ldr	r5, [pc, #28]	; (8104884 <_read_r+0x20>)
 8104868:	4604      	mov	r4, r0
 810486a:	4608      	mov	r0, r1
 810486c:	4611      	mov	r1, r2
 810486e:	2200      	movs	r2, #0
 8104870:	602a      	str	r2, [r5, #0]
 8104872:	461a      	mov	r2, r3
 8104874:	f7fc febd 	bl	81015f2 <_read>
 8104878:	1c43      	adds	r3, r0, #1
 810487a:	d102      	bne.n	8104882 <_read_r+0x1e>
 810487c:	682b      	ldr	r3, [r5, #0]
 810487e:	b103      	cbz	r3, 8104882 <_read_r+0x1e>
 8104880:	6023      	str	r3, [r4, #0]
 8104882:	bd38      	pop	{r3, r4, r5, pc}
 8104884:	10000378 	.word	0x10000378

08104888 <_write_r>:
 8104888:	b538      	push	{r3, r4, r5, lr}
 810488a:	4d07      	ldr	r5, [pc, #28]	; (81048a8 <_write_r+0x20>)
 810488c:	4604      	mov	r4, r0
 810488e:	4608      	mov	r0, r1
 8104890:	4611      	mov	r1, r2
 8104892:	2200      	movs	r2, #0
 8104894:	602a      	str	r2, [r5, #0]
 8104896:	461a      	mov	r2, r3
 8104898:	f7fc fec8 	bl	810162c <_write>
 810489c:	1c43      	adds	r3, r0, #1
 810489e:	d102      	bne.n	81048a6 <_write_r+0x1e>
 81048a0:	682b      	ldr	r3, [r5, #0]
 81048a2:	b103      	cbz	r3, 81048a6 <_write_r+0x1e>
 81048a4:	6023      	str	r3, [r4, #0]
 81048a6:	bd38      	pop	{r3, r4, r5, pc}
 81048a8:	10000378 	.word	0x10000378

081048ac <__errno>:
 81048ac:	4b01      	ldr	r3, [pc, #4]	; (81048b4 <__errno+0x8>)
 81048ae:	6818      	ldr	r0, [r3, #0]
 81048b0:	4770      	bx	lr
 81048b2:	bf00      	nop
 81048b4:	100001c4 	.word	0x100001c4

081048b8 <__libc_init_array>:
 81048b8:	b570      	push	{r4, r5, r6, lr}
 81048ba:	4d0d      	ldr	r5, [pc, #52]	; (81048f0 <__libc_init_array+0x38>)
 81048bc:	4c0d      	ldr	r4, [pc, #52]	; (81048f4 <__libc_init_array+0x3c>)
 81048be:	1b64      	subs	r4, r4, r5
 81048c0:	10a4      	asrs	r4, r4, #2
 81048c2:	2600      	movs	r6, #0
 81048c4:	42a6      	cmp	r6, r4
 81048c6:	d109      	bne.n	81048dc <__libc_init_array+0x24>
 81048c8:	4d0b      	ldr	r5, [pc, #44]	; (81048f8 <__libc_init_array+0x40>)
 81048ca:	4c0c      	ldr	r4, [pc, #48]	; (81048fc <__libc_init_array+0x44>)
 81048cc:	f002 fd30 	bl	8107330 <_init>
 81048d0:	1b64      	subs	r4, r4, r5
 81048d2:	10a4      	asrs	r4, r4, #2
 81048d4:	2600      	movs	r6, #0
 81048d6:	42a6      	cmp	r6, r4
 81048d8:	d105      	bne.n	81048e6 <__libc_init_array+0x2e>
 81048da:	bd70      	pop	{r4, r5, r6, pc}
 81048dc:	f855 3b04 	ldr.w	r3, [r5], #4
 81048e0:	4798      	blx	r3
 81048e2:	3601      	adds	r6, #1
 81048e4:	e7ee      	b.n	81048c4 <__libc_init_array+0xc>
 81048e6:	f855 3b04 	ldr.w	r3, [r5], #4
 81048ea:	4798      	blx	r3
 81048ec:	3601      	adds	r6, #1
 81048ee:	e7f2      	b.n	81048d6 <__libc_init_array+0x1e>
 81048f0:	08107804 	.word	0x08107804
 81048f4:	08107804 	.word	0x08107804
 81048f8:	08107804 	.word	0x08107804
 81048fc:	08107808 	.word	0x08107808

08104900 <__retarget_lock_init_recursive>:
 8104900:	4770      	bx	lr

08104902 <__retarget_lock_acquire_recursive>:
 8104902:	4770      	bx	lr

08104904 <__retarget_lock_release_recursive>:
 8104904:	4770      	bx	lr

08104906 <memcpy>:
 8104906:	440a      	add	r2, r1
 8104908:	4291      	cmp	r1, r2
 810490a:	f100 33ff 	add.w	r3, r0, #4294967295
 810490e:	d100      	bne.n	8104912 <memcpy+0xc>
 8104910:	4770      	bx	lr
 8104912:	b510      	push	{r4, lr}
 8104914:	f811 4b01 	ldrb.w	r4, [r1], #1
 8104918:	f803 4f01 	strb.w	r4, [r3, #1]!
 810491c:	4291      	cmp	r1, r2
 810491e:	d1f9      	bne.n	8104914 <memcpy+0xe>
 8104920:	bd10      	pop	{r4, pc}
 8104922:	0000      	movs	r0, r0
 8104924:	0000      	movs	r0, r0
	...

08104928 <nan>:
 8104928:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8104930 <nan+0x8>
 810492c:	4770      	bx	lr
 810492e:	bf00      	nop
 8104930:	00000000 	.word	0x00000000
 8104934:	7ff80000 	.word	0x7ff80000

08104938 <nanf>:
 8104938:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8104940 <nanf+0x8>
 810493c:	4770      	bx	lr
 810493e:	bf00      	nop
 8104940:	7fc00000 	.word	0x7fc00000

08104944 <quorem>:
 8104944:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104948:	6903      	ldr	r3, [r0, #16]
 810494a:	690c      	ldr	r4, [r1, #16]
 810494c:	42a3      	cmp	r3, r4
 810494e:	4607      	mov	r7, r0
 8104950:	db7e      	blt.n	8104a50 <quorem+0x10c>
 8104952:	3c01      	subs	r4, #1
 8104954:	f101 0814 	add.w	r8, r1, #20
 8104958:	f100 0514 	add.w	r5, r0, #20
 810495c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8104960:	9301      	str	r3, [sp, #4]
 8104962:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8104966:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 810496a:	3301      	adds	r3, #1
 810496c:	429a      	cmp	r2, r3
 810496e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8104972:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8104976:	fbb2 f6f3 	udiv	r6, r2, r3
 810497a:	d331      	bcc.n	81049e0 <quorem+0x9c>
 810497c:	f04f 0e00 	mov.w	lr, #0
 8104980:	4640      	mov	r0, r8
 8104982:	46ac      	mov	ip, r5
 8104984:	46f2      	mov	sl, lr
 8104986:	f850 2b04 	ldr.w	r2, [r0], #4
 810498a:	b293      	uxth	r3, r2
 810498c:	fb06 e303 	mla	r3, r6, r3, lr
 8104990:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8104994:	0c1a      	lsrs	r2, r3, #16
 8104996:	b29b      	uxth	r3, r3
 8104998:	ebaa 0303 	sub.w	r3, sl, r3
 810499c:	f8dc a000 	ldr.w	sl, [ip]
 81049a0:	fa13 f38a 	uxtah	r3, r3, sl
 81049a4:	fb06 220e 	mla	r2, r6, lr, r2
 81049a8:	9300      	str	r3, [sp, #0]
 81049aa:	9b00      	ldr	r3, [sp, #0]
 81049ac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 81049b0:	b292      	uxth	r2, r2
 81049b2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 81049b6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 81049ba:	f8bd 3000 	ldrh.w	r3, [sp]
 81049be:	4581      	cmp	r9, r0
 81049c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 81049c4:	f84c 3b04 	str.w	r3, [ip], #4
 81049c8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 81049cc:	d2db      	bcs.n	8104986 <quorem+0x42>
 81049ce:	f855 300b 	ldr.w	r3, [r5, fp]
 81049d2:	b92b      	cbnz	r3, 81049e0 <quorem+0x9c>
 81049d4:	9b01      	ldr	r3, [sp, #4]
 81049d6:	3b04      	subs	r3, #4
 81049d8:	429d      	cmp	r5, r3
 81049da:	461a      	mov	r2, r3
 81049dc:	d32c      	bcc.n	8104a38 <quorem+0xf4>
 81049de:	613c      	str	r4, [r7, #16]
 81049e0:	4638      	mov	r0, r7
 81049e2:	f001 fd5b 	bl	810649c <__mcmp>
 81049e6:	2800      	cmp	r0, #0
 81049e8:	db22      	blt.n	8104a30 <quorem+0xec>
 81049ea:	3601      	adds	r6, #1
 81049ec:	4629      	mov	r1, r5
 81049ee:	2000      	movs	r0, #0
 81049f0:	f858 2b04 	ldr.w	r2, [r8], #4
 81049f4:	f8d1 c000 	ldr.w	ip, [r1]
 81049f8:	b293      	uxth	r3, r2
 81049fa:	1ac3      	subs	r3, r0, r3
 81049fc:	0c12      	lsrs	r2, r2, #16
 81049fe:	fa13 f38c 	uxtah	r3, r3, ip
 8104a02:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 8104a06:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8104a0a:	b29b      	uxth	r3, r3
 8104a0c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8104a10:	45c1      	cmp	r9, r8
 8104a12:	f841 3b04 	str.w	r3, [r1], #4
 8104a16:	ea4f 4022 	mov.w	r0, r2, asr #16
 8104a1a:	d2e9      	bcs.n	81049f0 <quorem+0xac>
 8104a1c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8104a20:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8104a24:	b922      	cbnz	r2, 8104a30 <quorem+0xec>
 8104a26:	3b04      	subs	r3, #4
 8104a28:	429d      	cmp	r5, r3
 8104a2a:	461a      	mov	r2, r3
 8104a2c:	d30a      	bcc.n	8104a44 <quorem+0x100>
 8104a2e:	613c      	str	r4, [r7, #16]
 8104a30:	4630      	mov	r0, r6
 8104a32:	b003      	add	sp, #12
 8104a34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8104a38:	6812      	ldr	r2, [r2, #0]
 8104a3a:	3b04      	subs	r3, #4
 8104a3c:	2a00      	cmp	r2, #0
 8104a3e:	d1ce      	bne.n	81049de <quorem+0x9a>
 8104a40:	3c01      	subs	r4, #1
 8104a42:	e7c9      	b.n	81049d8 <quorem+0x94>
 8104a44:	6812      	ldr	r2, [r2, #0]
 8104a46:	3b04      	subs	r3, #4
 8104a48:	2a00      	cmp	r2, #0
 8104a4a:	d1f0      	bne.n	8104a2e <quorem+0xea>
 8104a4c:	3c01      	subs	r4, #1
 8104a4e:	e7eb      	b.n	8104a28 <quorem+0xe4>
 8104a50:	2000      	movs	r0, #0
 8104a52:	e7ee      	b.n	8104a32 <quorem+0xee>
 8104a54:	0000      	movs	r0, r0
	...

08104a58 <_dtoa_r>:
 8104a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8104a5c:	ed2d 8b04 	vpush	{d8-d9}
 8104a60:	69c5      	ldr	r5, [r0, #28]
 8104a62:	b093      	sub	sp, #76	; 0x4c
 8104a64:	ed8d 0b02 	vstr	d0, [sp, #8]
 8104a68:	ec57 6b10 	vmov	r6, r7, d0
 8104a6c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8104a70:	9107      	str	r1, [sp, #28]
 8104a72:	4604      	mov	r4, r0
 8104a74:	920a      	str	r2, [sp, #40]	; 0x28
 8104a76:	930d      	str	r3, [sp, #52]	; 0x34
 8104a78:	b975      	cbnz	r5, 8104a98 <_dtoa_r+0x40>
 8104a7a:	2010      	movs	r0, #16
 8104a7c:	f001 f982 	bl	8105d84 <malloc>
 8104a80:	4602      	mov	r2, r0
 8104a82:	61e0      	str	r0, [r4, #28]
 8104a84:	b920      	cbnz	r0, 8104a90 <_dtoa_r+0x38>
 8104a86:	4bae      	ldr	r3, [pc, #696]	; (8104d40 <_dtoa_r+0x2e8>)
 8104a88:	21ef      	movs	r1, #239	; 0xef
 8104a8a:	48ae      	ldr	r0, [pc, #696]	; (8104d44 <_dtoa_r+0x2ec>)
 8104a8c:	f002 f92a 	bl	8106ce4 <__assert_func>
 8104a90:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8104a94:	6005      	str	r5, [r0, #0]
 8104a96:	60c5      	str	r5, [r0, #12]
 8104a98:	69e3      	ldr	r3, [r4, #28]
 8104a9a:	6819      	ldr	r1, [r3, #0]
 8104a9c:	b151      	cbz	r1, 8104ab4 <_dtoa_r+0x5c>
 8104a9e:	685a      	ldr	r2, [r3, #4]
 8104aa0:	604a      	str	r2, [r1, #4]
 8104aa2:	2301      	movs	r3, #1
 8104aa4:	4093      	lsls	r3, r2
 8104aa6:	608b      	str	r3, [r1, #8]
 8104aa8:	4620      	mov	r0, r4
 8104aaa:	f001 fa71 	bl	8105f90 <_Bfree>
 8104aae:	69e3      	ldr	r3, [r4, #28]
 8104ab0:	2200      	movs	r2, #0
 8104ab2:	601a      	str	r2, [r3, #0]
 8104ab4:	1e3b      	subs	r3, r7, #0
 8104ab6:	bfbb      	ittet	lt
 8104ab8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8104abc:	9303      	strlt	r3, [sp, #12]
 8104abe:	2300      	movge	r3, #0
 8104ac0:	2201      	movlt	r2, #1
 8104ac2:	bfac      	ite	ge
 8104ac4:	f8c8 3000 	strge.w	r3, [r8]
 8104ac8:	f8c8 2000 	strlt.w	r2, [r8]
 8104acc:	4b9e      	ldr	r3, [pc, #632]	; (8104d48 <_dtoa_r+0x2f0>)
 8104ace:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8104ad2:	ea33 0308 	bics.w	r3, r3, r8
 8104ad6:	d11b      	bne.n	8104b10 <_dtoa_r+0xb8>
 8104ad8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8104ada:	f242 730f 	movw	r3, #9999	; 0x270f
 8104ade:	6013      	str	r3, [r2, #0]
 8104ae0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 8104ae4:	4333      	orrs	r3, r6
 8104ae6:	f000 8593 	beq.w	8105610 <_dtoa_r+0xbb8>
 8104aea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8104aec:	b963      	cbnz	r3, 8104b08 <_dtoa_r+0xb0>
 8104aee:	4b97      	ldr	r3, [pc, #604]	; (8104d4c <_dtoa_r+0x2f4>)
 8104af0:	e027      	b.n	8104b42 <_dtoa_r+0xea>
 8104af2:	4b97      	ldr	r3, [pc, #604]	; (8104d50 <_dtoa_r+0x2f8>)
 8104af4:	9300      	str	r3, [sp, #0]
 8104af6:	3308      	adds	r3, #8
 8104af8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8104afa:	6013      	str	r3, [r2, #0]
 8104afc:	9800      	ldr	r0, [sp, #0]
 8104afe:	b013      	add	sp, #76	; 0x4c
 8104b00:	ecbd 8b04 	vpop	{d8-d9}
 8104b04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8104b08:	4b90      	ldr	r3, [pc, #576]	; (8104d4c <_dtoa_r+0x2f4>)
 8104b0a:	9300      	str	r3, [sp, #0]
 8104b0c:	3303      	adds	r3, #3
 8104b0e:	e7f3      	b.n	8104af8 <_dtoa_r+0xa0>
 8104b10:	ed9d 7b02 	vldr	d7, [sp, #8]
 8104b14:	2200      	movs	r2, #0
 8104b16:	ec51 0b17 	vmov	r0, r1, d7
 8104b1a:	eeb0 8a47 	vmov.f32	s16, s14
 8104b1e:	eef0 8a67 	vmov.f32	s17, s15
 8104b22:	2300      	movs	r3, #0
 8104b24:	f7fc f858 	bl	8100bd8 <__aeabi_dcmpeq>
 8104b28:	4681      	mov	r9, r0
 8104b2a:	b160      	cbz	r0, 8104b46 <_dtoa_r+0xee>
 8104b2c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8104b2e:	2301      	movs	r3, #1
 8104b30:	6013      	str	r3, [r2, #0]
 8104b32:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8104b34:	2b00      	cmp	r3, #0
 8104b36:	f000 8568 	beq.w	810560a <_dtoa_r+0xbb2>
 8104b3a:	4b86      	ldr	r3, [pc, #536]	; (8104d54 <_dtoa_r+0x2fc>)
 8104b3c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8104b3e:	6013      	str	r3, [r2, #0]
 8104b40:	3b01      	subs	r3, #1
 8104b42:	9300      	str	r3, [sp, #0]
 8104b44:	e7da      	b.n	8104afc <_dtoa_r+0xa4>
 8104b46:	aa10      	add	r2, sp, #64	; 0x40
 8104b48:	a911      	add	r1, sp, #68	; 0x44
 8104b4a:	4620      	mov	r0, r4
 8104b4c:	eeb0 0a48 	vmov.f32	s0, s16
 8104b50:	eef0 0a68 	vmov.f32	s1, s17
 8104b54:	f001 fdb8 	bl	81066c8 <__d2b>
 8104b58:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8104b5c:	4682      	mov	sl, r0
 8104b5e:	2d00      	cmp	r5, #0
 8104b60:	d07f      	beq.n	8104c62 <_dtoa_r+0x20a>
 8104b62:	ee18 3a90 	vmov	r3, s17
 8104b66:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8104b6a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8104b6e:	ec51 0b18 	vmov	r0, r1, d8
 8104b72:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8104b76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8104b7a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8104b7e:	4619      	mov	r1, r3
 8104b80:	2200      	movs	r2, #0
 8104b82:	4b75      	ldr	r3, [pc, #468]	; (8104d58 <_dtoa_r+0x300>)
 8104b84:	f7fb fc08 	bl	8100398 <__aeabi_dsub>
 8104b88:	a367      	add	r3, pc, #412	; (adr r3, 8104d28 <_dtoa_r+0x2d0>)
 8104b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b8e:	f7fb fdbb 	bl	8100708 <__aeabi_dmul>
 8104b92:	a367      	add	r3, pc, #412	; (adr r3, 8104d30 <_dtoa_r+0x2d8>)
 8104b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104b98:	f7fb fc00 	bl	810039c <__adddf3>
 8104b9c:	4606      	mov	r6, r0
 8104b9e:	4628      	mov	r0, r5
 8104ba0:	460f      	mov	r7, r1
 8104ba2:	f7fb fd47 	bl	8100634 <__aeabi_i2d>
 8104ba6:	a364      	add	r3, pc, #400	; (adr r3, 8104d38 <_dtoa_r+0x2e0>)
 8104ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104bac:	f7fb fdac 	bl	8100708 <__aeabi_dmul>
 8104bb0:	4602      	mov	r2, r0
 8104bb2:	460b      	mov	r3, r1
 8104bb4:	4630      	mov	r0, r6
 8104bb6:	4639      	mov	r1, r7
 8104bb8:	f7fb fbf0 	bl	810039c <__adddf3>
 8104bbc:	4606      	mov	r6, r0
 8104bbe:	460f      	mov	r7, r1
 8104bc0:	f7fc f852 	bl	8100c68 <__aeabi_d2iz>
 8104bc4:	2200      	movs	r2, #0
 8104bc6:	4683      	mov	fp, r0
 8104bc8:	2300      	movs	r3, #0
 8104bca:	4630      	mov	r0, r6
 8104bcc:	4639      	mov	r1, r7
 8104bce:	f7fc f80d 	bl	8100bec <__aeabi_dcmplt>
 8104bd2:	b148      	cbz	r0, 8104be8 <_dtoa_r+0x190>
 8104bd4:	4658      	mov	r0, fp
 8104bd6:	f7fb fd2d 	bl	8100634 <__aeabi_i2d>
 8104bda:	4632      	mov	r2, r6
 8104bdc:	463b      	mov	r3, r7
 8104bde:	f7fb fffb 	bl	8100bd8 <__aeabi_dcmpeq>
 8104be2:	b908      	cbnz	r0, 8104be8 <_dtoa_r+0x190>
 8104be4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8104be8:	f1bb 0f16 	cmp.w	fp, #22
 8104bec:	d857      	bhi.n	8104c9e <_dtoa_r+0x246>
 8104bee:	4b5b      	ldr	r3, [pc, #364]	; (8104d5c <_dtoa_r+0x304>)
 8104bf0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8104bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104bf8:	ec51 0b18 	vmov	r0, r1, d8
 8104bfc:	f7fb fff6 	bl	8100bec <__aeabi_dcmplt>
 8104c00:	2800      	cmp	r0, #0
 8104c02:	d04e      	beq.n	8104ca2 <_dtoa_r+0x24a>
 8104c04:	f10b 3bff 	add.w	fp, fp, #4294967295
 8104c08:	2300      	movs	r3, #0
 8104c0a:	930c      	str	r3, [sp, #48]	; 0x30
 8104c0c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8104c0e:	1b5b      	subs	r3, r3, r5
 8104c10:	1e5a      	subs	r2, r3, #1
 8104c12:	bf45      	ittet	mi
 8104c14:	f1c3 0301 	rsbmi	r3, r3, #1
 8104c18:	9305      	strmi	r3, [sp, #20]
 8104c1a:	2300      	movpl	r3, #0
 8104c1c:	2300      	movmi	r3, #0
 8104c1e:	9206      	str	r2, [sp, #24]
 8104c20:	bf54      	ite	pl
 8104c22:	9305      	strpl	r3, [sp, #20]
 8104c24:	9306      	strmi	r3, [sp, #24]
 8104c26:	f1bb 0f00 	cmp.w	fp, #0
 8104c2a:	db3c      	blt.n	8104ca6 <_dtoa_r+0x24e>
 8104c2c:	9b06      	ldr	r3, [sp, #24]
 8104c2e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 8104c32:	445b      	add	r3, fp
 8104c34:	9306      	str	r3, [sp, #24]
 8104c36:	2300      	movs	r3, #0
 8104c38:	9308      	str	r3, [sp, #32]
 8104c3a:	9b07      	ldr	r3, [sp, #28]
 8104c3c:	2b09      	cmp	r3, #9
 8104c3e:	d868      	bhi.n	8104d12 <_dtoa_r+0x2ba>
 8104c40:	2b05      	cmp	r3, #5
 8104c42:	bfc4      	itt	gt
 8104c44:	3b04      	subgt	r3, #4
 8104c46:	9307      	strgt	r3, [sp, #28]
 8104c48:	9b07      	ldr	r3, [sp, #28]
 8104c4a:	f1a3 0302 	sub.w	r3, r3, #2
 8104c4e:	bfcc      	ite	gt
 8104c50:	2500      	movgt	r5, #0
 8104c52:	2501      	movle	r5, #1
 8104c54:	2b03      	cmp	r3, #3
 8104c56:	f200 8085 	bhi.w	8104d64 <_dtoa_r+0x30c>
 8104c5a:	e8df f003 	tbb	[pc, r3]
 8104c5e:	3b2e      	.short	0x3b2e
 8104c60:	5839      	.short	0x5839
 8104c62:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8104c66:	441d      	add	r5, r3
 8104c68:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8104c6c:	2b20      	cmp	r3, #32
 8104c6e:	bfc1      	itttt	gt
 8104c70:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8104c74:	fa08 f803 	lslgt.w	r8, r8, r3
 8104c78:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8104c7c:	fa26 f303 	lsrgt.w	r3, r6, r3
 8104c80:	bfd6      	itet	le
 8104c82:	f1c3 0320 	rsble	r3, r3, #32
 8104c86:	ea48 0003 	orrgt.w	r0, r8, r3
 8104c8a:	fa06 f003 	lslle.w	r0, r6, r3
 8104c8e:	f7fb fcc1 	bl	8100614 <__aeabi_ui2d>
 8104c92:	2201      	movs	r2, #1
 8104c94:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8104c98:	3d01      	subs	r5, #1
 8104c9a:	920e      	str	r2, [sp, #56]	; 0x38
 8104c9c:	e76f      	b.n	8104b7e <_dtoa_r+0x126>
 8104c9e:	2301      	movs	r3, #1
 8104ca0:	e7b3      	b.n	8104c0a <_dtoa_r+0x1b2>
 8104ca2:	900c      	str	r0, [sp, #48]	; 0x30
 8104ca4:	e7b2      	b.n	8104c0c <_dtoa_r+0x1b4>
 8104ca6:	9b05      	ldr	r3, [sp, #20]
 8104ca8:	eba3 030b 	sub.w	r3, r3, fp
 8104cac:	9305      	str	r3, [sp, #20]
 8104cae:	f1cb 0300 	rsb	r3, fp, #0
 8104cb2:	9308      	str	r3, [sp, #32]
 8104cb4:	2300      	movs	r3, #0
 8104cb6:	930b      	str	r3, [sp, #44]	; 0x2c
 8104cb8:	e7bf      	b.n	8104c3a <_dtoa_r+0x1e2>
 8104cba:	2300      	movs	r3, #0
 8104cbc:	9309      	str	r3, [sp, #36]	; 0x24
 8104cbe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104cc0:	2b00      	cmp	r3, #0
 8104cc2:	dc52      	bgt.n	8104d6a <_dtoa_r+0x312>
 8104cc4:	2301      	movs	r3, #1
 8104cc6:	9301      	str	r3, [sp, #4]
 8104cc8:	9304      	str	r3, [sp, #16]
 8104cca:	461a      	mov	r2, r3
 8104ccc:	920a      	str	r2, [sp, #40]	; 0x28
 8104cce:	e00b      	b.n	8104ce8 <_dtoa_r+0x290>
 8104cd0:	2301      	movs	r3, #1
 8104cd2:	e7f3      	b.n	8104cbc <_dtoa_r+0x264>
 8104cd4:	2300      	movs	r3, #0
 8104cd6:	9309      	str	r3, [sp, #36]	; 0x24
 8104cd8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104cda:	445b      	add	r3, fp
 8104cdc:	9301      	str	r3, [sp, #4]
 8104cde:	3301      	adds	r3, #1
 8104ce0:	2b01      	cmp	r3, #1
 8104ce2:	9304      	str	r3, [sp, #16]
 8104ce4:	bfb8      	it	lt
 8104ce6:	2301      	movlt	r3, #1
 8104ce8:	69e0      	ldr	r0, [r4, #28]
 8104cea:	2100      	movs	r1, #0
 8104cec:	2204      	movs	r2, #4
 8104cee:	f102 0614 	add.w	r6, r2, #20
 8104cf2:	429e      	cmp	r6, r3
 8104cf4:	d93d      	bls.n	8104d72 <_dtoa_r+0x31a>
 8104cf6:	6041      	str	r1, [r0, #4]
 8104cf8:	4620      	mov	r0, r4
 8104cfa:	f001 f909 	bl	8105f10 <_Balloc>
 8104cfe:	9000      	str	r0, [sp, #0]
 8104d00:	2800      	cmp	r0, #0
 8104d02:	d139      	bne.n	8104d78 <_dtoa_r+0x320>
 8104d04:	4b16      	ldr	r3, [pc, #88]	; (8104d60 <_dtoa_r+0x308>)
 8104d06:	4602      	mov	r2, r0
 8104d08:	f240 11af 	movw	r1, #431	; 0x1af
 8104d0c:	e6bd      	b.n	8104a8a <_dtoa_r+0x32>
 8104d0e:	2301      	movs	r3, #1
 8104d10:	e7e1      	b.n	8104cd6 <_dtoa_r+0x27e>
 8104d12:	2501      	movs	r5, #1
 8104d14:	2300      	movs	r3, #0
 8104d16:	9307      	str	r3, [sp, #28]
 8104d18:	9509      	str	r5, [sp, #36]	; 0x24
 8104d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8104d1e:	9301      	str	r3, [sp, #4]
 8104d20:	9304      	str	r3, [sp, #16]
 8104d22:	2200      	movs	r2, #0
 8104d24:	2312      	movs	r3, #18
 8104d26:	e7d1      	b.n	8104ccc <_dtoa_r+0x274>
 8104d28:	636f4361 	.word	0x636f4361
 8104d2c:	3fd287a7 	.word	0x3fd287a7
 8104d30:	8b60c8b3 	.word	0x8b60c8b3
 8104d34:	3fc68a28 	.word	0x3fc68a28
 8104d38:	509f79fb 	.word	0x509f79fb
 8104d3c:	3fd34413 	.word	0x3fd34413
 8104d40:	0810757a 	.word	0x0810757a
 8104d44:	08107591 	.word	0x08107591
 8104d48:	7ff00000 	.word	0x7ff00000
 8104d4c:	08107576 	.word	0x08107576
 8104d50:	0810756d 	.word	0x0810756d
 8104d54:	08107542 	.word	0x08107542
 8104d58:	3ff80000 	.word	0x3ff80000
 8104d5c:	081076e0 	.word	0x081076e0
 8104d60:	081075e9 	.word	0x081075e9
 8104d64:	2301      	movs	r3, #1
 8104d66:	9309      	str	r3, [sp, #36]	; 0x24
 8104d68:	e7d7      	b.n	8104d1a <_dtoa_r+0x2c2>
 8104d6a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104d6c:	9301      	str	r3, [sp, #4]
 8104d6e:	9304      	str	r3, [sp, #16]
 8104d70:	e7ba      	b.n	8104ce8 <_dtoa_r+0x290>
 8104d72:	3101      	adds	r1, #1
 8104d74:	0052      	lsls	r2, r2, #1
 8104d76:	e7ba      	b.n	8104cee <_dtoa_r+0x296>
 8104d78:	69e3      	ldr	r3, [r4, #28]
 8104d7a:	9a00      	ldr	r2, [sp, #0]
 8104d7c:	601a      	str	r2, [r3, #0]
 8104d7e:	9b04      	ldr	r3, [sp, #16]
 8104d80:	2b0e      	cmp	r3, #14
 8104d82:	f200 80a8 	bhi.w	8104ed6 <_dtoa_r+0x47e>
 8104d86:	2d00      	cmp	r5, #0
 8104d88:	f000 80a5 	beq.w	8104ed6 <_dtoa_r+0x47e>
 8104d8c:	f1bb 0f00 	cmp.w	fp, #0
 8104d90:	dd38      	ble.n	8104e04 <_dtoa_r+0x3ac>
 8104d92:	4bc0      	ldr	r3, [pc, #768]	; (8105094 <_dtoa_r+0x63c>)
 8104d94:	f00b 020f 	and.w	r2, fp, #15
 8104d98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8104d9c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8104da0:	e9d3 6700 	ldrd	r6, r7, [r3]
 8104da4:	ea4f 182b 	mov.w	r8, fp, asr #4
 8104da8:	d019      	beq.n	8104dde <_dtoa_r+0x386>
 8104daa:	4bbb      	ldr	r3, [pc, #748]	; (8105098 <_dtoa_r+0x640>)
 8104dac:	ec51 0b18 	vmov	r0, r1, d8
 8104db0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8104db4:	f7fb fdd2 	bl	810095c <__aeabi_ddiv>
 8104db8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8104dbc:	f008 080f 	and.w	r8, r8, #15
 8104dc0:	2503      	movs	r5, #3
 8104dc2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8105098 <_dtoa_r+0x640>
 8104dc6:	f1b8 0f00 	cmp.w	r8, #0
 8104dca:	d10a      	bne.n	8104de2 <_dtoa_r+0x38a>
 8104dcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8104dd0:	4632      	mov	r2, r6
 8104dd2:	463b      	mov	r3, r7
 8104dd4:	f7fb fdc2 	bl	810095c <__aeabi_ddiv>
 8104dd8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8104ddc:	e02b      	b.n	8104e36 <_dtoa_r+0x3de>
 8104dde:	2502      	movs	r5, #2
 8104de0:	e7ef      	b.n	8104dc2 <_dtoa_r+0x36a>
 8104de2:	f018 0f01 	tst.w	r8, #1
 8104de6:	d008      	beq.n	8104dfa <_dtoa_r+0x3a2>
 8104de8:	4630      	mov	r0, r6
 8104dea:	4639      	mov	r1, r7
 8104dec:	e9d9 2300 	ldrd	r2, r3, [r9]
 8104df0:	f7fb fc8a 	bl	8100708 <__aeabi_dmul>
 8104df4:	3501      	adds	r5, #1
 8104df6:	4606      	mov	r6, r0
 8104df8:	460f      	mov	r7, r1
 8104dfa:	ea4f 0868 	mov.w	r8, r8, asr #1
 8104dfe:	f109 0908 	add.w	r9, r9, #8
 8104e02:	e7e0      	b.n	8104dc6 <_dtoa_r+0x36e>
 8104e04:	f000 809f 	beq.w	8104f46 <_dtoa_r+0x4ee>
 8104e08:	f1cb 0600 	rsb	r6, fp, #0
 8104e0c:	4ba1      	ldr	r3, [pc, #644]	; (8105094 <_dtoa_r+0x63c>)
 8104e0e:	4fa2      	ldr	r7, [pc, #648]	; (8105098 <_dtoa_r+0x640>)
 8104e10:	f006 020f 	and.w	r2, r6, #15
 8104e14:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8104e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8104e1c:	ec51 0b18 	vmov	r0, r1, d8
 8104e20:	f7fb fc72 	bl	8100708 <__aeabi_dmul>
 8104e24:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8104e28:	1136      	asrs	r6, r6, #4
 8104e2a:	2300      	movs	r3, #0
 8104e2c:	2502      	movs	r5, #2
 8104e2e:	2e00      	cmp	r6, #0
 8104e30:	d17e      	bne.n	8104f30 <_dtoa_r+0x4d8>
 8104e32:	2b00      	cmp	r3, #0
 8104e34:	d1d0      	bne.n	8104dd8 <_dtoa_r+0x380>
 8104e36:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8104e38:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8104e3c:	2b00      	cmp	r3, #0
 8104e3e:	f000 8084 	beq.w	8104f4a <_dtoa_r+0x4f2>
 8104e42:	4b96      	ldr	r3, [pc, #600]	; (810509c <_dtoa_r+0x644>)
 8104e44:	2200      	movs	r2, #0
 8104e46:	4640      	mov	r0, r8
 8104e48:	4649      	mov	r1, r9
 8104e4a:	f7fb fecf 	bl	8100bec <__aeabi_dcmplt>
 8104e4e:	2800      	cmp	r0, #0
 8104e50:	d07b      	beq.n	8104f4a <_dtoa_r+0x4f2>
 8104e52:	9b04      	ldr	r3, [sp, #16]
 8104e54:	2b00      	cmp	r3, #0
 8104e56:	d078      	beq.n	8104f4a <_dtoa_r+0x4f2>
 8104e58:	9b01      	ldr	r3, [sp, #4]
 8104e5a:	2b00      	cmp	r3, #0
 8104e5c:	dd39      	ble.n	8104ed2 <_dtoa_r+0x47a>
 8104e5e:	4b90      	ldr	r3, [pc, #576]	; (81050a0 <_dtoa_r+0x648>)
 8104e60:	2200      	movs	r2, #0
 8104e62:	4640      	mov	r0, r8
 8104e64:	4649      	mov	r1, r9
 8104e66:	f7fb fc4f 	bl	8100708 <__aeabi_dmul>
 8104e6a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8104e6e:	9e01      	ldr	r6, [sp, #4]
 8104e70:	f10b 37ff 	add.w	r7, fp, #4294967295
 8104e74:	3501      	adds	r5, #1
 8104e76:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8104e7a:	4628      	mov	r0, r5
 8104e7c:	f7fb fbda 	bl	8100634 <__aeabi_i2d>
 8104e80:	4642      	mov	r2, r8
 8104e82:	464b      	mov	r3, r9
 8104e84:	f7fb fc40 	bl	8100708 <__aeabi_dmul>
 8104e88:	4b86      	ldr	r3, [pc, #536]	; (81050a4 <_dtoa_r+0x64c>)
 8104e8a:	2200      	movs	r2, #0
 8104e8c:	f7fb fa86 	bl	810039c <__adddf3>
 8104e90:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 8104e94:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8104e98:	9303      	str	r3, [sp, #12]
 8104e9a:	2e00      	cmp	r6, #0
 8104e9c:	d158      	bne.n	8104f50 <_dtoa_r+0x4f8>
 8104e9e:	4b82      	ldr	r3, [pc, #520]	; (81050a8 <_dtoa_r+0x650>)
 8104ea0:	2200      	movs	r2, #0
 8104ea2:	4640      	mov	r0, r8
 8104ea4:	4649      	mov	r1, r9
 8104ea6:	f7fb fa77 	bl	8100398 <__aeabi_dsub>
 8104eaa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8104eae:	4680      	mov	r8, r0
 8104eb0:	4689      	mov	r9, r1
 8104eb2:	f7fb feb9 	bl	8100c28 <__aeabi_dcmpgt>
 8104eb6:	2800      	cmp	r0, #0
 8104eb8:	f040 8296 	bne.w	81053e8 <_dtoa_r+0x990>
 8104ebc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8104ec0:	4640      	mov	r0, r8
 8104ec2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8104ec6:	4649      	mov	r1, r9
 8104ec8:	f7fb fe90 	bl	8100bec <__aeabi_dcmplt>
 8104ecc:	2800      	cmp	r0, #0
 8104ece:	f040 8289 	bne.w	81053e4 <_dtoa_r+0x98c>
 8104ed2:	ed8d 8b02 	vstr	d8, [sp, #8]
 8104ed6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8104ed8:	2b00      	cmp	r3, #0
 8104eda:	f2c0 814e 	blt.w	810517a <_dtoa_r+0x722>
 8104ede:	f1bb 0f0e 	cmp.w	fp, #14
 8104ee2:	f300 814a 	bgt.w	810517a <_dtoa_r+0x722>
 8104ee6:	4b6b      	ldr	r3, [pc, #428]	; (8105094 <_dtoa_r+0x63c>)
 8104ee8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8104eec:	e9d3 8900 	ldrd	r8, r9, [r3]
 8104ef0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8104ef2:	2b00      	cmp	r3, #0
 8104ef4:	f280 80dc 	bge.w	81050b0 <_dtoa_r+0x658>
 8104ef8:	9b04      	ldr	r3, [sp, #16]
 8104efa:	2b00      	cmp	r3, #0
 8104efc:	f300 80d8 	bgt.w	81050b0 <_dtoa_r+0x658>
 8104f00:	f040 826f 	bne.w	81053e2 <_dtoa_r+0x98a>
 8104f04:	4b68      	ldr	r3, [pc, #416]	; (81050a8 <_dtoa_r+0x650>)
 8104f06:	2200      	movs	r2, #0
 8104f08:	4640      	mov	r0, r8
 8104f0a:	4649      	mov	r1, r9
 8104f0c:	f7fb fbfc 	bl	8100708 <__aeabi_dmul>
 8104f10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8104f14:	f7fb fe7e 	bl	8100c14 <__aeabi_dcmpge>
 8104f18:	9e04      	ldr	r6, [sp, #16]
 8104f1a:	4637      	mov	r7, r6
 8104f1c:	2800      	cmp	r0, #0
 8104f1e:	f040 8245 	bne.w	81053ac <_dtoa_r+0x954>
 8104f22:	9d00      	ldr	r5, [sp, #0]
 8104f24:	2331      	movs	r3, #49	; 0x31
 8104f26:	f805 3b01 	strb.w	r3, [r5], #1
 8104f2a:	f10b 0b01 	add.w	fp, fp, #1
 8104f2e:	e241      	b.n	81053b4 <_dtoa_r+0x95c>
 8104f30:	07f2      	lsls	r2, r6, #31
 8104f32:	d505      	bpl.n	8104f40 <_dtoa_r+0x4e8>
 8104f34:	e9d7 2300 	ldrd	r2, r3, [r7]
 8104f38:	f7fb fbe6 	bl	8100708 <__aeabi_dmul>
 8104f3c:	3501      	adds	r5, #1
 8104f3e:	2301      	movs	r3, #1
 8104f40:	1076      	asrs	r6, r6, #1
 8104f42:	3708      	adds	r7, #8
 8104f44:	e773      	b.n	8104e2e <_dtoa_r+0x3d6>
 8104f46:	2502      	movs	r5, #2
 8104f48:	e775      	b.n	8104e36 <_dtoa_r+0x3de>
 8104f4a:	9e04      	ldr	r6, [sp, #16]
 8104f4c:	465f      	mov	r7, fp
 8104f4e:	e792      	b.n	8104e76 <_dtoa_r+0x41e>
 8104f50:	9900      	ldr	r1, [sp, #0]
 8104f52:	4b50      	ldr	r3, [pc, #320]	; (8105094 <_dtoa_r+0x63c>)
 8104f54:	ed9d 7b02 	vldr	d7, [sp, #8]
 8104f58:	4431      	add	r1, r6
 8104f5a:	9102      	str	r1, [sp, #8]
 8104f5c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8104f5e:	eeb0 9a47 	vmov.f32	s18, s14
 8104f62:	eef0 9a67 	vmov.f32	s19, s15
 8104f66:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8104f6a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8104f6e:	2900      	cmp	r1, #0
 8104f70:	d044      	beq.n	8104ffc <_dtoa_r+0x5a4>
 8104f72:	494e      	ldr	r1, [pc, #312]	; (81050ac <_dtoa_r+0x654>)
 8104f74:	2000      	movs	r0, #0
 8104f76:	f7fb fcf1 	bl	810095c <__aeabi_ddiv>
 8104f7a:	ec53 2b19 	vmov	r2, r3, d9
 8104f7e:	f7fb fa0b 	bl	8100398 <__aeabi_dsub>
 8104f82:	9d00      	ldr	r5, [sp, #0]
 8104f84:	ec41 0b19 	vmov	d9, r0, r1
 8104f88:	4649      	mov	r1, r9
 8104f8a:	4640      	mov	r0, r8
 8104f8c:	f7fb fe6c 	bl	8100c68 <__aeabi_d2iz>
 8104f90:	4606      	mov	r6, r0
 8104f92:	f7fb fb4f 	bl	8100634 <__aeabi_i2d>
 8104f96:	4602      	mov	r2, r0
 8104f98:	460b      	mov	r3, r1
 8104f9a:	4640      	mov	r0, r8
 8104f9c:	4649      	mov	r1, r9
 8104f9e:	f7fb f9fb 	bl	8100398 <__aeabi_dsub>
 8104fa2:	3630      	adds	r6, #48	; 0x30
 8104fa4:	f805 6b01 	strb.w	r6, [r5], #1
 8104fa8:	ec53 2b19 	vmov	r2, r3, d9
 8104fac:	4680      	mov	r8, r0
 8104fae:	4689      	mov	r9, r1
 8104fb0:	f7fb fe1c 	bl	8100bec <__aeabi_dcmplt>
 8104fb4:	2800      	cmp	r0, #0
 8104fb6:	d164      	bne.n	8105082 <_dtoa_r+0x62a>
 8104fb8:	4642      	mov	r2, r8
 8104fba:	464b      	mov	r3, r9
 8104fbc:	4937      	ldr	r1, [pc, #220]	; (810509c <_dtoa_r+0x644>)
 8104fbe:	2000      	movs	r0, #0
 8104fc0:	f7fb f9ea 	bl	8100398 <__aeabi_dsub>
 8104fc4:	ec53 2b19 	vmov	r2, r3, d9
 8104fc8:	f7fb fe10 	bl	8100bec <__aeabi_dcmplt>
 8104fcc:	2800      	cmp	r0, #0
 8104fce:	f040 80b6 	bne.w	810513e <_dtoa_r+0x6e6>
 8104fd2:	9b02      	ldr	r3, [sp, #8]
 8104fd4:	429d      	cmp	r5, r3
 8104fd6:	f43f af7c 	beq.w	8104ed2 <_dtoa_r+0x47a>
 8104fda:	4b31      	ldr	r3, [pc, #196]	; (81050a0 <_dtoa_r+0x648>)
 8104fdc:	ec51 0b19 	vmov	r0, r1, d9
 8104fe0:	2200      	movs	r2, #0
 8104fe2:	f7fb fb91 	bl	8100708 <__aeabi_dmul>
 8104fe6:	4b2e      	ldr	r3, [pc, #184]	; (81050a0 <_dtoa_r+0x648>)
 8104fe8:	ec41 0b19 	vmov	d9, r0, r1
 8104fec:	2200      	movs	r2, #0
 8104fee:	4640      	mov	r0, r8
 8104ff0:	4649      	mov	r1, r9
 8104ff2:	f7fb fb89 	bl	8100708 <__aeabi_dmul>
 8104ff6:	4680      	mov	r8, r0
 8104ff8:	4689      	mov	r9, r1
 8104ffa:	e7c5      	b.n	8104f88 <_dtoa_r+0x530>
 8104ffc:	ec51 0b17 	vmov	r0, r1, d7
 8105000:	f7fb fb82 	bl	8100708 <__aeabi_dmul>
 8105004:	9b02      	ldr	r3, [sp, #8]
 8105006:	9d00      	ldr	r5, [sp, #0]
 8105008:	930f      	str	r3, [sp, #60]	; 0x3c
 810500a:	ec41 0b19 	vmov	d9, r0, r1
 810500e:	4649      	mov	r1, r9
 8105010:	4640      	mov	r0, r8
 8105012:	f7fb fe29 	bl	8100c68 <__aeabi_d2iz>
 8105016:	4606      	mov	r6, r0
 8105018:	f7fb fb0c 	bl	8100634 <__aeabi_i2d>
 810501c:	3630      	adds	r6, #48	; 0x30
 810501e:	4602      	mov	r2, r0
 8105020:	460b      	mov	r3, r1
 8105022:	4640      	mov	r0, r8
 8105024:	4649      	mov	r1, r9
 8105026:	f7fb f9b7 	bl	8100398 <__aeabi_dsub>
 810502a:	f805 6b01 	strb.w	r6, [r5], #1
 810502e:	9b02      	ldr	r3, [sp, #8]
 8105030:	429d      	cmp	r5, r3
 8105032:	4680      	mov	r8, r0
 8105034:	4689      	mov	r9, r1
 8105036:	f04f 0200 	mov.w	r2, #0
 810503a:	d124      	bne.n	8105086 <_dtoa_r+0x62e>
 810503c:	4b1b      	ldr	r3, [pc, #108]	; (81050ac <_dtoa_r+0x654>)
 810503e:	ec51 0b19 	vmov	r0, r1, d9
 8105042:	f7fb f9ab 	bl	810039c <__adddf3>
 8105046:	4602      	mov	r2, r0
 8105048:	460b      	mov	r3, r1
 810504a:	4640      	mov	r0, r8
 810504c:	4649      	mov	r1, r9
 810504e:	f7fb fdeb 	bl	8100c28 <__aeabi_dcmpgt>
 8105052:	2800      	cmp	r0, #0
 8105054:	d173      	bne.n	810513e <_dtoa_r+0x6e6>
 8105056:	ec53 2b19 	vmov	r2, r3, d9
 810505a:	4914      	ldr	r1, [pc, #80]	; (81050ac <_dtoa_r+0x654>)
 810505c:	2000      	movs	r0, #0
 810505e:	f7fb f99b 	bl	8100398 <__aeabi_dsub>
 8105062:	4602      	mov	r2, r0
 8105064:	460b      	mov	r3, r1
 8105066:	4640      	mov	r0, r8
 8105068:	4649      	mov	r1, r9
 810506a:	f7fb fdbf 	bl	8100bec <__aeabi_dcmplt>
 810506e:	2800      	cmp	r0, #0
 8105070:	f43f af2f 	beq.w	8104ed2 <_dtoa_r+0x47a>
 8105074:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8105076:	1e6b      	subs	r3, r5, #1
 8105078:	930f      	str	r3, [sp, #60]	; 0x3c
 810507a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 810507e:	2b30      	cmp	r3, #48	; 0x30
 8105080:	d0f8      	beq.n	8105074 <_dtoa_r+0x61c>
 8105082:	46bb      	mov	fp, r7
 8105084:	e04a      	b.n	810511c <_dtoa_r+0x6c4>
 8105086:	4b06      	ldr	r3, [pc, #24]	; (81050a0 <_dtoa_r+0x648>)
 8105088:	f7fb fb3e 	bl	8100708 <__aeabi_dmul>
 810508c:	4680      	mov	r8, r0
 810508e:	4689      	mov	r9, r1
 8105090:	e7bd      	b.n	810500e <_dtoa_r+0x5b6>
 8105092:	bf00      	nop
 8105094:	081076e0 	.word	0x081076e0
 8105098:	081076b8 	.word	0x081076b8
 810509c:	3ff00000 	.word	0x3ff00000
 81050a0:	40240000 	.word	0x40240000
 81050a4:	401c0000 	.word	0x401c0000
 81050a8:	40140000 	.word	0x40140000
 81050ac:	3fe00000 	.word	0x3fe00000
 81050b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 81050b4:	9d00      	ldr	r5, [sp, #0]
 81050b6:	4642      	mov	r2, r8
 81050b8:	464b      	mov	r3, r9
 81050ba:	4630      	mov	r0, r6
 81050bc:	4639      	mov	r1, r7
 81050be:	f7fb fc4d 	bl	810095c <__aeabi_ddiv>
 81050c2:	f7fb fdd1 	bl	8100c68 <__aeabi_d2iz>
 81050c6:	9001      	str	r0, [sp, #4]
 81050c8:	f7fb fab4 	bl	8100634 <__aeabi_i2d>
 81050cc:	4642      	mov	r2, r8
 81050ce:	464b      	mov	r3, r9
 81050d0:	f7fb fb1a 	bl	8100708 <__aeabi_dmul>
 81050d4:	4602      	mov	r2, r0
 81050d6:	460b      	mov	r3, r1
 81050d8:	4630      	mov	r0, r6
 81050da:	4639      	mov	r1, r7
 81050dc:	f7fb f95c 	bl	8100398 <__aeabi_dsub>
 81050e0:	9e01      	ldr	r6, [sp, #4]
 81050e2:	9f04      	ldr	r7, [sp, #16]
 81050e4:	3630      	adds	r6, #48	; 0x30
 81050e6:	f805 6b01 	strb.w	r6, [r5], #1
 81050ea:	9e00      	ldr	r6, [sp, #0]
 81050ec:	1bae      	subs	r6, r5, r6
 81050ee:	42b7      	cmp	r7, r6
 81050f0:	4602      	mov	r2, r0
 81050f2:	460b      	mov	r3, r1
 81050f4:	d134      	bne.n	8105160 <_dtoa_r+0x708>
 81050f6:	f7fb f951 	bl	810039c <__adddf3>
 81050fa:	4642      	mov	r2, r8
 81050fc:	464b      	mov	r3, r9
 81050fe:	4606      	mov	r6, r0
 8105100:	460f      	mov	r7, r1
 8105102:	f7fb fd91 	bl	8100c28 <__aeabi_dcmpgt>
 8105106:	b9c8      	cbnz	r0, 810513c <_dtoa_r+0x6e4>
 8105108:	4642      	mov	r2, r8
 810510a:	464b      	mov	r3, r9
 810510c:	4630      	mov	r0, r6
 810510e:	4639      	mov	r1, r7
 8105110:	f7fb fd62 	bl	8100bd8 <__aeabi_dcmpeq>
 8105114:	b110      	cbz	r0, 810511c <_dtoa_r+0x6c4>
 8105116:	9b01      	ldr	r3, [sp, #4]
 8105118:	07db      	lsls	r3, r3, #31
 810511a:	d40f      	bmi.n	810513c <_dtoa_r+0x6e4>
 810511c:	4651      	mov	r1, sl
 810511e:	4620      	mov	r0, r4
 8105120:	f000 ff36 	bl	8105f90 <_Bfree>
 8105124:	2300      	movs	r3, #0
 8105126:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8105128:	702b      	strb	r3, [r5, #0]
 810512a:	f10b 0301 	add.w	r3, fp, #1
 810512e:	6013      	str	r3, [r2, #0]
 8105130:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8105132:	2b00      	cmp	r3, #0
 8105134:	f43f ace2 	beq.w	8104afc <_dtoa_r+0xa4>
 8105138:	601d      	str	r5, [r3, #0]
 810513a:	e4df      	b.n	8104afc <_dtoa_r+0xa4>
 810513c:	465f      	mov	r7, fp
 810513e:	462b      	mov	r3, r5
 8105140:	461d      	mov	r5, r3
 8105142:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8105146:	2a39      	cmp	r2, #57	; 0x39
 8105148:	d106      	bne.n	8105158 <_dtoa_r+0x700>
 810514a:	9a00      	ldr	r2, [sp, #0]
 810514c:	429a      	cmp	r2, r3
 810514e:	d1f7      	bne.n	8105140 <_dtoa_r+0x6e8>
 8105150:	9900      	ldr	r1, [sp, #0]
 8105152:	2230      	movs	r2, #48	; 0x30
 8105154:	3701      	adds	r7, #1
 8105156:	700a      	strb	r2, [r1, #0]
 8105158:	781a      	ldrb	r2, [r3, #0]
 810515a:	3201      	adds	r2, #1
 810515c:	701a      	strb	r2, [r3, #0]
 810515e:	e790      	b.n	8105082 <_dtoa_r+0x62a>
 8105160:	4ba3      	ldr	r3, [pc, #652]	; (81053f0 <_dtoa_r+0x998>)
 8105162:	2200      	movs	r2, #0
 8105164:	f7fb fad0 	bl	8100708 <__aeabi_dmul>
 8105168:	2200      	movs	r2, #0
 810516a:	2300      	movs	r3, #0
 810516c:	4606      	mov	r6, r0
 810516e:	460f      	mov	r7, r1
 8105170:	f7fb fd32 	bl	8100bd8 <__aeabi_dcmpeq>
 8105174:	2800      	cmp	r0, #0
 8105176:	d09e      	beq.n	81050b6 <_dtoa_r+0x65e>
 8105178:	e7d0      	b.n	810511c <_dtoa_r+0x6c4>
 810517a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 810517c:	2a00      	cmp	r2, #0
 810517e:	f000 80ca 	beq.w	8105316 <_dtoa_r+0x8be>
 8105182:	9a07      	ldr	r2, [sp, #28]
 8105184:	2a01      	cmp	r2, #1
 8105186:	f300 80ad 	bgt.w	81052e4 <_dtoa_r+0x88c>
 810518a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 810518c:	2a00      	cmp	r2, #0
 810518e:	f000 80a5 	beq.w	81052dc <_dtoa_r+0x884>
 8105192:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8105196:	9e08      	ldr	r6, [sp, #32]
 8105198:	9d05      	ldr	r5, [sp, #20]
 810519a:	9a05      	ldr	r2, [sp, #20]
 810519c:	441a      	add	r2, r3
 810519e:	9205      	str	r2, [sp, #20]
 81051a0:	9a06      	ldr	r2, [sp, #24]
 81051a2:	2101      	movs	r1, #1
 81051a4:	441a      	add	r2, r3
 81051a6:	4620      	mov	r0, r4
 81051a8:	9206      	str	r2, [sp, #24]
 81051aa:	f000 fff1 	bl	8106190 <__i2b>
 81051ae:	4607      	mov	r7, r0
 81051b0:	b165      	cbz	r5, 81051cc <_dtoa_r+0x774>
 81051b2:	9b06      	ldr	r3, [sp, #24]
 81051b4:	2b00      	cmp	r3, #0
 81051b6:	dd09      	ble.n	81051cc <_dtoa_r+0x774>
 81051b8:	42ab      	cmp	r3, r5
 81051ba:	9a05      	ldr	r2, [sp, #20]
 81051bc:	bfa8      	it	ge
 81051be:	462b      	movge	r3, r5
 81051c0:	1ad2      	subs	r2, r2, r3
 81051c2:	9205      	str	r2, [sp, #20]
 81051c4:	9a06      	ldr	r2, [sp, #24]
 81051c6:	1aed      	subs	r5, r5, r3
 81051c8:	1ad3      	subs	r3, r2, r3
 81051ca:	9306      	str	r3, [sp, #24]
 81051cc:	9b08      	ldr	r3, [sp, #32]
 81051ce:	b1f3      	cbz	r3, 810520e <_dtoa_r+0x7b6>
 81051d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81051d2:	2b00      	cmp	r3, #0
 81051d4:	f000 80a3 	beq.w	810531e <_dtoa_r+0x8c6>
 81051d8:	2e00      	cmp	r6, #0
 81051da:	dd10      	ble.n	81051fe <_dtoa_r+0x7a6>
 81051dc:	4639      	mov	r1, r7
 81051de:	4632      	mov	r2, r6
 81051e0:	4620      	mov	r0, r4
 81051e2:	f001 f895 	bl	8106310 <__pow5mult>
 81051e6:	4652      	mov	r2, sl
 81051e8:	4601      	mov	r1, r0
 81051ea:	4607      	mov	r7, r0
 81051ec:	4620      	mov	r0, r4
 81051ee:	f000 ffe5 	bl	81061bc <__multiply>
 81051f2:	4651      	mov	r1, sl
 81051f4:	4680      	mov	r8, r0
 81051f6:	4620      	mov	r0, r4
 81051f8:	f000 feca 	bl	8105f90 <_Bfree>
 81051fc:	46c2      	mov	sl, r8
 81051fe:	9b08      	ldr	r3, [sp, #32]
 8105200:	1b9a      	subs	r2, r3, r6
 8105202:	d004      	beq.n	810520e <_dtoa_r+0x7b6>
 8105204:	4651      	mov	r1, sl
 8105206:	4620      	mov	r0, r4
 8105208:	f001 f882 	bl	8106310 <__pow5mult>
 810520c:	4682      	mov	sl, r0
 810520e:	2101      	movs	r1, #1
 8105210:	4620      	mov	r0, r4
 8105212:	f000 ffbd 	bl	8106190 <__i2b>
 8105216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8105218:	2b00      	cmp	r3, #0
 810521a:	4606      	mov	r6, r0
 810521c:	f340 8081 	ble.w	8105322 <_dtoa_r+0x8ca>
 8105220:	461a      	mov	r2, r3
 8105222:	4601      	mov	r1, r0
 8105224:	4620      	mov	r0, r4
 8105226:	f001 f873 	bl	8106310 <__pow5mult>
 810522a:	9b07      	ldr	r3, [sp, #28]
 810522c:	2b01      	cmp	r3, #1
 810522e:	4606      	mov	r6, r0
 8105230:	dd7a      	ble.n	8105328 <_dtoa_r+0x8d0>
 8105232:	f04f 0800 	mov.w	r8, #0
 8105236:	6933      	ldr	r3, [r6, #16]
 8105238:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 810523c:	6918      	ldr	r0, [r3, #16]
 810523e:	f000 ff59 	bl	81060f4 <__hi0bits>
 8105242:	f1c0 0020 	rsb	r0, r0, #32
 8105246:	9b06      	ldr	r3, [sp, #24]
 8105248:	4418      	add	r0, r3
 810524a:	f010 001f 	ands.w	r0, r0, #31
 810524e:	f000 8094 	beq.w	810537a <_dtoa_r+0x922>
 8105252:	f1c0 0320 	rsb	r3, r0, #32
 8105256:	2b04      	cmp	r3, #4
 8105258:	f340 8085 	ble.w	8105366 <_dtoa_r+0x90e>
 810525c:	9b05      	ldr	r3, [sp, #20]
 810525e:	f1c0 001c 	rsb	r0, r0, #28
 8105262:	4403      	add	r3, r0
 8105264:	9305      	str	r3, [sp, #20]
 8105266:	9b06      	ldr	r3, [sp, #24]
 8105268:	4403      	add	r3, r0
 810526a:	4405      	add	r5, r0
 810526c:	9306      	str	r3, [sp, #24]
 810526e:	9b05      	ldr	r3, [sp, #20]
 8105270:	2b00      	cmp	r3, #0
 8105272:	dd05      	ble.n	8105280 <_dtoa_r+0x828>
 8105274:	4651      	mov	r1, sl
 8105276:	461a      	mov	r2, r3
 8105278:	4620      	mov	r0, r4
 810527a:	f001 f8a3 	bl	81063c4 <__lshift>
 810527e:	4682      	mov	sl, r0
 8105280:	9b06      	ldr	r3, [sp, #24]
 8105282:	2b00      	cmp	r3, #0
 8105284:	dd05      	ble.n	8105292 <_dtoa_r+0x83a>
 8105286:	4631      	mov	r1, r6
 8105288:	461a      	mov	r2, r3
 810528a:	4620      	mov	r0, r4
 810528c:	f001 f89a 	bl	81063c4 <__lshift>
 8105290:	4606      	mov	r6, r0
 8105292:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8105294:	2b00      	cmp	r3, #0
 8105296:	d072      	beq.n	810537e <_dtoa_r+0x926>
 8105298:	4631      	mov	r1, r6
 810529a:	4650      	mov	r0, sl
 810529c:	f001 f8fe 	bl	810649c <__mcmp>
 81052a0:	2800      	cmp	r0, #0
 81052a2:	da6c      	bge.n	810537e <_dtoa_r+0x926>
 81052a4:	2300      	movs	r3, #0
 81052a6:	4651      	mov	r1, sl
 81052a8:	220a      	movs	r2, #10
 81052aa:	4620      	mov	r0, r4
 81052ac:	f000 fe92 	bl	8105fd4 <__multadd>
 81052b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81052b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 81052b6:	4682      	mov	sl, r0
 81052b8:	2b00      	cmp	r3, #0
 81052ba:	f000 81b0 	beq.w	810561e <_dtoa_r+0xbc6>
 81052be:	2300      	movs	r3, #0
 81052c0:	4639      	mov	r1, r7
 81052c2:	220a      	movs	r2, #10
 81052c4:	4620      	mov	r0, r4
 81052c6:	f000 fe85 	bl	8105fd4 <__multadd>
 81052ca:	9b01      	ldr	r3, [sp, #4]
 81052cc:	2b00      	cmp	r3, #0
 81052ce:	4607      	mov	r7, r0
 81052d0:	f300 8096 	bgt.w	8105400 <_dtoa_r+0x9a8>
 81052d4:	9b07      	ldr	r3, [sp, #28]
 81052d6:	2b02      	cmp	r3, #2
 81052d8:	dc59      	bgt.n	810538e <_dtoa_r+0x936>
 81052da:	e091      	b.n	8105400 <_dtoa_r+0x9a8>
 81052dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 81052de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 81052e2:	e758      	b.n	8105196 <_dtoa_r+0x73e>
 81052e4:	9b04      	ldr	r3, [sp, #16]
 81052e6:	1e5e      	subs	r6, r3, #1
 81052e8:	9b08      	ldr	r3, [sp, #32]
 81052ea:	42b3      	cmp	r3, r6
 81052ec:	bfbf      	itttt	lt
 81052ee:	9b08      	ldrlt	r3, [sp, #32]
 81052f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 81052f2:	9608      	strlt	r6, [sp, #32]
 81052f4:	1af3      	sublt	r3, r6, r3
 81052f6:	bfb4      	ite	lt
 81052f8:	18d2      	addlt	r2, r2, r3
 81052fa:	1b9e      	subge	r6, r3, r6
 81052fc:	9b04      	ldr	r3, [sp, #16]
 81052fe:	bfbc      	itt	lt
 8105300:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8105302:	2600      	movlt	r6, #0
 8105304:	2b00      	cmp	r3, #0
 8105306:	bfb7      	itett	lt
 8105308:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 810530c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8105310:	1a9d      	sublt	r5, r3, r2
 8105312:	2300      	movlt	r3, #0
 8105314:	e741      	b.n	810519a <_dtoa_r+0x742>
 8105316:	9e08      	ldr	r6, [sp, #32]
 8105318:	9d05      	ldr	r5, [sp, #20]
 810531a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 810531c:	e748      	b.n	81051b0 <_dtoa_r+0x758>
 810531e:	9a08      	ldr	r2, [sp, #32]
 8105320:	e770      	b.n	8105204 <_dtoa_r+0x7ac>
 8105322:	9b07      	ldr	r3, [sp, #28]
 8105324:	2b01      	cmp	r3, #1
 8105326:	dc19      	bgt.n	810535c <_dtoa_r+0x904>
 8105328:	9b02      	ldr	r3, [sp, #8]
 810532a:	b9bb      	cbnz	r3, 810535c <_dtoa_r+0x904>
 810532c:	9b03      	ldr	r3, [sp, #12]
 810532e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8105332:	b99b      	cbnz	r3, 810535c <_dtoa_r+0x904>
 8105334:	9b03      	ldr	r3, [sp, #12]
 8105336:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 810533a:	0d1b      	lsrs	r3, r3, #20
 810533c:	051b      	lsls	r3, r3, #20
 810533e:	b183      	cbz	r3, 8105362 <_dtoa_r+0x90a>
 8105340:	9b05      	ldr	r3, [sp, #20]
 8105342:	3301      	adds	r3, #1
 8105344:	9305      	str	r3, [sp, #20]
 8105346:	9b06      	ldr	r3, [sp, #24]
 8105348:	3301      	adds	r3, #1
 810534a:	9306      	str	r3, [sp, #24]
 810534c:	f04f 0801 	mov.w	r8, #1
 8105350:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8105352:	2b00      	cmp	r3, #0
 8105354:	f47f af6f 	bne.w	8105236 <_dtoa_r+0x7de>
 8105358:	2001      	movs	r0, #1
 810535a:	e774      	b.n	8105246 <_dtoa_r+0x7ee>
 810535c:	f04f 0800 	mov.w	r8, #0
 8105360:	e7f6      	b.n	8105350 <_dtoa_r+0x8f8>
 8105362:	4698      	mov	r8, r3
 8105364:	e7f4      	b.n	8105350 <_dtoa_r+0x8f8>
 8105366:	d082      	beq.n	810526e <_dtoa_r+0x816>
 8105368:	9a05      	ldr	r2, [sp, #20]
 810536a:	331c      	adds	r3, #28
 810536c:	441a      	add	r2, r3
 810536e:	9205      	str	r2, [sp, #20]
 8105370:	9a06      	ldr	r2, [sp, #24]
 8105372:	441a      	add	r2, r3
 8105374:	441d      	add	r5, r3
 8105376:	9206      	str	r2, [sp, #24]
 8105378:	e779      	b.n	810526e <_dtoa_r+0x816>
 810537a:	4603      	mov	r3, r0
 810537c:	e7f4      	b.n	8105368 <_dtoa_r+0x910>
 810537e:	9b04      	ldr	r3, [sp, #16]
 8105380:	2b00      	cmp	r3, #0
 8105382:	dc37      	bgt.n	81053f4 <_dtoa_r+0x99c>
 8105384:	9b07      	ldr	r3, [sp, #28]
 8105386:	2b02      	cmp	r3, #2
 8105388:	dd34      	ble.n	81053f4 <_dtoa_r+0x99c>
 810538a:	9b04      	ldr	r3, [sp, #16]
 810538c:	9301      	str	r3, [sp, #4]
 810538e:	9b01      	ldr	r3, [sp, #4]
 8105390:	b963      	cbnz	r3, 81053ac <_dtoa_r+0x954>
 8105392:	4631      	mov	r1, r6
 8105394:	2205      	movs	r2, #5
 8105396:	4620      	mov	r0, r4
 8105398:	f000 fe1c 	bl	8105fd4 <__multadd>
 810539c:	4601      	mov	r1, r0
 810539e:	4606      	mov	r6, r0
 81053a0:	4650      	mov	r0, sl
 81053a2:	f001 f87b 	bl	810649c <__mcmp>
 81053a6:	2800      	cmp	r0, #0
 81053a8:	f73f adbb 	bgt.w	8104f22 <_dtoa_r+0x4ca>
 81053ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 81053ae:	9d00      	ldr	r5, [sp, #0]
 81053b0:	ea6f 0b03 	mvn.w	fp, r3
 81053b4:	f04f 0800 	mov.w	r8, #0
 81053b8:	4631      	mov	r1, r6
 81053ba:	4620      	mov	r0, r4
 81053bc:	f000 fde8 	bl	8105f90 <_Bfree>
 81053c0:	2f00      	cmp	r7, #0
 81053c2:	f43f aeab 	beq.w	810511c <_dtoa_r+0x6c4>
 81053c6:	f1b8 0f00 	cmp.w	r8, #0
 81053ca:	d005      	beq.n	81053d8 <_dtoa_r+0x980>
 81053cc:	45b8      	cmp	r8, r7
 81053ce:	d003      	beq.n	81053d8 <_dtoa_r+0x980>
 81053d0:	4641      	mov	r1, r8
 81053d2:	4620      	mov	r0, r4
 81053d4:	f000 fddc 	bl	8105f90 <_Bfree>
 81053d8:	4639      	mov	r1, r7
 81053da:	4620      	mov	r0, r4
 81053dc:	f000 fdd8 	bl	8105f90 <_Bfree>
 81053e0:	e69c      	b.n	810511c <_dtoa_r+0x6c4>
 81053e2:	2600      	movs	r6, #0
 81053e4:	4637      	mov	r7, r6
 81053e6:	e7e1      	b.n	81053ac <_dtoa_r+0x954>
 81053e8:	46bb      	mov	fp, r7
 81053ea:	4637      	mov	r7, r6
 81053ec:	e599      	b.n	8104f22 <_dtoa_r+0x4ca>
 81053ee:	bf00      	nop
 81053f0:	40240000 	.word	0x40240000
 81053f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 81053f6:	2b00      	cmp	r3, #0
 81053f8:	f000 80c8 	beq.w	810558c <_dtoa_r+0xb34>
 81053fc:	9b04      	ldr	r3, [sp, #16]
 81053fe:	9301      	str	r3, [sp, #4]
 8105400:	2d00      	cmp	r5, #0
 8105402:	dd05      	ble.n	8105410 <_dtoa_r+0x9b8>
 8105404:	4639      	mov	r1, r7
 8105406:	462a      	mov	r2, r5
 8105408:	4620      	mov	r0, r4
 810540a:	f000 ffdb 	bl	81063c4 <__lshift>
 810540e:	4607      	mov	r7, r0
 8105410:	f1b8 0f00 	cmp.w	r8, #0
 8105414:	d05b      	beq.n	81054ce <_dtoa_r+0xa76>
 8105416:	6879      	ldr	r1, [r7, #4]
 8105418:	4620      	mov	r0, r4
 810541a:	f000 fd79 	bl	8105f10 <_Balloc>
 810541e:	4605      	mov	r5, r0
 8105420:	b928      	cbnz	r0, 810542e <_dtoa_r+0x9d6>
 8105422:	4b83      	ldr	r3, [pc, #524]	; (8105630 <_dtoa_r+0xbd8>)
 8105424:	4602      	mov	r2, r0
 8105426:	f240 21ef 	movw	r1, #751	; 0x2ef
 810542a:	f7ff bb2e 	b.w	8104a8a <_dtoa_r+0x32>
 810542e:	693a      	ldr	r2, [r7, #16]
 8105430:	3202      	adds	r2, #2
 8105432:	0092      	lsls	r2, r2, #2
 8105434:	f107 010c 	add.w	r1, r7, #12
 8105438:	300c      	adds	r0, #12
 810543a:	f7ff fa64 	bl	8104906 <memcpy>
 810543e:	2201      	movs	r2, #1
 8105440:	4629      	mov	r1, r5
 8105442:	4620      	mov	r0, r4
 8105444:	f000 ffbe 	bl	81063c4 <__lshift>
 8105448:	9b00      	ldr	r3, [sp, #0]
 810544a:	3301      	adds	r3, #1
 810544c:	9304      	str	r3, [sp, #16]
 810544e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8105452:	4413      	add	r3, r2
 8105454:	9308      	str	r3, [sp, #32]
 8105456:	9b02      	ldr	r3, [sp, #8]
 8105458:	f003 0301 	and.w	r3, r3, #1
 810545c:	46b8      	mov	r8, r7
 810545e:	9306      	str	r3, [sp, #24]
 8105460:	4607      	mov	r7, r0
 8105462:	9b04      	ldr	r3, [sp, #16]
 8105464:	4631      	mov	r1, r6
 8105466:	3b01      	subs	r3, #1
 8105468:	4650      	mov	r0, sl
 810546a:	9301      	str	r3, [sp, #4]
 810546c:	f7ff fa6a 	bl	8104944 <quorem>
 8105470:	4641      	mov	r1, r8
 8105472:	9002      	str	r0, [sp, #8]
 8105474:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8105478:	4650      	mov	r0, sl
 810547a:	f001 f80f 	bl	810649c <__mcmp>
 810547e:	463a      	mov	r2, r7
 8105480:	9005      	str	r0, [sp, #20]
 8105482:	4631      	mov	r1, r6
 8105484:	4620      	mov	r0, r4
 8105486:	f001 f825 	bl	81064d4 <__mdiff>
 810548a:	68c2      	ldr	r2, [r0, #12]
 810548c:	4605      	mov	r5, r0
 810548e:	bb02      	cbnz	r2, 81054d2 <_dtoa_r+0xa7a>
 8105490:	4601      	mov	r1, r0
 8105492:	4650      	mov	r0, sl
 8105494:	f001 f802 	bl	810649c <__mcmp>
 8105498:	4602      	mov	r2, r0
 810549a:	4629      	mov	r1, r5
 810549c:	4620      	mov	r0, r4
 810549e:	9209      	str	r2, [sp, #36]	; 0x24
 81054a0:	f000 fd76 	bl	8105f90 <_Bfree>
 81054a4:	9b07      	ldr	r3, [sp, #28]
 81054a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81054a8:	9d04      	ldr	r5, [sp, #16]
 81054aa:	ea43 0102 	orr.w	r1, r3, r2
 81054ae:	9b06      	ldr	r3, [sp, #24]
 81054b0:	4319      	orrs	r1, r3
 81054b2:	d110      	bne.n	81054d6 <_dtoa_r+0xa7e>
 81054b4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 81054b8:	d029      	beq.n	810550e <_dtoa_r+0xab6>
 81054ba:	9b05      	ldr	r3, [sp, #20]
 81054bc:	2b00      	cmp	r3, #0
 81054be:	dd02      	ble.n	81054c6 <_dtoa_r+0xa6e>
 81054c0:	9b02      	ldr	r3, [sp, #8]
 81054c2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 81054c6:	9b01      	ldr	r3, [sp, #4]
 81054c8:	f883 9000 	strb.w	r9, [r3]
 81054cc:	e774      	b.n	81053b8 <_dtoa_r+0x960>
 81054ce:	4638      	mov	r0, r7
 81054d0:	e7ba      	b.n	8105448 <_dtoa_r+0x9f0>
 81054d2:	2201      	movs	r2, #1
 81054d4:	e7e1      	b.n	810549a <_dtoa_r+0xa42>
 81054d6:	9b05      	ldr	r3, [sp, #20]
 81054d8:	2b00      	cmp	r3, #0
 81054da:	db04      	blt.n	81054e6 <_dtoa_r+0xa8e>
 81054dc:	9907      	ldr	r1, [sp, #28]
 81054de:	430b      	orrs	r3, r1
 81054e0:	9906      	ldr	r1, [sp, #24]
 81054e2:	430b      	orrs	r3, r1
 81054e4:	d120      	bne.n	8105528 <_dtoa_r+0xad0>
 81054e6:	2a00      	cmp	r2, #0
 81054e8:	dded      	ble.n	81054c6 <_dtoa_r+0xa6e>
 81054ea:	4651      	mov	r1, sl
 81054ec:	2201      	movs	r2, #1
 81054ee:	4620      	mov	r0, r4
 81054f0:	f000 ff68 	bl	81063c4 <__lshift>
 81054f4:	4631      	mov	r1, r6
 81054f6:	4682      	mov	sl, r0
 81054f8:	f000 ffd0 	bl	810649c <__mcmp>
 81054fc:	2800      	cmp	r0, #0
 81054fe:	dc03      	bgt.n	8105508 <_dtoa_r+0xab0>
 8105500:	d1e1      	bne.n	81054c6 <_dtoa_r+0xa6e>
 8105502:	f019 0f01 	tst.w	r9, #1
 8105506:	d0de      	beq.n	81054c6 <_dtoa_r+0xa6e>
 8105508:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 810550c:	d1d8      	bne.n	81054c0 <_dtoa_r+0xa68>
 810550e:	9a01      	ldr	r2, [sp, #4]
 8105510:	2339      	movs	r3, #57	; 0x39
 8105512:	7013      	strb	r3, [r2, #0]
 8105514:	462b      	mov	r3, r5
 8105516:	461d      	mov	r5, r3
 8105518:	3b01      	subs	r3, #1
 810551a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 810551e:	2a39      	cmp	r2, #57	; 0x39
 8105520:	d06c      	beq.n	81055fc <_dtoa_r+0xba4>
 8105522:	3201      	adds	r2, #1
 8105524:	701a      	strb	r2, [r3, #0]
 8105526:	e747      	b.n	81053b8 <_dtoa_r+0x960>
 8105528:	2a00      	cmp	r2, #0
 810552a:	dd07      	ble.n	810553c <_dtoa_r+0xae4>
 810552c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8105530:	d0ed      	beq.n	810550e <_dtoa_r+0xab6>
 8105532:	9a01      	ldr	r2, [sp, #4]
 8105534:	f109 0301 	add.w	r3, r9, #1
 8105538:	7013      	strb	r3, [r2, #0]
 810553a:	e73d      	b.n	81053b8 <_dtoa_r+0x960>
 810553c:	9b04      	ldr	r3, [sp, #16]
 810553e:	9a08      	ldr	r2, [sp, #32]
 8105540:	f803 9c01 	strb.w	r9, [r3, #-1]
 8105544:	4293      	cmp	r3, r2
 8105546:	d043      	beq.n	81055d0 <_dtoa_r+0xb78>
 8105548:	4651      	mov	r1, sl
 810554a:	2300      	movs	r3, #0
 810554c:	220a      	movs	r2, #10
 810554e:	4620      	mov	r0, r4
 8105550:	f000 fd40 	bl	8105fd4 <__multadd>
 8105554:	45b8      	cmp	r8, r7
 8105556:	4682      	mov	sl, r0
 8105558:	f04f 0300 	mov.w	r3, #0
 810555c:	f04f 020a 	mov.w	r2, #10
 8105560:	4641      	mov	r1, r8
 8105562:	4620      	mov	r0, r4
 8105564:	d107      	bne.n	8105576 <_dtoa_r+0xb1e>
 8105566:	f000 fd35 	bl	8105fd4 <__multadd>
 810556a:	4680      	mov	r8, r0
 810556c:	4607      	mov	r7, r0
 810556e:	9b04      	ldr	r3, [sp, #16]
 8105570:	3301      	adds	r3, #1
 8105572:	9304      	str	r3, [sp, #16]
 8105574:	e775      	b.n	8105462 <_dtoa_r+0xa0a>
 8105576:	f000 fd2d 	bl	8105fd4 <__multadd>
 810557a:	4639      	mov	r1, r7
 810557c:	4680      	mov	r8, r0
 810557e:	2300      	movs	r3, #0
 8105580:	220a      	movs	r2, #10
 8105582:	4620      	mov	r0, r4
 8105584:	f000 fd26 	bl	8105fd4 <__multadd>
 8105588:	4607      	mov	r7, r0
 810558a:	e7f0      	b.n	810556e <_dtoa_r+0xb16>
 810558c:	9b04      	ldr	r3, [sp, #16]
 810558e:	9301      	str	r3, [sp, #4]
 8105590:	9d00      	ldr	r5, [sp, #0]
 8105592:	4631      	mov	r1, r6
 8105594:	4650      	mov	r0, sl
 8105596:	f7ff f9d5 	bl	8104944 <quorem>
 810559a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 810559e:	9b00      	ldr	r3, [sp, #0]
 81055a0:	f805 9b01 	strb.w	r9, [r5], #1
 81055a4:	1aea      	subs	r2, r5, r3
 81055a6:	9b01      	ldr	r3, [sp, #4]
 81055a8:	4293      	cmp	r3, r2
 81055aa:	dd07      	ble.n	81055bc <_dtoa_r+0xb64>
 81055ac:	4651      	mov	r1, sl
 81055ae:	2300      	movs	r3, #0
 81055b0:	220a      	movs	r2, #10
 81055b2:	4620      	mov	r0, r4
 81055b4:	f000 fd0e 	bl	8105fd4 <__multadd>
 81055b8:	4682      	mov	sl, r0
 81055ba:	e7ea      	b.n	8105592 <_dtoa_r+0xb3a>
 81055bc:	9b01      	ldr	r3, [sp, #4]
 81055be:	2b00      	cmp	r3, #0
 81055c0:	bfc8      	it	gt
 81055c2:	461d      	movgt	r5, r3
 81055c4:	9b00      	ldr	r3, [sp, #0]
 81055c6:	bfd8      	it	le
 81055c8:	2501      	movle	r5, #1
 81055ca:	441d      	add	r5, r3
 81055cc:	f04f 0800 	mov.w	r8, #0
 81055d0:	4651      	mov	r1, sl
 81055d2:	2201      	movs	r2, #1
 81055d4:	4620      	mov	r0, r4
 81055d6:	f000 fef5 	bl	81063c4 <__lshift>
 81055da:	4631      	mov	r1, r6
 81055dc:	4682      	mov	sl, r0
 81055de:	f000 ff5d 	bl	810649c <__mcmp>
 81055e2:	2800      	cmp	r0, #0
 81055e4:	dc96      	bgt.n	8105514 <_dtoa_r+0xabc>
 81055e6:	d102      	bne.n	81055ee <_dtoa_r+0xb96>
 81055e8:	f019 0f01 	tst.w	r9, #1
 81055ec:	d192      	bne.n	8105514 <_dtoa_r+0xabc>
 81055ee:	462b      	mov	r3, r5
 81055f0:	461d      	mov	r5, r3
 81055f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 81055f6:	2a30      	cmp	r2, #48	; 0x30
 81055f8:	d0fa      	beq.n	81055f0 <_dtoa_r+0xb98>
 81055fa:	e6dd      	b.n	81053b8 <_dtoa_r+0x960>
 81055fc:	9a00      	ldr	r2, [sp, #0]
 81055fe:	429a      	cmp	r2, r3
 8105600:	d189      	bne.n	8105516 <_dtoa_r+0xabe>
 8105602:	f10b 0b01 	add.w	fp, fp, #1
 8105606:	2331      	movs	r3, #49	; 0x31
 8105608:	e796      	b.n	8105538 <_dtoa_r+0xae0>
 810560a:	4b0a      	ldr	r3, [pc, #40]	; (8105634 <_dtoa_r+0xbdc>)
 810560c:	f7ff ba99 	b.w	8104b42 <_dtoa_r+0xea>
 8105610:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8105612:	2b00      	cmp	r3, #0
 8105614:	f47f aa6d 	bne.w	8104af2 <_dtoa_r+0x9a>
 8105618:	4b07      	ldr	r3, [pc, #28]	; (8105638 <_dtoa_r+0xbe0>)
 810561a:	f7ff ba92 	b.w	8104b42 <_dtoa_r+0xea>
 810561e:	9b01      	ldr	r3, [sp, #4]
 8105620:	2b00      	cmp	r3, #0
 8105622:	dcb5      	bgt.n	8105590 <_dtoa_r+0xb38>
 8105624:	9b07      	ldr	r3, [sp, #28]
 8105626:	2b02      	cmp	r3, #2
 8105628:	f73f aeb1 	bgt.w	810538e <_dtoa_r+0x936>
 810562c:	e7b0      	b.n	8105590 <_dtoa_r+0xb38>
 810562e:	bf00      	nop
 8105630:	081075e9 	.word	0x081075e9
 8105634:	08107541 	.word	0x08107541
 8105638:	0810756d 	.word	0x0810756d

0810563c <_free_r>:
 810563c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 810563e:	2900      	cmp	r1, #0
 8105640:	d044      	beq.n	81056cc <_free_r+0x90>
 8105642:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8105646:	9001      	str	r0, [sp, #4]
 8105648:	2b00      	cmp	r3, #0
 810564a:	f1a1 0404 	sub.w	r4, r1, #4
 810564e:	bfb8      	it	lt
 8105650:	18e4      	addlt	r4, r4, r3
 8105652:	f000 fc51 	bl	8105ef8 <__malloc_lock>
 8105656:	4a1e      	ldr	r2, [pc, #120]	; (81056d0 <_free_r+0x94>)
 8105658:	9801      	ldr	r0, [sp, #4]
 810565a:	6813      	ldr	r3, [r2, #0]
 810565c:	b933      	cbnz	r3, 810566c <_free_r+0x30>
 810565e:	6063      	str	r3, [r4, #4]
 8105660:	6014      	str	r4, [r2, #0]
 8105662:	b003      	add	sp, #12
 8105664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8105668:	f000 bc4c 	b.w	8105f04 <__malloc_unlock>
 810566c:	42a3      	cmp	r3, r4
 810566e:	d908      	bls.n	8105682 <_free_r+0x46>
 8105670:	6825      	ldr	r5, [r4, #0]
 8105672:	1961      	adds	r1, r4, r5
 8105674:	428b      	cmp	r3, r1
 8105676:	bf01      	itttt	eq
 8105678:	6819      	ldreq	r1, [r3, #0]
 810567a:	685b      	ldreq	r3, [r3, #4]
 810567c:	1949      	addeq	r1, r1, r5
 810567e:	6021      	streq	r1, [r4, #0]
 8105680:	e7ed      	b.n	810565e <_free_r+0x22>
 8105682:	461a      	mov	r2, r3
 8105684:	685b      	ldr	r3, [r3, #4]
 8105686:	b10b      	cbz	r3, 810568c <_free_r+0x50>
 8105688:	42a3      	cmp	r3, r4
 810568a:	d9fa      	bls.n	8105682 <_free_r+0x46>
 810568c:	6811      	ldr	r1, [r2, #0]
 810568e:	1855      	adds	r5, r2, r1
 8105690:	42a5      	cmp	r5, r4
 8105692:	d10b      	bne.n	81056ac <_free_r+0x70>
 8105694:	6824      	ldr	r4, [r4, #0]
 8105696:	4421      	add	r1, r4
 8105698:	1854      	adds	r4, r2, r1
 810569a:	42a3      	cmp	r3, r4
 810569c:	6011      	str	r1, [r2, #0]
 810569e:	d1e0      	bne.n	8105662 <_free_r+0x26>
 81056a0:	681c      	ldr	r4, [r3, #0]
 81056a2:	685b      	ldr	r3, [r3, #4]
 81056a4:	6053      	str	r3, [r2, #4]
 81056a6:	440c      	add	r4, r1
 81056a8:	6014      	str	r4, [r2, #0]
 81056aa:	e7da      	b.n	8105662 <_free_r+0x26>
 81056ac:	d902      	bls.n	81056b4 <_free_r+0x78>
 81056ae:	230c      	movs	r3, #12
 81056b0:	6003      	str	r3, [r0, #0]
 81056b2:	e7d6      	b.n	8105662 <_free_r+0x26>
 81056b4:	6825      	ldr	r5, [r4, #0]
 81056b6:	1961      	adds	r1, r4, r5
 81056b8:	428b      	cmp	r3, r1
 81056ba:	bf04      	itt	eq
 81056bc:	6819      	ldreq	r1, [r3, #0]
 81056be:	685b      	ldreq	r3, [r3, #4]
 81056c0:	6063      	str	r3, [r4, #4]
 81056c2:	bf04      	itt	eq
 81056c4:	1949      	addeq	r1, r1, r5
 81056c6:	6021      	streq	r1, [r4, #0]
 81056c8:	6054      	str	r4, [r2, #4]
 81056ca:	e7ca      	b.n	8105662 <_free_r+0x26>
 81056cc:	b003      	add	sp, #12
 81056ce:	bd30      	pop	{r4, r5, pc}
 81056d0:	10000380 	.word	0x10000380

081056d4 <rshift>:
 81056d4:	6903      	ldr	r3, [r0, #16]
 81056d6:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 81056da:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 81056de:	ea4f 1261 	mov.w	r2, r1, asr #5
 81056e2:	f100 0414 	add.w	r4, r0, #20
 81056e6:	dd45      	ble.n	8105774 <rshift+0xa0>
 81056e8:	f011 011f 	ands.w	r1, r1, #31
 81056ec:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 81056f0:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 81056f4:	d10c      	bne.n	8105710 <rshift+0x3c>
 81056f6:	f100 0710 	add.w	r7, r0, #16
 81056fa:	4629      	mov	r1, r5
 81056fc:	42b1      	cmp	r1, r6
 81056fe:	d334      	bcc.n	810576a <rshift+0x96>
 8105700:	1a9b      	subs	r3, r3, r2
 8105702:	009b      	lsls	r3, r3, #2
 8105704:	1eea      	subs	r2, r5, #3
 8105706:	4296      	cmp	r6, r2
 8105708:	bf38      	it	cc
 810570a:	2300      	movcc	r3, #0
 810570c:	4423      	add	r3, r4
 810570e:	e015      	b.n	810573c <rshift+0x68>
 8105710:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8105714:	f1c1 0820 	rsb	r8, r1, #32
 8105718:	40cf      	lsrs	r7, r1
 810571a:	f105 0e04 	add.w	lr, r5, #4
 810571e:	46a1      	mov	r9, r4
 8105720:	4576      	cmp	r6, lr
 8105722:	46f4      	mov	ip, lr
 8105724:	d815      	bhi.n	8105752 <rshift+0x7e>
 8105726:	1a9a      	subs	r2, r3, r2
 8105728:	0092      	lsls	r2, r2, #2
 810572a:	3a04      	subs	r2, #4
 810572c:	3501      	adds	r5, #1
 810572e:	42ae      	cmp	r6, r5
 8105730:	bf38      	it	cc
 8105732:	2200      	movcc	r2, #0
 8105734:	18a3      	adds	r3, r4, r2
 8105736:	50a7      	str	r7, [r4, r2]
 8105738:	b107      	cbz	r7, 810573c <rshift+0x68>
 810573a:	3304      	adds	r3, #4
 810573c:	1b1a      	subs	r2, r3, r4
 810573e:	42a3      	cmp	r3, r4
 8105740:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8105744:	bf08      	it	eq
 8105746:	2300      	moveq	r3, #0
 8105748:	6102      	str	r2, [r0, #16]
 810574a:	bf08      	it	eq
 810574c:	6143      	streq	r3, [r0, #20]
 810574e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8105752:	f8dc c000 	ldr.w	ip, [ip]
 8105756:	fa0c fc08 	lsl.w	ip, ip, r8
 810575a:	ea4c 0707 	orr.w	r7, ip, r7
 810575e:	f849 7b04 	str.w	r7, [r9], #4
 8105762:	f85e 7b04 	ldr.w	r7, [lr], #4
 8105766:	40cf      	lsrs	r7, r1
 8105768:	e7da      	b.n	8105720 <rshift+0x4c>
 810576a:	f851 cb04 	ldr.w	ip, [r1], #4
 810576e:	f847 cf04 	str.w	ip, [r7, #4]!
 8105772:	e7c3      	b.n	81056fc <rshift+0x28>
 8105774:	4623      	mov	r3, r4
 8105776:	e7e1      	b.n	810573c <rshift+0x68>

08105778 <__hexdig_fun>:
 8105778:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 810577c:	2b09      	cmp	r3, #9
 810577e:	d802      	bhi.n	8105786 <__hexdig_fun+0xe>
 8105780:	3820      	subs	r0, #32
 8105782:	b2c0      	uxtb	r0, r0
 8105784:	4770      	bx	lr
 8105786:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 810578a:	2b05      	cmp	r3, #5
 810578c:	d801      	bhi.n	8105792 <__hexdig_fun+0x1a>
 810578e:	3847      	subs	r0, #71	; 0x47
 8105790:	e7f7      	b.n	8105782 <__hexdig_fun+0xa>
 8105792:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8105796:	2b05      	cmp	r3, #5
 8105798:	d801      	bhi.n	810579e <__hexdig_fun+0x26>
 810579a:	3827      	subs	r0, #39	; 0x27
 810579c:	e7f1      	b.n	8105782 <__hexdig_fun+0xa>
 810579e:	2000      	movs	r0, #0
 81057a0:	4770      	bx	lr
	...

081057a4 <__gethex>:
 81057a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81057a8:	4617      	mov	r7, r2
 81057aa:	680a      	ldr	r2, [r1, #0]
 81057ac:	b085      	sub	sp, #20
 81057ae:	f102 0b02 	add.w	fp, r2, #2
 81057b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 81057b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 81057ba:	4681      	mov	r9, r0
 81057bc:	468a      	mov	sl, r1
 81057be:	9302      	str	r3, [sp, #8]
 81057c0:	32fe      	adds	r2, #254	; 0xfe
 81057c2:	eb02 030b 	add.w	r3, r2, fp
 81057c6:	46d8      	mov	r8, fp
 81057c8:	f81b 0b01 	ldrb.w	r0, [fp], #1
 81057cc:	9301      	str	r3, [sp, #4]
 81057ce:	2830      	cmp	r0, #48	; 0x30
 81057d0:	d0f7      	beq.n	81057c2 <__gethex+0x1e>
 81057d2:	f7ff ffd1 	bl	8105778 <__hexdig_fun>
 81057d6:	4604      	mov	r4, r0
 81057d8:	2800      	cmp	r0, #0
 81057da:	d138      	bne.n	810584e <__gethex+0xaa>
 81057dc:	49a7      	ldr	r1, [pc, #668]	; (8105a7c <__gethex+0x2d8>)
 81057de:	2201      	movs	r2, #1
 81057e0:	4640      	mov	r0, r8
 81057e2:	f7fe fff3 	bl	81047cc <strncmp>
 81057e6:	4606      	mov	r6, r0
 81057e8:	2800      	cmp	r0, #0
 81057ea:	d169      	bne.n	81058c0 <__gethex+0x11c>
 81057ec:	f898 0001 	ldrb.w	r0, [r8, #1]
 81057f0:	465d      	mov	r5, fp
 81057f2:	f7ff ffc1 	bl	8105778 <__hexdig_fun>
 81057f6:	2800      	cmp	r0, #0
 81057f8:	d064      	beq.n	81058c4 <__gethex+0x120>
 81057fa:	465a      	mov	r2, fp
 81057fc:	7810      	ldrb	r0, [r2, #0]
 81057fe:	2830      	cmp	r0, #48	; 0x30
 8105800:	4690      	mov	r8, r2
 8105802:	f102 0201 	add.w	r2, r2, #1
 8105806:	d0f9      	beq.n	81057fc <__gethex+0x58>
 8105808:	f7ff ffb6 	bl	8105778 <__hexdig_fun>
 810580c:	2301      	movs	r3, #1
 810580e:	fab0 f480 	clz	r4, r0
 8105812:	0964      	lsrs	r4, r4, #5
 8105814:	465e      	mov	r6, fp
 8105816:	9301      	str	r3, [sp, #4]
 8105818:	4642      	mov	r2, r8
 810581a:	4615      	mov	r5, r2
 810581c:	3201      	adds	r2, #1
 810581e:	7828      	ldrb	r0, [r5, #0]
 8105820:	f7ff ffaa 	bl	8105778 <__hexdig_fun>
 8105824:	2800      	cmp	r0, #0
 8105826:	d1f8      	bne.n	810581a <__gethex+0x76>
 8105828:	4994      	ldr	r1, [pc, #592]	; (8105a7c <__gethex+0x2d8>)
 810582a:	2201      	movs	r2, #1
 810582c:	4628      	mov	r0, r5
 810582e:	f7fe ffcd 	bl	81047cc <strncmp>
 8105832:	b978      	cbnz	r0, 8105854 <__gethex+0xb0>
 8105834:	b946      	cbnz	r6, 8105848 <__gethex+0xa4>
 8105836:	1c6e      	adds	r6, r5, #1
 8105838:	4632      	mov	r2, r6
 810583a:	4615      	mov	r5, r2
 810583c:	3201      	adds	r2, #1
 810583e:	7828      	ldrb	r0, [r5, #0]
 8105840:	f7ff ff9a 	bl	8105778 <__hexdig_fun>
 8105844:	2800      	cmp	r0, #0
 8105846:	d1f8      	bne.n	810583a <__gethex+0x96>
 8105848:	1b73      	subs	r3, r6, r5
 810584a:	009e      	lsls	r6, r3, #2
 810584c:	e004      	b.n	8105858 <__gethex+0xb4>
 810584e:	2400      	movs	r4, #0
 8105850:	4626      	mov	r6, r4
 8105852:	e7e1      	b.n	8105818 <__gethex+0x74>
 8105854:	2e00      	cmp	r6, #0
 8105856:	d1f7      	bne.n	8105848 <__gethex+0xa4>
 8105858:	782b      	ldrb	r3, [r5, #0]
 810585a:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 810585e:	2b50      	cmp	r3, #80	; 0x50
 8105860:	d13d      	bne.n	81058de <__gethex+0x13a>
 8105862:	786b      	ldrb	r3, [r5, #1]
 8105864:	2b2b      	cmp	r3, #43	; 0x2b
 8105866:	d02f      	beq.n	81058c8 <__gethex+0x124>
 8105868:	2b2d      	cmp	r3, #45	; 0x2d
 810586a:	d031      	beq.n	81058d0 <__gethex+0x12c>
 810586c:	1c69      	adds	r1, r5, #1
 810586e:	f04f 0b00 	mov.w	fp, #0
 8105872:	7808      	ldrb	r0, [r1, #0]
 8105874:	f7ff ff80 	bl	8105778 <__hexdig_fun>
 8105878:	1e42      	subs	r2, r0, #1
 810587a:	b2d2      	uxtb	r2, r2
 810587c:	2a18      	cmp	r2, #24
 810587e:	d82e      	bhi.n	81058de <__gethex+0x13a>
 8105880:	f1a0 0210 	sub.w	r2, r0, #16
 8105884:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8105888:	f7ff ff76 	bl	8105778 <__hexdig_fun>
 810588c:	f100 3cff 	add.w	ip, r0, #4294967295
 8105890:	fa5f fc8c 	uxtb.w	ip, ip
 8105894:	f1bc 0f18 	cmp.w	ip, #24
 8105898:	d91d      	bls.n	81058d6 <__gethex+0x132>
 810589a:	f1bb 0f00 	cmp.w	fp, #0
 810589e:	d000      	beq.n	81058a2 <__gethex+0xfe>
 81058a0:	4252      	negs	r2, r2
 81058a2:	4416      	add	r6, r2
 81058a4:	f8ca 1000 	str.w	r1, [sl]
 81058a8:	b1dc      	cbz	r4, 81058e2 <__gethex+0x13e>
 81058aa:	9b01      	ldr	r3, [sp, #4]
 81058ac:	2b00      	cmp	r3, #0
 81058ae:	bf14      	ite	ne
 81058b0:	f04f 0800 	movne.w	r8, #0
 81058b4:	f04f 0806 	moveq.w	r8, #6
 81058b8:	4640      	mov	r0, r8
 81058ba:	b005      	add	sp, #20
 81058bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 81058c0:	4645      	mov	r5, r8
 81058c2:	4626      	mov	r6, r4
 81058c4:	2401      	movs	r4, #1
 81058c6:	e7c7      	b.n	8105858 <__gethex+0xb4>
 81058c8:	f04f 0b00 	mov.w	fp, #0
 81058cc:	1ca9      	adds	r1, r5, #2
 81058ce:	e7d0      	b.n	8105872 <__gethex+0xce>
 81058d0:	f04f 0b01 	mov.w	fp, #1
 81058d4:	e7fa      	b.n	81058cc <__gethex+0x128>
 81058d6:	230a      	movs	r3, #10
 81058d8:	fb03 0002 	mla	r0, r3, r2, r0
 81058dc:	e7d0      	b.n	8105880 <__gethex+0xdc>
 81058de:	4629      	mov	r1, r5
 81058e0:	e7e0      	b.n	81058a4 <__gethex+0x100>
 81058e2:	eba5 0308 	sub.w	r3, r5, r8
 81058e6:	3b01      	subs	r3, #1
 81058e8:	4621      	mov	r1, r4
 81058ea:	2b07      	cmp	r3, #7
 81058ec:	dc0a      	bgt.n	8105904 <__gethex+0x160>
 81058ee:	4648      	mov	r0, r9
 81058f0:	f000 fb0e 	bl	8105f10 <_Balloc>
 81058f4:	4604      	mov	r4, r0
 81058f6:	b940      	cbnz	r0, 810590a <__gethex+0x166>
 81058f8:	4b61      	ldr	r3, [pc, #388]	; (8105a80 <__gethex+0x2dc>)
 81058fa:	4602      	mov	r2, r0
 81058fc:	21e4      	movs	r1, #228	; 0xe4
 81058fe:	4861      	ldr	r0, [pc, #388]	; (8105a84 <__gethex+0x2e0>)
 8105900:	f001 f9f0 	bl	8106ce4 <__assert_func>
 8105904:	3101      	adds	r1, #1
 8105906:	105b      	asrs	r3, r3, #1
 8105908:	e7ef      	b.n	81058ea <__gethex+0x146>
 810590a:	f100 0a14 	add.w	sl, r0, #20
 810590e:	2300      	movs	r3, #0
 8105910:	495a      	ldr	r1, [pc, #360]	; (8105a7c <__gethex+0x2d8>)
 8105912:	f8cd a004 	str.w	sl, [sp, #4]
 8105916:	469b      	mov	fp, r3
 8105918:	45a8      	cmp	r8, r5
 810591a:	d342      	bcc.n	81059a2 <__gethex+0x1fe>
 810591c:	9801      	ldr	r0, [sp, #4]
 810591e:	f840 bb04 	str.w	fp, [r0], #4
 8105922:	eba0 000a 	sub.w	r0, r0, sl
 8105926:	1080      	asrs	r0, r0, #2
 8105928:	6120      	str	r0, [r4, #16]
 810592a:	ea4f 1840 	mov.w	r8, r0, lsl #5
 810592e:	4658      	mov	r0, fp
 8105930:	f000 fbe0 	bl	81060f4 <__hi0bits>
 8105934:	683d      	ldr	r5, [r7, #0]
 8105936:	eba8 0000 	sub.w	r0, r8, r0
 810593a:	42a8      	cmp	r0, r5
 810593c:	dd59      	ble.n	81059f2 <__gethex+0x24e>
 810593e:	eba0 0805 	sub.w	r8, r0, r5
 8105942:	4641      	mov	r1, r8
 8105944:	4620      	mov	r0, r4
 8105946:	f000 ff6f 	bl	8106828 <__any_on>
 810594a:	4683      	mov	fp, r0
 810594c:	b1b8      	cbz	r0, 810597e <__gethex+0x1da>
 810594e:	f108 33ff 	add.w	r3, r8, #4294967295
 8105952:	1159      	asrs	r1, r3, #5
 8105954:	f003 021f 	and.w	r2, r3, #31
 8105958:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 810595c:	f04f 0b01 	mov.w	fp, #1
 8105960:	fa0b f202 	lsl.w	r2, fp, r2
 8105964:	420a      	tst	r2, r1
 8105966:	d00a      	beq.n	810597e <__gethex+0x1da>
 8105968:	455b      	cmp	r3, fp
 810596a:	dd06      	ble.n	810597a <__gethex+0x1d6>
 810596c:	f1a8 0102 	sub.w	r1, r8, #2
 8105970:	4620      	mov	r0, r4
 8105972:	f000 ff59 	bl	8106828 <__any_on>
 8105976:	2800      	cmp	r0, #0
 8105978:	d138      	bne.n	81059ec <__gethex+0x248>
 810597a:	f04f 0b02 	mov.w	fp, #2
 810597e:	4641      	mov	r1, r8
 8105980:	4620      	mov	r0, r4
 8105982:	f7ff fea7 	bl	81056d4 <rshift>
 8105986:	4446      	add	r6, r8
 8105988:	68bb      	ldr	r3, [r7, #8]
 810598a:	42b3      	cmp	r3, r6
 810598c:	da41      	bge.n	8105a12 <__gethex+0x26e>
 810598e:	4621      	mov	r1, r4
 8105990:	4648      	mov	r0, r9
 8105992:	f000 fafd 	bl	8105f90 <_Bfree>
 8105996:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8105998:	2300      	movs	r3, #0
 810599a:	6013      	str	r3, [r2, #0]
 810599c:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 81059a0:	e78a      	b.n	81058b8 <__gethex+0x114>
 81059a2:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 81059a6:	2a2e      	cmp	r2, #46	; 0x2e
 81059a8:	d014      	beq.n	81059d4 <__gethex+0x230>
 81059aa:	2b20      	cmp	r3, #32
 81059ac:	d106      	bne.n	81059bc <__gethex+0x218>
 81059ae:	9b01      	ldr	r3, [sp, #4]
 81059b0:	f843 bb04 	str.w	fp, [r3], #4
 81059b4:	f04f 0b00 	mov.w	fp, #0
 81059b8:	9301      	str	r3, [sp, #4]
 81059ba:	465b      	mov	r3, fp
 81059bc:	7828      	ldrb	r0, [r5, #0]
 81059be:	9303      	str	r3, [sp, #12]
 81059c0:	f7ff feda 	bl	8105778 <__hexdig_fun>
 81059c4:	9b03      	ldr	r3, [sp, #12]
 81059c6:	f000 000f 	and.w	r0, r0, #15
 81059ca:	4098      	lsls	r0, r3
 81059cc:	ea4b 0b00 	orr.w	fp, fp, r0
 81059d0:	3304      	adds	r3, #4
 81059d2:	e7a1      	b.n	8105918 <__gethex+0x174>
 81059d4:	45a8      	cmp	r8, r5
 81059d6:	d8e8      	bhi.n	81059aa <__gethex+0x206>
 81059d8:	2201      	movs	r2, #1
 81059da:	4628      	mov	r0, r5
 81059dc:	9303      	str	r3, [sp, #12]
 81059de:	f7fe fef5 	bl	81047cc <strncmp>
 81059e2:	4926      	ldr	r1, [pc, #152]	; (8105a7c <__gethex+0x2d8>)
 81059e4:	9b03      	ldr	r3, [sp, #12]
 81059e6:	2800      	cmp	r0, #0
 81059e8:	d1df      	bne.n	81059aa <__gethex+0x206>
 81059ea:	e795      	b.n	8105918 <__gethex+0x174>
 81059ec:	f04f 0b03 	mov.w	fp, #3
 81059f0:	e7c5      	b.n	810597e <__gethex+0x1da>
 81059f2:	da0b      	bge.n	8105a0c <__gethex+0x268>
 81059f4:	eba5 0800 	sub.w	r8, r5, r0
 81059f8:	4621      	mov	r1, r4
 81059fa:	4642      	mov	r2, r8
 81059fc:	4648      	mov	r0, r9
 81059fe:	f000 fce1 	bl	81063c4 <__lshift>
 8105a02:	eba6 0608 	sub.w	r6, r6, r8
 8105a06:	4604      	mov	r4, r0
 8105a08:	f100 0a14 	add.w	sl, r0, #20
 8105a0c:	f04f 0b00 	mov.w	fp, #0
 8105a10:	e7ba      	b.n	8105988 <__gethex+0x1e4>
 8105a12:	687b      	ldr	r3, [r7, #4]
 8105a14:	42b3      	cmp	r3, r6
 8105a16:	dd73      	ble.n	8105b00 <__gethex+0x35c>
 8105a18:	1b9e      	subs	r6, r3, r6
 8105a1a:	42b5      	cmp	r5, r6
 8105a1c:	dc34      	bgt.n	8105a88 <__gethex+0x2e4>
 8105a1e:	68fb      	ldr	r3, [r7, #12]
 8105a20:	2b02      	cmp	r3, #2
 8105a22:	d023      	beq.n	8105a6c <__gethex+0x2c8>
 8105a24:	2b03      	cmp	r3, #3
 8105a26:	d025      	beq.n	8105a74 <__gethex+0x2d0>
 8105a28:	2b01      	cmp	r3, #1
 8105a2a:	d115      	bne.n	8105a58 <__gethex+0x2b4>
 8105a2c:	42b5      	cmp	r5, r6
 8105a2e:	d113      	bne.n	8105a58 <__gethex+0x2b4>
 8105a30:	2d01      	cmp	r5, #1
 8105a32:	d10b      	bne.n	8105a4c <__gethex+0x2a8>
 8105a34:	9a02      	ldr	r2, [sp, #8]
 8105a36:	687b      	ldr	r3, [r7, #4]
 8105a38:	6013      	str	r3, [r2, #0]
 8105a3a:	2301      	movs	r3, #1
 8105a3c:	6123      	str	r3, [r4, #16]
 8105a3e:	f8ca 3000 	str.w	r3, [sl]
 8105a42:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8105a44:	f04f 0862 	mov.w	r8, #98	; 0x62
 8105a48:	601c      	str	r4, [r3, #0]
 8105a4a:	e735      	b.n	81058b8 <__gethex+0x114>
 8105a4c:	1e69      	subs	r1, r5, #1
 8105a4e:	4620      	mov	r0, r4
 8105a50:	f000 feea 	bl	8106828 <__any_on>
 8105a54:	2800      	cmp	r0, #0
 8105a56:	d1ed      	bne.n	8105a34 <__gethex+0x290>
 8105a58:	4621      	mov	r1, r4
 8105a5a:	4648      	mov	r0, r9
 8105a5c:	f000 fa98 	bl	8105f90 <_Bfree>
 8105a60:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8105a62:	2300      	movs	r3, #0
 8105a64:	6013      	str	r3, [r2, #0]
 8105a66:	f04f 0850 	mov.w	r8, #80	; 0x50
 8105a6a:	e725      	b.n	81058b8 <__gethex+0x114>
 8105a6c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8105a6e:	2b00      	cmp	r3, #0
 8105a70:	d1f2      	bne.n	8105a58 <__gethex+0x2b4>
 8105a72:	e7df      	b.n	8105a34 <__gethex+0x290>
 8105a74:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8105a76:	2b00      	cmp	r3, #0
 8105a78:	d1dc      	bne.n	8105a34 <__gethex+0x290>
 8105a7a:	e7ed      	b.n	8105a58 <__gethex+0x2b4>
 8105a7c:	081073d8 	.word	0x081073d8
 8105a80:	081075e9 	.word	0x081075e9
 8105a84:	081075fa 	.word	0x081075fa
 8105a88:	f106 38ff 	add.w	r8, r6, #4294967295
 8105a8c:	f1bb 0f00 	cmp.w	fp, #0
 8105a90:	d133      	bne.n	8105afa <__gethex+0x356>
 8105a92:	f1b8 0f00 	cmp.w	r8, #0
 8105a96:	d004      	beq.n	8105aa2 <__gethex+0x2fe>
 8105a98:	4641      	mov	r1, r8
 8105a9a:	4620      	mov	r0, r4
 8105a9c:	f000 fec4 	bl	8106828 <__any_on>
 8105aa0:	4683      	mov	fp, r0
 8105aa2:	ea4f 1268 	mov.w	r2, r8, asr #5
 8105aa6:	2301      	movs	r3, #1
 8105aa8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 8105aac:	f008 081f 	and.w	r8, r8, #31
 8105ab0:	fa03 f308 	lsl.w	r3, r3, r8
 8105ab4:	4213      	tst	r3, r2
 8105ab6:	4631      	mov	r1, r6
 8105ab8:	4620      	mov	r0, r4
 8105aba:	bf18      	it	ne
 8105abc:	f04b 0b02 	orrne.w	fp, fp, #2
 8105ac0:	1bad      	subs	r5, r5, r6
 8105ac2:	f7ff fe07 	bl	81056d4 <rshift>
 8105ac6:	687e      	ldr	r6, [r7, #4]
 8105ac8:	f04f 0802 	mov.w	r8, #2
 8105acc:	f1bb 0f00 	cmp.w	fp, #0
 8105ad0:	d04a      	beq.n	8105b68 <__gethex+0x3c4>
 8105ad2:	68fb      	ldr	r3, [r7, #12]
 8105ad4:	2b02      	cmp	r3, #2
 8105ad6:	d016      	beq.n	8105b06 <__gethex+0x362>
 8105ad8:	2b03      	cmp	r3, #3
 8105ada:	d018      	beq.n	8105b0e <__gethex+0x36a>
 8105adc:	2b01      	cmp	r3, #1
 8105ade:	d109      	bne.n	8105af4 <__gethex+0x350>
 8105ae0:	f01b 0f02 	tst.w	fp, #2
 8105ae4:	d006      	beq.n	8105af4 <__gethex+0x350>
 8105ae6:	f8da 3000 	ldr.w	r3, [sl]
 8105aea:	ea4b 0b03 	orr.w	fp, fp, r3
 8105aee:	f01b 0f01 	tst.w	fp, #1
 8105af2:	d10f      	bne.n	8105b14 <__gethex+0x370>
 8105af4:	f048 0810 	orr.w	r8, r8, #16
 8105af8:	e036      	b.n	8105b68 <__gethex+0x3c4>
 8105afa:	f04f 0b01 	mov.w	fp, #1
 8105afe:	e7d0      	b.n	8105aa2 <__gethex+0x2fe>
 8105b00:	f04f 0801 	mov.w	r8, #1
 8105b04:	e7e2      	b.n	8105acc <__gethex+0x328>
 8105b06:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8105b08:	f1c3 0301 	rsb	r3, r3, #1
 8105b0c:	930f      	str	r3, [sp, #60]	; 0x3c
 8105b0e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8105b10:	2b00      	cmp	r3, #0
 8105b12:	d0ef      	beq.n	8105af4 <__gethex+0x350>
 8105b14:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8105b18:	f104 0214 	add.w	r2, r4, #20
 8105b1c:	ea4f 038b 	mov.w	r3, fp, lsl #2
 8105b20:	9301      	str	r3, [sp, #4]
 8105b22:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 8105b26:	2300      	movs	r3, #0
 8105b28:	4694      	mov	ip, r2
 8105b2a:	f852 1b04 	ldr.w	r1, [r2], #4
 8105b2e:	f1b1 3fff 	cmp.w	r1, #4294967295
 8105b32:	d01e      	beq.n	8105b72 <__gethex+0x3ce>
 8105b34:	3101      	adds	r1, #1
 8105b36:	f8cc 1000 	str.w	r1, [ip]
 8105b3a:	f1b8 0f02 	cmp.w	r8, #2
 8105b3e:	f104 0214 	add.w	r2, r4, #20
 8105b42:	d13d      	bne.n	8105bc0 <__gethex+0x41c>
 8105b44:	683b      	ldr	r3, [r7, #0]
 8105b46:	3b01      	subs	r3, #1
 8105b48:	42ab      	cmp	r3, r5
 8105b4a:	d10b      	bne.n	8105b64 <__gethex+0x3c0>
 8105b4c:	1169      	asrs	r1, r5, #5
 8105b4e:	2301      	movs	r3, #1
 8105b50:	f005 051f 	and.w	r5, r5, #31
 8105b54:	fa03 f505 	lsl.w	r5, r3, r5
 8105b58:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8105b5c:	421d      	tst	r5, r3
 8105b5e:	bf18      	it	ne
 8105b60:	f04f 0801 	movne.w	r8, #1
 8105b64:	f048 0820 	orr.w	r8, r8, #32
 8105b68:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8105b6a:	601c      	str	r4, [r3, #0]
 8105b6c:	9b02      	ldr	r3, [sp, #8]
 8105b6e:	601e      	str	r6, [r3, #0]
 8105b70:	e6a2      	b.n	81058b8 <__gethex+0x114>
 8105b72:	4290      	cmp	r0, r2
 8105b74:	f842 3c04 	str.w	r3, [r2, #-4]
 8105b78:	d8d6      	bhi.n	8105b28 <__gethex+0x384>
 8105b7a:	68a2      	ldr	r2, [r4, #8]
 8105b7c:	4593      	cmp	fp, r2
 8105b7e:	db17      	blt.n	8105bb0 <__gethex+0x40c>
 8105b80:	6861      	ldr	r1, [r4, #4]
 8105b82:	4648      	mov	r0, r9
 8105b84:	3101      	adds	r1, #1
 8105b86:	f000 f9c3 	bl	8105f10 <_Balloc>
 8105b8a:	4682      	mov	sl, r0
 8105b8c:	b918      	cbnz	r0, 8105b96 <__gethex+0x3f2>
 8105b8e:	4b1b      	ldr	r3, [pc, #108]	; (8105bfc <__gethex+0x458>)
 8105b90:	4602      	mov	r2, r0
 8105b92:	2184      	movs	r1, #132	; 0x84
 8105b94:	e6b3      	b.n	81058fe <__gethex+0x15a>
 8105b96:	6922      	ldr	r2, [r4, #16]
 8105b98:	3202      	adds	r2, #2
 8105b9a:	f104 010c 	add.w	r1, r4, #12
 8105b9e:	0092      	lsls	r2, r2, #2
 8105ba0:	300c      	adds	r0, #12
 8105ba2:	f7fe feb0 	bl	8104906 <memcpy>
 8105ba6:	4621      	mov	r1, r4
 8105ba8:	4648      	mov	r0, r9
 8105baa:	f000 f9f1 	bl	8105f90 <_Bfree>
 8105bae:	4654      	mov	r4, sl
 8105bb0:	6922      	ldr	r2, [r4, #16]
 8105bb2:	1c51      	adds	r1, r2, #1
 8105bb4:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8105bb8:	6121      	str	r1, [r4, #16]
 8105bba:	2101      	movs	r1, #1
 8105bbc:	6151      	str	r1, [r2, #20]
 8105bbe:	e7bc      	b.n	8105b3a <__gethex+0x396>
 8105bc0:	6921      	ldr	r1, [r4, #16]
 8105bc2:	4559      	cmp	r1, fp
 8105bc4:	dd0b      	ble.n	8105bde <__gethex+0x43a>
 8105bc6:	2101      	movs	r1, #1
 8105bc8:	4620      	mov	r0, r4
 8105bca:	f7ff fd83 	bl	81056d4 <rshift>
 8105bce:	68bb      	ldr	r3, [r7, #8]
 8105bd0:	3601      	adds	r6, #1
 8105bd2:	42b3      	cmp	r3, r6
 8105bd4:	f6ff aedb 	blt.w	810598e <__gethex+0x1ea>
 8105bd8:	f04f 0801 	mov.w	r8, #1
 8105bdc:	e7c2      	b.n	8105b64 <__gethex+0x3c0>
 8105bde:	f015 051f 	ands.w	r5, r5, #31
 8105be2:	d0f9      	beq.n	8105bd8 <__gethex+0x434>
 8105be4:	9b01      	ldr	r3, [sp, #4]
 8105be6:	441a      	add	r2, r3
 8105be8:	f1c5 0520 	rsb	r5, r5, #32
 8105bec:	f852 0c04 	ldr.w	r0, [r2, #-4]
 8105bf0:	f000 fa80 	bl	81060f4 <__hi0bits>
 8105bf4:	42a8      	cmp	r0, r5
 8105bf6:	dbe6      	blt.n	8105bc6 <__gethex+0x422>
 8105bf8:	e7ee      	b.n	8105bd8 <__gethex+0x434>
 8105bfa:	bf00      	nop
 8105bfc:	081075e9 	.word	0x081075e9

08105c00 <L_shift>:
 8105c00:	f1c2 0208 	rsb	r2, r2, #8
 8105c04:	0092      	lsls	r2, r2, #2
 8105c06:	b570      	push	{r4, r5, r6, lr}
 8105c08:	f1c2 0620 	rsb	r6, r2, #32
 8105c0c:	6843      	ldr	r3, [r0, #4]
 8105c0e:	6804      	ldr	r4, [r0, #0]
 8105c10:	fa03 f506 	lsl.w	r5, r3, r6
 8105c14:	432c      	orrs	r4, r5
 8105c16:	40d3      	lsrs	r3, r2
 8105c18:	6004      	str	r4, [r0, #0]
 8105c1a:	f840 3f04 	str.w	r3, [r0, #4]!
 8105c1e:	4288      	cmp	r0, r1
 8105c20:	d3f4      	bcc.n	8105c0c <L_shift+0xc>
 8105c22:	bd70      	pop	{r4, r5, r6, pc}

08105c24 <__match>:
 8105c24:	b530      	push	{r4, r5, lr}
 8105c26:	6803      	ldr	r3, [r0, #0]
 8105c28:	3301      	adds	r3, #1
 8105c2a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8105c2e:	b914      	cbnz	r4, 8105c36 <__match+0x12>
 8105c30:	6003      	str	r3, [r0, #0]
 8105c32:	2001      	movs	r0, #1
 8105c34:	bd30      	pop	{r4, r5, pc}
 8105c36:	f813 2b01 	ldrb.w	r2, [r3], #1
 8105c3a:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8105c3e:	2d19      	cmp	r5, #25
 8105c40:	bf98      	it	ls
 8105c42:	3220      	addls	r2, #32
 8105c44:	42a2      	cmp	r2, r4
 8105c46:	d0f0      	beq.n	8105c2a <__match+0x6>
 8105c48:	2000      	movs	r0, #0
 8105c4a:	e7f3      	b.n	8105c34 <__match+0x10>

08105c4c <__hexnan>:
 8105c4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8105c50:	680b      	ldr	r3, [r1, #0]
 8105c52:	6801      	ldr	r1, [r0, #0]
 8105c54:	115e      	asrs	r6, r3, #5
 8105c56:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8105c5a:	f013 031f 	ands.w	r3, r3, #31
 8105c5e:	b087      	sub	sp, #28
 8105c60:	bf18      	it	ne
 8105c62:	3604      	addne	r6, #4
 8105c64:	2500      	movs	r5, #0
 8105c66:	1f37      	subs	r7, r6, #4
 8105c68:	4682      	mov	sl, r0
 8105c6a:	4690      	mov	r8, r2
 8105c6c:	9301      	str	r3, [sp, #4]
 8105c6e:	f846 5c04 	str.w	r5, [r6, #-4]
 8105c72:	46b9      	mov	r9, r7
 8105c74:	463c      	mov	r4, r7
 8105c76:	9502      	str	r5, [sp, #8]
 8105c78:	46ab      	mov	fp, r5
 8105c7a:	784a      	ldrb	r2, [r1, #1]
 8105c7c:	1c4b      	adds	r3, r1, #1
 8105c7e:	9303      	str	r3, [sp, #12]
 8105c80:	b342      	cbz	r2, 8105cd4 <__hexnan+0x88>
 8105c82:	4610      	mov	r0, r2
 8105c84:	9105      	str	r1, [sp, #20]
 8105c86:	9204      	str	r2, [sp, #16]
 8105c88:	f7ff fd76 	bl	8105778 <__hexdig_fun>
 8105c8c:	2800      	cmp	r0, #0
 8105c8e:	d14f      	bne.n	8105d30 <__hexnan+0xe4>
 8105c90:	9a04      	ldr	r2, [sp, #16]
 8105c92:	9905      	ldr	r1, [sp, #20]
 8105c94:	2a20      	cmp	r2, #32
 8105c96:	d818      	bhi.n	8105cca <__hexnan+0x7e>
 8105c98:	9b02      	ldr	r3, [sp, #8]
 8105c9a:	459b      	cmp	fp, r3
 8105c9c:	dd13      	ble.n	8105cc6 <__hexnan+0x7a>
 8105c9e:	454c      	cmp	r4, r9
 8105ca0:	d206      	bcs.n	8105cb0 <__hexnan+0x64>
 8105ca2:	2d07      	cmp	r5, #7
 8105ca4:	dc04      	bgt.n	8105cb0 <__hexnan+0x64>
 8105ca6:	462a      	mov	r2, r5
 8105ca8:	4649      	mov	r1, r9
 8105caa:	4620      	mov	r0, r4
 8105cac:	f7ff ffa8 	bl	8105c00 <L_shift>
 8105cb0:	4544      	cmp	r4, r8
 8105cb2:	d950      	bls.n	8105d56 <__hexnan+0x10a>
 8105cb4:	2300      	movs	r3, #0
 8105cb6:	f1a4 0904 	sub.w	r9, r4, #4
 8105cba:	f844 3c04 	str.w	r3, [r4, #-4]
 8105cbe:	f8cd b008 	str.w	fp, [sp, #8]
 8105cc2:	464c      	mov	r4, r9
 8105cc4:	461d      	mov	r5, r3
 8105cc6:	9903      	ldr	r1, [sp, #12]
 8105cc8:	e7d7      	b.n	8105c7a <__hexnan+0x2e>
 8105cca:	2a29      	cmp	r2, #41	; 0x29
 8105ccc:	d155      	bne.n	8105d7a <__hexnan+0x12e>
 8105cce:	3102      	adds	r1, #2
 8105cd0:	f8ca 1000 	str.w	r1, [sl]
 8105cd4:	f1bb 0f00 	cmp.w	fp, #0
 8105cd8:	d04f      	beq.n	8105d7a <__hexnan+0x12e>
 8105cda:	454c      	cmp	r4, r9
 8105cdc:	d206      	bcs.n	8105cec <__hexnan+0xa0>
 8105cde:	2d07      	cmp	r5, #7
 8105ce0:	dc04      	bgt.n	8105cec <__hexnan+0xa0>
 8105ce2:	462a      	mov	r2, r5
 8105ce4:	4649      	mov	r1, r9
 8105ce6:	4620      	mov	r0, r4
 8105ce8:	f7ff ff8a 	bl	8105c00 <L_shift>
 8105cec:	4544      	cmp	r4, r8
 8105cee:	d934      	bls.n	8105d5a <__hexnan+0x10e>
 8105cf0:	f1a8 0204 	sub.w	r2, r8, #4
 8105cf4:	4623      	mov	r3, r4
 8105cf6:	f853 1b04 	ldr.w	r1, [r3], #4
 8105cfa:	f842 1f04 	str.w	r1, [r2, #4]!
 8105cfe:	429f      	cmp	r7, r3
 8105d00:	d2f9      	bcs.n	8105cf6 <__hexnan+0xaa>
 8105d02:	1b3b      	subs	r3, r7, r4
 8105d04:	f023 0303 	bic.w	r3, r3, #3
 8105d08:	3304      	adds	r3, #4
 8105d0a:	3e03      	subs	r6, #3
 8105d0c:	3401      	adds	r4, #1
 8105d0e:	42a6      	cmp	r6, r4
 8105d10:	bf38      	it	cc
 8105d12:	2304      	movcc	r3, #4
 8105d14:	4443      	add	r3, r8
 8105d16:	2200      	movs	r2, #0
 8105d18:	f843 2b04 	str.w	r2, [r3], #4
 8105d1c:	429f      	cmp	r7, r3
 8105d1e:	d2fb      	bcs.n	8105d18 <__hexnan+0xcc>
 8105d20:	683b      	ldr	r3, [r7, #0]
 8105d22:	b91b      	cbnz	r3, 8105d2c <__hexnan+0xe0>
 8105d24:	4547      	cmp	r7, r8
 8105d26:	d126      	bne.n	8105d76 <__hexnan+0x12a>
 8105d28:	2301      	movs	r3, #1
 8105d2a:	603b      	str	r3, [r7, #0]
 8105d2c:	2005      	movs	r0, #5
 8105d2e:	e025      	b.n	8105d7c <__hexnan+0x130>
 8105d30:	3501      	adds	r5, #1
 8105d32:	2d08      	cmp	r5, #8
 8105d34:	f10b 0b01 	add.w	fp, fp, #1
 8105d38:	dd06      	ble.n	8105d48 <__hexnan+0xfc>
 8105d3a:	4544      	cmp	r4, r8
 8105d3c:	d9c3      	bls.n	8105cc6 <__hexnan+0x7a>
 8105d3e:	2300      	movs	r3, #0
 8105d40:	f844 3c04 	str.w	r3, [r4, #-4]
 8105d44:	2501      	movs	r5, #1
 8105d46:	3c04      	subs	r4, #4
 8105d48:	6822      	ldr	r2, [r4, #0]
 8105d4a:	f000 000f 	and.w	r0, r0, #15
 8105d4e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8105d52:	6020      	str	r0, [r4, #0]
 8105d54:	e7b7      	b.n	8105cc6 <__hexnan+0x7a>
 8105d56:	2508      	movs	r5, #8
 8105d58:	e7b5      	b.n	8105cc6 <__hexnan+0x7a>
 8105d5a:	9b01      	ldr	r3, [sp, #4]
 8105d5c:	2b00      	cmp	r3, #0
 8105d5e:	d0df      	beq.n	8105d20 <__hexnan+0xd4>
 8105d60:	f1c3 0320 	rsb	r3, r3, #32
 8105d64:	f04f 32ff 	mov.w	r2, #4294967295
 8105d68:	40da      	lsrs	r2, r3
 8105d6a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8105d6e:	4013      	ands	r3, r2
 8105d70:	f846 3c04 	str.w	r3, [r6, #-4]
 8105d74:	e7d4      	b.n	8105d20 <__hexnan+0xd4>
 8105d76:	3f04      	subs	r7, #4
 8105d78:	e7d2      	b.n	8105d20 <__hexnan+0xd4>
 8105d7a:	2004      	movs	r0, #4
 8105d7c:	b007      	add	sp, #28
 8105d7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08105d84 <malloc>:
 8105d84:	4b02      	ldr	r3, [pc, #8]	; (8105d90 <malloc+0xc>)
 8105d86:	4601      	mov	r1, r0
 8105d88:	6818      	ldr	r0, [r3, #0]
 8105d8a:	f000 b823 	b.w	8105dd4 <_malloc_r>
 8105d8e:	bf00      	nop
 8105d90:	100001c4 	.word	0x100001c4

08105d94 <sbrk_aligned>:
 8105d94:	b570      	push	{r4, r5, r6, lr}
 8105d96:	4e0e      	ldr	r6, [pc, #56]	; (8105dd0 <sbrk_aligned+0x3c>)
 8105d98:	460c      	mov	r4, r1
 8105d9a:	6831      	ldr	r1, [r6, #0]
 8105d9c:	4605      	mov	r5, r0
 8105d9e:	b911      	cbnz	r1, 8105da6 <sbrk_aligned+0x12>
 8105da0:	f000 ff90 	bl	8106cc4 <_sbrk_r>
 8105da4:	6030      	str	r0, [r6, #0]
 8105da6:	4621      	mov	r1, r4
 8105da8:	4628      	mov	r0, r5
 8105daa:	f000 ff8b 	bl	8106cc4 <_sbrk_r>
 8105dae:	1c43      	adds	r3, r0, #1
 8105db0:	d00a      	beq.n	8105dc8 <sbrk_aligned+0x34>
 8105db2:	1cc4      	adds	r4, r0, #3
 8105db4:	f024 0403 	bic.w	r4, r4, #3
 8105db8:	42a0      	cmp	r0, r4
 8105dba:	d007      	beq.n	8105dcc <sbrk_aligned+0x38>
 8105dbc:	1a21      	subs	r1, r4, r0
 8105dbe:	4628      	mov	r0, r5
 8105dc0:	f000 ff80 	bl	8106cc4 <_sbrk_r>
 8105dc4:	3001      	adds	r0, #1
 8105dc6:	d101      	bne.n	8105dcc <sbrk_aligned+0x38>
 8105dc8:	f04f 34ff 	mov.w	r4, #4294967295
 8105dcc:	4620      	mov	r0, r4
 8105dce:	bd70      	pop	{r4, r5, r6, pc}
 8105dd0:	10000384 	.word	0x10000384

08105dd4 <_malloc_r>:
 8105dd4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8105dd8:	1ccd      	adds	r5, r1, #3
 8105dda:	f025 0503 	bic.w	r5, r5, #3
 8105dde:	3508      	adds	r5, #8
 8105de0:	2d0c      	cmp	r5, #12
 8105de2:	bf38      	it	cc
 8105de4:	250c      	movcc	r5, #12
 8105de6:	2d00      	cmp	r5, #0
 8105de8:	4607      	mov	r7, r0
 8105dea:	db01      	blt.n	8105df0 <_malloc_r+0x1c>
 8105dec:	42a9      	cmp	r1, r5
 8105dee:	d905      	bls.n	8105dfc <_malloc_r+0x28>
 8105df0:	230c      	movs	r3, #12
 8105df2:	603b      	str	r3, [r7, #0]
 8105df4:	2600      	movs	r6, #0
 8105df6:	4630      	mov	r0, r6
 8105df8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8105dfc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8105ed0 <_malloc_r+0xfc>
 8105e00:	f000 f87a 	bl	8105ef8 <__malloc_lock>
 8105e04:	f8d8 3000 	ldr.w	r3, [r8]
 8105e08:	461c      	mov	r4, r3
 8105e0a:	bb5c      	cbnz	r4, 8105e64 <_malloc_r+0x90>
 8105e0c:	4629      	mov	r1, r5
 8105e0e:	4638      	mov	r0, r7
 8105e10:	f7ff ffc0 	bl	8105d94 <sbrk_aligned>
 8105e14:	1c43      	adds	r3, r0, #1
 8105e16:	4604      	mov	r4, r0
 8105e18:	d155      	bne.n	8105ec6 <_malloc_r+0xf2>
 8105e1a:	f8d8 4000 	ldr.w	r4, [r8]
 8105e1e:	4626      	mov	r6, r4
 8105e20:	2e00      	cmp	r6, #0
 8105e22:	d145      	bne.n	8105eb0 <_malloc_r+0xdc>
 8105e24:	2c00      	cmp	r4, #0
 8105e26:	d048      	beq.n	8105eba <_malloc_r+0xe6>
 8105e28:	6823      	ldr	r3, [r4, #0]
 8105e2a:	4631      	mov	r1, r6
 8105e2c:	4638      	mov	r0, r7
 8105e2e:	eb04 0903 	add.w	r9, r4, r3
 8105e32:	f000 ff47 	bl	8106cc4 <_sbrk_r>
 8105e36:	4581      	cmp	r9, r0
 8105e38:	d13f      	bne.n	8105eba <_malloc_r+0xe6>
 8105e3a:	6821      	ldr	r1, [r4, #0]
 8105e3c:	1a6d      	subs	r5, r5, r1
 8105e3e:	4629      	mov	r1, r5
 8105e40:	4638      	mov	r0, r7
 8105e42:	f7ff ffa7 	bl	8105d94 <sbrk_aligned>
 8105e46:	3001      	adds	r0, #1
 8105e48:	d037      	beq.n	8105eba <_malloc_r+0xe6>
 8105e4a:	6823      	ldr	r3, [r4, #0]
 8105e4c:	442b      	add	r3, r5
 8105e4e:	6023      	str	r3, [r4, #0]
 8105e50:	f8d8 3000 	ldr.w	r3, [r8]
 8105e54:	2b00      	cmp	r3, #0
 8105e56:	d038      	beq.n	8105eca <_malloc_r+0xf6>
 8105e58:	685a      	ldr	r2, [r3, #4]
 8105e5a:	42a2      	cmp	r2, r4
 8105e5c:	d12b      	bne.n	8105eb6 <_malloc_r+0xe2>
 8105e5e:	2200      	movs	r2, #0
 8105e60:	605a      	str	r2, [r3, #4]
 8105e62:	e00f      	b.n	8105e84 <_malloc_r+0xb0>
 8105e64:	6822      	ldr	r2, [r4, #0]
 8105e66:	1b52      	subs	r2, r2, r5
 8105e68:	d41f      	bmi.n	8105eaa <_malloc_r+0xd6>
 8105e6a:	2a0b      	cmp	r2, #11
 8105e6c:	d917      	bls.n	8105e9e <_malloc_r+0xca>
 8105e6e:	1961      	adds	r1, r4, r5
 8105e70:	42a3      	cmp	r3, r4
 8105e72:	6025      	str	r5, [r4, #0]
 8105e74:	bf18      	it	ne
 8105e76:	6059      	strne	r1, [r3, #4]
 8105e78:	6863      	ldr	r3, [r4, #4]
 8105e7a:	bf08      	it	eq
 8105e7c:	f8c8 1000 	streq.w	r1, [r8]
 8105e80:	5162      	str	r2, [r4, r5]
 8105e82:	604b      	str	r3, [r1, #4]
 8105e84:	4638      	mov	r0, r7
 8105e86:	f104 060b 	add.w	r6, r4, #11
 8105e8a:	f000 f83b 	bl	8105f04 <__malloc_unlock>
 8105e8e:	f026 0607 	bic.w	r6, r6, #7
 8105e92:	1d23      	adds	r3, r4, #4
 8105e94:	1af2      	subs	r2, r6, r3
 8105e96:	d0ae      	beq.n	8105df6 <_malloc_r+0x22>
 8105e98:	1b9b      	subs	r3, r3, r6
 8105e9a:	50a3      	str	r3, [r4, r2]
 8105e9c:	e7ab      	b.n	8105df6 <_malloc_r+0x22>
 8105e9e:	42a3      	cmp	r3, r4
 8105ea0:	6862      	ldr	r2, [r4, #4]
 8105ea2:	d1dd      	bne.n	8105e60 <_malloc_r+0x8c>
 8105ea4:	f8c8 2000 	str.w	r2, [r8]
 8105ea8:	e7ec      	b.n	8105e84 <_malloc_r+0xb0>
 8105eaa:	4623      	mov	r3, r4
 8105eac:	6864      	ldr	r4, [r4, #4]
 8105eae:	e7ac      	b.n	8105e0a <_malloc_r+0x36>
 8105eb0:	4634      	mov	r4, r6
 8105eb2:	6876      	ldr	r6, [r6, #4]
 8105eb4:	e7b4      	b.n	8105e20 <_malloc_r+0x4c>
 8105eb6:	4613      	mov	r3, r2
 8105eb8:	e7cc      	b.n	8105e54 <_malloc_r+0x80>
 8105eba:	230c      	movs	r3, #12
 8105ebc:	603b      	str	r3, [r7, #0]
 8105ebe:	4638      	mov	r0, r7
 8105ec0:	f000 f820 	bl	8105f04 <__malloc_unlock>
 8105ec4:	e797      	b.n	8105df6 <_malloc_r+0x22>
 8105ec6:	6025      	str	r5, [r4, #0]
 8105ec8:	e7dc      	b.n	8105e84 <_malloc_r+0xb0>
 8105eca:	605b      	str	r3, [r3, #4]
 8105ecc:	deff      	udf	#255	; 0xff
 8105ece:	bf00      	nop
 8105ed0:	10000380 	.word	0x10000380

08105ed4 <__ascii_mbtowc>:
 8105ed4:	b082      	sub	sp, #8
 8105ed6:	b901      	cbnz	r1, 8105eda <__ascii_mbtowc+0x6>
 8105ed8:	a901      	add	r1, sp, #4
 8105eda:	b142      	cbz	r2, 8105eee <__ascii_mbtowc+0x1a>
 8105edc:	b14b      	cbz	r3, 8105ef2 <__ascii_mbtowc+0x1e>
 8105ede:	7813      	ldrb	r3, [r2, #0]
 8105ee0:	600b      	str	r3, [r1, #0]
 8105ee2:	7812      	ldrb	r2, [r2, #0]
 8105ee4:	1e10      	subs	r0, r2, #0
 8105ee6:	bf18      	it	ne
 8105ee8:	2001      	movne	r0, #1
 8105eea:	b002      	add	sp, #8
 8105eec:	4770      	bx	lr
 8105eee:	4610      	mov	r0, r2
 8105ef0:	e7fb      	b.n	8105eea <__ascii_mbtowc+0x16>
 8105ef2:	f06f 0001 	mvn.w	r0, #1
 8105ef6:	e7f8      	b.n	8105eea <__ascii_mbtowc+0x16>

08105ef8 <__malloc_lock>:
 8105ef8:	4801      	ldr	r0, [pc, #4]	; (8105f00 <__malloc_lock+0x8>)
 8105efa:	f7fe bd02 	b.w	8104902 <__retarget_lock_acquire_recursive>
 8105efe:	bf00      	nop
 8105f00:	1000037c 	.word	0x1000037c

08105f04 <__malloc_unlock>:
 8105f04:	4801      	ldr	r0, [pc, #4]	; (8105f0c <__malloc_unlock+0x8>)
 8105f06:	f7fe bcfd 	b.w	8104904 <__retarget_lock_release_recursive>
 8105f0a:	bf00      	nop
 8105f0c:	1000037c 	.word	0x1000037c

08105f10 <_Balloc>:
 8105f10:	b570      	push	{r4, r5, r6, lr}
 8105f12:	69c6      	ldr	r6, [r0, #28]
 8105f14:	4604      	mov	r4, r0
 8105f16:	460d      	mov	r5, r1
 8105f18:	b976      	cbnz	r6, 8105f38 <_Balloc+0x28>
 8105f1a:	2010      	movs	r0, #16
 8105f1c:	f7ff ff32 	bl	8105d84 <malloc>
 8105f20:	4602      	mov	r2, r0
 8105f22:	61e0      	str	r0, [r4, #28]
 8105f24:	b920      	cbnz	r0, 8105f30 <_Balloc+0x20>
 8105f26:	4b18      	ldr	r3, [pc, #96]	; (8105f88 <_Balloc+0x78>)
 8105f28:	4818      	ldr	r0, [pc, #96]	; (8105f8c <_Balloc+0x7c>)
 8105f2a:	216b      	movs	r1, #107	; 0x6b
 8105f2c:	f000 feda 	bl	8106ce4 <__assert_func>
 8105f30:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8105f34:	6006      	str	r6, [r0, #0]
 8105f36:	60c6      	str	r6, [r0, #12]
 8105f38:	69e6      	ldr	r6, [r4, #28]
 8105f3a:	68f3      	ldr	r3, [r6, #12]
 8105f3c:	b183      	cbz	r3, 8105f60 <_Balloc+0x50>
 8105f3e:	69e3      	ldr	r3, [r4, #28]
 8105f40:	68db      	ldr	r3, [r3, #12]
 8105f42:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8105f46:	b9b8      	cbnz	r0, 8105f78 <_Balloc+0x68>
 8105f48:	2101      	movs	r1, #1
 8105f4a:	fa01 f605 	lsl.w	r6, r1, r5
 8105f4e:	1d72      	adds	r2, r6, #5
 8105f50:	0092      	lsls	r2, r2, #2
 8105f52:	4620      	mov	r0, r4
 8105f54:	f000 fee4 	bl	8106d20 <_calloc_r>
 8105f58:	b160      	cbz	r0, 8105f74 <_Balloc+0x64>
 8105f5a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8105f5e:	e00e      	b.n	8105f7e <_Balloc+0x6e>
 8105f60:	2221      	movs	r2, #33	; 0x21
 8105f62:	2104      	movs	r1, #4
 8105f64:	4620      	mov	r0, r4
 8105f66:	f000 fedb 	bl	8106d20 <_calloc_r>
 8105f6a:	69e3      	ldr	r3, [r4, #28]
 8105f6c:	60f0      	str	r0, [r6, #12]
 8105f6e:	68db      	ldr	r3, [r3, #12]
 8105f70:	2b00      	cmp	r3, #0
 8105f72:	d1e4      	bne.n	8105f3e <_Balloc+0x2e>
 8105f74:	2000      	movs	r0, #0
 8105f76:	bd70      	pop	{r4, r5, r6, pc}
 8105f78:	6802      	ldr	r2, [r0, #0]
 8105f7a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8105f7e:	2300      	movs	r3, #0
 8105f80:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8105f84:	e7f7      	b.n	8105f76 <_Balloc+0x66>
 8105f86:	bf00      	nop
 8105f88:	0810757a 	.word	0x0810757a
 8105f8c:	0810765a 	.word	0x0810765a

08105f90 <_Bfree>:
 8105f90:	b570      	push	{r4, r5, r6, lr}
 8105f92:	69c6      	ldr	r6, [r0, #28]
 8105f94:	4605      	mov	r5, r0
 8105f96:	460c      	mov	r4, r1
 8105f98:	b976      	cbnz	r6, 8105fb8 <_Bfree+0x28>
 8105f9a:	2010      	movs	r0, #16
 8105f9c:	f7ff fef2 	bl	8105d84 <malloc>
 8105fa0:	4602      	mov	r2, r0
 8105fa2:	61e8      	str	r0, [r5, #28]
 8105fa4:	b920      	cbnz	r0, 8105fb0 <_Bfree+0x20>
 8105fa6:	4b09      	ldr	r3, [pc, #36]	; (8105fcc <_Bfree+0x3c>)
 8105fa8:	4809      	ldr	r0, [pc, #36]	; (8105fd0 <_Bfree+0x40>)
 8105faa:	218f      	movs	r1, #143	; 0x8f
 8105fac:	f000 fe9a 	bl	8106ce4 <__assert_func>
 8105fb0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8105fb4:	6006      	str	r6, [r0, #0]
 8105fb6:	60c6      	str	r6, [r0, #12]
 8105fb8:	b13c      	cbz	r4, 8105fca <_Bfree+0x3a>
 8105fba:	69eb      	ldr	r3, [r5, #28]
 8105fbc:	6862      	ldr	r2, [r4, #4]
 8105fbe:	68db      	ldr	r3, [r3, #12]
 8105fc0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8105fc4:	6021      	str	r1, [r4, #0]
 8105fc6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8105fca:	bd70      	pop	{r4, r5, r6, pc}
 8105fcc:	0810757a 	.word	0x0810757a
 8105fd0:	0810765a 	.word	0x0810765a

08105fd4 <__multadd>:
 8105fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8105fd8:	690d      	ldr	r5, [r1, #16]
 8105fda:	4607      	mov	r7, r0
 8105fdc:	460c      	mov	r4, r1
 8105fde:	461e      	mov	r6, r3
 8105fe0:	f101 0c14 	add.w	ip, r1, #20
 8105fe4:	2000      	movs	r0, #0
 8105fe6:	f8dc 3000 	ldr.w	r3, [ip]
 8105fea:	b299      	uxth	r1, r3
 8105fec:	fb02 6101 	mla	r1, r2, r1, r6
 8105ff0:	0c1e      	lsrs	r6, r3, #16
 8105ff2:	0c0b      	lsrs	r3, r1, #16
 8105ff4:	fb02 3306 	mla	r3, r2, r6, r3
 8105ff8:	b289      	uxth	r1, r1
 8105ffa:	3001      	adds	r0, #1
 8105ffc:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8106000:	4285      	cmp	r5, r0
 8106002:	f84c 1b04 	str.w	r1, [ip], #4
 8106006:	ea4f 4613 	mov.w	r6, r3, lsr #16
 810600a:	dcec      	bgt.n	8105fe6 <__multadd+0x12>
 810600c:	b30e      	cbz	r6, 8106052 <__multadd+0x7e>
 810600e:	68a3      	ldr	r3, [r4, #8]
 8106010:	42ab      	cmp	r3, r5
 8106012:	dc19      	bgt.n	8106048 <__multadd+0x74>
 8106014:	6861      	ldr	r1, [r4, #4]
 8106016:	4638      	mov	r0, r7
 8106018:	3101      	adds	r1, #1
 810601a:	f7ff ff79 	bl	8105f10 <_Balloc>
 810601e:	4680      	mov	r8, r0
 8106020:	b928      	cbnz	r0, 810602e <__multadd+0x5a>
 8106022:	4602      	mov	r2, r0
 8106024:	4b0c      	ldr	r3, [pc, #48]	; (8106058 <__multadd+0x84>)
 8106026:	480d      	ldr	r0, [pc, #52]	; (810605c <__multadd+0x88>)
 8106028:	21ba      	movs	r1, #186	; 0xba
 810602a:	f000 fe5b 	bl	8106ce4 <__assert_func>
 810602e:	6922      	ldr	r2, [r4, #16]
 8106030:	3202      	adds	r2, #2
 8106032:	f104 010c 	add.w	r1, r4, #12
 8106036:	0092      	lsls	r2, r2, #2
 8106038:	300c      	adds	r0, #12
 810603a:	f7fe fc64 	bl	8104906 <memcpy>
 810603e:	4621      	mov	r1, r4
 8106040:	4638      	mov	r0, r7
 8106042:	f7ff ffa5 	bl	8105f90 <_Bfree>
 8106046:	4644      	mov	r4, r8
 8106048:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 810604c:	3501      	adds	r5, #1
 810604e:	615e      	str	r6, [r3, #20]
 8106050:	6125      	str	r5, [r4, #16]
 8106052:	4620      	mov	r0, r4
 8106054:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8106058:	081075e9 	.word	0x081075e9
 810605c:	0810765a 	.word	0x0810765a

08106060 <__s2b>:
 8106060:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106064:	460c      	mov	r4, r1
 8106066:	4615      	mov	r5, r2
 8106068:	461f      	mov	r7, r3
 810606a:	2209      	movs	r2, #9
 810606c:	3308      	adds	r3, #8
 810606e:	4606      	mov	r6, r0
 8106070:	fb93 f3f2 	sdiv	r3, r3, r2
 8106074:	2100      	movs	r1, #0
 8106076:	2201      	movs	r2, #1
 8106078:	429a      	cmp	r2, r3
 810607a:	db09      	blt.n	8106090 <__s2b+0x30>
 810607c:	4630      	mov	r0, r6
 810607e:	f7ff ff47 	bl	8105f10 <_Balloc>
 8106082:	b940      	cbnz	r0, 8106096 <__s2b+0x36>
 8106084:	4602      	mov	r2, r0
 8106086:	4b19      	ldr	r3, [pc, #100]	; (81060ec <__s2b+0x8c>)
 8106088:	4819      	ldr	r0, [pc, #100]	; (81060f0 <__s2b+0x90>)
 810608a:	21d3      	movs	r1, #211	; 0xd3
 810608c:	f000 fe2a 	bl	8106ce4 <__assert_func>
 8106090:	0052      	lsls	r2, r2, #1
 8106092:	3101      	adds	r1, #1
 8106094:	e7f0      	b.n	8106078 <__s2b+0x18>
 8106096:	9b08      	ldr	r3, [sp, #32]
 8106098:	6143      	str	r3, [r0, #20]
 810609a:	2d09      	cmp	r5, #9
 810609c:	f04f 0301 	mov.w	r3, #1
 81060a0:	6103      	str	r3, [r0, #16]
 81060a2:	dd16      	ble.n	81060d2 <__s2b+0x72>
 81060a4:	f104 0909 	add.w	r9, r4, #9
 81060a8:	46c8      	mov	r8, r9
 81060aa:	442c      	add	r4, r5
 81060ac:	f818 3b01 	ldrb.w	r3, [r8], #1
 81060b0:	4601      	mov	r1, r0
 81060b2:	3b30      	subs	r3, #48	; 0x30
 81060b4:	220a      	movs	r2, #10
 81060b6:	4630      	mov	r0, r6
 81060b8:	f7ff ff8c 	bl	8105fd4 <__multadd>
 81060bc:	45a0      	cmp	r8, r4
 81060be:	d1f5      	bne.n	81060ac <__s2b+0x4c>
 81060c0:	f1a5 0408 	sub.w	r4, r5, #8
 81060c4:	444c      	add	r4, r9
 81060c6:	1b2d      	subs	r5, r5, r4
 81060c8:	1963      	adds	r3, r4, r5
 81060ca:	42bb      	cmp	r3, r7
 81060cc:	db04      	blt.n	81060d8 <__s2b+0x78>
 81060ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81060d2:	340a      	adds	r4, #10
 81060d4:	2509      	movs	r5, #9
 81060d6:	e7f6      	b.n	81060c6 <__s2b+0x66>
 81060d8:	f814 3b01 	ldrb.w	r3, [r4], #1
 81060dc:	4601      	mov	r1, r0
 81060de:	3b30      	subs	r3, #48	; 0x30
 81060e0:	220a      	movs	r2, #10
 81060e2:	4630      	mov	r0, r6
 81060e4:	f7ff ff76 	bl	8105fd4 <__multadd>
 81060e8:	e7ee      	b.n	81060c8 <__s2b+0x68>
 81060ea:	bf00      	nop
 81060ec:	081075e9 	.word	0x081075e9
 81060f0:	0810765a 	.word	0x0810765a

081060f4 <__hi0bits>:
 81060f4:	0c03      	lsrs	r3, r0, #16
 81060f6:	041b      	lsls	r3, r3, #16
 81060f8:	b9d3      	cbnz	r3, 8106130 <__hi0bits+0x3c>
 81060fa:	0400      	lsls	r0, r0, #16
 81060fc:	2310      	movs	r3, #16
 81060fe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 8106102:	bf04      	itt	eq
 8106104:	0200      	lsleq	r0, r0, #8
 8106106:	3308      	addeq	r3, #8
 8106108:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 810610c:	bf04      	itt	eq
 810610e:	0100      	lsleq	r0, r0, #4
 8106110:	3304      	addeq	r3, #4
 8106112:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8106116:	bf04      	itt	eq
 8106118:	0080      	lsleq	r0, r0, #2
 810611a:	3302      	addeq	r3, #2
 810611c:	2800      	cmp	r0, #0
 810611e:	db05      	blt.n	810612c <__hi0bits+0x38>
 8106120:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8106124:	f103 0301 	add.w	r3, r3, #1
 8106128:	bf08      	it	eq
 810612a:	2320      	moveq	r3, #32
 810612c:	4618      	mov	r0, r3
 810612e:	4770      	bx	lr
 8106130:	2300      	movs	r3, #0
 8106132:	e7e4      	b.n	81060fe <__hi0bits+0xa>

08106134 <__lo0bits>:
 8106134:	6803      	ldr	r3, [r0, #0]
 8106136:	f013 0207 	ands.w	r2, r3, #7
 810613a:	d00c      	beq.n	8106156 <__lo0bits+0x22>
 810613c:	07d9      	lsls	r1, r3, #31
 810613e:	d422      	bmi.n	8106186 <__lo0bits+0x52>
 8106140:	079a      	lsls	r2, r3, #30
 8106142:	bf49      	itett	mi
 8106144:	085b      	lsrmi	r3, r3, #1
 8106146:	089b      	lsrpl	r3, r3, #2
 8106148:	6003      	strmi	r3, [r0, #0]
 810614a:	2201      	movmi	r2, #1
 810614c:	bf5c      	itt	pl
 810614e:	6003      	strpl	r3, [r0, #0]
 8106150:	2202      	movpl	r2, #2
 8106152:	4610      	mov	r0, r2
 8106154:	4770      	bx	lr
 8106156:	b299      	uxth	r1, r3
 8106158:	b909      	cbnz	r1, 810615e <__lo0bits+0x2a>
 810615a:	0c1b      	lsrs	r3, r3, #16
 810615c:	2210      	movs	r2, #16
 810615e:	b2d9      	uxtb	r1, r3
 8106160:	b909      	cbnz	r1, 8106166 <__lo0bits+0x32>
 8106162:	3208      	adds	r2, #8
 8106164:	0a1b      	lsrs	r3, r3, #8
 8106166:	0719      	lsls	r1, r3, #28
 8106168:	bf04      	itt	eq
 810616a:	091b      	lsreq	r3, r3, #4
 810616c:	3204      	addeq	r2, #4
 810616e:	0799      	lsls	r1, r3, #30
 8106170:	bf04      	itt	eq
 8106172:	089b      	lsreq	r3, r3, #2
 8106174:	3202      	addeq	r2, #2
 8106176:	07d9      	lsls	r1, r3, #31
 8106178:	d403      	bmi.n	8106182 <__lo0bits+0x4e>
 810617a:	085b      	lsrs	r3, r3, #1
 810617c:	f102 0201 	add.w	r2, r2, #1
 8106180:	d003      	beq.n	810618a <__lo0bits+0x56>
 8106182:	6003      	str	r3, [r0, #0]
 8106184:	e7e5      	b.n	8106152 <__lo0bits+0x1e>
 8106186:	2200      	movs	r2, #0
 8106188:	e7e3      	b.n	8106152 <__lo0bits+0x1e>
 810618a:	2220      	movs	r2, #32
 810618c:	e7e1      	b.n	8106152 <__lo0bits+0x1e>
	...

08106190 <__i2b>:
 8106190:	b510      	push	{r4, lr}
 8106192:	460c      	mov	r4, r1
 8106194:	2101      	movs	r1, #1
 8106196:	f7ff febb 	bl	8105f10 <_Balloc>
 810619a:	4602      	mov	r2, r0
 810619c:	b928      	cbnz	r0, 81061aa <__i2b+0x1a>
 810619e:	4b05      	ldr	r3, [pc, #20]	; (81061b4 <__i2b+0x24>)
 81061a0:	4805      	ldr	r0, [pc, #20]	; (81061b8 <__i2b+0x28>)
 81061a2:	f240 1145 	movw	r1, #325	; 0x145
 81061a6:	f000 fd9d 	bl	8106ce4 <__assert_func>
 81061aa:	2301      	movs	r3, #1
 81061ac:	6144      	str	r4, [r0, #20]
 81061ae:	6103      	str	r3, [r0, #16]
 81061b0:	bd10      	pop	{r4, pc}
 81061b2:	bf00      	nop
 81061b4:	081075e9 	.word	0x081075e9
 81061b8:	0810765a 	.word	0x0810765a

081061bc <__multiply>:
 81061bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81061c0:	4691      	mov	r9, r2
 81061c2:	690a      	ldr	r2, [r1, #16]
 81061c4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 81061c8:	429a      	cmp	r2, r3
 81061ca:	bfb8      	it	lt
 81061cc:	460b      	movlt	r3, r1
 81061ce:	460c      	mov	r4, r1
 81061d0:	bfbc      	itt	lt
 81061d2:	464c      	movlt	r4, r9
 81061d4:	4699      	movlt	r9, r3
 81061d6:	6927      	ldr	r7, [r4, #16]
 81061d8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 81061dc:	68a3      	ldr	r3, [r4, #8]
 81061de:	6861      	ldr	r1, [r4, #4]
 81061e0:	eb07 060a 	add.w	r6, r7, sl
 81061e4:	42b3      	cmp	r3, r6
 81061e6:	b085      	sub	sp, #20
 81061e8:	bfb8      	it	lt
 81061ea:	3101      	addlt	r1, #1
 81061ec:	f7ff fe90 	bl	8105f10 <_Balloc>
 81061f0:	b930      	cbnz	r0, 8106200 <__multiply+0x44>
 81061f2:	4602      	mov	r2, r0
 81061f4:	4b44      	ldr	r3, [pc, #272]	; (8106308 <__multiply+0x14c>)
 81061f6:	4845      	ldr	r0, [pc, #276]	; (810630c <__multiply+0x150>)
 81061f8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 81061fc:	f000 fd72 	bl	8106ce4 <__assert_func>
 8106200:	f100 0514 	add.w	r5, r0, #20
 8106204:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8106208:	462b      	mov	r3, r5
 810620a:	2200      	movs	r2, #0
 810620c:	4543      	cmp	r3, r8
 810620e:	d321      	bcc.n	8106254 <__multiply+0x98>
 8106210:	f104 0314 	add.w	r3, r4, #20
 8106214:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8106218:	f109 0314 	add.w	r3, r9, #20
 810621c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8106220:	9202      	str	r2, [sp, #8]
 8106222:	1b3a      	subs	r2, r7, r4
 8106224:	3a15      	subs	r2, #21
 8106226:	f022 0203 	bic.w	r2, r2, #3
 810622a:	3204      	adds	r2, #4
 810622c:	f104 0115 	add.w	r1, r4, #21
 8106230:	428f      	cmp	r7, r1
 8106232:	bf38      	it	cc
 8106234:	2204      	movcc	r2, #4
 8106236:	9201      	str	r2, [sp, #4]
 8106238:	9a02      	ldr	r2, [sp, #8]
 810623a:	9303      	str	r3, [sp, #12]
 810623c:	429a      	cmp	r2, r3
 810623e:	d80c      	bhi.n	810625a <__multiply+0x9e>
 8106240:	2e00      	cmp	r6, #0
 8106242:	dd03      	ble.n	810624c <__multiply+0x90>
 8106244:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8106248:	2b00      	cmp	r3, #0
 810624a:	d05b      	beq.n	8106304 <__multiply+0x148>
 810624c:	6106      	str	r6, [r0, #16]
 810624e:	b005      	add	sp, #20
 8106250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106254:	f843 2b04 	str.w	r2, [r3], #4
 8106258:	e7d8      	b.n	810620c <__multiply+0x50>
 810625a:	f8b3 a000 	ldrh.w	sl, [r3]
 810625e:	f1ba 0f00 	cmp.w	sl, #0
 8106262:	d024      	beq.n	81062ae <__multiply+0xf2>
 8106264:	f104 0e14 	add.w	lr, r4, #20
 8106268:	46a9      	mov	r9, r5
 810626a:	f04f 0c00 	mov.w	ip, #0
 810626e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8106272:	f8d9 1000 	ldr.w	r1, [r9]
 8106276:	fa1f fb82 	uxth.w	fp, r2
 810627a:	b289      	uxth	r1, r1
 810627c:	fb0a 110b 	mla	r1, sl, fp, r1
 8106280:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 8106284:	f8d9 2000 	ldr.w	r2, [r9]
 8106288:	4461      	add	r1, ip
 810628a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 810628e:	fb0a c20b 	mla	r2, sl, fp, ip
 8106292:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 8106296:	b289      	uxth	r1, r1
 8106298:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 810629c:	4577      	cmp	r7, lr
 810629e:	f849 1b04 	str.w	r1, [r9], #4
 81062a2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 81062a6:	d8e2      	bhi.n	810626e <__multiply+0xb2>
 81062a8:	9a01      	ldr	r2, [sp, #4]
 81062aa:	f845 c002 	str.w	ip, [r5, r2]
 81062ae:	9a03      	ldr	r2, [sp, #12]
 81062b0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 81062b4:	3304      	adds	r3, #4
 81062b6:	f1b9 0f00 	cmp.w	r9, #0
 81062ba:	d021      	beq.n	8106300 <__multiply+0x144>
 81062bc:	6829      	ldr	r1, [r5, #0]
 81062be:	f104 0c14 	add.w	ip, r4, #20
 81062c2:	46ae      	mov	lr, r5
 81062c4:	f04f 0a00 	mov.w	sl, #0
 81062c8:	f8bc b000 	ldrh.w	fp, [ip]
 81062cc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 81062d0:	fb09 220b 	mla	r2, r9, fp, r2
 81062d4:	4452      	add	r2, sl
 81062d6:	b289      	uxth	r1, r1
 81062d8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 81062dc:	f84e 1b04 	str.w	r1, [lr], #4
 81062e0:	f85c 1b04 	ldr.w	r1, [ip], #4
 81062e4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 81062e8:	f8be 1000 	ldrh.w	r1, [lr]
 81062ec:	fb09 110a 	mla	r1, r9, sl, r1
 81062f0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 81062f4:	4567      	cmp	r7, ip
 81062f6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 81062fa:	d8e5      	bhi.n	81062c8 <__multiply+0x10c>
 81062fc:	9a01      	ldr	r2, [sp, #4]
 81062fe:	50a9      	str	r1, [r5, r2]
 8106300:	3504      	adds	r5, #4
 8106302:	e799      	b.n	8106238 <__multiply+0x7c>
 8106304:	3e01      	subs	r6, #1
 8106306:	e79b      	b.n	8106240 <__multiply+0x84>
 8106308:	081075e9 	.word	0x081075e9
 810630c:	0810765a 	.word	0x0810765a

08106310 <__pow5mult>:
 8106310:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8106314:	4615      	mov	r5, r2
 8106316:	f012 0203 	ands.w	r2, r2, #3
 810631a:	4606      	mov	r6, r0
 810631c:	460f      	mov	r7, r1
 810631e:	d007      	beq.n	8106330 <__pow5mult+0x20>
 8106320:	4c25      	ldr	r4, [pc, #148]	; (81063b8 <__pow5mult+0xa8>)
 8106322:	3a01      	subs	r2, #1
 8106324:	2300      	movs	r3, #0
 8106326:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 810632a:	f7ff fe53 	bl	8105fd4 <__multadd>
 810632e:	4607      	mov	r7, r0
 8106330:	10ad      	asrs	r5, r5, #2
 8106332:	d03d      	beq.n	81063b0 <__pow5mult+0xa0>
 8106334:	69f4      	ldr	r4, [r6, #28]
 8106336:	b97c      	cbnz	r4, 8106358 <__pow5mult+0x48>
 8106338:	2010      	movs	r0, #16
 810633a:	f7ff fd23 	bl	8105d84 <malloc>
 810633e:	4602      	mov	r2, r0
 8106340:	61f0      	str	r0, [r6, #28]
 8106342:	b928      	cbnz	r0, 8106350 <__pow5mult+0x40>
 8106344:	4b1d      	ldr	r3, [pc, #116]	; (81063bc <__pow5mult+0xac>)
 8106346:	481e      	ldr	r0, [pc, #120]	; (81063c0 <__pow5mult+0xb0>)
 8106348:	f240 11b3 	movw	r1, #435	; 0x1b3
 810634c:	f000 fcca 	bl	8106ce4 <__assert_func>
 8106350:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8106354:	6004      	str	r4, [r0, #0]
 8106356:	60c4      	str	r4, [r0, #12]
 8106358:	f8d6 801c 	ldr.w	r8, [r6, #28]
 810635c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8106360:	b94c      	cbnz	r4, 8106376 <__pow5mult+0x66>
 8106362:	f240 2171 	movw	r1, #625	; 0x271
 8106366:	4630      	mov	r0, r6
 8106368:	f7ff ff12 	bl	8106190 <__i2b>
 810636c:	2300      	movs	r3, #0
 810636e:	f8c8 0008 	str.w	r0, [r8, #8]
 8106372:	4604      	mov	r4, r0
 8106374:	6003      	str	r3, [r0, #0]
 8106376:	f04f 0900 	mov.w	r9, #0
 810637a:	07eb      	lsls	r3, r5, #31
 810637c:	d50a      	bpl.n	8106394 <__pow5mult+0x84>
 810637e:	4639      	mov	r1, r7
 8106380:	4622      	mov	r2, r4
 8106382:	4630      	mov	r0, r6
 8106384:	f7ff ff1a 	bl	81061bc <__multiply>
 8106388:	4639      	mov	r1, r7
 810638a:	4680      	mov	r8, r0
 810638c:	4630      	mov	r0, r6
 810638e:	f7ff fdff 	bl	8105f90 <_Bfree>
 8106392:	4647      	mov	r7, r8
 8106394:	106d      	asrs	r5, r5, #1
 8106396:	d00b      	beq.n	81063b0 <__pow5mult+0xa0>
 8106398:	6820      	ldr	r0, [r4, #0]
 810639a:	b938      	cbnz	r0, 81063ac <__pow5mult+0x9c>
 810639c:	4622      	mov	r2, r4
 810639e:	4621      	mov	r1, r4
 81063a0:	4630      	mov	r0, r6
 81063a2:	f7ff ff0b 	bl	81061bc <__multiply>
 81063a6:	6020      	str	r0, [r4, #0]
 81063a8:	f8c0 9000 	str.w	r9, [r0]
 81063ac:	4604      	mov	r4, r0
 81063ae:	e7e4      	b.n	810637a <__pow5mult+0x6a>
 81063b0:	4638      	mov	r0, r7
 81063b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 81063b6:	bf00      	nop
 81063b8:	081077a8 	.word	0x081077a8
 81063bc:	0810757a 	.word	0x0810757a
 81063c0:	0810765a 	.word	0x0810765a

081063c4 <__lshift>:
 81063c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 81063c8:	460c      	mov	r4, r1
 81063ca:	6849      	ldr	r1, [r1, #4]
 81063cc:	6923      	ldr	r3, [r4, #16]
 81063ce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 81063d2:	68a3      	ldr	r3, [r4, #8]
 81063d4:	4607      	mov	r7, r0
 81063d6:	4691      	mov	r9, r2
 81063d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 81063dc:	f108 0601 	add.w	r6, r8, #1
 81063e0:	42b3      	cmp	r3, r6
 81063e2:	db0b      	blt.n	81063fc <__lshift+0x38>
 81063e4:	4638      	mov	r0, r7
 81063e6:	f7ff fd93 	bl	8105f10 <_Balloc>
 81063ea:	4605      	mov	r5, r0
 81063ec:	b948      	cbnz	r0, 8106402 <__lshift+0x3e>
 81063ee:	4602      	mov	r2, r0
 81063f0:	4b28      	ldr	r3, [pc, #160]	; (8106494 <__lshift+0xd0>)
 81063f2:	4829      	ldr	r0, [pc, #164]	; (8106498 <__lshift+0xd4>)
 81063f4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 81063f8:	f000 fc74 	bl	8106ce4 <__assert_func>
 81063fc:	3101      	adds	r1, #1
 81063fe:	005b      	lsls	r3, r3, #1
 8106400:	e7ee      	b.n	81063e0 <__lshift+0x1c>
 8106402:	2300      	movs	r3, #0
 8106404:	f100 0114 	add.w	r1, r0, #20
 8106408:	f100 0210 	add.w	r2, r0, #16
 810640c:	4618      	mov	r0, r3
 810640e:	4553      	cmp	r3, sl
 8106410:	db33      	blt.n	810647a <__lshift+0xb6>
 8106412:	6920      	ldr	r0, [r4, #16]
 8106414:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8106418:	f104 0314 	add.w	r3, r4, #20
 810641c:	f019 091f 	ands.w	r9, r9, #31
 8106420:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8106424:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8106428:	d02b      	beq.n	8106482 <__lshift+0xbe>
 810642a:	f1c9 0e20 	rsb	lr, r9, #32
 810642e:	468a      	mov	sl, r1
 8106430:	2200      	movs	r2, #0
 8106432:	6818      	ldr	r0, [r3, #0]
 8106434:	fa00 f009 	lsl.w	r0, r0, r9
 8106438:	4310      	orrs	r0, r2
 810643a:	f84a 0b04 	str.w	r0, [sl], #4
 810643e:	f853 2b04 	ldr.w	r2, [r3], #4
 8106442:	459c      	cmp	ip, r3
 8106444:	fa22 f20e 	lsr.w	r2, r2, lr
 8106448:	d8f3      	bhi.n	8106432 <__lshift+0x6e>
 810644a:	ebac 0304 	sub.w	r3, ip, r4
 810644e:	3b15      	subs	r3, #21
 8106450:	f023 0303 	bic.w	r3, r3, #3
 8106454:	3304      	adds	r3, #4
 8106456:	f104 0015 	add.w	r0, r4, #21
 810645a:	4584      	cmp	ip, r0
 810645c:	bf38      	it	cc
 810645e:	2304      	movcc	r3, #4
 8106460:	50ca      	str	r2, [r1, r3]
 8106462:	b10a      	cbz	r2, 8106468 <__lshift+0xa4>
 8106464:	f108 0602 	add.w	r6, r8, #2
 8106468:	3e01      	subs	r6, #1
 810646a:	4638      	mov	r0, r7
 810646c:	612e      	str	r6, [r5, #16]
 810646e:	4621      	mov	r1, r4
 8106470:	f7ff fd8e 	bl	8105f90 <_Bfree>
 8106474:	4628      	mov	r0, r5
 8106476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 810647a:	f842 0f04 	str.w	r0, [r2, #4]!
 810647e:	3301      	adds	r3, #1
 8106480:	e7c5      	b.n	810640e <__lshift+0x4a>
 8106482:	3904      	subs	r1, #4
 8106484:	f853 2b04 	ldr.w	r2, [r3], #4
 8106488:	f841 2f04 	str.w	r2, [r1, #4]!
 810648c:	459c      	cmp	ip, r3
 810648e:	d8f9      	bhi.n	8106484 <__lshift+0xc0>
 8106490:	e7ea      	b.n	8106468 <__lshift+0xa4>
 8106492:	bf00      	nop
 8106494:	081075e9 	.word	0x081075e9
 8106498:	0810765a 	.word	0x0810765a

0810649c <__mcmp>:
 810649c:	b530      	push	{r4, r5, lr}
 810649e:	6902      	ldr	r2, [r0, #16]
 81064a0:	690c      	ldr	r4, [r1, #16]
 81064a2:	1b12      	subs	r2, r2, r4
 81064a4:	d10e      	bne.n	81064c4 <__mcmp+0x28>
 81064a6:	f100 0314 	add.w	r3, r0, #20
 81064aa:	3114      	adds	r1, #20
 81064ac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 81064b0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 81064b4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 81064b8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 81064bc:	42a5      	cmp	r5, r4
 81064be:	d003      	beq.n	81064c8 <__mcmp+0x2c>
 81064c0:	d305      	bcc.n	81064ce <__mcmp+0x32>
 81064c2:	2201      	movs	r2, #1
 81064c4:	4610      	mov	r0, r2
 81064c6:	bd30      	pop	{r4, r5, pc}
 81064c8:	4283      	cmp	r3, r0
 81064ca:	d3f3      	bcc.n	81064b4 <__mcmp+0x18>
 81064cc:	e7fa      	b.n	81064c4 <__mcmp+0x28>
 81064ce:	f04f 32ff 	mov.w	r2, #4294967295
 81064d2:	e7f7      	b.n	81064c4 <__mcmp+0x28>

081064d4 <__mdiff>:
 81064d4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 81064d8:	460c      	mov	r4, r1
 81064da:	4606      	mov	r6, r0
 81064dc:	4611      	mov	r1, r2
 81064de:	4620      	mov	r0, r4
 81064e0:	4690      	mov	r8, r2
 81064e2:	f7ff ffdb 	bl	810649c <__mcmp>
 81064e6:	1e05      	subs	r5, r0, #0
 81064e8:	d110      	bne.n	810650c <__mdiff+0x38>
 81064ea:	4629      	mov	r1, r5
 81064ec:	4630      	mov	r0, r6
 81064ee:	f7ff fd0f 	bl	8105f10 <_Balloc>
 81064f2:	b930      	cbnz	r0, 8106502 <__mdiff+0x2e>
 81064f4:	4b3a      	ldr	r3, [pc, #232]	; (81065e0 <__mdiff+0x10c>)
 81064f6:	4602      	mov	r2, r0
 81064f8:	f240 2137 	movw	r1, #567	; 0x237
 81064fc:	4839      	ldr	r0, [pc, #228]	; (81065e4 <__mdiff+0x110>)
 81064fe:	f000 fbf1 	bl	8106ce4 <__assert_func>
 8106502:	2301      	movs	r3, #1
 8106504:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8106508:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 810650c:	bfa4      	itt	ge
 810650e:	4643      	movge	r3, r8
 8106510:	46a0      	movge	r8, r4
 8106512:	4630      	mov	r0, r6
 8106514:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8106518:	bfa6      	itte	ge
 810651a:	461c      	movge	r4, r3
 810651c:	2500      	movge	r5, #0
 810651e:	2501      	movlt	r5, #1
 8106520:	f7ff fcf6 	bl	8105f10 <_Balloc>
 8106524:	b920      	cbnz	r0, 8106530 <__mdiff+0x5c>
 8106526:	4b2e      	ldr	r3, [pc, #184]	; (81065e0 <__mdiff+0x10c>)
 8106528:	4602      	mov	r2, r0
 810652a:	f240 2145 	movw	r1, #581	; 0x245
 810652e:	e7e5      	b.n	81064fc <__mdiff+0x28>
 8106530:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8106534:	6926      	ldr	r6, [r4, #16]
 8106536:	60c5      	str	r5, [r0, #12]
 8106538:	f104 0914 	add.w	r9, r4, #20
 810653c:	f108 0514 	add.w	r5, r8, #20
 8106540:	f100 0e14 	add.w	lr, r0, #20
 8106544:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8106548:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 810654c:	f108 0210 	add.w	r2, r8, #16
 8106550:	46f2      	mov	sl, lr
 8106552:	2100      	movs	r1, #0
 8106554:	f859 3b04 	ldr.w	r3, [r9], #4
 8106558:	f852 bf04 	ldr.w	fp, [r2, #4]!
 810655c:	fa11 f88b 	uxtah	r8, r1, fp
 8106560:	b299      	uxth	r1, r3
 8106562:	0c1b      	lsrs	r3, r3, #16
 8106564:	eba8 0801 	sub.w	r8, r8, r1
 8106568:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 810656c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 8106570:	fa1f f888 	uxth.w	r8, r8
 8106574:	1419      	asrs	r1, r3, #16
 8106576:	454e      	cmp	r6, r9
 8106578:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 810657c:	f84a 3b04 	str.w	r3, [sl], #4
 8106580:	d8e8      	bhi.n	8106554 <__mdiff+0x80>
 8106582:	1b33      	subs	r3, r6, r4
 8106584:	3b15      	subs	r3, #21
 8106586:	f023 0303 	bic.w	r3, r3, #3
 810658a:	3304      	adds	r3, #4
 810658c:	3415      	adds	r4, #21
 810658e:	42a6      	cmp	r6, r4
 8106590:	bf38      	it	cc
 8106592:	2304      	movcc	r3, #4
 8106594:	441d      	add	r5, r3
 8106596:	4473      	add	r3, lr
 8106598:	469e      	mov	lr, r3
 810659a:	462e      	mov	r6, r5
 810659c:	4566      	cmp	r6, ip
 810659e:	d30e      	bcc.n	81065be <__mdiff+0xea>
 81065a0:	f10c 0203 	add.w	r2, ip, #3
 81065a4:	1b52      	subs	r2, r2, r5
 81065a6:	f022 0203 	bic.w	r2, r2, #3
 81065aa:	3d03      	subs	r5, #3
 81065ac:	45ac      	cmp	ip, r5
 81065ae:	bf38      	it	cc
 81065b0:	2200      	movcc	r2, #0
 81065b2:	4413      	add	r3, r2
 81065b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 81065b8:	b17a      	cbz	r2, 81065da <__mdiff+0x106>
 81065ba:	6107      	str	r7, [r0, #16]
 81065bc:	e7a4      	b.n	8106508 <__mdiff+0x34>
 81065be:	f856 8b04 	ldr.w	r8, [r6], #4
 81065c2:	fa11 f288 	uxtah	r2, r1, r8
 81065c6:	1414      	asrs	r4, r2, #16
 81065c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 81065cc:	b292      	uxth	r2, r2
 81065ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 81065d2:	f84e 2b04 	str.w	r2, [lr], #4
 81065d6:	1421      	asrs	r1, r4, #16
 81065d8:	e7e0      	b.n	810659c <__mdiff+0xc8>
 81065da:	3f01      	subs	r7, #1
 81065dc:	e7ea      	b.n	81065b4 <__mdiff+0xe0>
 81065de:	bf00      	nop
 81065e0:	081075e9 	.word	0x081075e9
 81065e4:	0810765a 	.word	0x0810765a

081065e8 <__ulp>:
 81065e8:	b082      	sub	sp, #8
 81065ea:	ed8d 0b00 	vstr	d0, [sp]
 81065ee:	9a01      	ldr	r2, [sp, #4]
 81065f0:	4b0f      	ldr	r3, [pc, #60]	; (8106630 <__ulp+0x48>)
 81065f2:	4013      	ands	r3, r2
 81065f4:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 81065f8:	2b00      	cmp	r3, #0
 81065fa:	dc08      	bgt.n	810660e <__ulp+0x26>
 81065fc:	425b      	negs	r3, r3
 81065fe:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8106602:	ea4f 5223 	mov.w	r2, r3, asr #20
 8106606:	da04      	bge.n	8106612 <__ulp+0x2a>
 8106608:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 810660c:	4113      	asrs	r3, r2
 810660e:	2200      	movs	r2, #0
 8106610:	e008      	b.n	8106624 <__ulp+0x3c>
 8106612:	f1a2 0314 	sub.w	r3, r2, #20
 8106616:	2b1e      	cmp	r3, #30
 8106618:	bfda      	itte	le
 810661a:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 810661e:	40da      	lsrle	r2, r3
 8106620:	2201      	movgt	r2, #1
 8106622:	2300      	movs	r3, #0
 8106624:	4619      	mov	r1, r3
 8106626:	4610      	mov	r0, r2
 8106628:	ec41 0b10 	vmov	d0, r0, r1
 810662c:	b002      	add	sp, #8
 810662e:	4770      	bx	lr
 8106630:	7ff00000 	.word	0x7ff00000

08106634 <__b2d>:
 8106634:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106638:	6906      	ldr	r6, [r0, #16]
 810663a:	f100 0814 	add.w	r8, r0, #20
 810663e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8106642:	1f37      	subs	r7, r6, #4
 8106644:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8106648:	4610      	mov	r0, r2
 810664a:	f7ff fd53 	bl	81060f4 <__hi0bits>
 810664e:	f1c0 0320 	rsb	r3, r0, #32
 8106652:	280a      	cmp	r0, #10
 8106654:	600b      	str	r3, [r1, #0]
 8106656:	491b      	ldr	r1, [pc, #108]	; (81066c4 <__b2d+0x90>)
 8106658:	dc15      	bgt.n	8106686 <__b2d+0x52>
 810665a:	f1c0 0c0b 	rsb	ip, r0, #11
 810665e:	fa22 f30c 	lsr.w	r3, r2, ip
 8106662:	45b8      	cmp	r8, r7
 8106664:	ea43 0501 	orr.w	r5, r3, r1
 8106668:	bf34      	ite	cc
 810666a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810666e:	2300      	movcs	r3, #0
 8106670:	3015      	adds	r0, #21
 8106672:	fa02 f000 	lsl.w	r0, r2, r0
 8106676:	fa23 f30c 	lsr.w	r3, r3, ip
 810667a:	4303      	orrs	r3, r0
 810667c:	461c      	mov	r4, r3
 810667e:	ec45 4b10 	vmov	d0, r4, r5
 8106682:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8106686:	45b8      	cmp	r8, r7
 8106688:	bf3a      	itte	cc
 810668a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 810668e:	f1a6 0708 	subcc.w	r7, r6, #8
 8106692:	2300      	movcs	r3, #0
 8106694:	380b      	subs	r0, #11
 8106696:	d012      	beq.n	81066be <__b2d+0x8a>
 8106698:	f1c0 0120 	rsb	r1, r0, #32
 810669c:	fa23 f401 	lsr.w	r4, r3, r1
 81066a0:	4082      	lsls	r2, r0
 81066a2:	4322      	orrs	r2, r4
 81066a4:	4547      	cmp	r7, r8
 81066a6:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 81066aa:	bf8c      	ite	hi
 81066ac:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 81066b0:	2200      	movls	r2, #0
 81066b2:	4083      	lsls	r3, r0
 81066b4:	40ca      	lsrs	r2, r1
 81066b6:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 81066ba:	4313      	orrs	r3, r2
 81066bc:	e7de      	b.n	810667c <__b2d+0x48>
 81066be:	ea42 0501 	orr.w	r5, r2, r1
 81066c2:	e7db      	b.n	810667c <__b2d+0x48>
 81066c4:	3ff00000 	.word	0x3ff00000

081066c8 <__d2b>:
 81066c8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 81066cc:	460f      	mov	r7, r1
 81066ce:	2101      	movs	r1, #1
 81066d0:	ec59 8b10 	vmov	r8, r9, d0
 81066d4:	4616      	mov	r6, r2
 81066d6:	f7ff fc1b 	bl	8105f10 <_Balloc>
 81066da:	4604      	mov	r4, r0
 81066dc:	b930      	cbnz	r0, 81066ec <__d2b+0x24>
 81066de:	4602      	mov	r2, r0
 81066e0:	4b24      	ldr	r3, [pc, #144]	; (8106774 <__d2b+0xac>)
 81066e2:	4825      	ldr	r0, [pc, #148]	; (8106778 <__d2b+0xb0>)
 81066e4:	f240 310f 	movw	r1, #783	; 0x30f
 81066e8:	f000 fafc 	bl	8106ce4 <__assert_func>
 81066ec:	f3c9 550a 	ubfx	r5, r9, #20, #11
 81066f0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 81066f4:	bb2d      	cbnz	r5, 8106742 <__d2b+0x7a>
 81066f6:	9301      	str	r3, [sp, #4]
 81066f8:	f1b8 0300 	subs.w	r3, r8, #0
 81066fc:	d026      	beq.n	810674c <__d2b+0x84>
 81066fe:	4668      	mov	r0, sp
 8106700:	9300      	str	r3, [sp, #0]
 8106702:	f7ff fd17 	bl	8106134 <__lo0bits>
 8106706:	e9dd 1200 	ldrd	r1, r2, [sp]
 810670a:	b1e8      	cbz	r0, 8106748 <__d2b+0x80>
 810670c:	f1c0 0320 	rsb	r3, r0, #32
 8106710:	fa02 f303 	lsl.w	r3, r2, r3
 8106714:	430b      	orrs	r3, r1
 8106716:	40c2      	lsrs	r2, r0
 8106718:	6163      	str	r3, [r4, #20]
 810671a:	9201      	str	r2, [sp, #4]
 810671c:	9b01      	ldr	r3, [sp, #4]
 810671e:	61a3      	str	r3, [r4, #24]
 8106720:	2b00      	cmp	r3, #0
 8106722:	bf14      	ite	ne
 8106724:	2202      	movne	r2, #2
 8106726:	2201      	moveq	r2, #1
 8106728:	6122      	str	r2, [r4, #16]
 810672a:	b1bd      	cbz	r5, 810675c <__d2b+0x94>
 810672c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8106730:	4405      	add	r5, r0
 8106732:	603d      	str	r5, [r7, #0]
 8106734:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8106738:	6030      	str	r0, [r6, #0]
 810673a:	4620      	mov	r0, r4
 810673c:	b003      	add	sp, #12
 810673e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8106742:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8106746:	e7d6      	b.n	81066f6 <__d2b+0x2e>
 8106748:	6161      	str	r1, [r4, #20]
 810674a:	e7e7      	b.n	810671c <__d2b+0x54>
 810674c:	a801      	add	r0, sp, #4
 810674e:	f7ff fcf1 	bl	8106134 <__lo0bits>
 8106752:	9b01      	ldr	r3, [sp, #4]
 8106754:	6163      	str	r3, [r4, #20]
 8106756:	3020      	adds	r0, #32
 8106758:	2201      	movs	r2, #1
 810675a:	e7e5      	b.n	8106728 <__d2b+0x60>
 810675c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8106760:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8106764:	6038      	str	r0, [r7, #0]
 8106766:	6918      	ldr	r0, [r3, #16]
 8106768:	f7ff fcc4 	bl	81060f4 <__hi0bits>
 810676c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8106770:	e7e2      	b.n	8106738 <__d2b+0x70>
 8106772:	bf00      	nop
 8106774:	081075e9 	.word	0x081075e9
 8106778:	0810765a 	.word	0x0810765a

0810677c <__ratio>:
 810677c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106780:	4688      	mov	r8, r1
 8106782:	4669      	mov	r1, sp
 8106784:	4681      	mov	r9, r0
 8106786:	f7ff ff55 	bl	8106634 <__b2d>
 810678a:	a901      	add	r1, sp, #4
 810678c:	4640      	mov	r0, r8
 810678e:	ec55 4b10 	vmov	r4, r5, d0
 8106792:	f7ff ff4f 	bl	8106634 <__b2d>
 8106796:	f8d9 3010 	ldr.w	r3, [r9, #16]
 810679a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 810679e:	eba3 0c02 	sub.w	ip, r3, r2
 81067a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 81067a6:	1a9b      	subs	r3, r3, r2
 81067a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 81067ac:	ec51 0b10 	vmov	r0, r1, d0
 81067b0:	2b00      	cmp	r3, #0
 81067b2:	bfd6      	itet	le
 81067b4:	460a      	movle	r2, r1
 81067b6:	462a      	movgt	r2, r5
 81067b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 81067bc:	468b      	mov	fp, r1
 81067be:	462f      	mov	r7, r5
 81067c0:	bfd4      	ite	le
 81067c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 81067c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 81067ca:	4620      	mov	r0, r4
 81067cc:	ee10 2a10 	vmov	r2, s0
 81067d0:	465b      	mov	r3, fp
 81067d2:	4639      	mov	r1, r7
 81067d4:	f7fa f8c2 	bl	810095c <__aeabi_ddiv>
 81067d8:	ec41 0b10 	vmov	d0, r0, r1
 81067dc:	b003      	add	sp, #12
 81067de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

081067e2 <__copybits>:
 81067e2:	3901      	subs	r1, #1
 81067e4:	b570      	push	{r4, r5, r6, lr}
 81067e6:	1149      	asrs	r1, r1, #5
 81067e8:	6914      	ldr	r4, [r2, #16]
 81067ea:	3101      	adds	r1, #1
 81067ec:	f102 0314 	add.w	r3, r2, #20
 81067f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 81067f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 81067f8:	1f05      	subs	r5, r0, #4
 81067fa:	42a3      	cmp	r3, r4
 81067fc:	d30c      	bcc.n	8106818 <__copybits+0x36>
 81067fe:	1aa3      	subs	r3, r4, r2
 8106800:	3b11      	subs	r3, #17
 8106802:	f023 0303 	bic.w	r3, r3, #3
 8106806:	3211      	adds	r2, #17
 8106808:	42a2      	cmp	r2, r4
 810680a:	bf88      	it	hi
 810680c:	2300      	movhi	r3, #0
 810680e:	4418      	add	r0, r3
 8106810:	2300      	movs	r3, #0
 8106812:	4288      	cmp	r0, r1
 8106814:	d305      	bcc.n	8106822 <__copybits+0x40>
 8106816:	bd70      	pop	{r4, r5, r6, pc}
 8106818:	f853 6b04 	ldr.w	r6, [r3], #4
 810681c:	f845 6f04 	str.w	r6, [r5, #4]!
 8106820:	e7eb      	b.n	81067fa <__copybits+0x18>
 8106822:	f840 3b04 	str.w	r3, [r0], #4
 8106826:	e7f4      	b.n	8106812 <__copybits+0x30>

08106828 <__any_on>:
 8106828:	f100 0214 	add.w	r2, r0, #20
 810682c:	6900      	ldr	r0, [r0, #16]
 810682e:	114b      	asrs	r3, r1, #5
 8106830:	4298      	cmp	r0, r3
 8106832:	b510      	push	{r4, lr}
 8106834:	db11      	blt.n	810685a <__any_on+0x32>
 8106836:	dd0a      	ble.n	810684e <__any_on+0x26>
 8106838:	f011 011f 	ands.w	r1, r1, #31
 810683c:	d007      	beq.n	810684e <__any_on+0x26>
 810683e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8106842:	fa24 f001 	lsr.w	r0, r4, r1
 8106846:	fa00 f101 	lsl.w	r1, r0, r1
 810684a:	428c      	cmp	r4, r1
 810684c:	d10b      	bne.n	8106866 <__any_on+0x3e>
 810684e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8106852:	4293      	cmp	r3, r2
 8106854:	d803      	bhi.n	810685e <__any_on+0x36>
 8106856:	2000      	movs	r0, #0
 8106858:	bd10      	pop	{r4, pc}
 810685a:	4603      	mov	r3, r0
 810685c:	e7f7      	b.n	810684e <__any_on+0x26>
 810685e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8106862:	2900      	cmp	r1, #0
 8106864:	d0f5      	beq.n	8106852 <__any_on+0x2a>
 8106866:	2001      	movs	r0, #1
 8106868:	e7f6      	b.n	8106858 <__any_on+0x30>

0810686a <__ascii_wctomb>:
 810686a:	b149      	cbz	r1, 8106880 <__ascii_wctomb+0x16>
 810686c:	2aff      	cmp	r2, #255	; 0xff
 810686e:	bf85      	ittet	hi
 8106870:	238a      	movhi	r3, #138	; 0x8a
 8106872:	6003      	strhi	r3, [r0, #0]
 8106874:	700a      	strbls	r2, [r1, #0]
 8106876:	f04f 30ff 	movhi.w	r0, #4294967295
 810687a:	bf98      	it	ls
 810687c:	2001      	movls	r0, #1
 810687e:	4770      	bx	lr
 8106880:	4608      	mov	r0, r1
 8106882:	4770      	bx	lr

08106884 <__ssputs_r>:
 8106884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8106888:	688e      	ldr	r6, [r1, #8]
 810688a:	461f      	mov	r7, r3
 810688c:	42be      	cmp	r6, r7
 810688e:	680b      	ldr	r3, [r1, #0]
 8106890:	4682      	mov	sl, r0
 8106892:	460c      	mov	r4, r1
 8106894:	4690      	mov	r8, r2
 8106896:	d82c      	bhi.n	81068f2 <__ssputs_r+0x6e>
 8106898:	898a      	ldrh	r2, [r1, #12]
 810689a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 810689e:	d026      	beq.n	81068ee <__ssputs_r+0x6a>
 81068a0:	6965      	ldr	r5, [r4, #20]
 81068a2:	6909      	ldr	r1, [r1, #16]
 81068a4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 81068a8:	eba3 0901 	sub.w	r9, r3, r1
 81068ac:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 81068b0:	1c7b      	adds	r3, r7, #1
 81068b2:	444b      	add	r3, r9
 81068b4:	106d      	asrs	r5, r5, #1
 81068b6:	429d      	cmp	r5, r3
 81068b8:	bf38      	it	cc
 81068ba:	461d      	movcc	r5, r3
 81068bc:	0553      	lsls	r3, r2, #21
 81068be:	d527      	bpl.n	8106910 <__ssputs_r+0x8c>
 81068c0:	4629      	mov	r1, r5
 81068c2:	f7ff fa87 	bl	8105dd4 <_malloc_r>
 81068c6:	4606      	mov	r6, r0
 81068c8:	b360      	cbz	r0, 8106924 <__ssputs_r+0xa0>
 81068ca:	6921      	ldr	r1, [r4, #16]
 81068cc:	464a      	mov	r2, r9
 81068ce:	f7fe f81a 	bl	8104906 <memcpy>
 81068d2:	89a3      	ldrh	r3, [r4, #12]
 81068d4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 81068d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81068dc:	81a3      	strh	r3, [r4, #12]
 81068de:	6126      	str	r6, [r4, #16]
 81068e0:	6165      	str	r5, [r4, #20]
 81068e2:	444e      	add	r6, r9
 81068e4:	eba5 0509 	sub.w	r5, r5, r9
 81068e8:	6026      	str	r6, [r4, #0]
 81068ea:	60a5      	str	r5, [r4, #8]
 81068ec:	463e      	mov	r6, r7
 81068ee:	42be      	cmp	r6, r7
 81068f0:	d900      	bls.n	81068f4 <__ssputs_r+0x70>
 81068f2:	463e      	mov	r6, r7
 81068f4:	6820      	ldr	r0, [r4, #0]
 81068f6:	4632      	mov	r2, r6
 81068f8:	4641      	mov	r1, r8
 81068fa:	f000 f9c9 	bl	8106c90 <memmove>
 81068fe:	68a3      	ldr	r3, [r4, #8]
 8106900:	1b9b      	subs	r3, r3, r6
 8106902:	60a3      	str	r3, [r4, #8]
 8106904:	6823      	ldr	r3, [r4, #0]
 8106906:	4433      	add	r3, r6
 8106908:	6023      	str	r3, [r4, #0]
 810690a:	2000      	movs	r0, #0
 810690c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8106910:	462a      	mov	r2, r5
 8106912:	f000 fa1b 	bl	8106d4c <_realloc_r>
 8106916:	4606      	mov	r6, r0
 8106918:	2800      	cmp	r0, #0
 810691a:	d1e0      	bne.n	81068de <__ssputs_r+0x5a>
 810691c:	6921      	ldr	r1, [r4, #16]
 810691e:	4650      	mov	r0, sl
 8106920:	f7fe fe8c 	bl	810563c <_free_r>
 8106924:	230c      	movs	r3, #12
 8106926:	f8ca 3000 	str.w	r3, [sl]
 810692a:	89a3      	ldrh	r3, [r4, #12]
 810692c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8106930:	81a3      	strh	r3, [r4, #12]
 8106932:	f04f 30ff 	mov.w	r0, #4294967295
 8106936:	e7e9      	b.n	810690c <__ssputs_r+0x88>

08106938 <_svfiprintf_r>:
 8106938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 810693c:	4698      	mov	r8, r3
 810693e:	898b      	ldrh	r3, [r1, #12]
 8106940:	061b      	lsls	r3, r3, #24
 8106942:	b09d      	sub	sp, #116	; 0x74
 8106944:	4607      	mov	r7, r0
 8106946:	460d      	mov	r5, r1
 8106948:	4614      	mov	r4, r2
 810694a:	d50e      	bpl.n	810696a <_svfiprintf_r+0x32>
 810694c:	690b      	ldr	r3, [r1, #16]
 810694e:	b963      	cbnz	r3, 810696a <_svfiprintf_r+0x32>
 8106950:	2140      	movs	r1, #64	; 0x40
 8106952:	f7ff fa3f 	bl	8105dd4 <_malloc_r>
 8106956:	6028      	str	r0, [r5, #0]
 8106958:	6128      	str	r0, [r5, #16]
 810695a:	b920      	cbnz	r0, 8106966 <_svfiprintf_r+0x2e>
 810695c:	230c      	movs	r3, #12
 810695e:	603b      	str	r3, [r7, #0]
 8106960:	f04f 30ff 	mov.w	r0, #4294967295
 8106964:	e0d0      	b.n	8106b08 <_svfiprintf_r+0x1d0>
 8106966:	2340      	movs	r3, #64	; 0x40
 8106968:	616b      	str	r3, [r5, #20]
 810696a:	2300      	movs	r3, #0
 810696c:	9309      	str	r3, [sp, #36]	; 0x24
 810696e:	2320      	movs	r3, #32
 8106970:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8106974:	f8cd 800c 	str.w	r8, [sp, #12]
 8106978:	2330      	movs	r3, #48	; 0x30
 810697a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8106b20 <_svfiprintf_r+0x1e8>
 810697e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8106982:	f04f 0901 	mov.w	r9, #1
 8106986:	4623      	mov	r3, r4
 8106988:	469a      	mov	sl, r3
 810698a:	f813 2b01 	ldrb.w	r2, [r3], #1
 810698e:	b10a      	cbz	r2, 8106994 <_svfiprintf_r+0x5c>
 8106990:	2a25      	cmp	r2, #37	; 0x25
 8106992:	d1f9      	bne.n	8106988 <_svfiprintf_r+0x50>
 8106994:	ebba 0b04 	subs.w	fp, sl, r4
 8106998:	d00b      	beq.n	81069b2 <_svfiprintf_r+0x7a>
 810699a:	465b      	mov	r3, fp
 810699c:	4622      	mov	r2, r4
 810699e:	4629      	mov	r1, r5
 81069a0:	4638      	mov	r0, r7
 81069a2:	f7ff ff6f 	bl	8106884 <__ssputs_r>
 81069a6:	3001      	adds	r0, #1
 81069a8:	f000 80a9 	beq.w	8106afe <_svfiprintf_r+0x1c6>
 81069ac:	9a09      	ldr	r2, [sp, #36]	; 0x24
 81069ae:	445a      	add	r2, fp
 81069b0:	9209      	str	r2, [sp, #36]	; 0x24
 81069b2:	f89a 3000 	ldrb.w	r3, [sl]
 81069b6:	2b00      	cmp	r3, #0
 81069b8:	f000 80a1 	beq.w	8106afe <_svfiprintf_r+0x1c6>
 81069bc:	2300      	movs	r3, #0
 81069be:	f04f 32ff 	mov.w	r2, #4294967295
 81069c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 81069c6:	f10a 0a01 	add.w	sl, sl, #1
 81069ca:	9304      	str	r3, [sp, #16]
 81069cc:	9307      	str	r3, [sp, #28]
 81069ce:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 81069d2:	931a      	str	r3, [sp, #104]	; 0x68
 81069d4:	4654      	mov	r4, sl
 81069d6:	2205      	movs	r2, #5
 81069d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 81069dc:	4850      	ldr	r0, [pc, #320]	; (8106b20 <_svfiprintf_r+0x1e8>)
 81069de:	f7f9 fc7f 	bl	81002e0 <memchr>
 81069e2:	9a04      	ldr	r2, [sp, #16]
 81069e4:	b9d8      	cbnz	r0, 8106a1e <_svfiprintf_r+0xe6>
 81069e6:	06d0      	lsls	r0, r2, #27
 81069e8:	bf44      	itt	mi
 81069ea:	2320      	movmi	r3, #32
 81069ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81069f0:	0711      	lsls	r1, r2, #28
 81069f2:	bf44      	itt	mi
 81069f4:	232b      	movmi	r3, #43	; 0x2b
 81069f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 81069fa:	f89a 3000 	ldrb.w	r3, [sl]
 81069fe:	2b2a      	cmp	r3, #42	; 0x2a
 8106a00:	d015      	beq.n	8106a2e <_svfiprintf_r+0xf6>
 8106a02:	9a07      	ldr	r2, [sp, #28]
 8106a04:	4654      	mov	r4, sl
 8106a06:	2000      	movs	r0, #0
 8106a08:	f04f 0c0a 	mov.w	ip, #10
 8106a0c:	4621      	mov	r1, r4
 8106a0e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8106a12:	3b30      	subs	r3, #48	; 0x30
 8106a14:	2b09      	cmp	r3, #9
 8106a16:	d94d      	bls.n	8106ab4 <_svfiprintf_r+0x17c>
 8106a18:	b1b0      	cbz	r0, 8106a48 <_svfiprintf_r+0x110>
 8106a1a:	9207      	str	r2, [sp, #28]
 8106a1c:	e014      	b.n	8106a48 <_svfiprintf_r+0x110>
 8106a1e:	eba0 0308 	sub.w	r3, r0, r8
 8106a22:	fa09 f303 	lsl.w	r3, r9, r3
 8106a26:	4313      	orrs	r3, r2
 8106a28:	9304      	str	r3, [sp, #16]
 8106a2a:	46a2      	mov	sl, r4
 8106a2c:	e7d2      	b.n	81069d4 <_svfiprintf_r+0x9c>
 8106a2e:	9b03      	ldr	r3, [sp, #12]
 8106a30:	1d19      	adds	r1, r3, #4
 8106a32:	681b      	ldr	r3, [r3, #0]
 8106a34:	9103      	str	r1, [sp, #12]
 8106a36:	2b00      	cmp	r3, #0
 8106a38:	bfbb      	ittet	lt
 8106a3a:	425b      	neglt	r3, r3
 8106a3c:	f042 0202 	orrlt.w	r2, r2, #2
 8106a40:	9307      	strge	r3, [sp, #28]
 8106a42:	9307      	strlt	r3, [sp, #28]
 8106a44:	bfb8      	it	lt
 8106a46:	9204      	strlt	r2, [sp, #16]
 8106a48:	7823      	ldrb	r3, [r4, #0]
 8106a4a:	2b2e      	cmp	r3, #46	; 0x2e
 8106a4c:	d10c      	bne.n	8106a68 <_svfiprintf_r+0x130>
 8106a4e:	7863      	ldrb	r3, [r4, #1]
 8106a50:	2b2a      	cmp	r3, #42	; 0x2a
 8106a52:	d134      	bne.n	8106abe <_svfiprintf_r+0x186>
 8106a54:	9b03      	ldr	r3, [sp, #12]
 8106a56:	1d1a      	adds	r2, r3, #4
 8106a58:	681b      	ldr	r3, [r3, #0]
 8106a5a:	9203      	str	r2, [sp, #12]
 8106a5c:	2b00      	cmp	r3, #0
 8106a5e:	bfb8      	it	lt
 8106a60:	f04f 33ff 	movlt.w	r3, #4294967295
 8106a64:	3402      	adds	r4, #2
 8106a66:	9305      	str	r3, [sp, #20]
 8106a68:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8106b30 <_svfiprintf_r+0x1f8>
 8106a6c:	7821      	ldrb	r1, [r4, #0]
 8106a6e:	2203      	movs	r2, #3
 8106a70:	4650      	mov	r0, sl
 8106a72:	f7f9 fc35 	bl	81002e0 <memchr>
 8106a76:	b138      	cbz	r0, 8106a88 <_svfiprintf_r+0x150>
 8106a78:	9b04      	ldr	r3, [sp, #16]
 8106a7a:	eba0 000a 	sub.w	r0, r0, sl
 8106a7e:	2240      	movs	r2, #64	; 0x40
 8106a80:	4082      	lsls	r2, r0
 8106a82:	4313      	orrs	r3, r2
 8106a84:	3401      	adds	r4, #1
 8106a86:	9304      	str	r3, [sp, #16]
 8106a88:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106a8c:	4825      	ldr	r0, [pc, #148]	; (8106b24 <_svfiprintf_r+0x1ec>)
 8106a8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8106a92:	2206      	movs	r2, #6
 8106a94:	f7f9 fc24 	bl	81002e0 <memchr>
 8106a98:	2800      	cmp	r0, #0
 8106a9a:	d038      	beq.n	8106b0e <_svfiprintf_r+0x1d6>
 8106a9c:	4b22      	ldr	r3, [pc, #136]	; (8106b28 <_svfiprintf_r+0x1f0>)
 8106a9e:	bb1b      	cbnz	r3, 8106ae8 <_svfiprintf_r+0x1b0>
 8106aa0:	9b03      	ldr	r3, [sp, #12]
 8106aa2:	3307      	adds	r3, #7
 8106aa4:	f023 0307 	bic.w	r3, r3, #7
 8106aa8:	3308      	adds	r3, #8
 8106aaa:	9303      	str	r3, [sp, #12]
 8106aac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106aae:	4433      	add	r3, r6
 8106ab0:	9309      	str	r3, [sp, #36]	; 0x24
 8106ab2:	e768      	b.n	8106986 <_svfiprintf_r+0x4e>
 8106ab4:	fb0c 3202 	mla	r2, ip, r2, r3
 8106ab8:	460c      	mov	r4, r1
 8106aba:	2001      	movs	r0, #1
 8106abc:	e7a6      	b.n	8106a0c <_svfiprintf_r+0xd4>
 8106abe:	2300      	movs	r3, #0
 8106ac0:	3401      	adds	r4, #1
 8106ac2:	9305      	str	r3, [sp, #20]
 8106ac4:	4619      	mov	r1, r3
 8106ac6:	f04f 0c0a 	mov.w	ip, #10
 8106aca:	4620      	mov	r0, r4
 8106acc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8106ad0:	3a30      	subs	r2, #48	; 0x30
 8106ad2:	2a09      	cmp	r2, #9
 8106ad4:	d903      	bls.n	8106ade <_svfiprintf_r+0x1a6>
 8106ad6:	2b00      	cmp	r3, #0
 8106ad8:	d0c6      	beq.n	8106a68 <_svfiprintf_r+0x130>
 8106ada:	9105      	str	r1, [sp, #20]
 8106adc:	e7c4      	b.n	8106a68 <_svfiprintf_r+0x130>
 8106ade:	fb0c 2101 	mla	r1, ip, r1, r2
 8106ae2:	4604      	mov	r4, r0
 8106ae4:	2301      	movs	r3, #1
 8106ae6:	e7f0      	b.n	8106aca <_svfiprintf_r+0x192>
 8106ae8:	ab03      	add	r3, sp, #12
 8106aea:	9300      	str	r3, [sp, #0]
 8106aec:	462a      	mov	r2, r5
 8106aee:	4b0f      	ldr	r3, [pc, #60]	; (8106b2c <_svfiprintf_r+0x1f4>)
 8106af0:	a904      	add	r1, sp, #16
 8106af2:	4638      	mov	r0, r7
 8106af4:	f7fd f942 	bl	8103d7c <_printf_float>
 8106af8:	1c42      	adds	r2, r0, #1
 8106afa:	4606      	mov	r6, r0
 8106afc:	d1d6      	bne.n	8106aac <_svfiprintf_r+0x174>
 8106afe:	89ab      	ldrh	r3, [r5, #12]
 8106b00:	065b      	lsls	r3, r3, #25
 8106b02:	f53f af2d 	bmi.w	8106960 <_svfiprintf_r+0x28>
 8106b06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8106b08:	b01d      	add	sp, #116	; 0x74
 8106b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106b0e:	ab03      	add	r3, sp, #12
 8106b10:	9300      	str	r3, [sp, #0]
 8106b12:	462a      	mov	r2, r5
 8106b14:	4b05      	ldr	r3, [pc, #20]	; (8106b2c <_svfiprintf_r+0x1f4>)
 8106b16:	a904      	add	r1, sp, #16
 8106b18:	4638      	mov	r0, r7
 8106b1a:	f7fd fbd3 	bl	81042c4 <_printf_i>
 8106b1e:	e7eb      	b.n	8106af8 <_svfiprintf_r+0x1c0>
 8106b20:	081077b4 	.word	0x081077b4
 8106b24:	081077be 	.word	0x081077be
 8106b28:	08103d7d 	.word	0x08103d7d
 8106b2c:	08106885 	.word	0x08106885
 8106b30:	081077ba 	.word	0x081077ba

08106b34 <__sflush_r>:
 8106b34:	898a      	ldrh	r2, [r1, #12]
 8106b36:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106b3a:	4605      	mov	r5, r0
 8106b3c:	0710      	lsls	r0, r2, #28
 8106b3e:	460c      	mov	r4, r1
 8106b40:	d458      	bmi.n	8106bf4 <__sflush_r+0xc0>
 8106b42:	684b      	ldr	r3, [r1, #4]
 8106b44:	2b00      	cmp	r3, #0
 8106b46:	dc05      	bgt.n	8106b54 <__sflush_r+0x20>
 8106b48:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8106b4a:	2b00      	cmp	r3, #0
 8106b4c:	dc02      	bgt.n	8106b54 <__sflush_r+0x20>
 8106b4e:	2000      	movs	r0, #0
 8106b50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8106b54:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8106b56:	2e00      	cmp	r6, #0
 8106b58:	d0f9      	beq.n	8106b4e <__sflush_r+0x1a>
 8106b5a:	2300      	movs	r3, #0
 8106b5c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8106b60:	682f      	ldr	r7, [r5, #0]
 8106b62:	6a21      	ldr	r1, [r4, #32]
 8106b64:	602b      	str	r3, [r5, #0]
 8106b66:	d032      	beq.n	8106bce <__sflush_r+0x9a>
 8106b68:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8106b6a:	89a3      	ldrh	r3, [r4, #12]
 8106b6c:	075a      	lsls	r2, r3, #29
 8106b6e:	d505      	bpl.n	8106b7c <__sflush_r+0x48>
 8106b70:	6863      	ldr	r3, [r4, #4]
 8106b72:	1ac0      	subs	r0, r0, r3
 8106b74:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8106b76:	b10b      	cbz	r3, 8106b7c <__sflush_r+0x48>
 8106b78:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8106b7a:	1ac0      	subs	r0, r0, r3
 8106b7c:	2300      	movs	r3, #0
 8106b7e:	4602      	mov	r2, r0
 8106b80:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8106b82:	6a21      	ldr	r1, [r4, #32]
 8106b84:	4628      	mov	r0, r5
 8106b86:	47b0      	blx	r6
 8106b88:	1c43      	adds	r3, r0, #1
 8106b8a:	89a3      	ldrh	r3, [r4, #12]
 8106b8c:	d106      	bne.n	8106b9c <__sflush_r+0x68>
 8106b8e:	6829      	ldr	r1, [r5, #0]
 8106b90:	291d      	cmp	r1, #29
 8106b92:	d82b      	bhi.n	8106bec <__sflush_r+0xb8>
 8106b94:	4a29      	ldr	r2, [pc, #164]	; (8106c3c <__sflush_r+0x108>)
 8106b96:	410a      	asrs	r2, r1
 8106b98:	07d6      	lsls	r6, r2, #31
 8106b9a:	d427      	bmi.n	8106bec <__sflush_r+0xb8>
 8106b9c:	2200      	movs	r2, #0
 8106b9e:	6062      	str	r2, [r4, #4]
 8106ba0:	04d9      	lsls	r1, r3, #19
 8106ba2:	6922      	ldr	r2, [r4, #16]
 8106ba4:	6022      	str	r2, [r4, #0]
 8106ba6:	d504      	bpl.n	8106bb2 <__sflush_r+0x7e>
 8106ba8:	1c42      	adds	r2, r0, #1
 8106baa:	d101      	bne.n	8106bb0 <__sflush_r+0x7c>
 8106bac:	682b      	ldr	r3, [r5, #0]
 8106bae:	b903      	cbnz	r3, 8106bb2 <__sflush_r+0x7e>
 8106bb0:	6560      	str	r0, [r4, #84]	; 0x54
 8106bb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8106bb4:	602f      	str	r7, [r5, #0]
 8106bb6:	2900      	cmp	r1, #0
 8106bb8:	d0c9      	beq.n	8106b4e <__sflush_r+0x1a>
 8106bba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8106bbe:	4299      	cmp	r1, r3
 8106bc0:	d002      	beq.n	8106bc8 <__sflush_r+0x94>
 8106bc2:	4628      	mov	r0, r5
 8106bc4:	f7fe fd3a 	bl	810563c <_free_r>
 8106bc8:	2000      	movs	r0, #0
 8106bca:	6360      	str	r0, [r4, #52]	; 0x34
 8106bcc:	e7c0      	b.n	8106b50 <__sflush_r+0x1c>
 8106bce:	2301      	movs	r3, #1
 8106bd0:	4628      	mov	r0, r5
 8106bd2:	47b0      	blx	r6
 8106bd4:	1c41      	adds	r1, r0, #1
 8106bd6:	d1c8      	bne.n	8106b6a <__sflush_r+0x36>
 8106bd8:	682b      	ldr	r3, [r5, #0]
 8106bda:	2b00      	cmp	r3, #0
 8106bdc:	d0c5      	beq.n	8106b6a <__sflush_r+0x36>
 8106bde:	2b1d      	cmp	r3, #29
 8106be0:	d001      	beq.n	8106be6 <__sflush_r+0xb2>
 8106be2:	2b16      	cmp	r3, #22
 8106be4:	d101      	bne.n	8106bea <__sflush_r+0xb6>
 8106be6:	602f      	str	r7, [r5, #0]
 8106be8:	e7b1      	b.n	8106b4e <__sflush_r+0x1a>
 8106bea:	89a3      	ldrh	r3, [r4, #12]
 8106bec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8106bf0:	81a3      	strh	r3, [r4, #12]
 8106bf2:	e7ad      	b.n	8106b50 <__sflush_r+0x1c>
 8106bf4:	690f      	ldr	r7, [r1, #16]
 8106bf6:	2f00      	cmp	r7, #0
 8106bf8:	d0a9      	beq.n	8106b4e <__sflush_r+0x1a>
 8106bfa:	0793      	lsls	r3, r2, #30
 8106bfc:	680e      	ldr	r6, [r1, #0]
 8106bfe:	bf08      	it	eq
 8106c00:	694b      	ldreq	r3, [r1, #20]
 8106c02:	600f      	str	r7, [r1, #0]
 8106c04:	bf18      	it	ne
 8106c06:	2300      	movne	r3, #0
 8106c08:	eba6 0807 	sub.w	r8, r6, r7
 8106c0c:	608b      	str	r3, [r1, #8]
 8106c0e:	f1b8 0f00 	cmp.w	r8, #0
 8106c12:	dd9c      	ble.n	8106b4e <__sflush_r+0x1a>
 8106c14:	6a21      	ldr	r1, [r4, #32]
 8106c16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8106c18:	4643      	mov	r3, r8
 8106c1a:	463a      	mov	r2, r7
 8106c1c:	4628      	mov	r0, r5
 8106c1e:	47b0      	blx	r6
 8106c20:	2800      	cmp	r0, #0
 8106c22:	dc06      	bgt.n	8106c32 <__sflush_r+0xfe>
 8106c24:	89a3      	ldrh	r3, [r4, #12]
 8106c26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8106c2a:	81a3      	strh	r3, [r4, #12]
 8106c2c:	f04f 30ff 	mov.w	r0, #4294967295
 8106c30:	e78e      	b.n	8106b50 <__sflush_r+0x1c>
 8106c32:	4407      	add	r7, r0
 8106c34:	eba8 0800 	sub.w	r8, r8, r0
 8106c38:	e7e9      	b.n	8106c0e <__sflush_r+0xda>
 8106c3a:	bf00      	nop
 8106c3c:	dfbffffe 	.word	0xdfbffffe

08106c40 <_fflush_r>:
 8106c40:	b538      	push	{r3, r4, r5, lr}
 8106c42:	690b      	ldr	r3, [r1, #16]
 8106c44:	4605      	mov	r5, r0
 8106c46:	460c      	mov	r4, r1
 8106c48:	b913      	cbnz	r3, 8106c50 <_fflush_r+0x10>
 8106c4a:	2500      	movs	r5, #0
 8106c4c:	4628      	mov	r0, r5
 8106c4e:	bd38      	pop	{r3, r4, r5, pc}
 8106c50:	b118      	cbz	r0, 8106c5a <_fflush_r+0x1a>
 8106c52:	6a03      	ldr	r3, [r0, #32]
 8106c54:	b90b      	cbnz	r3, 8106c5a <_fflush_r+0x1a>
 8106c56:	f7fd fce3 	bl	8104620 <__sinit>
 8106c5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8106c5e:	2b00      	cmp	r3, #0
 8106c60:	d0f3      	beq.n	8106c4a <_fflush_r+0xa>
 8106c62:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8106c64:	07d0      	lsls	r0, r2, #31
 8106c66:	d404      	bmi.n	8106c72 <_fflush_r+0x32>
 8106c68:	0599      	lsls	r1, r3, #22
 8106c6a:	d402      	bmi.n	8106c72 <_fflush_r+0x32>
 8106c6c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8106c6e:	f7fd fe48 	bl	8104902 <__retarget_lock_acquire_recursive>
 8106c72:	4628      	mov	r0, r5
 8106c74:	4621      	mov	r1, r4
 8106c76:	f7ff ff5d 	bl	8106b34 <__sflush_r>
 8106c7a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8106c7c:	07da      	lsls	r2, r3, #31
 8106c7e:	4605      	mov	r5, r0
 8106c80:	d4e4      	bmi.n	8106c4c <_fflush_r+0xc>
 8106c82:	89a3      	ldrh	r3, [r4, #12]
 8106c84:	059b      	lsls	r3, r3, #22
 8106c86:	d4e1      	bmi.n	8106c4c <_fflush_r+0xc>
 8106c88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8106c8a:	f7fd fe3b 	bl	8104904 <__retarget_lock_release_recursive>
 8106c8e:	e7dd      	b.n	8106c4c <_fflush_r+0xc>

08106c90 <memmove>:
 8106c90:	4288      	cmp	r0, r1
 8106c92:	b510      	push	{r4, lr}
 8106c94:	eb01 0402 	add.w	r4, r1, r2
 8106c98:	d902      	bls.n	8106ca0 <memmove+0x10>
 8106c9a:	4284      	cmp	r4, r0
 8106c9c:	4623      	mov	r3, r4
 8106c9e:	d807      	bhi.n	8106cb0 <memmove+0x20>
 8106ca0:	1e43      	subs	r3, r0, #1
 8106ca2:	42a1      	cmp	r1, r4
 8106ca4:	d008      	beq.n	8106cb8 <memmove+0x28>
 8106ca6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8106caa:	f803 2f01 	strb.w	r2, [r3, #1]!
 8106cae:	e7f8      	b.n	8106ca2 <memmove+0x12>
 8106cb0:	4402      	add	r2, r0
 8106cb2:	4601      	mov	r1, r0
 8106cb4:	428a      	cmp	r2, r1
 8106cb6:	d100      	bne.n	8106cba <memmove+0x2a>
 8106cb8:	bd10      	pop	{r4, pc}
 8106cba:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8106cbe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8106cc2:	e7f7      	b.n	8106cb4 <memmove+0x24>

08106cc4 <_sbrk_r>:
 8106cc4:	b538      	push	{r3, r4, r5, lr}
 8106cc6:	4d06      	ldr	r5, [pc, #24]	; (8106ce0 <_sbrk_r+0x1c>)
 8106cc8:	2300      	movs	r3, #0
 8106cca:	4604      	mov	r4, r0
 8106ccc:	4608      	mov	r0, r1
 8106cce:	602b      	str	r3, [r5, #0]
 8106cd0:	f7fa fcfc 	bl	81016cc <_sbrk>
 8106cd4:	1c43      	adds	r3, r0, #1
 8106cd6:	d102      	bne.n	8106cde <_sbrk_r+0x1a>
 8106cd8:	682b      	ldr	r3, [r5, #0]
 8106cda:	b103      	cbz	r3, 8106cde <_sbrk_r+0x1a>
 8106cdc:	6023      	str	r3, [r4, #0]
 8106cde:	bd38      	pop	{r3, r4, r5, pc}
 8106ce0:	10000378 	.word	0x10000378

08106ce4 <__assert_func>:
 8106ce4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8106ce6:	4614      	mov	r4, r2
 8106ce8:	461a      	mov	r2, r3
 8106cea:	4b09      	ldr	r3, [pc, #36]	; (8106d10 <__assert_func+0x2c>)
 8106cec:	681b      	ldr	r3, [r3, #0]
 8106cee:	4605      	mov	r5, r0
 8106cf0:	68d8      	ldr	r0, [r3, #12]
 8106cf2:	b14c      	cbz	r4, 8106d08 <__assert_func+0x24>
 8106cf4:	4b07      	ldr	r3, [pc, #28]	; (8106d14 <__assert_func+0x30>)
 8106cf6:	9100      	str	r1, [sp, #0]
 8106cf8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8106cfc:	4906      	ldr	r1, [pc, #24]	; (8106d18 <__assert_func+0x34>)
 8106cfe:	462b      	mov	r3, r5
 8106d00:	f000 f854 	bl	8106dac <fiprintf>
 8106d04:	f000 f864 	bl	8106dd0 <abort>
 8106d08:	4b04      	ldr	r3, [pc, #16]	; (8106d1c <__assert_func+0x38>)
 8106d0a:	461c      	mov	r4, r3
 8106d0c:	e7f3      	b.n	8106cf6 <__assert_func+0x12>
 8106d0e:	bf00      	nop
 8106d10:	100001c4 	.word	0x100001c4
 8106d14:	081077c5 	.word	0x081077c5
 8106d18:	081077d2 	.word	0x081077d2
 8106d1c:	08107800 	.word	0x08107800

08106d20 <_calloc_r>:
 8106d20:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8106d22:	fba1 2402 	umull	r2, r4, r1, r2
 8106d26:	b94c      	cbnz	r4, 8106d3c <_calloc_r+0x1c>
 8106d28:	4611      	mov	r1, r2
 8106d2a:	9201      	str	r2, [sp, #4]
 8106d2c:	f7ff f852 	bl	8105dd4 <_malloc_r>
 8106d30:	9a01      	ldr	r2, [sp, #4]
 8106d32:	4605      	mov	r5, r0
 8106d34:	b930      	cbnz	r0, 8106d44 <_calloc_r+0x24>
 8106d36:	4628      	mov	r0, r5
 8106d38:	b003      	add	sp, #12
 8106d3a:	bd30      	pop	{r4, r5, pc}
 8106d3c:	220c      	movs	r2, #12
 8106d3e:	6002      	str	r2, [r0, #0]
 8106d40:	2500      	movs	r5, #0
 8106d42:	e7f8      	b.n	8106d36 <_calloc_r+0x16>
 8106d44:	4621      	mov	r1, r4
 8106d46:	f7fd fd18 	bl	810477a <memset>
 8106d4a:	e7f4      	b.n	8106d36 <_calloc_r+0x16>

08106d4c <_realloc_r>:
 8106d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8106d50:	4680      	mov	r8, r0
 8106d52:	4614      	mov	r4, r2
 8106d54:	460e      	mov	r6, r1
 8106d56:	b921      	cbnz	r1, 8106d62 <_realloc_r+0x16>
 8106d58:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8106d5c:	4611      	mov	r1, r2
 8106d5e:	f7ff b839 	b.w	8105dd4 <_malloc_r>
 8106d62:	b92a      	cbnz	r2, 8106d70 <_realloc_r+0x24>
 8106d64:	f7fe fc6a 	bl	810563c <_free_r>
 8106d68:	4625      	mov	r5, r4
 8106d6a:	4628      	mov	r0, r5
 8106d6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8106d70:	f000 f835 	bl	8106dde <_malloc_usable_size_r>
 8106d74:	4284      	cmp	r4, r0
 8106d76:	4607      	mov	r7, r0
 8106d78:	d802      	bhi.n	8106d80 <_realloc_r+0x34>
 8106d7a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8106d7e:	d812      	bhi.n	8106da6 <_realloc_r+0x5a>
 8106d80:	4621      	mov	r1, r4
 8106d82:	4640      	mov	r0, r8
 8106d84:	f7ff f826 	bl	8105dd4 <_malloc_r>
 8106d88:	4605      	mov	r5, r0
 8106d8a:	2800      	cmp	r0, #0
 8106d8c:	d0ed      	beq.n	8106d6a <_realloc_r+0x1e>
 8106d8e:	42bc      	cmp	r4, r7
 8106d90:	4622      	mov	r2, r4
 8106d92:	4631      	mov	r1, r6
 8106d94:	bf28      	it	cs
 8106d96:	463a      	movcs	r2, r7
 8106d98:	f7fd fdb5 	bl	8104906 <memcpy>
 8106d9c:	4631      	mov	r1, r6
 8106d9e:	4640      	mov	r0, r8
 8106da0:	f7fe fc4c 	bl	810563c <_free_r>
 8106da4:	e7e1      	b.n	8106d6a <_realloc_r+0x1e>
 8106da6:	4635      	mov	r5, r6
 8106da8:	e7df      	b.n	8106d6a <_realloc_r+0x1e>
	...

08106dac <fiprintf>:
 8106dac:	b40e      	push	{r1, r2, r3}
 8106dae:	b503      	push	{r0, r1, lr}
 8106db0:	4601      	mov	r1, r0
 8106db2:	ab03      	add	r3, sp, #12
 8106db4:	4805      	ldr	r0, [pc, #20]	; (8106dcc <fiprintf+0x20>)
 8106db6:	f853 2b04 	ldr.w	r2, [r3], #4
 8106dba:	6800      	ldr	r0, [r0, #0]
 8106dbc:	9301      	str	r3, [sp, #4]
 8106dbe:	f000 f83f 	bl	8106e40 <_vfiprintf_r>
 8106dc2:	b002      	add	sp, #8
 8106dc4:	f85d eb04 	ldr.w	lr, [sp], #4
 8106dc8:	b003      	add	sp, #12
 8106dca:	4770      	bx	lr
 8106dcc:	100001c4 	.word	0x100001c4

08106dd0 <abort>:
 8106dd0:	b508      	push	{r3, lr}
 8106dd2:	2006      	movs	r0, #6
 8106dd4:	f000 fa0c 	bl	81071f0 <raise>
 8106dd8:	2001      	movs	r0, #1
 8106dda:	f7fa fc00 	bl	81015de <_exit>

08106dde <_malloc_usable_size_r>:
 8106dde:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8106de2:	1f18      	subs	r0, r3, #4
 8106de4:	2b00      	cmp	r3, #0
 8106de6:	bfbc      	itt	lt
 8106de8:	580b      	ldrlt	r3, [r1, r0]
 8106dea:	18c0      	addlt	r0, r0, r3
 8106dec:	4770      	bx	lr

08106dee <__sfputc_r>:
 8106dee:	6893      	ldr	r3, [r2, #8]
 8106df0:	3b01      	subs	r3, #1
 8106df2:	2b00      	cmp	r3, #0
 8106df4:	b410      	push	{r4}
 8106df6:	6093      	str	r3, [r2, #8]
 8106df8:	da08      	bge.n	8106e0c <__sfputc_r+0x1e>
 8106dfa:	6994      	ldr	r4, [r2, #24]
 8106dfc:	42a3      	cmp	r3, r4
 8106dfe:	db01      	blt.n	8106e04 <__sfputc_r+0x16>
 8106e00:	290a      	cmp	r1, #10
 8106e02:	d103      	bne.n	8106e0c <__sfputc_r+0x1e>
 8106e04:	f85d 4b04 	ldr.w	r4, [sp], #4
 8106e08:	f000 b934 	b.w	8107074 <__swbuf_r>
 8106e0c:	6813      	ldr	r3, [r2, #0]
 8106e0e:	1c58      	adds	r0, r3, #1
 8106e10:	6010      	str	r0, [r2, #0]
 8106e12:	7019      	strb	r1, [r3, #0]
 8106e14:	4608      	mov	r0, r1
 8106e16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8106e1a:	4770      	bx	lr

08106e1c <__sfputs_r>:
 8106e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8106e1e:	4606      	mov	r6, r0
 8106e20:	460f      	mov	r7, r1
 8106e22:	4614      	mov	r4, r2
 8106e24:	18d5      	adds	r5, r2, r3
 8106e26:	42ac      	cmp	r4, r5
 8106e28:	d101      	bne.n	8106e2e <__sfputs_r+0x12>
 8106e2a:	2000      	movs	r0, #0
 8106e2c:	e007      	b.n	8106e3e <__sfputs_r+0x22>
 8106e2e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106e32:	463a      	mov	r2, r7
 8106e34:	4630      	mov	r0, r6
 8106e36:	f7ff ffda 	bl	8106dee <__sfputc_r>
 8106e3a:	1c43      	adds	r3, r0, #1
 8106e3c:	d1f3      	bne.n	8106e26 <__sfputs_r+0xa>
 8106e3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08106e40 <_vfiprintf_r>:
 8106e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8106e44:	460d      	mov	r5, r1
 8106e46:	b09d      	sub	sp, #116	; 0x74
 8106e48:	4614      	mov	r4, r2
 8106e4a:	4698      	mov	r8, r3
 8106e4c:	4606      	mov	r6, r0
 8106e4e:	b118      	cbz	r0, 8106e58 <_vfiprintf_r+0x18>
 8106e50:	6a03      	ldr	r3, [r0, #32]
 8106e52:	b90b      	cbnz	r3, 8106e58 <_vfiprintf_r+0x18>
 8106e54:	f7fd fbe4 	bl	8104620 <__sinit>
 8106e58:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8106e5a:	07d9      	lsls	r1, r3, #31
 8106e5c:	d405      	bmi.n	8106e6a <_vfiprintf_r+0x2a>
 8106e5e:	89ab      	ldrh	r3, [r5, #12]
 8106e60:	059a      	lsls	r2, r3, #22
 8106e62:	d402      	bmi.n	8106e6a <_vfiprintf_r+0x2a>
 8106e64:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8106e66:	f7fd fd4c 	bl	8104902 <__retarget_lock_acquire_recursive>
 8106e6a:	89ab      	ldrh	r3, [r5, #12]
 8106e6c:	071b      	lsls	r3, r3, #28
 8106e6e:	d501      	bpl.n	8106e74 <_vfiprintf_r+0x34>
 8106e70:	692b      	ldr	r3, [r5, #16]
 8106e72:	b99b      	cbnz	r3, 8106e9c <_vfiprintf_r+0x5c>
 8106e74:	4629      	mov	r1, r5
 8106e76:	4630      	mov	r0, r6
 8106e78:	f000 f93a 	bl	81070f0 <__swsetup_r>
 8106e7c:	b170      	cbz	r0, 8106e9c <_vfiprintf_r+0x5c>
 8106e7e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8106e80:	07dc      	lsls	r4, r3, #31
 8106e82:	d504      	bpl.n	8106e8e <_vfiprintf_r+0x4e>
 8106e84:	f04f 30ff 	mov.w	r0, #4294967295
 8106e88:	b01d      	add	sp, #116	; 0x74
 8106e8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8106e8e:	89ab      	ldrh	r3, [r5, #12]
 8106e90:	0598      	lsls	r0, r3, #22
 8106e92:	d4f7      	bmi.n	8106e84 <_vfiprintf_r+0x44>
 8106e94:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8106e96:	f7fd fd35 	bl	8104904 <__retarget_lock_release_recursive>
 8106e9a:	e7f3      	b.n	8106e84 <_vfiprintf_r+0x44>
 8106e9c:	2300      	movs	r3, #0
 8106e9e:	9309      	str	r3, [sp, #36]	; 0x24
 8106ea0:	2320      	movs	r3, #32
 8106ea2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8106ea6:	f8cd 800c 	str.w	r8, [sp, #12]
 8106eaa:	2330      	movs	r3, #48	; 0x30
 8106eac:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8107060 <_vfiprintf_r+0x220>
 8106eb0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8106eb4:	f04f 0901 	mov.w	r9, #1
 8106eb8:	4623      	mov	r3, r4
 8106eba:	469a      	mov	sl, r3
 8106ebc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8106ec0:	b10a      	cbz	r2, 8106ec6 <_vfiprintf_r+0x86>
 8106ec2:	2a25      	cmp	r2, #37	; 0x25
 8106ec4:	d1f9      	bne.n	8106eba <_vfiprintf_r+0x7a>
 8106ec6:	ebba 0b04 	subs.w	fp, sl, r4
 8106eca:	d00b      	beq.n	8106ee4 <_vfiprintf_r+0xa4>
 8106ecc:	465b      	mov	r3, fp
 8106ece:	4622      	mov	r2, r4
 8106ed0:	4629      	mov	r1, r5
 8106ed2:	4630      	mov	r0, r6
 8106ed4:	f7ff ffa2 	bl	8106e1c <__sfputs_r>
 8106ed8:	3001      	adds	r0, #1
 8106eda:	f000 80a9 	beq.w	8107030 <_vfiprintf_r+0x1f0>
 8106ede:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8106ee0:	445a      	add	r2, fp
 8106ee2:	9209      	str	r2, [sp, #36]	; 0x24
 8106ee4:	f89a 3000 	ldrb.w	r3, [sl]
 8106ee8:	2b00      	cmp	r3, #0
 8106eea:	f000 80a1 	beq.w	8107030 <_vfiprintf_r+0x1f0>
 8106eee:	2300      	movs	r3, #0
 8106ef0:	f04f 32ff 	mov.w	r2, #4294967295
 8106ef4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8106ef8:	f10a 0a01 	add.w	sl, sl, #1
 8106efc:	9304      	str	r3, [sp, #16]
 8106efe:	9307      	str	r3, [sp, #28]
 8106f00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8106f04:	931a      	str	r3, [sp, #104]	; 0x68
 8106f06:	4654      	mov	r4, sl
 8106f08:	2205      	movs	r2, #5
 8106f0a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106f0e:	4854      	ldr	r0, [pc, #336]	; (8107060 <_vfiprintf_r+0x220>)
 8106f10:	f7f9 f9e6 	bl	81002e0 <memchr>
 8106f14:	9a04      	ldr	r2, [sp, #16]
 8106f16:	b9d8      	cbnz	r0, 8106f50 <_vfiprintf_r+0x110>
 8106f18:	06d1      	lsls	r1, r2, #27
 8106f1a:	bf44      	itt	mi
 8106f1c:	2320      	movmi	r3, #32
 8106f1e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8106f22:	0713      	lsls	r3, r2, #28
 8106f24:	bf44      	itt	mi
 8106f26:	232b      	movmi	r3, #43	; 0x2b
 8106f28:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8106f2c:	f89a 3000 	ldrb.w	r3, [sl]
 8106f30:	2b2a      	cmp	r3, #42	; 0x2a
 8106f32:	d015      	beq.n	8106f60 <_vfiprintf_r+0x120>
 8106f34:	9a07      	ldr	r2, [sp, #28]
 8106f36:	4654      	mov	r4, sl
 8106f38:	2000      	movs	r0, #0
 8106f3a:	f04f 0c0a 	mov.w	ip, #10
 8106f3e:	4621      	mov	r1, r4
 8106f40:	f811 3b01 	ldrb.w	r3, [r1], #1
 8106f44:	3b30      	subs	r3, #48	; 0x30
 8106f46:	2b09      	cmp	r3, #9
 8106f48:	d94d      	bls.n	8106fe6 <_vfiprintf_r+0x1a6>
 8106f4a:	b1b0      	cbz	r0, 8106f7a <_vfiprintf_r+0x13a>
 8106f4c:	9207      	str	r2, [sp, #28]
 8106f4e:	e014      	b.n	8106f7a <_vfiprintf_r+0x13a>
 8106f50:	eba0 0308 	sub.w	r3, r0, r8
 8106f54:	fa09 f303 	lsl.w	r3, r9, r3
 8106f58:	4313      	orrs	r3, r2
 8106f5a:	9304      	str	r3, [sp, #16]
 8106f5c:	46a2      	mov	sl, r4
 8106f5e:	e7d2      	b.n	8106f06 <_vfiprintf_r+0xc6>
 8106f60:	9b03      	ldr	r3, [sp, #12]
 8106f62:	1d19      	adds	r1, r3, #4
 8106f64:	681b      	ldr	r3, [r3, #0]
 8106f66:	9103      	str	r1, [sp, #12]
 8106f68:	2b00      	cmp	r3, #0
 8106f6a:	bfbb      	ittet	lt
 8106f6c:	425b      	neglt	r3, r3
 8106f6e:	f042 0202 	orrlt.w	r2, r2, #2
 8106f72:	9307      	strge	r3, [sp, #28]
 8106f74:	9307      	strlt	r3, [sp, #28]
 8106f76:	bfb8      	it	lt
 8106f78:	9204      	strlt	r2, [sp, #16]
 8106f7a:	7823      	ldrb	r3, [r4, #0]
 8106f7c:	2b2e      	cmp	r3, #46	; 0x2e
 8106f7e:	d10c      	bne.n	8106f9a <_vfiprintf_r+0x15a>
 8106f80:	7863      	ldrb	r3, [r4, #1]
 8106f82:	2b2a      	cmp	r3, #42	; 0x2a
 8106f84:	d134      	bne.n	8106ff0 <_vfiprintf_r+0x1b0>
 8106f86:	9b03      	ldr	r3, [sp, #12]
 8106f88:	1d1a      	adds	r2, r3, #4
 8106f8a:	681b      	ldr	r3, [r3, #0]
 8106f8c:	9203      	str	r2, [sp, #12]
 8106f8e:	2b00      	cmp	r3, #0
 8106f90:	bfb8      	it	lt
 8106f92:	f04f 33ff 	movlt.w	r3, #4294967295
 8106f96:	3402      	adds	r4, #2
 8106f98:	9305      	str	r3, [sp, #20]
 8106f9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8107070 <_vfiprintf_r+0x230>
 8106f9e:	7821      	ldrb	r1, [r4, #0]
 8106fa0:	2203      	movs	r2, #3
 8106fa2:	4650      	mov	r0, sl
 8106fa4:	f7f9 f99c 	bl	81002e0 <memchr>
 8106fa8:	b138      	cbz	r0, 8106fba <_vfiprintf_r+0x17a>
 8106faa:	9b04      	ldr	r3, [sp, #16]
 8106fac:	eba0 000a 	sub.w	r0, r0, sl
 8106fb0:	2240      	movs	r2, #64	; 0x40
 8106fb2:	4082      	lsls	r2, r0
 8106fb4:	4313      	orrs	r3, r2
 8106fb6:	3401      	adds	r4, #1
 8106fb8:	9304      	str	r3, [sp, #16]
 8106fba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8106fbe:	4829      	ldr	r0, [pc, #164]	; (8107064 <_vfiprintf_r+0x224>)
 8106fc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8106fc4:	2206      	movs	r2, #6
 8106fc6:	f7f9 f98b 	bl	81002e0 <memchr>
 8106fca:	2800      	cmp	r0, #0
 8106fcc:	d03f      	beq.n	810704e <_vfiprintf_r+0x20e>
 8106fce:	4b26      	ldr	r3, [pc, #152]	; (8107068 <_vfiprintf_r+0x228>)
 8106fd0:	bb1b      	cbnz	r3, 810701a <_vfiprintf_r+0x1da>
 8106fd2:	9b03      	ldr	r3, [sp, #12]
 8106fd4:	3307      	adds	r3, #7
 8106fd6:	f023 0307 	bic.w	r3, r3, #7
 8106fda:	3308      	adds	r3, #8
 8106fdc:	9303      	str	r3, [sp, #12]
 8106fde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8106fe0:	443b      	add	r3, r7
 8106fe2:	9309      	str	r3, [sp, #36]	; 0x24
 8106fe4:	e768      	b.n	8106eb8 <_vfiprintf_r+0x78>
 8106fe6:	fb0c 3202 	mla	r2, ip, r2, r3
 8106fea:	460c      	mov	r4, r1
 8106fec:	2001      	movs	r0, #1
 8106fee:	e7a6      	b.n	8106f3e <_vfiprintf_r+0xfe>
 8106ff0:	2300      	movs	r3, #0
 8106ff2:	3401      	adds	r4, #1
 8106ff4:	9305      	str	r3, [sp, #20]
 8106ff6:	4619      	mov	r1, r3
 8106ff8:	f04f 0c0a 	mov.w	ip, #10
 8106ffc:	4620      	mov	r0, r4
 8106ffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8107002:	3a30      	subs	r2, #48	; 0x30
 8107004:	2a09      	cmp	r2, #9
 8107006:	d903      	bls.n	8107010 <_vfiprintf_r+0x1d0>
 8107008:	2b00      	cmp	r3, #0
 810700a:	d0c6      	beq.n	8106f9a <_vfiprintf_r+0x15a>
 810700c:	9105      	str	r1, [sp, #20]
 810700e:	e7c4      	b.n	8106f9a <_vfiprintf_r+0x15a>
 8107010:	fb0c 2101 	mla	r1, ip, r1, r2
 8107014:	4604      	mov	r4, r0
 8107016:	2301      	movs	r3, #1
 8107018:	e7f0      	b.n	8106ffc <_vfiprintf_r+0x1bc>
 810701a:	ab03      	add	r3, sp, #12
 810701c:	9300      	str	r3, [sp, #0]
 810701e:	462a      	mov	r2, r5
 8107020:	4b12      	ldr	r3, [pc, #72]	; (810706c <_vfiprintf_r+0x22c>)
 8107022:	a904      	add	r1, sp, #16
 8107024:	4630      	mov	r0, r6
 8107026:	f7fc fea9 	bl	8103d7c <_printf_float>
 810702a:	4607      	mov	r7, r0
 810702c:	1c78      	adds	r0, r7, #1
 810702e:	d1d6      	bne.n	8106fde <_vfiprintf_r+0x19e>
 8107030:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8107032:	07d9      	lsls	r1, r3, #31
 8107034:	d405      	bmi.n	8107042 <_vfiprintf_r+0x202>
 8107036:	89ab      	ldrh	r3, [r5, #12]
 8107038:	059a      	lsls	r2, r3, #22
 810703a:	d402      	bmi.n	8107042 <_vfiprintf_r+0x202>
 810703c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 810703e:	f7fd fc61 	bl	8104904 <__retarget_lock_release_recursive>
 8107042:	89ab      	ldrh	r3, [r5, #12]
 8107044:	065b      	lsls	r3, r3, #25
 8107046:	f53f af1d 	bmi.w	8106e84 <_vfiprintf_r+0x44>
 810704a:	9809      	ldr	r0, [sp, #36]	; 0x24
 810704c:	e71c      	b.n	8106e88 <_vfiprintf_r+0x48>
 810704e:	ab03      	add	r3, sp, #12
 8107050:	9300      	str	r3, [sp, #0]
 8107052:	462a      	mov	r2, r5
 8107054:	4b05      	ldr	r3, [pc, #20]	; (810706c <_vfiprintf_r+0x22c>)
 8107056:	a904      	add	r1, sp, #16
 8107058:	4630      	mov	r0, r6
 810705a:	f7fd f933 	bl	81042c4 <_printf_i>
 810705e:	e7e4      	b.n	810702a <_vfiprintf_r+0x1ea>
 8107060:	081077b4 	.word	0x081077b4
 8107064:	081077be 	.word	0x081077be
 8107068:	08103d7d 	.word	0x08103d7d
 810706c:	08106e1d 	.word	0x08106e1d
 8107070:	081077ba 	.word	0x081077ba

08107074 <__swbuf_r>:
 8107074:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107076:	460e      	mov	r6, r1
 8107078:	4614      	mov	r4, r2
 810707a:	4605      	mov	r5, r0
 810707c:	b118      	cbz	r0, 8107086 <__swbuf_r+0x12>
 810707e:	6a03      	ldr	r3, [r0, #32]
 8107080:	b90b      	cbnz	r3, 8107086 <__swbuf_r+0x12>
 8107082:	f7fd facd 	bl	8104620 <__sinit>
 8107086:	69a3      	ldr	r3, [r4, #24]
 8107088:	60a3      	str	r3, [r4, #8]
 810708a:	89a3      	ldrh	r3, [r4, #12]
 810708c:	071a      	lsls	r2, r3, #28
 810708e:	d525      	bpl.n	81070dc <__swbuf_r+0x68>
 8107090:	6923      	ldr	r3, [r4, #16]
 8107092:	b31b      	cbz	r3, 81070dc <__swbuf_r+0x68>
 8107094:	6823      	ldr	r3, [r4, #0]
 8107096:	6922      	ldr	r2, [r4, #16]
 8107098:	1a98      	subs	r0, r3, r2
 810709a:	6963      	ldr	r3, [r4, #20]
 810709c:	b2f6      	uxtb	r6, r6
 810709e:	4283      	cmp	r3, r0
 81070a0:	4637      	mov	r7, r6
 81070a2:	dc04      	bgt.n	81070ae <__swbuf_r+0x3a>
 81070a4:	4621      	mov	r1, r4
 81070a6:	4628      	mov	r0, r5
 81070a8:	f7ff fdca 	bl	8106c40 <_fflush_r>
 81070ac:	b9e0      	cbnz	r0, 81070e8 <__swbuf_r+0x74>
 81070ae:	68a3      	ldr	r3, [r4, #8]
 81070b0:	3b01      	subs	r3, #1
 81070b2:	60a3      	str	r3, [r4, #8]
 81070b4:	6823      	ldr	r3, [r4, #0]
 81070b6:	1c5a      	adds	r2, r3, #1
 81070b8:	6022      	str	r2, [r4, #0]
 81070ba:	701e      	strb	r6, [r3, #0]
 81070bc:	6962      	ldr	r2, [r4, #20]
 81070be:	1c43      	adds	r3, r0, #1
 81070c0:	429a      	cmp	r2, r3
 81070c2:	d004      	beq.n	81070ce <__swbuf_r+0x5a>
 81070c4:	89a3      	ldrh	r3, [r4, #12]
 81070c6:	07db      	lsls	r3, r3, #31
 81070c8:	d506      	bpl.n	81070d8 <__swbuf_r+0x64>
 81070ca:	2e0a      	cmp	r6, #10
 81070cc:	d104      	bne.n	81070d8 <__swbuf_r+0x64>
 81070ce:	4621      	mov	r1, r4
 81070d0:	4628      	mov	r0, r5
 81070d2:	f7ff fdb5 	bl	8106c40 <_fflush_r>
 81070d6:	b938      	cbnz	r0, 81070e8 <__swbuf_r+0x74>
 81070d8:	4638      	mov	r0, r7
 81070da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 81070dc:	4621      	mov	r1, r4
 81070de:	4628      	mov	r0, r5
 81070e0:	f000 f806 	bl	81070f0 <__swsetup_r>
 81070e4:	2800      	cmp	r0, #0
 81070e6:	d0d5      	beq.n	8107094 <__swbuf_r+0x20>
 81070e8:	f04f 37ff 	mov.w	r7, #4294967295
 81070ec:	e7f4      	b.n	81070d8 <__swbuf_r+0x64>
	...

081070f0 <__swsetup_r>:
 81070f0:	b538      	push	{r3, r4, r5, lr}
 81070f2:	4b2a      	ldr	r3, [pc, #168]	; (810719c <__swsetup_r+0xac>)
 81070f4:	4605      	mov	r5, r0
 81070f6:	6818      	ldr	r0, [r3, #0]
 81070f8:	460c      	mov	r4, r1
 81070fa:	b118      	cbz	r0, 8107104 <__swsetup_r+0x14>
 81070fc:	6a03      	ldr	r3, [r0, #32]
 81070fe:	b90b      	cbnz	r3, 8107104 <__swsetup_r+0x14>
 8107100:	f7fd fa8e 	bl	8104620 <__sinit>
 8107104:	89a3      	ldrh	r3, [r4, #12]
 8107106:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 810710a:	0718      	lsls	r0, r3, #28
 810710c:	d422      	bmi.n	8107154 <__swsetup_r+0x64>
 810710e:	06d9      	lsls	r1, r3, #27
 8107110:	d407      	bmi.n	8107122 <__swsetup_r+0x32>
 8107112:	2309      	movs	r3, #9
 8107114:	602b      	str	r3, [r5, #0]
 8107116:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 810711a:	81a3      	strh	r3, [r4, #12]
 810711c:	f04f 30ff 	mov.w	r0, #4294967295
 8107120:	e034      	b.n	810718c <__swsetup_r+0x9c>
 8107122:	0758      	lsls	r0, r3, #29
 8107124:	d512      	bpl.n	810714c <__swsetup_r+0x5c>
 8107126:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8107128:	b141      	cbz	r1, 810713c <__swsetup_r+0x4c>
 810712a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 810712e:	4299      	cmp	r1, r3
 8107130:	d002      	beq.n	8107138 <__swsetup_r+0x48>
 8107132:	4628      	mov	r0, r5
 8107134:	f7fe fa82 	bl	810563c <_free_r>
 8107138:	2300      	movs	r3, #0
 810713a:	6363      	str	r3, [r4, #52]	; 0x34
 810713c:	89a3      	ldrh	r3, [r4, #12]
 810713e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8107142:	81a3      	strh	r3, [r4, #12]
 8107144:	2300      	movs	r3, #0
 8107146:	6063      	str	r3, [r4, #4]
 8107148:	6923      	ldr	r3, [r4, #16]
 810714a:	6023      	str	r3, [r4, #0]
 810714c:	89a3      	ldrh	r3, [r4, #12]
 810714e:	f043 0308 	orr.w	r3, r3, #8
 8107152:	81a3      	strh	r3, [r4, #12]
 8107154:	6923      	ldr	r3, [r4, #16]
 8107156:	b94b      	cbnz	r3, 810716c <__swsetup_r+0x7c>
 8107158:	89a3      	ldrh	r3, [r4, #12]
 810715a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 810715e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8107162:	d003      	beq.n	810716c <__swsetup_r+0x7c>
 8107164:	4621      	mov	r1, r4
 8107166:	4628      	mov	r0, r5
 8107168:	f000 f884 	bl	8107274 <__smakebuf_r>
 810716c:	89a0      	ldrh	r0, [r4, #12]
 810716e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8107172:	f010 0301 	ands.w	r3, r0, #1
 8107176:	d00a      	beq.n	810718e <__swsetup_r+0x9e>
 8107178:	2300      	movs	r3, #0
 810717a:	60a3      	str	r3, [r4, #8]
 810717c:	6963      	ldr	r3, [r4, #20]
 810717e:	425b      	negs	r3, r3
 8107180:	61a3      	str	r3, [r4, #24]
 8107182:	6923      	ldr	r3, [r4, #16]
 8107184:	b943      	cbnz	r3, 8107198 <__swsetup_r+0xa8>
 8107186:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 810718a:	d1c4      	bne.n	8107116 <__swsetup_r+0x26>
 810718c:	bd38      	pop	{r3, r4, r5, pc}
 810718e:	0781      	lsls	r1, r0, #30
 8107190:	bf58      	it	pl
 8107192:	6963      	ldrpl	r3, [r4, #20]
 8107194:	60a3      	str	r3, [r4, #8]
 8107196:	e7f4      	b.n	8107182 <__swsetup_r+0x92>
 8107198:	2000      	movs	r0, #0
 810719a:	e7f7      	b.n	810718c <__swsetup_r+0x9c>
 810719c:	100001c4 	.word	0x100001c4

081071a0 <_raise_r>:
 81071a0:	291f      	cmp	r1, #31
 81071a2:	b538      	push	{r3, r4, r5, lr}
 81071a4:	4604      	mov	r4, r0
 81071a6:	460d      	mov	r5, r1
 81071a8:	d904      	bls.n	81071b4 <_raise_r+0x14>
 81071aa:	2316      	movs	r3, #22
 81071ac:	6003      	str	r3, [r0, #0]
 81071ae:	f04f 30ff 	mov.w	r0, #4294967295
 81071b2:	bd38      	pop	{r3, r4, r5, pc}
 81071b4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 81071b6:	b112      	cbz	r2, 81071be <_raise_r+0x1e>
 81071b8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 81071bc:	b94b      	cbnz	r3, 81071d2 <_raise_r+0x32>
 81071be:	4620      	mov	r0, r4
 81071c0:	f000 f830 	bl	8107224 <_getpid_r>
 81071c4:	462a      	mov	r2, r5
 81071c6:	4601      	mov	r1, r0
 81071c8:	4620      	mov	r0, r4
 81071ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 81071ce:	f000 b817 	b.w	8107200 <_kill_r>
 81071d2:	2b01      	cmp	r3, #1
 81071d4:	d00a      	beq.n	81071ec <_raise_r+0x4c>
 81071d6:	1c59      	adds	r1, r3, #1
 81071d8:	d103      	bne.n	81071e2 <_raise_r+0x42>
 81071da:	2316      	movs	r3, #22
 81071dc:	6003      	str	r3, [r0, #0]
 81071de:	2001      	movs	r0, #1
 81071e0:	e7e7      	b.n	81071b2 <_raise_r+0x12>
 81071e2:	2400      	movs	r4, #0
 81071e4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 81071e8:	4628      	mov	r0, r5
 81071ea:	4798      	blx	r3
 81071ec:	2000      	movs	r0, #0
 81071ee:	e7e0      	b.n	81071b2 <_raise_r+0x12>

081071f0 <raise>:
 81071f0:	4b02      	ldr	r3, [pc, #8]	; (81071fc <raise+0xc>)
 81071f2:	4601      	mov	r1, r0
 81071f4:	6818      	ldr	r0, [r3, #0]
 81071f6:	f7ff bfd3 	b.w	81071a0 <_raise_r>
 81071fa:	bf00      	nop
 81071fc:	100001c4 	.word	0x100001c4

08107200 <_kill_r>:
 8107200:	b538      	push	{r3, r4, r5, lr}
 8107202:	4d07      	ldr	r5, [pc, #28]	; (8107220 <_kill_r+0x20>)
 8107204:	2300      	movs	r3, #0
 8107206:	4604      	mov	r4, r0
 8107208:	4608      	mov	r0, r1
 810720a:	4611      	mov	r1, r2
 810720c:	602b      	str	r3, [r5, #0]
 810720e:	f7fa f9d6 	bl	81015be <_kill>
 8107212:	1c43      	adds	r3, r0, #1
 8107214:	d102      	bne.n	810721c <_kill_r+0x1c>
 8107216:	682b      	ldr	r3, [r5, #0]
 8107218:	b103      	cbz	r3, 810721c <_kill_r+0x1c>
 810721a:	6023      	str	r3, [r4, #0]
 810721c:	bd38      	pop	{r3, r4, r5, pc}
 810721e:	bf00      	nop
 8107220:	10000378 	.word	0x10000378

08107224 <_getpid_r>:
 8107224:	f7fa b9c3 	b.w	81015ae <_getpid>

08107228 <__swhatbuf_r>:
 8107228:	b570      	push	{r4, r5, r6, lr}
 810722a:	460c      	mov	r4, r1
 810722c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8107230:	2900      	cmp	r1, #0
 8107232:	b096      	sub	sp, #88	; 0x58
 8107234:	4615      	mov	r5, r2
 8107236:	461e      	mov	r6, r3
 8107238:	da0d      	bge.n	8107256 <__swhatbuf_r+0x2e>
 810723a:	89a3      	ldrh	r3, [r4, #12]
 810723c:	f013 0f80 	tst.w	r3, #128	; 0x80
 8107240:	f04f 0100 	mov.w	r1, #0
 8107244:	bf0c      	ite	eq
 8107246:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 810724a:	2340      	movne	r3, #64	; 0x40
 810724c:	2000      	movs	r0, #0
 810724e:	6031      	str	r1, [r6, #0]
 8107250:	602b      	str	r3, [r5, #0]
 8107252:	b016      	add	sp, #88	; 0x58
 8107254:	bd70      	pop	{r4, r5, r6, pc}
 8107256:	466a      	mov	r2, sp
 8107258:	f000 f848 	bl	81072ec <_fstat_r>
 810725c:	2800      	cmp	r0, #0
 810725e:	dbec      	blt.n	810723a <__swhatbuf_r+0x12>
 8107260:	9901      	ldr	r1, [sp, #4]
 8107262:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8107266:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 810726a:	4259      	negs	r1, r3
 810726c:	4159      	adcs	r1, r3
 810726e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8107272:	e7eb      	b.n	810724c <__swhatbuf_r+0x24>

08107274 <__smakebuf_r>:
 8107274:	898b      	ldrh	r3, [r1, #12]
 8107276:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8107278:	079d      	lsls	r5, r3, #30
 810727a:	4606      	mov	r6, r0
 810727c:	460c      	mov	r4, r1
 810727e:	d507      	bpl.n	8107290 <__smakebuf_r+0x1c>
 8107280:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8107284:	6023      	str	r3, [r4, #0]
 8107286:	6123      	str	r3, [r4, #16]
 8107288:	2301      	movs	r3, #1
 810728a:	6163      	str	r3, [r4, #20]
 810728c:	b002      	add	sp, #8
 810728e:	bd70      	pop	{r4, r5, r6, pc}
 8107290:	ab01      	add	r3, sp, #4
 8107292:	466a      	mov	r2, sp
 8107294:	f7ff ffc8 	bl	8107228 <__swhatbuf_r>
 8107298:	9900      	ldr	r1, [sp, #0]
 810729a:	4605      	mov	r5, r0
 810729c:	4630      	mov	r0, r6
 810729e:	f7fe fd99 	bl	8105dd4 <_malloc_r>
 81072a2:	b948      	cbnz	r0, 81072b8 <__smakebuf_r+0x44>
 81072a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 81072a8:	059a      	lsls	r2, r3, #22
 81072aa:	d4ef      	bmi.n	810728c <__smakebuf_r+0x18>
 81072ac:	f023 0303 	bic.w	r3, r3, #3
 81072b0:	f043 0302 	orr.w	r3, r3, #2
 81072b4:	81a3      	strh	r3, [r4, #12]
 81072b6:	e7e3      	b.n	8107280 <__smakebuf_r+0xc>
 81072b8:	89a3      	ldrh	r3, [r4, #12]
 81072ba:	6020      	str	r0, [r4, #0]
 81072bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 81072c0:	81a3      	strh	r3, [r4, #12]
 81072c2:	9b00      	ldr	r3, [sp, #0]
 81072c4:	6163      	str	r3, [r4, #20]
 81072c6:	9b01      	ldr	r3, [sp, #4]
 81072c8:	6120      	str	r0, [r4, #16]
 81072ca:	b15b      	cbz	r3, 81072e4 <__smakebuf_r+0x70>
 81072cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 81072d0:	4630      	mov	r0, r6
 81072d2:	f000 f81d 	bl	8107310 <_isatty_r>
 81072d6:	b128      	cbz	r0, 81072e4 <__smakebuf_r+0x70>
 81072d8:	89a3      	ldrh	r3, [r4, #12]
 81072da:	f023 0303 	bic.w	r3, r3, #3
 81072de:	f043 0301 	orr.w	r3, r3, #1
 81072e2:	81a3      	strh	r3, [r4, #12]
 81072e4:	89a3      	ldrh	r3, [r4, #12]
 81072e6:	431d      	orrs	r5, r3
 81072e8:	81a5      	strh	r5, [r4, #12]
 81072ea:	e7cf      	b.n	810728c <__smakebuf_r+0x18>

081072ec <_fstat_r>:
 81072ec:	b538      	push	{r3, r4, r5, lr}
 81072ee:	4d07      	ldr	r5, [pc, #28]	; (810730c <_fstat_r+0x20>)
 81072f0:	2300      	movs	r3, #0
 81072f2:	4604      	mov	r4, r0
 81072f4:	4608      	mov	r0, r1
 81072f6:	4611      	mov	r1, r2
 81072f8:	602b      	str	r3, [r5, #0]
 81072fa:	f7fa f9bf 	bl	810167c <_fstat>
 81072fe:	1c43      	adds	r3, r0, #1
 8107300:	d102      	bne.n	8107308 <_fstat_r+0x1c>
 8107302:	682b      	ldr	r3, [r5, #0]
 8107304:	b103      	cbz	r3, 8107308 <_fstat_r+0x1c>
 8107306:	6023      	str	r3, [r4, #0]
 8107308:	bd38      	pop	{r3, r4, r5, pc}
 810730a:	bf00      	nop
 810730c:	10000378 	.word	0x10000378

08107310 <_isatty_r>:
 8107310:	b538      	push	{r3, r4, r5, lr}
 8107312:	4d06      	ldr	r5, [pc, #24]	; (810732c <_isatty_r+0x1c>)
 8107314:	2300      	movs	r3, #0
 8107316:	4604      	mov	r4, r0
 8107318:	4608      	mov	r0, r1
 810731a:	602b      	str	r3, [r5, #0]
 810731c:	f7fa f9be 	bl	810169c <_isatty>
 8107320:	1c43      	adds	r3, r0, #1
 8107322:	d102      	bne.n	810732a <_isatty_r+0x1a>
 8107324:	682b      	ldr	r3, [r5, #0]
 8107326:	b103      	cbz	r3, 810732a <_isatty_r+0x1a>
 8107328:	6023      	str	r3, [r4, #0]
 810732a:	bd38      	pop	{r3, r4, r5, pc}
 810732c:	10000378 	.word	0x10000378

08107330 <_init>:
 8107330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107332:	bf00      	nop
 8107334:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107336:	bc08      	pop	{r3}
 8107338:	469e      	mov	lr, r3
 810733a:	4770      	bx	lr

0810733c <_fini>:
 810733c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810733e:	bf00      	nop
 8107340:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107342:	bc08      	pop	{r3}
 8107344:	469e      	mov	lr, r3
 8107346:	4770      	bx	lr
