
adctest_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c1c  08000298  08000298  00010298  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002eb4  08002eb4  00012eb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ed4  08002ed4  0002001c  2**0
                  CONTENTS
  4 .ARM          00000000  08002ed4  08002ed4  0002001c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ed4  08002ed4  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ed4  08002ed4  00012ed4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ed8  08002ed8  00012ed8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  24000000  08002edc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RAM_D2       00000008  24000014  08002ef0  00020014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          00000044  2400001c  08002ef8  0002001c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  24000060  08002ef8  00020060  2**0
                  ALLOC
 12 .ARM.attributes 0000002e  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002004a  2**0
                  CONTENTS, READONLY
 14 .debug_info   00007a6e  00000000  00000000  0002008d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00000d81  00000000  00000000  00027afb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000007d0  00000000  00000000  00028880  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000005d5  00000000  00000000  00029050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002fb45  00000000  00000000  00029625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000053f2  00000000  00000000  0005916a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0011c4b9  00000000  00000000  0005e55c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000021a8  00000000  00000000  0017aa18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000067  00000000  00000000  0017cbc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000298 <__do_global_dtors_aux>:
 8000298:	b510      	push	{r4, lr}
 800029a:	4c05      	ldr	r4, [pc, #20]	; (80002b0 <__do_global_dtors_aux+0x18>)
 800029c:	7823      	ldrb	r3, [r4, #0]
 800029e:	b933      	cbnz	r3, 80002ae <__do_global_dtors_aux+0x16>
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <__do_global_dtors_aux+0x1c>)
 80002a2:	b113      	cbz	r3, 80002aa <__do_global_dtors_aux+0x12>
 80002a4:	4804      	ldr	r0, [pc, #16]	; (80002b8 <__do_global_dtors_aux+0x20>)
 80002a6:	f3af 8000 	nop.w
 80002aa:	2301      	movs	r3, #1
 80002ac:	7023      	strb	r3, [r4, #0]
 80002ae:	bd10      	pop	{r4, pc}
 80002b0:	2400001c 	.word	0x2400001c
 80002b4:	00000000 	.word	0x00000000
 80002b8:	08002e9c 	.word	0x08002e9c

080002bc <frame_dummy>:
 80002bc:	b508      	push	{r3, lr}
 80002be:	4b03      	ldr	r3, [pc, #12]	; (80002cc <frame_dummy+0x10>)
 80002c0:	b11b      	cbz	r3, 80002ca <frame_dummy+0xe>
 80002c2:	4903      	ldr	r1, [pc, #12]	; (80002d0 <frame_dummy+0x14>)
 80002c4:	4803      	ldr	r0, [pc, #12]	; (80002d4 <frame_dummy+0x18>)
 80002c6:	f3af 8000 	nop.w
 80002ca:	bd08      	pop	{r3, pc}
 80002cc:	00000000 	.word	0x00000000
 80002d0:	24000020 	.word	0x24000020
 80002d4:	08002e9c 	.word	0x08002e9c

080002d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80002d8:	b480      	push	{r7}
 80002da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80002dc:	4b3d      	ldr	r3, [pc, #244]	; (80003d4 <SystemInit+0xfc>)
 80002de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80002e2:	4a3c      	ldr	r2, [pc, #240]	; (80003d4 <SystemInit+0xfc>)
 80002e4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80002e8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80002ec:	4b39      	ldr	r3, [pc, #228]	; (80003d4 <SystemInit+0xfc>)
 80002ee:	691b      	ldr	r3, [r3, #16]
 80002f0:	4a38      	ldr	r2, [pc, #224]	; (80003d4 <SystemInit+0xfc>)
 80002f2:	f043 0310 	orr.w	r3, r3, #16
 80002f6:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80002f8:	4b37      	ldr	r3, [pc, #220]	; (80003d8 <SystemInit+0x100>)
 80002fa:	681b      	ldr	r3, [r3, #0]
 80002fc:	f003 030f 	and.w	r3, r3, #15
 8000300:	2b06      	cmp	r3, #6
 8000302:	d807      	bhi.n	8000314 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000304:	4b34      	ldr	r3, [pc, #208]	; (80003d8 <SystemInit+0x100>)
 8000306:	681b      	ldr	r3, [r3, #0]
 8000308:	f023 030f 	bic.w	r3, r3, #15
 800030c:	4a32      	ldr	r2, [pc, #200]	; (80003d8 <SystemInit+0x100>)
 800030e:	f043 0307 	orr.w	r3, r3, #7
 8000312:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8000314:	4b31      	ldr	r3, [pc, #196]	; (80003dc <SystemInit+0x104>)
 8000316:	681b      	ldr	r3, [r3, #0]
 8000318:	4a30      	ldr	r2, [pc, #192]	; (80003dc <SystemInit+0x104>)
 800031a:	f043 0301 	orr.w	r3, r3, #1
 800031e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000320:	4b2e      	ldr	r3, [pc, #184]	; (80003dc <SystemInit+0x104>)
 8000322:	2200      	movs	r2, #0
 8000324:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8000326:	4b2d      	ldr	r3, [pc, #180]	; (80003dc <SystemInit+0x104>)
 8000328:	681a      	ldr	r2, [r3, #0]
 800032a:	492c      	ldr	r1, [pc, #176]	; (80003dc <SystemInit+0x104>)
 800032c:	4b2c      	ldr	r3, [pc, #176]	; (80003e0 <SystemInit+0x108>)
 800032e:	4013      	ands	r3, r2
 8000330:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000332:	4b29      	ldr	r3, [pc, #164]	; (80003d8 <SystemInit+0x100>)
 8000334:	681b      	ldr	r3, [r3, #0]
 8000336:	f003 0308 	and.w	r3, r3, #8
 800033a:	2b00      	cmp	r3, #0
 800033c:	d007      	beq.n	800034e <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800033e:	4b26      	ldr	r3, [pc, #152]	; (80003d8 <SystemInit+0x100>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	f023 030f 	bic.w	r3, r3, #15
 8000346:	4a24      	ldr	r2, [pc, #144]	; (80003d8 <SystemInit+0x100>)
 8000348:	f043 0307 	orr.w	r3, r3, #7
 800034c:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800034e:	4b23      	ldr	r3, [pc, #140]	; (80003dc <SystemInit+0x104>)
 8000350:	2200      	movs	r2, #0
 8000352:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000354:	4b21      	ldr	r3, [pc, #132]	; (80003dc <SystemInit+0x104>)
 8000356:	2200      	movs	r2, #0
 8000358:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800035a:	4b20      	ldr	r3, [pc, #128]	; (80003dc <SystemInit+0x104>)
 800035c:	2200      	movs	r2, #0
 800035e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000360:	4b1e      	ldr	r3, [pc, #120]	; (80003dc <SystemInit+0x104>)
 8000362:	4a20      	ldr	r2, [pc, #128]	; (80003e4 <SystemInit+0x10c>)
 8000364:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000366:	4b1d      	ldr	r3, [pc, #116]	; (80003dc <SystemInit+0x104>)
 8000368:	4a1f      	ldr	r2, [pc, #124]	; (80003e8 <SystemInit+0x110>)
 800036a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800036c:	4b1b      	ldr	r3, [pc, #108]	; (80003dc <SystemInit+0x104>)
 800036e:	4a1f      	ldr	r2, [pc, #124]	; (80003ec <SystemInit+0x114>)
 8000370:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000372:	4b1a      	ldr	r3, [pc, #104]	; (80003dc <SystemInit+0x104>)
 8000374:	2200      	movs	r2, #0
 8000376:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000378:	4b18      	ldr	r3, [pc, #96]	; (80003dc <SystemInit+0x104>)
 800037a:	4a1c      	ldr	r2, [pc, #112]	; (80003ec <SystemInit+0x114>)
 800037c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800037e:	4b17      	ldr	r3, [pc, #92]	; (80003dc <SystemInit+0x104>)
 8000380:	2200      	movs	r2, #0
 8000382:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000384:	4b15      	ldr	r3, [pc, #84]	; (80003dc <SystemInit+0x104>)
 8000386:	4a19      	ldr	r2, [pc, #100]	; (80003ec <SystemInit+0x114>)
 8000388:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800038a:	4b14      	ldr	r3, [pc, #80]	; (80003dc <SystemInit+0x104>)
 800038c:	2200      	movs	r2, #0
 800038e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000390:	4b12      	ldr	r3, [pc, #72]	; (80003dc <SystemInit+0x104>)
 8000392:	681b      	ldr	r3, [r3, #0]
 8000394:	4a11      	ldr	r2, [pc, #68]	; (80003dc <SystemInit+0x104>)
 8000396:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800039a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800039c:	4b0f      	ldr	r3, [pc, #60]	; (80003dc <SystemInit+0x104>)
 800039e:	2200      	movs	r2, #0
 80003a0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80003a2:	4b13      	ldr	r3, [pc, #76]	; (80003f0 <SystemInit+0x118>)
 80003a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80003a6:	4a12      	ldr	r2, [pc, #72]	; (80003f0 <SystemInit+0x118>)
 80003a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80003ac:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80003ae:	4b11      	ldr	r3, [pc, #68]	; (80003f4 <SystemInit+0x11c>)
 80003b0:	681a      	ldr	r2, [r3, #0]
 80003b2:	4b11      	ldr	r3, [pc, #68]	; (80003f8 <SystemInit+0x120>)
 80003b4:	4013      	ands	r3, r2
 80003b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80003ba:	d202      	bcs.n	80003c2 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80003bc:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <SystemInit+0x124>)
 80003be:	2201      	movs	r2, #1
 80003c0:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80003c2:	4b0f      	ldr	r3, [pc, #60]	; (8000400 <SystemInit+0x128>)
 80003c4:	f243 02d2 	movw	r2, #12498	; 0x30d2
 80003c8:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80003ca:	bf00      	nop
 80003cc:	46bd      	mov	sp, r7
 80003ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003d2:	4770      	bx	lr
 80003d4:	e000ed00 	.word	0xe000ed00
 80003d8:	52002000 	.word	0x52002000
 80003dc:	58024400 	.word	0x58024400
 80003e0:	eaf6ed7f 	.word	0xeaf6ed7f
 80003e4:	02020200 	.word	0x02020200
 80003e8:	01ff0000 	.word	0x01ff0000
 80003ec:	01010280 	.word	0x01010280
 80003f0:	580000c0 	.word	0x580000c0
 80003f4:	5c001000 	.word	0x5c001000
 80003f8:	ffff0000 	.word	0xffff0000
 80003fc:	51008108 	.word	0x51008108
 8000400:	52004000 	.word	0x52004000

08000404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000404:	b480      	push	{r7}
 8000406:	b085      	sub	sp, #20
 8000408:	af00      	add	r7, sp, #0
 800040a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	f003 0307 	and.w	r3, r3, #7
 8000412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000414:	4b0b      	ldr	r3, [pc, #44]	; (8000444 <__NVIC_SetPriorityGrouping+0x40>)
 8000416:	68db      	ldr	r3, [r3, #12]
 8000418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800041a:	68ba      	ldr	r2, [r7, #8]
 800041c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000420:	4013      	ands	r3, r2
 8000422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000424:	68fb      	ldr	r3, [r7, #12]
 8000426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000428:	68bb      	ldr	r3, [r7, #8]
 800042a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800042c:	4b06      	ldr	r3, [pc, #24]	; (8000448 <__NVIC_SetPriorityGrouping+0x44>)
 800042e:	4313      	orrs	r3, r2
 8000430:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000432:	4a04      	ldr	r2, [pc, #16]	; (8000444 <__NVIC_SetPriorityGrouping+0x40>)
 8000434:	68bb      	ldr	r3, [r7, #8]
 8000436:	60d3      	str	r3, [r2, #12]
}
 8000438:	bf00      	nop
 800043a:	3714      	adds	r7, #20
 800043c:	46bd      	mov	sp, r7
 800043e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000442:	4770      	bx	lr
 8000444:	e000ed00 	.word	0xe000ed00
 8000448:	05fa0000 	.word	0x05fa0000

0800044c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800044c:	b480      	push	{r7}
 800044e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000450:	4b04      	ldr	r3, [pc, #16]	; (8000464 <__NVIC_GetPriorityGrouping+0x18>)
 8000452:	68db      	ldr	r3, [r3, #12]
 8000454:	0a1b      	lsrs	r3, r3, #8
 8000456:	f003 0307 	and.w	r3, r3, #7
}
 800045a:	4618      	mov	r0, r3
 800045c:	46bd      	mov	sp, r7
 800045e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000462:	4770      	bx	lr
 8000464:	e000ed00 	.word	0xe000ed00

08000468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000468:	b480      	push	{r7}
 800046a:	b083      	sub	sp, #12
 800046c:	af00      	add	r7, sp, #0
 800046e:	4603      	mov	r3, r0
 8000470:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8000472:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000476:	2b00      	cmp	r3, #0
 8000478:	db0b      	blt.n	8000492 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800047a:	88fb      	ldrh	r3, [r7, #6]
 800047c:	f003 021f 	and.w	r2, r3, #31
 8000480:	4907      	ldr	r1, [pc, #28]	; (80004a0 <__NVIC_EnableIRQ+0x38>)
 8000482:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000486:	095b      	lsrs	r3, r3, #5
 8000488:	2001      	movs	r0, #1
 800048a:	fa00 f202 	lsl.w	r2, r0, r2
 800048e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000492:	bf00      	nop
 8000494:	370c      	adds	r7, #12
 8000496:	46bd      	mov	sp, r7
 8000498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800049c:	4770      	bx	lr
 800049e:	bf00      	nop
 80004a0:	e000e100 	.word	0xe000e100

080004a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b083      	sub	sp, #12
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	4603      	mov	r3, r0
 80004ac:	6039      	str	r1, [r7, #0]
 80004ae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80004b0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	db0a      	blt.n	80004ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004b8:	683b      	ldr	r3, [r7, #0]
 80004ba:	b2da      	uxtb	r2, r3
 80004bc:	490c      	ldr	r1, [pc, #48]	; (80004f0 <__NVIC_SetPriority+0x4c>)
 80004be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80004c2:	0112      	lsls	r2, r2, #4
 80004c4:	b2d2      	uxtb	r2, r2
 80004c6:	440b      	add	r3, r1
 80004c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80004cc:	e00a      	b.n	80004e4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80004ce:	683b      	ldr	r3, [r7, #0]
 80004d0:	b2da      	uxtb	r2, r3
 80004d2:	4908      	ldr	r1, [pc, #32]	; (80004f4 <__NVIC_SetPriority+0x50>)
 80004d4:	88fb      	ldrh	r3, [r7, #6]
 80004d6:	f003 030f 	and.w	r3, r3, #15
 80004da:	3b04      	subs	r3, #4
 80004dc:	0112      	lsls	r2, r2, #4
 80004de:	b2d2      	uxtb	r2, r2
 80004e0:	440b      	add	r3, r1
 80004e2:	761a      	strb	r2, [r3, #24]
}
 80004e4:	bf00      	nop
 80004e6:	370c      	adds	r7, #12
 80004e8:	46bd      	mov	sp, r7
 80004ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ee:	4770      	bx	lr
 80004f0:	e000e100 	.word	0xe000e100
 80004f4:	e000ed00 	.word	0xe000ed00

080004f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80004f8:	b480      	push	{r7}
 80004fa:	b089      	sub	sp, #36	; 0x24
 80004fc:	af00      	add	r7, sp, #0
 80004fe:	60f8      	str	r0, [r7, #12]
 8000500:	60b9      	str	r1, [r7, #8]
 8000502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000504:	68fb      	ldr	r3, [r7, #12]
 8000506:	f003 0307 	and.w	r3, r3, #7
 800050a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800050c:	69fb      	ldr	r3, [r7, #28]
 800050e:	f1c3 0307 	rsb	r3, r3, #7
 8000512:	2b04      	cmp	r3, #4
 8000514:	bf28      	it	cs
 8000516:	2304      	movcs	r3, #4
 8000518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800051a:	69fb      	ldr	r3, [r7, #28]
 800051c:	3304      	adds	r3, #4
 800051e:	2b06      	cmp	r3, #6
 8000520:	d902      	bls.n	8000528 <NVIC_EncodePriority+0x30>
 8000522:	69fb      	ldr	r3, [r7, #28]
 8000524:	3b03      	subs	r3, #3
 8000526:	e000      	b.n	800052a <NVIC_EncodePriority+0x32>
 8000528:	2300      	movs	r3, #0
 800052a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800052c:	f04f 32ff 	mov.w	r2, #4294967295
 8000530:	69bb      	ldr	r3, [r7, #24]
 8000532:	fa02 f303 	lsl.w	r3, r2, r3
 8000536:	43da      	mvns	r2, r3
 8000538:	68bb      	ldr	r3, [r7, #8]
 800053a:	401a      	ands	r2, r3
 800053c:	697b      	ldr	r3, [r7, #20]
 800053e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000540:	f04f 31ff 	mov.w	r1, #4294967295
 8000544:	697b      	ldr	r3, [r7, #20]
 8000546:	fa01 f303 	lsl.w	r3, r1, r3
 800054a:	43d9      	mvns	r1, r3
 800054c:	687b      	ldr	r3, [r7, #4]
 800054e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000550:	4313      	orrs	r3, r2
         );
}
 8000552:	4618      	mov	r0, r3
 8000554:	3724      	adds	r7, #36	; 0x24
 8000556:	46bd      	mov	sp, r7
 8000558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055c:	4770      	bx	lr

0800055e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800055e:	b480      	push	{r7}
 8000560:	b087      	sub	sp, #28
 8000562:	af00      	add	r7, sp, #0
 8000564:	60f8      	str	r0, [r7, #12]
 8000566:	60b9      	str	r1, [r7, #8]
 8000568:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800056a:	68fb      	ldr	r3, [r7, #12]
 800056c:	3330      	adds	r3, #48	; 0x30
 800056e:	461a      	mov	r2, r3
 8000570:	68bb      	ldr	r3, [r7, #8]
 8000572:	0a1b      	lsrs	r3, r3, #8
 8000574:	009b      	lsls	r3, r3, #2
 8000576:	f003 030c 	and.w	r3, r3, #12
 800057a:	4413      	add	r3, r2
 800057c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800057e:	697b      	ldr	r3, [r7, #20]
 8000580:	681a      	ldr	r2, [r3, #0]
 8000582:	68bb      	ldr	r3, [r7, #8]
 8000584:	f003 031f 	and.w	r3, r3, #31
 8000588:	211f      	movs	r1, #31
 800058a:	fa01 f303 	lsl.w	r3, r1, r3
 800058e:	43db      	mvns	r3, r3
 8000590:	401a      	ands	r2, r3
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	0e9b      	lsrs	r3, r3, #26
 8000596:	f003 011f 	and.w	r1, r3, #31
 800059a:	68bb      	ldr	r3, [r7, #8]
 800059c:	f003 031f 	and.w	r3, r3, #31
 80005a0:	fa01 f303 	lsl.w	r3, r1, r3
 80005a4:	431a      	orrs	r2, r3
 80005a6:	697b      	ldr	r3, [r7, #20]
 80005a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80005aa:	bf00      	nop
 80005ac:	371c      	adds	r7, #28
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr

080005b6 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80005b6:	b480      	push	{r7}
 80005b8:	b087      	sub	sp, #28
 80005ba:	af00      	add	r7, sp, #0
 80005bc:	60f8      	str	r0, [r7, #12]
 80005be:	60b9      	str	r1, [r7, #8]
 80005c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80005c2:	68fb      	ldr	r3, [r7, #12]
 80005c4:	3314      	adds	r3, #20
 80005c6:	461a      	mov	r2, r3
 80005c8:	68bb      	ldr	r3, [r7, #8]
 80005ca:	0e5b      	lsrs	r3, r3, #25
 80005cc:	009b      	lsls	r3, r3, #2
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	4413      	add	r3, r2
 80005d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	681a      	ldr	r2, [r3, #0]
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	0d1b      	lsrs	r3, r3, #20
 80005de:	f003 031f 	and.w	r3, r3, #31
 80005e2:	2107      	movs	r1, #7
 80005e4:	fa01 f303 	lsl.w	r3, r1, r3
 80005e8:	43db      	mvns	r3, r3
 80005ea:	401a      	ands	r2, r3
 80005ec:	68bb      	ldr	r3, [r7, #8]
 80005ee:	0d1b      	lsrs	r3, r3, #20
 80005f0:	f003 031f 	and.w	r3, r3, #31
 80005f4:	6879      	ldr	r1, [r7, #4]
 80005f6:	fa01 f303 	lsl.w	r3, r1, r3
 80005fa:	431a      	orrs	r2, r3
 80005fc:	697b      	ldr	r3, [r7, #20]
 80005fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8000600:	bf00      	nop
 8000602:	371c      	adds	r7, #28
 8000604:	46bd      	mov	sp, r7
 8000606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060a:	4770      	bx	lr

0800060c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800060c:	b480      	push	{r7}
 800060e:	b085      	sub	sp, #20
 8000610:	af00      	add	r7, sp, #0
 8000612:	60f8      	str	r0, [r7, #12]
 8000614:	60b9      	str	r1, [r7, #8]
 8000616:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8000618:	68fb      	ldr	r3, [r7, #12]
 800061a:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000624:	43db      	mvns	r3, r3
 8000626:	401a      	ands	r2, r3
 8000628:	687b      	ldr	r3, [r7, #4]
 800062a:	f003 0318 	and.w	r3, r3, #24
 800062e:	4908      	ldr	r1, [pc, #32]	; (8000650 <LL_ADC_SetChannelSingleDiff+0x44>)
 8000630:	40d9      	lsrs	r1, r3
 8000632:	68bb      	ldr	r3, [r7, #8]
 8000634:	400b      	ands	r3, r1
 8000636:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800063a:	431a      	orrs	r2, r3
 800063c:	68fb      	ldr	r3, [r7, #12]
 800063e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 8000642:	bf00      	nop
 8000644:	3714      	adds	r7, #20
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	000fffff 	.word	0x000fffff

08000654 <LL_ADC_SetOverSamplingScope>:
  *         @arg @ref LL_ADC_OVS_GRP_INJECTED
  *         @arg @ref LL_ADC_OVS_GRP_INJ_REG_RESUMED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOverSamplingScope(ADC_TypeDef *ADCx, uint32_t OvsScope)
{
 8000654:	b480      	push	{r7}
 8000656:	b083      	sub	sp, #12
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_ROVSE | ADC_CFGR2_JOVSE | ADC_CFGR2_ROVSM, OvsScope);
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	691a      	ldr	r2, [r3, #16]
 8000662:	4b06      	ldr	r3, [pc, #24]	; (800067c <LL_ADC_SetOverSamplingScope+0x28>)
 8000664:	4013      	ands	r3, r2
 8000666:	683a      	ldr	r2, [r7, #0]
 8000668:	431a      	orrs	r2, r3
 800066a:	687b      	ldr	r3, [r7, #4]
 800066c:	611a      	str	r2, [r3, #16]
}
 800066e:	bf00      	nop
 8000670:	370c      	adds	r7, #12
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	fffffbfc 	.word	0xfffffbfc

08000680 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	689a      	ldr	r2, [r3, #8]
 800068c:	4b04      	ldr	r3, [pc, #16]	; (80006a0 <LL_ADC_DisableDeepPowerDown+0x20>)
 800068e:	4013      	ands	r3, r2
 8000690:	687a      	ldr	r2, [r7, #4]
 8000692:	6093      	str	r3, [r2, #8]
}
 8000694:	bf00      	nop
 8000696:	370c      	adds	r7, #12
 8000698:	46bd      	mov	sp, r7
 800069a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069e:	4770      	bx	lr
 80006a0:	5fffffc0 	.word	0x5fffffc0

080006a4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80006a4:	b480      	push	{r7}
 80006a6:	b083      	sub	sp, #12
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	689a      	ldr	r2, [r3, #8]
 80006b0:	4b05      	ldr	r3, [pc, #20]	; (80006c8 <LL_ADC_EnableInternalRegulator+0x24>)
 80006b2:	4013      	ands	r3, r2
 80006b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80006bc:	bf00      	nop
 80006be:	370c      	adds	r7, #12
 80006c0:	46bd      	mov	sp, r7
 80006c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c6:	4770      	bx	lr
 80006c8:	6fffffc0 	.word	0x6fffffc0

080006cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	689a      	ldr	r2, [r3, #8]
 80006d8:	4b05      	ldr	r3, [pc, #20]	; (80006f0 <LL_ADC_Enable+0x24>)
 80006da:	4013      	ands	r3, r2
 80006dc:	f043 0201 	orr.w	r2, r3, #1
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	7fffffc0 	.word	0x7fffffc0

080006f4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	689a      	ldr	r2, [r3, #8]
 8000700:	4b05      	ldr	r3, [pc, #20]	; (8000718 <LL_ADC_REG_StartConversion+0x24>)
 8000702:	4013      	ands	r3, r2
 8000704:	f043 0204 	orr.w	r2, r3, #4
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800070c:	bf00      	nop
 800070e:	370c      	adds	r7, #12
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr
 8000718:	7fffffc0 	.word	0x7fffffc0

0800071c <LL_ADC_IsActiveFlag_ADRDY>:
  * @rmtoll ISR      ADRDY          LL_ADC_IsActiveFlag_ADRDY
  * @param  ADCx ADC instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_ADC_IsActiveFlag_ADRDY(ADC_TypeDef *ADCx)
{
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->ISR, LL_ADC_FLAG_ADRDY) == (LL_ADC_FLAG_ADRDY)) ? 1UL : 0UL);
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f003 0301 	and.w	r3, r3, #1
 800072c:	2b01      	cmp	r3, #1
 800072e:	d101      	bne.n	8000734 <LL_ADC_IsActiveFlag_ADRDY+0x18>
 8000730:	2301      	movs	r3, #1
 8000732:	e000      	b.n	8000736 <LL_ADC_IsActiveFlag_ADRDY+0x1a>
 8000734:	2300      	movs	r3, #0
}
 8000736:	4618      	mov	r0, r3
 8000738:	370c      	adds	r7, #12
 800073a:	46bd      	mov	sp, r7
 800073c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000740:	4770      	bx	lr
	...

08000744 <LL_DMA_EnableStream>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
 800074c:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	60fb      	str	r3, [r7, #12]

  SET_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_EN);
 8000752:	4a0c      	ldr	r2, [pc, #48]	; (8000784 <LL_DMA_EnableStream+0x40>)
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	4413      	add	r3, r2
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	461a      	mov	r2, r3
 800075c:	68fb      	ldr	r3, [r7, #12]
 800075e:	4413      	add	r3, r2
 8000760:	681b      	ldr	r3, [r3, #0]
 8000762:	4908      	ldr	r1, [pc, #32]	; (8000784 <LL_DMA_EnableStream+0x40>)
 8000764:	683a      	ldr	r2, [r7, #0]
 8000766:	440a      	add	r2, r1
 8000768:	7812      	ldrb	r2, [r2, #0]
 800076a:	4611      	mov	r1, r2
 800076c:	68fa      	ldr	r2, [r7, #12]
 800076e:	440a      	add	r2, r1
 8000770:	f043 0301 	orr.w	r3, r3, #1
 8000774:	6013      	str	r3, [r2, #0]
}
 8000776:	bf00      	nop
 8000778:	3714      	adds	r7, #20
 800077a:	46bd      	mov	sp, r7
 800077c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000780:	4770      	bx	lr
 8000782:	bf00      	nop
 8000784:	08002eb4 	.word	0x08002eb4

08000788 <LL_DMA_SetDataTransferDirection>:
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_PERIPH
  *         @arg @ref LL_DMA_DIRECTION_MEMORY_TO_MEMORY
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataTransferDirection(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Direction)
{
 8000788:	b480      	push	{r7}
 800078a:	b087      	sub	sp, #28
 800078c:	af00      	add	r7, sp, #0
 800078e:	60f8      	str	r0, [r7, #12]
 8000790:	60b9      	str	r1, [r7, #8]
 8000792:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000794:	68fb      	ldr	r3, [r7, #12]
 8000796:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_DIR, Direction);
 8000798:	4a0d      	ldr	r2, [pc, #52]	; (80007d0 <LL_DMA_SetDataTransferDirection+0x48>)
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	4413      	add	r3, r2
 800079e:	781b      	ldrb	r3, [r3, #0]
 80007a0:	461a      	mov	r2, r3
 80007a2:	697b      	ldr	r3, [r7, #20]
 80007a4:	4413      	add	r3, r2
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80007ac:	4908      	ldr	r1, [pc, #32]	; (80007d0 <LL_DMA_SetDataTransferDirection+0x48>)
 80007ae:	68bb      	ldr	r3, [r7, #8]
 80007b0:	440b      	add	r3, r1
 80007b2:	781b      	ldrb	r3, [r3, #0]
 80007b4:	4619      	mov	r1, r3
 80007b6:	697b      	ldr	r3, [r7, #20]
 80007b8:	440b      	add	r3, r1
 80007ba:	4619      	mov	r1, r3
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	4313      	orrs	r3, r2
 80007c0:	600b      	str	r3, [r1, #0]
}
 80007c2:	bf00      	nop
 80007c4:	371c      	adds	r7, #28
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	08002eb4 	.word	0x08002eb4

080007d4 <LL_DMA_SetMode>:
  *         @arg @ref LL_DMA_MODE_CIRCULAR
  *         @arg @ref LL_DMA_MODE_PFCTRL
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Mode)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	60f8      	str	r0, [r7, #12]
 80007dc:	60b9      	str	r1, [r7, #8]
 80007de:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_CIRC | DMA_SxCR_PFCTRL, Mode);
 80007e4:	4a0d      	ldr	r2, [pc, #52]	; (800081c <LL_DMA_SetMode+0x48>)
 80007e6:	68bb      	ldr	r3, [r7, #8]
 80007e8:	4413      	add	r3, r2
 80007ea:	781b      	ldrb	r3, [r3, #0]
 80007ec:	461a      	mov	r2, r3
 80007ee:	697b      	ldr	r3, [r7, #20]
 80007f0:	4413      	add	r3, r2
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f423 7290 	bic.w	r2, r3, #288	; 0x120
 80007f8:	4908      	ldr	r1, [pc, #32]	; (800081c <LL_DMA_SetMode+0x48>)
 80007fa:	68bb      	ldr	r3, [r7, #8]
 80007fc:	440b      	add	r3, r1
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	4619      	mov	r1, r3
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	440b      	add	r3, r1
 8000806:	4619      	mov	r1, r3
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	4313      	orrs	r3, r2
 800080c:	600b      	str	r3, [r1, #0]
}
 800080e:	bf00      	nop
 8000810:	371c      	adds	r7, #28
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	08002eb4 	.word	0x08002eb4

08000820 <LL_DMA_SetPeriphIncMode>:
  *         @arg @ref LL_DMA_PERIPH_NOINCREMENT
  *         @arg @ref LL_DMA_PERIPH_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 8000820:	b480      	push	{r7}
 8000822:	b087      	sub	sp, #28
 8000824:	af00      	add	r7, sp, #0
 8000826:	60f8      	str	r0, [r7, #12]
 8000828:	60b9      	str	r1, [r7, #8]
 800082a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PINC, IncrementMode);
 8000830:	4a0d      	ldr	r2, [pc, #52]	; (8000868 <LL_DMA_SetPeriphIncMode+0x48>)
 8000832:	68bb      	ldr	r3, [r7, #8]
 8000834:	4413      	add	r3, r2
 8000836:	781b      	ldrb	r3, [r3, #0]
 8000838:	461a      	mov	r2, r3
 800083a:	697b      	ldr	r3, [r7, #20]
 800083c:	4413      	add	r3, r2
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8000844:	4908      	ldr	r1, [pc, #32]	; (8000868 <LL_DMA_SetPeriphIncMode+0x48>)
 8000846:	68bb      	ldr	r3, [r7, #8]
 8000848:	440b      	add	r3, r1
 800084a:	781b      	ldrb	r3, [r3, #0]
 800084c:	4619      	mov	r1, r3
 800084e:	697b      	ldr	r3, [r7, #20]
 8000850:	440b      	add	r3, r1
 8000852:	4619      	mov	r1, r3
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	4313      	orrs	r3, r2
 8000858:	600b      	str	r3, [r1, #0]
}
 800085a:	bf00      	nop
 800085c:	371c      	adds	r7, #28
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	08002eb4 	.word	0x08002eb4

0800086c <LL_DMA_SetMemoryIncMode>:
  *         @arg @ref LL_DMA_MEMORY_NOINCREMENT
  *         @arg @ref LL_DMA_MEMORY_INCREMENT
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryIncMode(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t IncrementMode)
{
 800086c:	b480      	push	{r7}
 800086e:	b087      	sub	sp, #28
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MINC, IncrementMode);
 800087c:	4a0d      	ldr	r2, [pc, #52]	; (80008b4 <LL_DMA_SetMemoryIncMode+0x48>)
 800087e:	68bb      	ldr	r3, [r7, #8]
 8000880:	4413      	add	r3, r2
 8000882:	781b      	ldrb	r3, [r3, #0]
 8000884:	461a      	mov	r2, r3
 8000886:	697b      	ldr	r3, [r7, #20]
 8000888:	4413      	add	r3, r2
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8000890:	4908      	ldr	r1, [pc, #32]	; (80008b4 <LL_DMA_SetMemoryIncMode+0x48>)
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	440b      	add	r3, r1
 8000896:	781b      	ldrb	r3, [r3, #0]
 8000898:	4619      	mov	r1, r3
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	440b      	add	r3, r1
 800089e:	4619      	mov	r1, r3
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	4313      	orrs	r3, r2
 80008a4:	600b      	str	r3, [r1, #0]
}
 80008a6:	bf00      	nop
 80008a8:	371c      	adds	r7, #28
 80008aa:	46bd      	mov	sp, r7
 80008ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b0:	4770      	bx	lr
 80008b2:	bf00      	nop
 80008b4:	08002eb4 	.word	0x08002eb4

080008b8 <LL_DMA_SetPeriphSize>:
  *         @arg @ref LL_DMA_PDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_PDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphSize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 80008b8:	b480      	push	{r7}
 80008ba:	b087      	sub	sp, #28
 80008bc:	af00      	add	r7, sp, #0
 80008be:	60f8      	str	r0, [r7, #12]
 80008c0:	60b9      	str	r1, [r7, #8]
 80008c2:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PSIZE, Size);
 80008c8:	4a0d      	ldr	r2, [pc, #52]	; (8000900 <LL_DMA_SetPeriphSize+0x48>)
 80008ca:	68bb      	ldr	r3, [r7, #8]
 80008cc:	4413      	add	r3, r2
 80008ce:	781b      	ldrb	r3, [r3, #0]
 80008d0:	461a      	mov	r2, r3
 80008d2:	697b      	ldr	r3, [r7, #20]
 80008d4:	4413      	add	r3, r2
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f423 52c0 	bic.w	r2, r3, #6144	; 0x1800
 80008dc:	4908      	ldr	r1, [pc, #32]	; (8000900 <LL_DMA_SetPeriphSize+0x48>)
 80008de:	68bb      	ldr	r3, [r7, #8]
 80008e0:	440b      	add	r3, r1
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	4619      	mov	r1, r3
 80008e6:	697b      	ldr	r3, [r7, #20]
 80008e8:	440b      	add	r3, r1
 80008ea:	4619      	mov	r1, r3
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	4313      	orrs	r3, r2
 80008f0:	600b      	str	r3, [r1, #0]
}
 80008f2:	bf00      	nop
 80008f4:	371c      	adds	r7, #28
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	08002eb4 	.word	0x08002eb4

08000904 <LL_DMA_SetMemorySize>:
  *         @arg @ref LL_DMA_MDATAALIGN_HALFWORD
  *         @arg @ref LL_DMA_MDATAALIGN_WORD
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemorySize(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Size)
{
 8000904:	b480      	push	{r7}
 8000906:	b087      	sub	sp, #28
 8000908:	af00      	add	r7, sp, #0
 800090a:	60f8      	str	r0, [r7, #12]
 800090c:	60b9      	str	r1, [r7, #8]
 800090e:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000910:	68fb      	ldr	r3, [r7, #12]
 8000912:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_MSIZE, Size);
 8000914:	4a0d      	ldr	r2, [pc, #52]	; (800094c <LL_DMA_SetMemorySize+0x48>)
 8000916:	68bb      	ldr	r3, [r7, #8]
 8000918:	4413      	add	r3, r2
 800091a:	781b      	ldrb	r3, [r3, #0]
 800091c:	461a      	mov	r2, r3
 800091e:	697b      	ldr	r3, [r7, #20]
 8000920:	4413      	add	r3, r2
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	f423 42c0 	bic.w	r2, r3, #24576	; 0x6000
 8000928:	4908      	ldr	r1, [pc, #32]	; (800094c <LL_DMA_SetMemorySize+0x48>)
 800092a:	68bb      	ldr	r3, [r7, #8]
 800092c:	440b      	add	r3, r1
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	4619      	mov	r1, r3
 8000932:	697b      	ldr	r3, [r7, #20]
 8000934:	440b      	add	r3, r1
 8000936:	4619      	mov	r1, r3
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	4313      	orrs	r3, r2
 800093c:	600b      	str	r3, [r1, #0]
}
 800093e:	bf00      	nop
 8000940:	371c      	adds	r7, #28
 8000942:	46bd      	mov	sp, r7
 8000944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000948:	4770      	bx	lr
 800094a:	bf00      	nop
 800094c:	08002eb4 	.word	0x08002eb4

08000950 <LL_DMA_SetStreamPriorityLevel>:
  *         @arg @ref LL_DMA_PRIORITY_HIGH
  *         @arg @ref LL_DMA_PRIORITY_VERYHIGH
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetStreamPriorityLevel(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t  Priority)
{
 8000950:	b480      	push	{r7}
 8000952:	b087      	sub	sp, #28
 8000954:	af00      	add	r7, sp, #0
 8000956:	60f8      	str	r0, [r7, #12]
 8000958:	60b9      	str	r1, [r7, #8]
 800095a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->CR, DMA_SxCR_PL, Priority);
 8000960:	4a0d      	ldr	r2, [pc, #52]	; (8000998 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8000962:	68bb      	ldr	r3, [r7, #8]
 8000964:	4413      	add	r3, r2
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	461a      	mov	r2, r3
 800096a:	697b      	ldr	r3, [r7, #20]
 800096c:	4413      	add	r3, r2
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000974:	4908      	ldr	r1, [pc, #32]	; (8000998 <LL_DMA_SetStreamPriorityLevel+0x48>)
 8000976:	68bb      	ldr	r3, [r7, #8]
 8000978:	440b      	add	r3, r1
 800097a:	781b      	ldrb	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	697b      	ldr	r3, [r7, #20]
 8000980:	440b      	add	r3, r1
 8000982:	4619      	mov	r1, r3
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4313      	orrs	r3, r2
 8000988:	600b      	str	r3, [r1, #0]
}
 800098a:	bf00      	nop
 800098c:	371c      	adds	r7, #28
 800098e:	46bd      	mov	sp, r7
 8000990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000994:	4770      	bx	lr
 8000996:	bf00      	nop
 8000998:	08002eb4 	.word	0x08002eb4

0800099c <LL_DMA_SetDataLength>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  NbData Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetDataLength(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t NbData)
{
 800099c:	b480      	push	{r7}
 800099e:	b087      	sub	sp, #28
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 80009a8:	68fb      	ldr	r3, [r7, #12]
 80009aa:	617b      	str	r3, [r7, #20]

  MODIFY_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->NDTR, DMA_SxNDT, NbData);
 80009ac:	4a0d      	ldr	r2, [pc, #52]	; (80009e4 <LL_DMA_SetDataLength+0x48>)
 80009ae:	68bb      	ldr	r3, [r7, #8]
 80009b0:	4413      	add	r3, r2
 80009b2:	781b      	ldrb	r3, [r3, #0]
 80009b4:	461a      	mov	r2, r3
 80009b6:	697b      	ldr	r3, [r7, #20]
 80009b8:	4413      	add	r3, r2
 80009ba:	685a      	ldr	r2, [r3, #4]
 80009bc:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <LL_DMA_SetDataLength+0x4c>)
 80009be:	4013      	ands	r3, r2
 80009c0:	4908      	ldr	r1, [pc, #32]	; (80009e4 <LL_DMA_SetDataLength+0x48>)
 80009c2:	68ba      	ldr	r2, [r7, #8]
 80009c4:	440a      	add	r2, r1
 80009c6:	7812      	ldrb	r2, [r2, #0]
 80009c8:	4611      	mov	r1, r2
 80009ca:	697a      	ldr	r2, [r7, #20]
 80009cc:	440a      	add	r2, r1
 80009ce:	4611      	mov	r1, r2
 80009d0:	687a      	ldr	r2, [r7, #4]
 80009d2:	4313      	orrs	r3, r2
 80009d4:	604b      	str	r3, [r1, #4]
}
 80009d6:	bf00      	nop
 80009d8:	371c      	adds	r7, #28
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	08002eb4 	.word	0x08002eb4
 80009e8:	ffff0000 	.word	0xffff0000

080009ec <LL_DMA_SetPeriphRequest>:
  *
  * @note   (*) Availability depends on devices.
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphRequest(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t Request)
{
 80009ec:	b480      	push	{r7}
 80009ee:	b085      	sub	sp, #20
 80009f0:	af00      	add	r7, sp, #0
 80009f2:	60f8      	str	r0, [r7, #12]
 80009f4:	60b9      	str	r1, [r7, #8]
 80009f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(((DMAMUX_Channel_TypeDef *)(uint32_t)((uint32_t)DMAMUX1_Channel0 + (DMAMUX_CCR_SIZE * (Stream)) + (uint32_t)(DMAMUX_CCR_SIZE * LL_DMA_INSTANCE_TO_DMAMUX_CHANNEL(DMAx))))->CCR, DMAMUX_CxCR_DMAREQ_ID, Request);
 80009f8:	68ba      	ldr	r2, [r7, #8]
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <LL_DMA_SetPeriphRequest+0x58>)
 80009fc:	4413      	add	r3, r2
 80009fe:	009b      	lsls	r3, r3, #2
 8000a00:	68fa      	ldr	r2, [r7, #12]
 8000a02:	4911      	ldr	r1, [pc, #68]	; (8000a48 <LL_DMA_SetPeriphRequest+0x5c>)
 8000a04:	428a      	cmp	r2, r1
 8000a06:	d101      	bne.n	8000a0c <LL_DMA_SetPeriphRequest+0x20>
 8000a08:	2200      	movs	r2, #0
 8000a0a:	e000      	b.n	8000a0e <LL_DMA_SetPeriphRequest+0x22>
 8000a0c:	2220      	movs	r2, #32
 8000a0e:	4413      	add	r3, r2
 8000a10:	681b      	ldr	r3, [r3, #0]
 8000a12:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8000a16:	68b9      	ldr	r1, [r7, #8]
 8000a18:	4b0a      	ldr	r3, [pc, #40]	; (8000a44 <LL_DMA_SetPeriphRequest+0x58>)
 8000a1a:	440b      	add	r3, r1
 8000a1c:	009b      	lsls	r3, r3, #2
 8000a1e:	68f9      	ldr	r1, [r7, #12]
 8000a20:	4809      	ldr	r0, [pc, #36]	; (8000a48 <LL_DMA_SetPeriphRequest+0x5c>)
 8000a22:	4281      	cmp	r1, r0
 8000a24:	d101      	bne.n	8000a2a <LL_DMA_SetPeriphRequest+0x3e>
 8000a26:	2100      	movs	r1, #0
 8000a28:	e000      	b.n	8000a2c <LL_DMA_SetPeriphRequest+0x40>
 8000a2a:	2120      	movs	r1, #32
 8000a2c:	440b      	add	r3, r1
 8000a2e:	4619      	mov	r1, r3
 8000a30:	687b      	ldr	r3, [r7, #4]
 8000a32:	4313      	orrs	r3, r2
 8000a34:	600b      	str	r3, [r1, #0]
}
 8000a36:	bf00      	nop
 8000a38:	3714      	adds	r7, #20
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	10008200 	.word	0x10008200
 8000a48:	40020000 	.word	0x40020000

08000a4c <LL_DMA_DisableFifoMode>:
  *         @arg @ref LL_DMA_STREAM_6
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableFifoMode(DMA_TypeDef *DMAx, uint32_t Stream)
{
 8000a4c:	b480      	push	{r7}
 8000a4e:	b085      	sub	sp, #20
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
 8000a54:	6039      	str	r1, [r7, #0]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	60fb      	str	r3, [r7, #12]

  CLEAR_BIT(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->FCR, DMA_SxFCR_DMDIS);
 8000a5a:	4a0c      	ldr	r2, [pc, #48]	; (8000a8c <LL_DMA_DisableFifoMode+0x40>)
 8000a5c:	683b      	ldr	r3, [r7, #0]
 8000a5e:	4413      	add	r3, r2
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	461a      	mov	r2, r3
 8000a64:	68fb      	ldr	r3, [r7, #12]
 8000a66:	4413      	add	r3, r2
 8000a68:	695b      	ldr	r3, [r3, #20]
 8000a6a:	4908      	ldr	r1, [pc, #32]	; (8000a8c <LL_DMA_DisableFifoMode+0x40>)
 8000a6c:	683a      	ldr	r2, [r7, #0]
 8000a6e:	440a      	add	r2, r1
 8000a70:	7812      	ldrb	r2, [r2, #0]
 8000a72:	4611      	mov	r1, r2
 8000a74:	68fa      	ldr	r2, [r7, #12]
 8000a76:	440a      	add	r2, r1
 8000a78:	f023 0304 	bic.w	r3, r3, #4
 8000a7c:	6153      	str	r3, [r2, #20]
}
 8000a7e:	bf00      	nop
 8000a80:	3714      	adds	r7, #20
 8000a82:	46bd      	mov	sp, r7
 8000a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop
 8000a8c:	08002eb4 	.word	0x08002eb4

08000a90 <LL_DMA_SetMemoryAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  MemoryAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetMemoryAddress(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t MemoryAddress)
{
 8000a90:	b480      	push	{r7}
 8000a92:	b087      	sub	sp, #28
 8000a94:	af00      	add	r7, sp, #0
 8000a96:	60f8      	str	r0, [r7, #12]
 8000a98:	60b9      	str	r1, [r7, #8]
 8000a9a:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000a9c:	68fb      	ldr	r3, [r7, #12]
 8000a9e:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->M0AR, MemoryAddress);
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <LL_DMA_SetMemoryAddress+0x30>)
 8000aa2:	68bb      	ldr	r3, [r7, #8]
 8000aa4:	4413      	add	r3, r2
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	697b      	ldr	r3, [r7, #20]
 8000aac:	4413      	add	r3, r2
 8000aae:	461a      	mov	r2, r3
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	60d3      	str	r3, [r2, #12]
}
 8000ab4:	bf00      	nop
 8000ab6:	371c      	adds	r7, #28
 8000ab8:	46bd      	mov	sp, r7
 8000aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abe:	4770      	bx	lr
 8000ac0:	08002eb4 	.word	0x08002eb4

08000ac4 <LL_DMA_SetPeriphAddress>:
  *         @arg @ref LL_DMA_STREAM_7
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef *DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b087      	sub	sp, #28
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	60f8      	str	r0, [r7, #12]
 8000acc:	60b9      	str	r1, [r7, #8]
 8000ace:	607a      	str	r2, [r7, #4]
  uint32_t dma_base_addr = (uint32_t)DMAx;
 8000ad0:	68fb      	ldr	r3, [r7, #12]
 8000ad2:	617b      	str	r3, [r7, #20]

  WRITE_REG(((DMA_Stream_TypeDef *)(dma_base_addr + LL_DMA_STR_OFFSET_TAB[Stream]))->PAR, PeriphAddress);
 8000ad4:	4a07      	ldr	r2, [pc, #28]	; (8000af4 <LL_DMA_SetPeriphAddress+0x30>)
 8000ad6:	68bb      	ldr	r3, [r7, #8]
 8000ad8:	4413      	add	r3, r2
 8000ada:	781b      	ldrb	r3, [r3, #0]
 8000adc:	461a      	mov	r2, r3
 8000ade:	697b      	ldr	r3, [r7, #20]
 8000ae0:	4413      	add	r3, r2
 8000ae2:	461a      	mov	r2, r3
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	6093      	str	r3, [r2, #8]
}
 8000ae8:	bf00      	nop
 8000aea:	371c      	adds	r7, #28
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	08002eb4 	.word	0x08002eb4

08000af8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000af8:	b480      	push	{r7}
 8000afa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000afc:	4b05      	ldr	r3, [pc, #20]	; (8000b14 <LL_RCC_HSI_Enable+0x1c>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a04      	ldr	r2, [pc, #16]	; (8000b14 <LL_RCC_HSI_Enable+0x1c>)
 8000b02:	f043 0301 	orr.w	r3, r3, #1
 8000b06:	6013      	str	r3, [r2, #0]
}
 8000b08:	bf00      	nop
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr
 8000b12:	bf00      	nop
 8000b14:	58024400 	.word	0x58024400

08000b18 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000b18:	b480      	push	{r7}
 8000b1a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == (RCC_CR_HSIRDY)) ? 1UL : 0UL);
 8000b1c:	4b06      	ldr	r3, [pc, #24]	; (8000b38 <LL_RCC_HSI_IsReady+0x20>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	f003 0304 	and.w	r3, r3, #4
 8000b24:	2b04      	cmp	r3, #4
 8000b26:	d101      	bne.n	8000b2c <LL_RCC_HSI_IsReady+0x14>
 8000b28:	2301      	movs	r3, #1
 8000b2a:	e000      	b.n	8000b2e <LL_RCC_HSI_IsReady+0x16>
 8000b2c:	2300      	movs	r3, #0
}
 8000b2e:	4618      	mov	r0, r3
 8000b30:	46bd      	mov	sp, r7
 8000b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b36:	4770      	bx	lr
 8000b38:	58024400 	.word	0x58024400

08000b3c <LL_RCC_HSI_SetDivider>:
  *         @arg @ref LL_RCC_HSI_DIV4
  *         @arg @ref LL_RCC_HSI_DIV8
  * @retval None.
  */
__STATIC_INLINE void LL_RCC_HSI_SetDivider(uint32_t Divider)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b083      	sub	sp, #12
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_HSIDIV, Divider);
 8000b44:	4b06      	ldr	r3, [pc, #24]	; (8000b60 <LL_RCC_HSI_SetDivider+0x24>)
 8000b46:	681b      	ldr	r3, [r3, #0]
 8000b48:	f023 0218 	bic.w	r2, r3, #24
 8000b4c:	4904      	ldr	r1, [pc, #16]	; (8000b60 <LL_RCC_HSI_SetDivider+0x24>)
 8000b4e:	687b      	ldr	r3, [r7, #4]
 8000b50:	4313      	orrs	r3, r2
 8000b52:	600b      	str	r3, [r1, #0]
}
 8000b54:	bf00      	nop
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	58024400 	.word	0x58024400

08000b64 <LL_RCC_HSI_SetCalibTrimming>:
  * @rmtoll HSICFGR        HSITRIM       LL_RCC_HSI_SetCalibTrimming
  * @param  Value can be a value between 0 and 127 (63 for Cut1.x)
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000b64:	b480      	push	{r7}
 8000b66:	b083      	sub	sp, #12
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
#if defined(RCC_VER_X)
  if ((DBGMCU->IDCODE & 0xF0000000U) == 0x10000000U)
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <LL_RCC_HSI_SetCalibTrimming+0x48>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8000b74:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000b78:	d109      	bne.n	8000b8e <LL_RCC_HSI_SetCalibTrimming+0x2a>
  {
    /* STM32H7 Rev.Y */
    MODIFY_REG(RCC->HSICFGR, 0x3F000U, Value << 12U);
 8000b7a:	4b0d      	ldr	r3, [pc, #52]	; (8000bb0 <LL_RCC_HSI_SetCalibTrimming+0x4c>)
 8000b7c:	685b      	ldr	r3, [r3, #4]
 8000b7e:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	031b      	lsls	r3, r3, #12
 8000b86:	490a      	ldr	r1, [pc, #40]	; (8000bb0 <LL_RCC_HSI_SetCalibTrimming+0x4c>)
 8000b88:	4313      	orrs	r3, r2
 8000b8a:	604b      	str	r3, [r1, #4]
    MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
  }
#else
  MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
#endif /* RCC_VER_X */
}
 8000b8c:	e008      	b.n	8000ba0 <LL_RCC_HSI_SetCalibTrimming+0x3c>
    MODIFY_REG(RCC->HSICFGR, RCC_HSICFGR_HSITRIM, Value << RCC_HSICFGR_HSITRIM_Pos);
 8000b8e:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <LL_RCC_HSI_SetCalibTrimming+0x4c>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	061b      	lsls	r3, r3, #24
 8000b9a:	4905      	ldr	r1, [pc, #20]	; (8000bb0 <LL_RCC_HSI_SetCalibTrimming+0x4c>)
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	604b      	str	r3, [r1, #4]
}
 8000ba0:	bf00      	nop
 8000ba2:	370c      	adds	r7, #12
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr
 8000bac:	5c001000 	.word	0x5c001000
 8000bb0:	58024400 	.word	0x58024400

08000bb4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL1
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <LL_RCC_SetSysClkSource+0x24>)
 8000bbe:	691b      	ldr	r3, [r3, #16]
 8000bc0:	f023 0207 	bic.w	r2, r3, #7
 8000bc4:	4904      	ldr	r1, [pc, #16]	; (8000bd8 <LL_RCC_SetSysClkSource+0x24>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	610b      	str	r3, [r1, #16]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	58024400 	.word	0x58024400

08000bdc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_CSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL1
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <LL_RCC_GetSysClkSource+0x18>)
 8000be2:	691b      	ldr	r3, [r3, #16]
 8000be4:	f003 0338 	and.w	r3, r3, #56	; 0x38
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	58024400 	.word	0x58024400

08000bf8 <LL_RCC_SetSysPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysPrescaler(uint32_t Prescaler)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CFGR_D1CPRE)
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, Prescaler);
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <LL_RCC_SetSysPrescaler+0x24>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8000c08:	4904      	ldr	r1, [pc, #16]	; (8000c1c <LL_RCC_SetSysPrescaler+0x24>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, Prescaler);
#endif /* RCC_D1CFGR_D1CPRE */
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	58024400 	.word	0x58024400

08000c20 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_AHB_DIV_256
  *         @arg @ref LL_RCC_AHB_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000c20:	b480      	push	{r7}
 8000c22:	b083      	sub	sp, #12
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CFGR_HPRE)
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, Prescaler);
 8000c28:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <LL_RCC_SetAHBPrescaler+0x24>)
 8000c2a:	699b      	ldr	r3, [r3, #24]
 8000c2c:	f023 020f 	bic.w	r2, r3, #15
 8000c30:	4904      	ldr	r1, [pc, #16]	; (8000c44 <LL_RCC_SetAHBPrescaler+0x24>)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	4313      	orrs	r3, r2
 8000c36:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_HPRE, Prescaler);
#endif /* RCC_D1CFGR_HPRE */
}
 8000c38:	bf00      	nop
 8000c3a:	370c      	adds	r7, #12
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr
 8000c44:	58024400 	.word	0x58024400

08000c48 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	b083      	sub	sp, #12
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
#if defined(RCC_D2CFGR_D2PPRE1)
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, Prescaler);
 8000c50:	4b06      	ldr	r3, [pc, #24]	; (8000c6c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c52:	69db      	ldr	r3, [r3, #28]
 8000c54:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000c58:	4904      	ldr	r1, [pc, #16]	; (8000c6c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	4313      	orrs	r3, r2
 8000c5e:	61cb      	str	r3, [r1, #28]
#else
  MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, Prescaler);
#endif /* RCC_D2CFGR_D2PPRE1 */
}
 8000c60:	bf00      	nop
 8000c62:	370c      	adds	r7, #12
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	58024400 	.word	0x58024400

08000c70 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
#if defined(RCC_D2CFGR_D2PPRE2)
  MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, Prescaler);
 8000c78:	4b06      	ldr	r3, [pc, #24]	; (8000c94 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000c7a:	69db      	ldr	r3, [r3, #28]
 8000c7c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000c80:	4904      	ldr	r1, [pc, #16]	; (8000c94 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	4313      	orrs	r3, r2
 8000c86:	61cb      	str	r3, [r1, #28]
#else
  MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE2, Prescaler);
#endif /* RCC_D2CFGR_D2PPRE2 */
}
 8000c88:	bf00      	nop
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr
 8000c94:	58024400 	.word	0x58024400

08000c98 <LL_RCC_SetAPB3Prescaler>:
  *         @arg @ref LL_RCC_APB3_DIV_8
  *         @arg @ref LL_RCC_APB3_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB3Prescaler(uint32_t Prescaler)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b083      	sub	sp, #12
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
#if defined(RCC_D1CFGR_D1PPRE)
  MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, Prescaler);
 8000ca0:	4b06      	ldr	r3, [pc, #24]	; (8000cbc <LL_RCC_SetAPB3Prescaler+0x24>)
 8000ca2:	699b      	ldr	r3, [r3, #24]
 8000ca4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000ca8:	4904      	ldr	r1, [pc, #16]	; (8000cbc <LL_RCC_SetAPB3Prescaler+0x24>)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	4313      	orrs	r3, r2
 8000cae:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDPPRE, Prescaler);
#endif /* RCC_D1CFGR_D1PPRE */
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	58024400 	.word	0x58024400

08000cc0 <LL_RCC_SetAPB4Prescaler>:
  *         @arg @ref LL_RCC_APB4_DIV_8
  *         @arg @ref LL_RCC_APB4_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB4Prescaler(uint32_t Prescaler)
{
 8000cc0:	b480      	push	{r7}
 8000cc2:	b083      	sub	sp, #12
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
#if defined(RCC_D3CFGR_D3PPRE)
  MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, Prescaler);
 8000cc8:	4b06      	ldr	r3, [pc, #24]	; (8000ce4 <LL_RCC_SetAPB4Prescaler+0x24>)
 8000cca:	6a1b      	ldr	r3, [r3, #32]
 8000ccc:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000cd0:	4904      	ldr	r1, [pc, #16]	; (8000ce4 <LL_RCC_SetAPB4Prescaler+0x24>)
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	4313      	orrs	r3, r2
 8000cd6:	620b      	str	r3, [r1, #32]
#else
  MODIFY_REG(RCC->SRDCFGR, RCC_SRDCFGR_SRDPPRE, Prescaler);
#endif /* RCC_D3CFGR_D3PPRE */
}
 8000cd8:	bf00      	nop
 8000cda:	370c      	adds	r7, #12
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr
 8000ce4:	58024400 	.word	0x58024400

08000ce8 <LL_RCC_SetADCClockSource>:
  *         @arg @ref LL_RCC_ADC_CLKSOURCE_PLL3R
  *         @arg @ref LL_RCC_ADC_CLKSOURCE_CLKP
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetADCClockSource(uint32_t ClkSource)
{
 8000ce8:	b480      	push	{r7}
 8000cea:	b083      	sub	sp, #12
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
#if defined(RCC_D3CCIPR_ADCSEL)
  MODIFY_REG(RCC->D3CCIPR, RCC_D3CCIPR_ADCSEL, ClkSource);
 8000cf0:	4b06      	ldr	r3, [pc, #24]	; (8000d0c <LL_RCC_SetADCClockSource+0x24>)
 8000cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cf4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000cf8:	4904      	ldr	r1, [pc, #16]	; (8000d0c <LL_RCC_SetADCClockSource+0x24>)
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	4313      	orrs	r3, r2
 8000cfe:	658b      	str	r3, [r1, #88]	; 0x58
#else
  MODIFY_REG(RCC->SRDCCIPR, RCC_SRDCCIPR_ADCSEL, ClkSource);
#endif /* RCC_D3CCIPR_ADCSEL */
}
 8000d00:	bf00      	nop
 8000d02:	370c      	adds	r7, #12
 8000d04:	46bd      	mov	sp, r7
 8000d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0a:	4770      	bx	lr
 8000d0c:	58024400 	.word	0x58024400

08000d10 <LL_RCC_PLL_SetSource>:
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  *         @arg @ref LL_RCC_PLLSOURCE_NONE
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_SetSource(uint32_t PLLSource)
{
 8000d10:	b480      	push	{r7}
 8000d12:	b083      	sub	sp, #12
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_PLLSRC, PLLSource);
 8000d18:	4b06      	ldr	r3, [pc, #24]	; (8000d34 <LL_RCC_PLL_SetSource+0x24>)
 8000d1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d1c:	f023 0203 	bic.w	r2, r3, #3
 8000d20:	4904      	ldr	r1, [pc, #16]	; (8000d34 <LL_RCC_PLL_SetSource+0x24>)
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4313      	orrs	r3, r2
 8000d26:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000d28:	bf00      	nop
 8000d2a:	370c      	adds	r7, #12
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	58024400 	.word	0x58024400

08000d38 <LL_RCC_PLL1_Enable>:
  * @brief  Enable PLL1
  * @rmtoll CR           PLL1ON         LL_RCC_PLL1_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_Enable(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLL1ON);
 8000d3c:	4b05      	ldr	r3, [pc, #20]	; (8000d54 <LL_RCC_PLL1_Enable+0x1c>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	4a04      	ldr	r2, [pc, #16]	; (8000d54 <LL_RCC_PLL1_Enable+0x1c>)
 8000d42:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000d46:	6013      	str	r3, [r2, #0]
}
 8000d48:	bf00      	nop
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	58024400 	.word	0x58024400

08000d58 <LL_RCC_PLL1_IsReady>:
  * @brief  Check if PLL1 Ready
  * @rmtoll CR           PLL1RDY        LL_RCC_PLL1_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL1_IsReady(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL1RDY) == (RCC_CR_PLL1RDY)) ? 1UL : 0UL);
 8000d5c:	4b07      	ldr	r3, [pc, #28]	; (8000d7c <LL_RCC_PLL1_IsReady+0x24>)
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000d64:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000d68:	d101      	bne.n	8000d6e <LL_RCC_PLL1_IsReady+0x16>
 8000d6a:	2301      	movs	r3, #1
 8000d6c:	e000      	b.n	8000d70 <LL_RCC_PLL1_IsReady+0x18>
 8000d6e:	2300      	movs	r3, #0
}
 8000d70:	4618      	mov	r0, r3
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr
 8000d7a:	bf00      	nop
 8000d7c:	58024400 	.word	0x58024400

08000d80 <LL_RCC_PLL1P_Enable>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCFGR           DIVP1EN         LL_RCC_PLL1P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1P_Enable(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP1EN);
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <LL_RCC_PLL1P_Enable+0x1c>)
 8000d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000d88:	4a04      	ldr	r2, [pc, #16]	; (8000d9c <LL_RCC_PLL1P_Enable+0x1c>)
 8000d8a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000d8e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr
 8000d9a:	bf00      	nop
 8000d9c:	58024400 	.word	0x58024400

08000da0 <LL_RCC_PLL1_SetVCOOutputRange>:
  *         @arg @ref LL_RCC_PLLVCORANGE_WIDE
  *         @arg @ref LL_RCC_PLLVCORANGE_MEDIUM
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOOutputRange(uint32_t VCORange)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1VCOSEL, VCORange << RCC_PLLCFGR_PLL1VCOSEL_Pos);
 8000da8:	4b07      	ldr	r3, [pc, #28]	; (8000dc8 <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 8000daa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dac:	f023 0202 	bic.w	r2, r3, #2
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	005b      	lsls	r3, r3, #1
 8000db4:	4904      	ldr	r1, [pc, #16]	; (8000dc8 <LL_RCC_PLL1_SetVCOOutputRange+0x28>)
 8000db6:	4313      	orrs	r3, r2
 8000db8:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000dba:	bf00      	nop
 8000dbc:	370c      	adds	r7, #12
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc4:	4770      	bx	lr
 8000dc6:	bf00      	nop
 8000dc8:	58024400 	.word	0x58024400

08000dcc <LL_RCC_PLL1_SetVCOInputRange>:
  *         @arg @ref LL_RCC_PLLINPUTRANGE_4_8
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL1_SetVCOInputRange(uint32_t InputRange)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL1RGE, InputRange << RCC_PLLCFGR_PLL1RGE_Pos);
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 8000dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000dd8:	f023 020c 	bic.w	r2, r3, #12
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	009b      	lsls	r3, r3, #2
 8000de0:	4904      	ldr	r1, [pc, #16]	; (8000df4 <LL_RCC_PLL1_SetVCOInputRange+0x28>)
 8000de2:	4313      	orrs	r3, r2
 8000de4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000de6:	bf00      	nop
 8000de8:	370c      	adds	r7, #12
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	58024400 	.word	0x58024400

08000df8 <LL_RCC_PLL1_SetN>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        N1          LL_RCC_PLL1_SetN
  * @param  N parameter can be a value between 4 and 512
  */
__STATIC_INLINE void LL_RCC_PLL1_SetN(uint32_t N)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	b083      	sub	sp, #12
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_N1, (N - 1UL) << RCC_PLL1DIVR_N1_Pos);
 8000e00:	4b07      	ldr	r3, [pc, #28]	; (8000e20 <LL_RCC_PLL1_SetN+0x28>)
 8000e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000e04:	4b07      	ldr	r3, [pc, #28]	; (8000e24 <LL_RCC_PLL1_SetN+0x2c>)
 8000e06:	4013      	ands	r3, r2
 8000e08:	687a      	ldr	r2, [r7, #4]
 8000e0a:	3a01      	subs	r2, #1
 8000e0c:	4904      	ldr	r1, [pc, #16]	; (8000e20 <LL_RCC_PLL1_SetN+0x28>)
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000e12:	bf00      	nop
 8000e14:	370c      	adds	r7, #12
 8000e16:	46bd      	mov	sp, r7
 8000e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	58024400 	.word	0x58024400
 8000e24:	fffffe00 	.word	0xfffffe00

08000e28 <LL_RCC_PLL1_SetM>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLLCKSELR       DIVM1          LL_RCC_PLL1_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL1_SetM(uint32_t M)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b083      	sub	sp, #12
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM1, M << RCC_PLLCKSELR_DIVM1_Pos);
 8000e30:	4b07      	ldr	r3, [pc, #28]	; (8000e50 <LL_RCC_PLL1_SetM+0x28>)
 8000e32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000e34:	f423 727c 	bic.w	r2, r3, #1008	; 0x3f0
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	011b      	lsls	r3, r3, #4
 8000e3c:	4904      	ldr	r1, [pc, #16]	; (8000e50 <LL_RCC_PLL1_SetM+0x28>)
 8000e3e:	4313      	orrs	r3, r2
 8000e40:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000e42:	bf00      	nop
 8000e44:	370c      	adds	r7, #12
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	58024400 	.word	0x58024400

08000e54 <LL_RCC_PLL1_SetP>:
  * @param  P parameter can be a value between 2 (or 1*) and 128 (ODD division factor not supported)
  *
  * (*) : For stm32h72xxx and stm32h73xxx family lines.
  */
__STATIC_INLINE void LL_RCC_PLL1_SetP(uint32_t P)
{
 8000e54:	b480      	push	{r7}
 8000e56:	b083      	sub	sp, #12
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_P1, (P - 1UL) << RCC_PLL1DIVR_P1_Pos);
 8000e5c:	4b07      	ldr	r3, [pc, #28]	; (8000e7c <LL_RCC_PLL1_SetP+0x28>)
 8000e5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e60:	f423 427e 	bic.w	r2, r3, #65024	; 0xfe00
 8000e64:	687b      	ldr	r3, [r7, #4]
 8000e66:	3b01      	subs	r3, #1
 8000e68:	025b      	lsls	r3, r3, #9
 8000e6a:	4904      	ldr	r1, [pc, #16]	; (8000e7c <LL_RCC_PLL1_SetP+0x28>)
 8000e6c:	4313      	orrs	r3, r2
 8000e6e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000e70:	bf00      	nop
 8000e72:	370c      	adds	r7, #12
 8000e74:	46bd      	mov	sp, r7
 8000e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7a:	4770      	bx	lr
 8000e7c:	58024400 	.word	0x58024400

08000e80 <LL_RCC_PLL1_SetQ>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        Q1          LL_RCC_PLL1_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetQ(uint32_t Q)
{
 8000e80:	b480      	push	{r7}
 8000e82:	b083      	sub	sp, #12
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_Q1, (Q - 1UL) << RCC_PLL1DIVR_Q1_Pos);
 8000e88:	4b07      	ldr	r3, [pc, #28]	; (8000ea8 <LL_RCC_PLL1_SetQ+0x28>)
 8000e8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8c:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	3b01      	subs	r3, #1
 8000e94:	041b      	lsls	r3, r3, #16
 8000e96:	4904      	ldr	r1, [pc, #16]	; (8000ea8 <LL_RCC_PLL1_SetQ+0x28>)
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	58024400 	.word	0x58024400

08000eac <LL_RCC_PLL1_SetR>:
  * @note   This API shall be called only when PLL1 is disabled.
  * @rmtoll PLL1DIVR        R1          LL_RCC_PLL1_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL1_SetR(uint32_t R)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL1DIVR, RCC_PLL1DIVR_R1, (R - 1UL) << RCC_PLL1DIVR_R1_Pos);
 8000eb4:	4b07      	ldr	r3, [pc, #28]	; (8000ed4 <LL_RCC_PLL1_SetR+0x28>)
 8000eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eb8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3b01      	subs	r3, #1
 8000ec0:	061b      	lsls	r3, r3, #24
 8000ec2:	4904      	ldr	r1, [pc, #16]	; (8000ed4 <LL_RCC_PLL1_SetR+0x28>)
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000ec8:	bf00      	nop
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr
 8000ed4:	58024400 	.word	0x58024400

08000ed8 <LL_RCC_PLL2_Enable>:
  * @brief  Enable PLL2
  * @rmtoll CR           PLL2ON         LL_RCC_PLL2_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_Enable(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLL2ON);
 8000edc:	4b05      	ldr	r3, [pc, #20]	; (8000ef4 <LL_RCC_PLL2_Enable+0x1c>)
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	4a04      	ldr	r2, [pc, #16]	; (8000ef4 <LL_RCC_PLL2_Enable+0x1c>)
 8000ee2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000ee6:	6013      	str	r3, [r2, #0]
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	58024400 	.word	0x58024400

08000ef8 <LL_RCC_PLL2_IsReady>:
  * @brief  Check if PLL2 Ready
  * @rmtoll CR           PLL2RDY        LL_RCC_PLL2_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL2_IsReady(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLL2RDY) == (RCC_CR_PLL2RDY)) ? 1UL : 0UL);
 8000efc:	4b07      	ldr	r3, [pc, #28]	; (8000f1c <LL_RCC_PLL2_IsReady+0x24>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8000f04:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8000f08:	d101      	bne.n	8000f0e <LL_RCC_PLL2_IsReady+0x16>
 8000f0a:	2301      	movs	r3, #1
 8000f0c:	e000      	b.n	8000f10 <LL_RCC_PLL2_IsReady+0x18>
 8000f0e:	2300      	movs	r3, #0
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	58024400 	.word	0x58024400

08000f20 <LL_RCC_PLL2P_Enable>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLLCFGR           DIVP2EN         LL_RCC_PLL2P_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2P_Enable(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_DIVP2EN);
 8000f24:	4b05      	ldr	r3, [pc, #20]	; (8000f3c <LL_RCC_PLL2P_Enable+0x1c>)
 8000f26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f28:	4a04      	ldr	r2, [pc, #16]	; (8000f3c <LL_RCC_PLL2P_Enable+0x1c>)
 8000f2a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000f2e:	62d3      	str	r3, [r2, #44]	; 0x2c
}
 8000f30:	bf00      	nop
 8000f32:	46bd      	mov	sp, r7
 8000f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f38:	4770      	bx	lr
 8000f3a:	bf00      	nop
 8000f3c:	58024400 	.word	0x58024400

08000f40 <LL_RCC_PLL2_SetVCOOutputRange>:
  *         @arg @ref LL_RCC_PLLVCORANGE_WIDE
  *         @arg @ref LL_RCC_PLLVCORANGE_MEDIUM
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetVCOOutputRange(uint32_t VCORange)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b083      	sub	sp, #12
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL2VCOSEL, VCORange << RCC_PLLCFGR_PLL2VCOSEL_Pos);
 8000f48:	4b07      	ldr	r3, [pc, #28]	; (8000f68 <LL_RCC_PLL2_SetVCOOutputRange+0x28>)
 8000f4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f4c:	f023 0220 	bic.w	r2, r3, #32
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	015b      	lsls	r3, r3, #5
 8000f54:	4904      	ldr	r1, [pc, #16]	; (8000f68 <LL_RCC_PLL2_SetVCOOutputRange+0x28>)
 8000f56:	4313      	orrs	r3, r2
 8000f58:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000f5a:	bf00      	nop
 8000f5c:	370c      	adds	r7, #12
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f64:	4770      	bx	lr
 8000f66:	bf00      	nop
 8000f68:	58024400 	.word	0x58024400

08000f6c <LL_RCC_PLL2_SetVCOInputRange>:
  *         @arg @ref LL_RCC_PLLINPUTRANGE_4_8
  *         @arg @ref LL_RCC_PLLINPUTRANGE_8_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL2_SetVCOInputRange(uint32_t InputRange)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	b083      	sub	sp, #12
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLL2RGE, InputRange << RCC_PLLCFGR_PLL2RGE_Pos);
 8000f74:	4b07      	ldr	r3, [pc, #28]	; (8000f94 <LL_RCC_PLL2_SetVCOInputRange+0x28>)
 8000f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f78:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	019b      	lsls	r3, r3, #6
 8000f80:	4904      	ldr	r1, [pc, #16]	; (8000f94 <LL_RCC_PLL2_SetVCOInputRange+0x28>)
 8000f82:	4313      	orrs	r3, r2
 8000f84:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000f86:	bf00      	nop
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	58024400 	.word	0x58024400

08000f98 <LL_RCC_PLL2_SetN>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2DIVR        N2          LL_RCC_PLL2_SetN
  * @param  N parameter can be a value between 4 and 512
  */
__STATIC_INLINE void LL_RCC_PLL2_SetN(uint32_t N)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b083      	sub	sp, #12
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_N2, (N - 1UL) << RCC_PLL2DIVR_N2_Pos);
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <LL_RCC_PLL2_SetN+0x28>)
 8000fa2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <LL_RCC_PLL2_SetN+0x2c>)
 8000fa6:	4013      	ands	r3, r2
 8000fa8:	687a      	ldr	r2, [r7, #4]
 8000faa:	3a01      	subs	r2, #1
 8000fac:	4904      	ldr	r1, [pc, #16]	; (8000fc0 <LL_RCC_PLL2_SetN+0x28>)
 8000fae:	4313      	orrs	r3, r2
 8000fb0:	638b      	str	r3, [r1, #56]	; 0x38
}
 8000fb2:	bf00      	nop
 8000fb4:	370c      	adds	r7, #12
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	58024400 	.word	0x58024400
 8000fc4:	fffffe00 	.word	0xfffffe00

08000fc8 <LL_RCC_PLL2_SetM>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLLCKSELR       DIVM2          LL_RCC_PLL2_SetM
  * @param  M parameter can be a value between 0 and 63
  */
__STATIC_INLINE void LL_RCC_PLL2_SetM(uint32_t M)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLLCKSELR, RCC_PLLCKSELR_DIVM2, M << RCC_PLLCKSELR_DIVM2_Pos);
 8000fd0:	4b07      	ldr	r3, [pc, #28]	; (8000ff0 <LL_RCC_PLL2_SetM+0x28>)
 8000fd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fd4:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	031b      	lsls	r3, r3, #12
 8000fdc:	4904      	ldr	r1, [pc, #16]	; (8000ff0 <LL_RCC_PLL2_SetM+0x28>)
 8000fde:	4313      	orrs	r3, r2
 8000fe0:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000fe2:	bf00      	nop
 8000fe4:	370c      	adds	r7, #12
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fec:	4770      	bx	lr
 8000fee:	bf00      	nop
 8000ff0:	58024400 	.word	0x58024400

08000ff4 <LL_RCC_PLL2_SetP>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2DIVR        P2          LL_RCC_PLL2_SetP
  * @param  P parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetP(uint32_t P)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_P2, (P - 1UL) << RCC_PLL2DIVR_P2_Pos);
 8000ffc:	4b07      	ldr	r3, [pc, #28]	; (800101c <LL_RCC_PLL2_SetP+0x28>)
 8000ffe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001000:	f423 427e 	bic.w	r2, r3, #65024	; 0xfe00
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	025b      	lsls	r3, r3, #9
 800100a:	4904      	ldr	r1, [pc, #16]	; (800101c <LL_RCC_PLL2_SetP+0x28>)
 800100c:	4313      	orrs	r3, r2
 800100e:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001010:	bf00      	nop
 8001012:	370c      	adds	r7, #12
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr
 800101c:	58024400 	.word	0x58024400

08001020 <LL_RCC_PLL2_SetQ>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2DIVR        Q2          LL_RCC_PLL2_SetQ
  * @param  Q parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetQ(uint32_t Q)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_Q2, (Q - 1UL) << RCC_PLL2DIVR_Q2_Pos);
 8001028:	4b07      	ldr	r3, [pc, #28]	; (8001048 <LL_RCC_PLL2_SetQ+0x28>)
 800102a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800102c:	f423 02fe 	bic.w	r2, r3, #8323072	; 0x7f0000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	3b01      	subs	r3, #1
 8001034:	041b      	lsls	r3, r3, #16
 8001036:	4904      	ldr	r1, [pc, #16]	; (8001048 <LL_RCC_PLL2_SetQ+0x28>)
 8001038:	4313      	orrs	r3, r2
 800103a:	638b      	str	r3, [r1, #56]	; 0x38
}
 800103c:	bf00      	nop
 800103e:	370c      	adds	r7, #12
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	58024400 	.word	0x58024400

0800104c <LL_RCC_PLL2_SetR>:
  * @note   This API shall be called only when PLL2 is disabled.
  * @rmtoll PLL2DIVR        R2          LL_RCC_PLL2_SetR
  * @param  R parameter can be a value between 1 and 128
  */
__STATIC_INLINE void LL_RCC_PLL2_SetR(uint32_t R)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->PLL2DIVR, RCC_PLL2DIVR_R2, (R - 1UL) << RCC_PLL2DIVR_R2_Pos);
 8001054:	4b07      	ldr	r3, [pc, #28]	; (8001074 <LL_RCC_PLL2_SetR+0x28>)
 8001056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001058:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	3b01      	subs	r3, #1
 8001060:	061b      	lsls	r3, r3, #24
 8001062:	4904      	ldr	r1, [pc, #16]	; (8001074 <LL_RCC_PLL2_SetR+0x28>)
 8001064:	4313      	orrs	r3, r2
 8001066:	638b      	str	r3, [r1, #56]	; 0x38
}
 8001068:	bf00      	nop
 800106a:	370c      	adds	r7, #12
 800106c:	46bd      	mov	sp, r7
 800106e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001072:	4770      	bx	lr
 8001074:	58024400 	.word	0x58024400

08001078 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001078:	b480      	push	{r7}
 800107a:	b085      	sub	sp, #20
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001080:	4b0a      	ldr	r3, [pc, #40]	; (80010ac <LL_AHB1_GRP1_EnableClock+0x34>)
 8001082:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001086:	4909      	ldr	r1, [pc, #36]	; (80010ac <LL_AHB1_GRP1_EnableClock+0x34>)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4313      	orrs	r3, r2
 800108c:	f8c1 30d8 	str.w	r3, [r1, #216]	; 0xd8
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8001090:	4b06      	ldr	r3, [pc, #24]	; (80010ac <LL_AHB1_GRP1_EnableClock+0x34>)
 8001092:	f8d3 20d8 	ldr.w	r2, [r3, #216]	; 0xd8
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	4013      	ands	r3, r2
 800109a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800109c:	68fb      	ldr	r3, [r7, #12]
}
 800109e:	bf00      	nop
 80010a0:	3714      	adds	r7, #20
 80010a2:	46bd      	mov	sp, r7
 80010a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop
 80010ac:	58024400 	.word	0x58024400

080010b0 <LL_AHB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB4_GRP1_EnableClock(uint32_t Periphs)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b085      	sub	sp, #20
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB4ENR, Periphs);
 80010b8:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <LL_AHB4_GRP1_EnableClock+0x34>)
 80010ba:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010be:	4909      	ldr	r1, [pc, #36]	; (80010e4 <LL_AHB4_GRP1_EnableClock+0x34>)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	f8c1 30e0 	str.w	r3, [r1, #224]	; 0xe0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB4ENR, Periphs);
 80010c8:	4b06      	ldr	r3, [pc, #24]	; (80010e4 <LL_AHB4_GRP1_EnableClock+0x34>)
 80010ca:	f8d3 20e0 	ldr.w	r2, [r3, #224]	; 0xe0
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	4013      	ands	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d4:	68fb      	ldr	r3, [r7, #12]
}
 80010d6:	bf00      	nop
 80010d8:	3714      	adds	r7, #20
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	58024400 	.word	0x58024400

080010e8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b085      	sub	sp, #20
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80010f0:	4b0a      	ldr	r3, [pc, #40]	; (800111c <LL_APB2_GRP1_EnableClock+0x34>)
 80010f2:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 80010f6:	4909      	ldr	r1, [pc, #36]	; (800111c <LL_APB2_GRP1_EnableClock+0x34>)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	4313      	orrs	r3, r2
 80010fc:	f8c1 30f0 	str.w	r3, [r1, #240]	; 0xf0
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001100:	4b06      	ldr	r3, [pc, #24]	; (800111c <LL_APB2_GRP1_EnableClock+0x34>)
 8001102:	f8d3 20f0 	ldr.w	r2, [r3, #240]	; 0xf0
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	4013      	ands	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800110c:	68fb      	ldr	r3, [r7, #12]
}
 800110e:	bf00      	nop
 8001110:	3714      	adds	r7, #20
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	58024400 	.word	0x58024400

08001120 <LL_APB4_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB4_GRP1_EnableClock(uint32_t Periphs)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB4ENR, Periphs);
 8001128:	4b0a      	ldr	r3, [pc, #40]	; (8001154 <LL_APB4_GRP1_EnableClock+0x34>)
 800112a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800112e:	4909      	ldr	r1, [pc, #36]	; (8001154 <LL_APB4_GRP1_EnableClock+0x34>)
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	4313      	orrs	r3, r2
 8001134:	f8c1 30f4 	str.w	r3, [r1, #244]	; 0xf4
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB4ENR, Periphs);
 8001138:	4b06      	ldr	r3, [pc, #24]	; (8001154 <LL_APB4_GRP1_EnableClock+0x34>)
 800113a:	f8d3 20f4 	ldr.w	r2, [r3, #244]	; 0xf4
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4013      	ands	r3, r2
 8001142:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001144:	68fb      	ldr	r3, [r7, #12]
}
 8001146:	bf00      	nop
 8001148:	3714      	adds	r7, #20
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	58024400 	.word	0x58024400

08001158 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001158:	b480      	push	{r7}
 800115a:	b083      	sub	sp, #12
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001160:	4b06      	ldr	r3, [pc, #24]	; (800117c <LL_FLASH_SetLatency+0x24>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f023 020f 	bic.w	r2, r3, #15
 8001168:	4904      	ldr	r1, [pc, #16]	; (800117c <LL_FLASH_SetLatency+0x24>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4313      	orrs	r3, r2
 800116e:	600b      	str	r3, [r1, #0]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	52002000 	.word	0x52002000

08001180 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_5
  *         @arg @ref LL_FLASH_LATENCY_6
  *         @arg @ref LL_FLASH_LATENCY_7
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001184:	4b04      	ldr	r3, [pc, #16]	; (8001198 <LL_FLASH_GetLatency+0x18>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 030f 	and.w	r3, r3, #15
}
 800118c:	4618      	mov	r0, r3
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	52002000 	.word	0x52002000

0800119c <LL_PWR_ConfigSupply>:
  *         @arg @ref LL_PWR_SMPS_2V5_SUPPLIES_EXT
  *         @arg @ref LL_PWR_EXTERNAL_SOURCE_SUPPLY
  * @retval None
  */
__STATIC_INLINE void LL_PWR_ConfigSupply(uint32_t SupplySource)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  /* Set the power supply configuration */
  MODIFY_REG(PWR->CR3, (PWR_CR3_SMPSLEVEL | PWR_CR3_SMPSEXTHP | PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS), SupplySource);
 80011a4:	4b06      	ldr	r3, [pc, #24]	; (80011c0 <LL_PWR_ConfigSupply+0x24>)
 80011a6:	68db      	ldr	r3, [r3, #12]
 80011a8:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 80011ac:	4904      	ldr	r1, [pc, #16]	; (80011c0 <LL_PWR_ConfigSupply+0x24>)
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	4313      	orrs	r3, r2
 80011b2:	60cb      	str	r3, [r1, #12]
}
 80011b4:	bf00      	nop
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr
 80011c0:	58024800 	.word	0x58024800

080011c4 <LL_PWR_SetRegulVoltageScaling>:
  * @note   For all H7 lines except STM32H7Axxx and STM32H7Bxxx lines, VOS0
  *         is applied when PWR_D3CR_VOS[1:0] = 0b11 and  SYSCFG_PWRCR_ODEN = 0b1.
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
#if defined (PWR_CPUCR_PDDS_D2)
  MODIFY_REG(PWR->D3CR, PWR_D3CR_VOS, VoltageScaling);
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80011ce:	699b      	ldr	r3, [r3, #24]
 80011d0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80011d4:	4904      	ldr	r1, [pc, #16]	; (80011e8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4313      	orrs	r3, r2
 80011da:	618b      	str	r3, [r1, #24]
#else
  MODIFY_REG(PWR->SRDCR, PWR_SRDCR_VOS, VoltageScaling);
#endif /* PWR_CPUCR_PDDS_D2 */
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	58024800 	.word	0x58024800

080011ec <LL_PWR_IsActiveFlag_VOS>:
  *         or if its output voltage is still changing to the required voltage level
  * @rmtoll D3CR   VOSRDY       LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 80011ec:	b480      	push	{r7}
 80011ee:	af00      	add	r7, sp, #0
#if defined (PWR_CPUCR_PDDS_D2)
  return ((READ_BIT(PWR->D3CR, PWR_D3CR_VOSRDY) == (PWR_D3CR_VOSRDY)) ? 1UL : 0UL);
 80011f0:	4b07      	ldr	r3, [pc, #28]	; (8001210 <LL_PWR_IsActiveFlag_VOS+0x24>)
 80011f2:	699b      	ldr	r3, [r3, #24]
 80011f4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80011f8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80011fc:	d101      	bne.n	8001202 <LL_PWR_IsActiveFlag_VOS+0x16>
 80011fe:	2301      	movs	r3, #1
 8001200:	e000      	b.n	8001204 <LL_PWR_IsActiveFlag_VOS+0x18>
 8001202:	2300      	movs	r3, #0
#else
  return ((READ_BIT(PWR->SRDCR, PWR_SRDCR_VOSRDY) == (PWR_SRDCR_VOSRDY)) ? 1UL : 0UL);
#endif /* PWR_CPUCR_PDDS_D2 */
}
 8001204:	4618      	mov	r0, r3
 8001206:	46bd      	mov	sp, r7
 8001208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120c:	4770      	bx	lr
 800120e:	bf00      	nop
 8001210:	58024800 	.word	0x58024800

08001214 <LL_TIM_EnableCounter>:
  * @rmtoll CR1          CEN           LL_TIM_EnableCounter
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableCounter(TIM_TypeDef *TIMx)
{
 8001214:	b480      	push	{r7}
 8001216:	b083      	sub	sp, #12
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->CR1, TIM_CR1_CEN);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	f043 0201 	orr.w	r2, r3, #1
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	601a      	str	r2, [r3, #0]
}
 8001228:	bf00      	nop
 800122a:	370c      	adds	r7, #12
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr

08001234 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001234:	b480      	push	{r7}
 8001236:	b083      	sub	sp, #12
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	601a      	str	r2, [r3, #0]
}
 8001248:	bf00      	nop
 800124a:	370c      	adds	r7, #12
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <LL_TIM_CC_EnableChannel>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_CC_EnableChannel(TIM_TypeDef *TIMx, uint32_t Channels)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  SET_BIT(TIMx->CCER, Channels);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6a1a      	ldr	r2, [r3, #32]
 8001262:	683b      	ldr	r3, [r7, #0]
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	621a      	str	r2, [r3, #32]
}
 800126a:	bf00      	nop
 800126c:	370c      	adds	r7, #12
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr
	...

08001278 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	2b01      	cmp	r3, #1
 8001286:	d028      	beq.n	80012da <LL_TIM_OC_DisableFast+0x62>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	2b04      	cmp	r3, #4
 800128c:	d023      	beq.n	80012d6 <LL_TIM_OC_DisableFast+0x5e>
 800128e:	683b      	ldr	r3, [r7, #0]
 8001290:	2b10      	cmp	r3, #16
 8001292:	d01e      	beq.n	80012d2 <LL_TIM_OC_DisableFast+0x5a>
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	2b40      	cmp	r3, #64	; 0x40
 8001298:	d019      	beq.n	80012ce <LL_TIM_OC_DisableFast+0x56>
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a0:	d013      	beq.n	80012ca <LL_TIM_OC_DisableFast+0x52>
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012a8:	d00d      	beq.n	80012c6 <LL_TIM_OC_DisableFast+0x4e>
 80012aa:	683b      	ldr	r3, [r7, #0]
 80012ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80012b0:	d007      	beq.n	80012c2 <LL_TIM_OC_DisableFast+0x4a>
 80012b2:	683b      	ldr	r3, [r7, #0]
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012b8:	d101      	bne.n	80012be <LL_TIM_OC_DisableFast+0x46>
 80012ba:	2307      	movs	r3, #7
 80012bc:	e00e      	b.n	80012dc <LL_TIM_OC_DisableFast+0x64>
 80012be:	2308      	movs	r3, #8
 80012c0:	e00c      	b.n	80012dc <LL_TIM_OC_DisableFast+0x64>
 80012c2:	2306      	movs	r3, #6
 80012c4:	e00a      	b.n	80012dc <LL_TIM_OC_DisableFast+0x64>
 80012c6:	2305      	movs	r3, #5
 80012c8:	e008      	b.n	80012dc <LL_TIM_OC_DisableFast+0x64>
 80012ca:	2304      	movs	r3, #4
 80012cc:	e006      	b.n	80012dc <LL_TIM_OC_DisableFast+0x64>
 80012ce:	2303      	movs	r3, #3
 80012d0:	e004      	b.n	80012dc <LL_TIM_OC_DisableFast+0x64>
 80012d2:	2302      	movs	r3, #2
 80012d4:	e002      	b.n	80012dc <LL_TIM_OC_DisableFast+0x64>
 80012d6:	2301      	movs	r3, #1
 80012d8:	e000      	b.n	80012dc <LL_TIM_OC_DisableFast+0x64>
 80012da:	2300      	movs	r3, #0
 80012dc:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	3318      	adds	r3, #24
 80012e2:	4619      	mov	r1, r3
 80012e4:	7bfb      	ldrb	r3, [r7, #15]
 80012e6:	4a0b      	ldr	r2, [pc, #44]	; (8001314 <LL_TIM_OC_DisableFast+0x9c>)
 80012e8:	5cd3      	ldrb	r3, [r2, r3]
 80012ea:	440b      	add	r3, r1
 80012ec:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	681a      	ldr	r2, [r3, #0]
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
 80012f4:	4908      	ldr	r1, [pc, #32]	; (8001318 <LL_TIM_OC_DisableFast+0xa0>)
 80012f6:	5ccb      	ldrb	r3, [r1, r3]
 80012f8:	4619      	mov	r1, r3
 80012fa:	2304      	movs	r3, #4
 80012fc:	408b      	lsls	r3, r1
 80012fe:	43db      	mvns	r3, r3
 8001300:	401a      	ands	r2, r3
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	601a      	str	r2, [r3, #0]

}
 8001306:	bf00      	nop
 8001308:	3714      	adds	r7, #20
 800130a:	46bd      	mov	sp, r7
 800130c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop
 8001314:	08002ebc 	.word	0x08002ebc
 8001318:	08002ec8 	.word	0x08002ec8

0800131c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800131c:	b480      	push	{r7}
 800131e:	b085      	sub	sp, #20
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8001326:	683b      	ldr	r3, [r7, #0]
 8001328:	2b01      	cmp	r3, #1
 800132a:	d028      	beq.n	800137e <LL_TIM_OC_EnablePreload+0x62>
 800132c:	683b      	ldr	r3, [r7, #0]
 800132e:	2b04      	cmp	r3, #4
 8001330:	d023      	beq.n	800137a <LL_TIM_OC_EnablePreload+0x5e>
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2b10      	cmp	r3, #16
 8001336:	d01e      	beq.n	8001376 <LL_TIM_OC_EnablePreload+0x5a>
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	2b40      	cmp	r3, #64	; 0x40
 800133c:	d019      	beq.n	8001372 <LL_TIM_OC_EnablePreload+0x56>
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001344:	d013      	beq.n	800136e <LL_TIM_OC_EnablePreload+0x52>
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800134c:	d00d      	beq.n	800136a <LL_TIM_OC_EnablePreload+0x4e>
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001354:	d007      	beq.n	8001366 <LL_TIM_OC_EnablePreload+0x4a>
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800135c:	d101      	bne.n	8001362 <LL_TIM_OC_EnablePreload+0x46>
 800135e:	2307      	movs	r3, #7
 8001360:	e00e      	b.n	8001380 <LL_TIM_OC_EnablePreload+0x64>
 8001362:	2308      	movs	r3, #8
 8001364:	e00c      	b.n	8001380 <LL_TIM_OC_EnablePreload+0x64>
 8001366:	2306      	movs	r3, #6
 8001368:	e00a      	b.n	8001380 <LL_TIM_OC_EnablePreload+0x64>
 800136a:	2305      	movs	r3, #5
 800136c:	e008      	b.n	8001380 <LL_TIM_OC_EnablePreload+0x64>
 800136e:	2304      	movs	r3, #4
 8001370:	e006      	b.n	8001380 <LL_TIM_OC_EnablePreload+0x64>
 8001372:	2303      	movs	r3, #3
 8001374:	e004      	b.n	8001380 <LL_TIM_OC_EnablePreload+0x64>
 8001376:	2302      	movs	r3, #2
 8001378:	e002      	b.n	8001380 <LL_TIM_OC_EnablePreload+0x64>
 800137a:	2301      	movs	r3, #1
 800137c:	e000      	b.n	8001380 <LL_TIM_OC_EnablePreload+0x64>
 800137e:	2300      	movs	r3, #0
 8001380:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	3318      	adds	r3, #24
 8001386:	4619      	mov	r1, r3
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	4a0a      	ldr	r2, [pc, #40]	; (80013b4 <LL_TIM_OC_EnablePreload+0x98>)
 800138c:	5cd3      	ldrb	r3, [r2, r3]
 800138e:	440b      	add	r3, r1
 8001390:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8001392:	68bb      	ldr	r3, [r7, #8]
 8001394:	681a      	ldr	r2, [r3, #0]
 8001396:	7bfb      	ldrb	r3, [r7, #15]
 8001398:	4907      	ldr	r1, [pc, #28]	; (80013b8 <LL_TIM_OC_EnablePreload+0x9c>)
 800139a:	5ccb      	ldrb	r3, [r1, r3]
 800139c:	4619      	mov	r1, r3
 800139e:	2308      	movs	r3, #8
 80013a0:	408b      	lsls	r3, r1
 80013a2:	431a      	orrs	r2, r3
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	601a      	str	r2, [r3, #0]
}
 80013a8:	bf00      	nop
 80013aa:	3714      	adds	r7, #20
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	08002ebc 	.word	0x08002ebc
 80013b8:	08002ec8 	.word	0x08002ec8

080013bc <LL_TIM_OC_SetCompareCH1>:
  * @param  TIMx Timer instance
  * @param  CompareValue between Min_Data=0 and Max_Data=65535
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_SetCompareCH1(TIM_TypeDef *TIMx, uint32_t CompareValue)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	683a      	ldr	r2, [r7, #0]
 80013ca:	635a      	str	r2, [r3, #52]	; 0x34
}
 80013cc:	bf00      	nop
 80013ce:	370c      	adds	r7, #12
 80013d0:	46bd      	mov	sp, r7
 80013d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d6:	4770      	bx	lr

080013d8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80013d8:	b480      	push	{r7}
 80013da:	b083      	sub	sp, #12
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	4b06      	ldr	r3, [pc, #24]	; (8001400 <LL_TIM_SetClockSource+0x28>)
 80013e8:	4013      	ands	r3, r2
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	609a      	str	r2, [r3, #8]
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	fffebff8 	.word	0xfffebff8

08001404 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
 800140c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	431a      	orrs	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	605a      	str	r2, [r3, #4]
}
 800141e:	bf00      	nop
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 800142a:	b480      	push	{r7}
 800142c:	b083      	sub	sp, #12
 800142e:	af00      	add	r7, sp, #0
 8001430:	6078      	str	r0, [r7, #4]
 8001432:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	431a      	orrs	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	605a      	str	r2, [r3, #4]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr

08001450 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001450:	b480      	push	{r7}
 8001452:	b083      	sub	sp, #12
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	689b      	ldr	r3, [r3, #8]
 800145c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	609a      	str	r2, [r3, #8]
}
 8001464:	bf00      	nop
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <LL_TIM_EnableAllOutputs>:
  * @rmtoll BDTR         MOE           LL_TIM_EnableAllOutputs
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_EnableAllOutputs(TIM_TypeDef *TIMx)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800147c:	f443 4200 	orr.w	r2, r3, #32768	; 0x8000
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	645a      	str	r2, [r3, #68]	; 0x44
}
 8001484:	bf00      	nop
 8001486:	370c      	adds	r7, #12
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	619a      	str	r2, [r3, #24]
}
 80014a0:	bf00      	nop
 80014a2:	370c      	adds	r7, #12
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr

080014ac <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
 80014b4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask << 16U);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	041a      	lsls	r2, r3, #16
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	619a      	str	r2, [r3, #24]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
	...

080014cc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b082      	sub	sp, #8
 80014d0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  LL_APB4_GRP1_EnableClock(LL_APB4_GRP1_PERIPH_SYSCFG);
 80014d2:	2002      	movs	r0, #2
 80014d4:	f7ff fe24 	bl	8001120 <LL_APB4_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80014d8:	2003      	movs	r0, #3
 80014da:	f7fe ff93 	bl	8000404 <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 80014de:	f7fe ffb5 	bl	800044c <__NVIC_GetPriorityGrouping>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2200      	movs	r2, #0
 80014e6:	210f      	movs	r1, #15
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff f805 	bl	80004f8 <NVIC_EncodePriority>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4619      	mov	r1, r3
 80014f2:	f04f 30ff 	mov.w	r0, #4294967295
 80014f6:	f7fe ffd5 	bl	80004a4 <__NVIC_SetPriority>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fa:	f000 f907 	bl	800170c <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80014fe:	f000 f977 	bl	80017f0 <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001502:	f000 fc41 	bl	8001d88 <MX_GPIO_Init>
  MX_DMA_Init();
 8001506:	f000 fc17 	bl	8001d38 <MX_DMA_Init>
  MX_ADC1_Init();
 800150a:	f000 f995 	bl	8001838 <MX_ADC1_Init>
  MX_TIM1_Init();
 800150e:	f000 fb6f 	bl	8001bf0 <MX_TIM1_Init>
  MX_ADC2_Init();
 8001512:	f000 fa89 	bl	8001a28 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */


  // Włącz kanał CH1 (PE9) i CH1N (PE8)
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1);    // kanał główny
 8001516:	2101      	movs	r1, #1
 8001518:	4867      	ldr	r0, [pc, #412]	; (80016b8 <main+0x1ec>)
 800151a:	f7ff fe9b 	bl	8001254 <LL_TIM_CC_EnableChannel>
  LL_TIM_CC_EnableChannel(TIM1, LL_TIM_CHANNEL_CH1N);   // kanał komplementarny
 800151e:	2104      	movs	r1, #4
 8001520:	4865      	ldr	r0, [pc, #404]	; (80016b8 <main+0x1ec>)
 8001522:	f7ff fe97 	bl	8001254 <LL_TIM_CC_EnableChannel>

  // Włącz wyjścia (ważne dla zaawansowanego timera TIM1)
  LL_TIM_EnableAllOutputs(TIM1);
 8001526:	4864      	ldr	r0, [pc, #400]	; (80016b8 <main+0x1ec>)
 8001528:	f7ff ffa2 	bl	8001470 <LL_TIM_EnableAllOutputs>

  // Włącz licznik
  LL_TIM_EnableCounter(TIM1);
 800152c:	4862      	ldr	r0, [pc, #392]	; (80016b8 <main+0x1ec>)
 800152e:	f7ff fe71 	bl	8001214 <LL_TIM_EnableCounter>


  /*-----------------------------------------------------------
    1) KONFIGURACJA DMA (adresy + długość)
  -----------------------------------------------------------*/
  LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_0, (uint32_t)&ADC1->DR);
 8001532:	4a62      	ldr	r2, [pc, #392]	; (80016bc <main+0x1f0>)
 8001534:	2100      	movs	r1, #0
 8001536:	4862      	ldr	r0, [pc, #392]	; (80016c0 <main+0x1f4>)
 8001538:	f7ff fac4 	bl	8000ac4 <LL_DMA_SetPeriphAddress>
  LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_0, (uint32_t)adc_buffer);
 800153c:	4b61      	ldr	r3, [pc, #388]	; (80016c4 <main+0x1f8>)
 800153e:	461a      	mov	r2, r3
 8001540:	2100      	movs	r1, #0
 8001542:	485f      	ldr	r0, [pc, #380]	; (80016c0 <main+0x1f4>)
 8001544:	f7ff faa4 	bl	8000a90 <LL_DMA_SetMemoryAddress>
  LL_DMA_SetDataLength   (DMA1, LL_DMA_STREAM_0, 2);
 8001548:	2202      	movs	r2, #2
 800154a:	2100      	movs	r1, #0
 800154c:	485c      	ldr	r0, [pc, #368]	; (80016c0 <main+0x1f4>)
 800154e:	f7ff fa25 	bl	800099c <LL_DMA_SetDataLength>
  LL_DMA_EnableStream    (DMA1, LL_DMA_STREAM_0);
 8001552:	2100      	movs	r1, #0
 8001554:	485a      	ldr	r0, [pc, #360]	; (80016c0 <main+0x1f4>)
 8001556:	f7ff f8f5 	bl	8000744 <LL_DMA_EnableStream>

  /*-----------------------------------------------------------
    2) ADC: tryb „unlimited DMA requests”
  -----------------------------------------------------------*/
  /* Dane z ADC trafiają do bufora przez DMA, w trybie „circular” */
  ADC1->CFGR &= ~ADC_CFGR_DMNGT;                            // 00 = DR
 800155a:	4b5b      	ldr	r3, [pc, #364]	; (80016c8 <main+0x1fc>)
 800155c:	68db      	ldr	r3, [r3, #12]
 800155e:	4a5a      	ldr	r2, [pc, #360]	; (80016c8 <main+0x1fc>)
 8001560:	f023 0303 	bic.w	r3, r3, #3
 8001564:	60d3      	str	r3, [r2, #12]
  ADC1->CFGR |=  (ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1);     // 10 = DMA circular
 8001566:	4b58      	ldr	r3, [pc, #352]	; (80016c8 <main+0x1fc>)
 8001568:	68db      	ldr	r3, [r3, #12]
 800156a:	4a57      	ldr	r2, [pc, #348]	; (80016c8 <main+0x1fc>)
 800156c:	f043 0303 	orr.w	r3, r3, #3
 8001570:	60d3      	str	r3, [r2, #12]


  /*-----------------------------------------------------------
    3) START: ADC → TIM3
  -----------------------------------------------------------*/
  LL_ADC_Enable(ADC1);
 8001572:	4855      	ldr	r0, [pc, #340]	; (80016c8 <main+0x1fc>)
 8001574:	f7ff f8aa 	bl	80006cc <LL_ADC_Enable>
  while (!LL_ADC_IsActiveFlag_ADRDY(ADC1)) ;
 8001578:	bf00      	nop
 800157a:	4853      	ldr	r0, [pc, #332]	; (80016c8 <main+0x1fc>)
 800157c:	f7ff f8ce 	bl	800071c <LL_ADC_IsActiveFlag_ADRDY>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d0f9      	beq.n	800157a <main+0xae>
  LL_ADC_REG_StartConversion(ADC1);   // rozpocznie się po TRGO
 8001586:	4850      	ldr	r0, [pc, #320]	; (80016c8 <main+0x1fc>)
 8001588:	f7ff f8b4 	bl	80006f4 <LL_ADC_REG_StartConversion>





LL_DMA_SetPeriphAddress(DMA1, LL_DMA_STREAM_1, (uint32_t)&ADC2->DR);
 800158c:	4a4f      	ldr	r2, [pc, #316]	; (80016cc <main+0x200>)
 800158e:	2101      	movs	r1, #1
 8001590:	484b      	ldr	r0, [pc, #300]	; (80016c0 <main+0x1f4>)
 8001592:	f7ff fa97 	bl	8000ac4 <LL_DMA_SetPeriphAddress>
LL_DMA_SetMemoryAddress(DMA1, LL_DMA_STREAM_1, (uint32_t)adc2_buffer);
 8001596:	4b4e      	ldr	r3, [pc, #312]	; (80016d0 <main+0x204>)
 8001598:	461a      	mov	r2, r3
 800159a:	2101      	movs	r1, #1
 800159c:	4848      	ldr	r0, [pc, #288]	; (80016c0 <main+0x1f4>)
 800159e:	f7ff fa77 	bl	8000a90 <LL_DMA_SetMemoryAddress>
LL_DMA_SetDataLength   (DMA1, LL_DMA_STREAM_1, 2);
 80015a2:	2202      	movs	r2, #2
 80015a4:	2101      	movs	r1, #1
 80015a6:	4846      	ldr	r0, [pc, #280]	; (80016c0 <main+0x1f4>)
 80015a8:	f7ff f9f8 	bl	800099c <LL_DMA_SetDataLength>
LL_DMA_EnableStream    (DMA1, LL_DMA_STREAM_1);
 80015ac:	2101      	movs	r1, #1
 80015ae:	4844      	ldr	r0, [pc, #272]	; (80016c0 <main+0x1f4>)
 80015b0:	f7ff f8c8 	bl	8000744 <LL_DMA_EnableStream>

/*-----------------------------------------------------------
  2) ADC: tryb „unlimited DMA requests”
-----------------------------------------------------------*/
/* Dane z ADC trafiają do bufora przez DMA, w trybie „circular” */
ADC2->CFGR &= ~ADC_CFGR_DMNGT;                            // 00 = DR
 80015b4:	4b47      	ldr	r3, [pc, #284]	; (80016d4 <main+0x208>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	4a46      	ldr	r2, [pc, #280]	; (80016d4 <main+0x208>)
 80015ba:	f023 0303 	bic.w	r3, r3, #3
 80015be:	60d3      	str	r3, [r2, #12]
ADC2->CFGR |=  (ADC_CFGR_DMNGT_0 | ADC_CFGR_DMNGT_1);     // 10 = DMA circular
 80015c0:	4b44      	ldr	r3, [pc, #272]	; (80016d4 <main+0x208>)
 80015c2:	68db      	ldr	r3, [r3, #12]
 80015c4:	4a43      	ldr	r2, [pc, #268]	; (80016d4 <main+0x208>)
 80015c6:	f043 0303 	orr.w	r3, r3, #3
 80015ca:	60d3      	str	r3, [r2, #12]


/*-----------------------------------------------------------
  3) START: ADC → TIM3
-----------------------------------------------------------*/
LL_ADC_Enable(ADC2);
 80015cc:	4841      	ldr	r0, [pc, #260]	; (80016d4 <main+0x208>)
 80015ce:	f7ff f87d 	bl	80006cc <LL_ADC_Enable>
while (!LL_ADC_IsActiveFlag_ADRDY(ADC2)) ;
 80015d2:	bf00      	nop
 80015d4:	483f      	ldr	r0, [pc, #252]	; (80016d4 <main+0x208>)
 80015d6:	f7ff f8a1 	bl	800071c <LL_ADC_IsActiveFlag_ADRDY>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d0f9      	beq.n	80015d4 <main+0x108>
LL_ADC_REG_StartConversion(ADC2);   // rozpocznie się po TRGO
 80015e0:	483c      	ldr	r0, [pc, #240]	; (80016d4 <main+0x208>)
 80015e2:	f7ff f887 	bl	80006f4 <LL_ADC_REG_StartConversion>
  while (1)
  {

	  // oczekujesz: pcsel & 0b1100 == 0b1100  (bity 2 i 3 ustawione)

	  	regulate_duty_fast(target_duty);  // np. chcesz osiągnąć duty=900 ale bez przekraczania 10 A
 80015e6:	4b3c      	ldr	r3, [pc, #240]	; (80016d8 <main+0x20c>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	b29b      	uxth	r3, r3
 80015ec:	4618      	mov	r0, r3
 80015ee:	f000 fc4d 	bl	8001e8c <regulate_duty_fast>
	    LL_TIM_OC_SetCompareCH1(TIM1, duty);
 80015f2:	4b3a      	ldr	r3, [pc, #232]	; (80016dc <main+0x210>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4619      	mov	r1, r3
 80015f8:	482f      	ldr	r0, [pc, #188]	; (80016b8 <main+0x1ec>)
 80015fa:	f7ff fedf 	bl	80013bc <LL_TIM_OC_SetCompareCH1>

	    start_time = DWT->CYCCNT;
 80015fe:	4b38      	ldr	r3, [pc, #224]	; (80016e0 <main+0x214>)
 8001600:	685b      	ldr	r3, [r3, #4]
 8001602:	4a38      	ldr	r2, [pc, #224]	; (80016e4 <main+0x218>)
 8001604:	6013      	str	r3, [r2, #0]



	    // Odczyt danych z DMA (bufor zawsze aktualny)
	    uint16_t adc_ch2 = adc_buffer[0];
 8001606:	4b2f      	ldr	r3, [pc, #188]	; (80016c4 <main+0x1f8>)
 8001608:	881b      	ldrh	r3, [r3, #0]
 800160a:	80fb      	strh	r3, [r7, #6]
	    uint16_t adc_ch3 = adc_buffer[1];
 800160c:	4b2d      	ldr	r3, [pc, #180]	; (80016c4 <main+0x1f8>)
 800160e:	885b      	ldrh	r3, [r3, #2]
 8001610:	80bb      	strh	r3, [r7, #4]
	    uint16_t adc2_ch5 = adc2_buffer[0];
 8001612:	4b2f      	ldr	r3, [pc, #188]	; (80016d0 <main+0x204>)
 8001614:	881b      	ldrh	r3, [r3, #0]
 8001616:	807b      	strh	r3, [r7, #2]
	    uint16_t adc2_ch11 = adc2_buffer[1];
 8001618:	4b2d      	ldr	r3, [pc, #180]	; (80016d0 <main+0x204>)
 800161a:	885b      	ldrh	r3, [r3, #2]
 800161c:	803b      	strh	r3, [r7, #0]

	    current_inductor = adc_to_current(adc_ch2);
 800161e:	88fb      	ldrh	r3, [r7, #6]
 8001620:	4618      	mov	r0, r3
 8001622:	f000 fc03 	bl	8001e2c <adc_to_current>
 8001626:	eef0 7a40 	vmov.f32	s15, s0
 800162a:	4b2f      	ldr	r3, [pc, #188]	; (80016e8 <main+0x21c>)
 800162c:	edc3 7a00 	vstr	s15, [r3]
	    voltage_out = adc_to_voltage(adc_ch3);
 8001630:	88bb      	ldrh	r3, [r7, #4]
 8001632:	4618      	mov	r0, r3
 8001634:	f000 fbdc 	bl	8001df0 <adc_to_voltage>
 8001638:	eef0 7a40 	vmov.f32	s15, s0
 800163c:	4b2b      	ldr	r3, [pc, #172]	; (80016ec <main+0x220>)
 800163e:	edc3 7a00 	vstr	s15, [r3]

	    current_out = adc_to_current(adc2_ch11);
 8001642:	883b      	ldrh	r3, [r7, #0]
 8001644:	4618      	mov	r0, r3
 8001646:	f000 fbf1 	bl	8001e2c <adc_to_current>
 800164a:	eef0 7a40 	vmov.f32	s15, s0
 800164e:	4b28      	ldr	r3, [pc, #160]	; (80016f0 <main+0x224>)
 8001650:	edc3 7a00 	vstr	s15, [r3]
	    voltage_in = adc_to_voltage(adc2_ch5);
 8001654:	887b      	ldrh	r3, [r7, #2]
 8001656:	4618      	mov	r0, r3
 8001658:	f000 fbca 	bl	8001df0 <adc_to_voltage>
 800165c:	eef0 7a40 	vmov.f32	s15, s0
 8001660:	4b24      	ldr	r3, [pc, #144]	; (80016f4 <main+0x228>)
 8001662:	edc3 7a00 	vstr	s15, [r3]

	    if (current_inductor > setpoint)
 8001666:	4b24      	ldr	r3, [pc, #144]	; (80016f8 <main+0x22c>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	ee07 3a90 	vmov	s15, r3
 800166e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001672:	4b1d      	ldr	r3, [pc, #116]	; (80016e8 <main+0x21c>)
 8001674:	edd3 7a00 	vldr	s15, [r3]
 8001678:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800167c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001680:	d504      	bpl.n	800168c <main+0x1c0>
	    {
	        LL_GPIO_SetOutputPin(GPIOC, LL_GPIO_PIN_6);
 8001682:	2140      	movs	r1, #64	; 0x40
 8001684:	481d      	ldr	r0, [pc, #116]	; (80016fc <main+0x230>)
 8001686:	f7ff ff03 	bl	8001490 <LL_GPIO_SetOutputPin>
 800168a:	e003      	b.n	8001694 <main+0x1c8>
	    }
	    else
	    {
	        LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_6);
 800168c:	2140      	movs	r1, #64	; 0x40
 800168e:	481b      	ldr	r0, [pc, #108]	; (80016fc <main+0x230>)
 8001690:	f7ff ff0c 	bl	80014ac <LL_GPIO_ResetOutputPin>
	    }

	    stop_time = DWT->CYCCNT;
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <main+0x214>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	4a19      	ldr	r2, [pc, #100]	; (8001700 <main+0x234>)
 800169a:	6013      	str	r3, [r2, #0]
	    elapsed_time = stop_time - start_time;
 800169c:	4b18      	ldr	r3, [pc, #96]	; (8001700 <main+0x234>)
 800169e:	681a      	ldr	r2, [r3, #0]
 80016a0:	4b10      	ldr	r3, [pc, #64]	; (80016e4 <main+0x218>)
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	4a17      	ldr	r2, [pc, #92]	; (8001704 <main+0x238>)
 80016a8:	6013      	str	r3, [r2, #0]

	    test++;
 80016aa:	4b17      	ldr	r3, [pc, #92]	; (8001708 <main+0x23c>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	3301      	adds	r3, #1
 80016b0:	4a15      	ldr	r2, [pc, #84]	; (8001708 <main+0x23c>)
 80016b2:	6013      	str	r3, [r2, #0]
  {
 80016b4:	e797      	b.n	80015e6 <main+0x11a>
 80016b6:	bf00      	nop
 80016b8:	40010000 	.word	0x40010000
 80016bc:	40022040 	.word	0x40022040
 80016c0:	40020000 	.word	0x40020000
 80016c4:	24000014 	.word	0x24000014
 80016c8:	40022000 	.word	0x40022000
 80016cc:	40022140 	.word	0x40022140
 80016d0:	24000018 	.word	0x24000018
 80016d4:	40022100 	.word	0x40022100
 80016d8:	24000050 	.word	0x24000050
 80016dc:	2400004c 	.word	0x2400004c
 80016e0:	e0001000 	.word	0xe0001000
 80016e4:	24000054 	.word	0x24000054
 80016e8:	2400003c 	.word	0x2400003c
 80016ec:	24000044 	.word	0x24000044
 80016f0:	24000040 	.word	0x24000040
 80016f4:	24000048 	.word	0x24000048
 80016f8:	24000004 	.word	0x24000004
 80016fc:	58020800 	.word	0x58020800
 8001700:	24000058 	.word	0x24000058
 8001704:	2400005c 	.word	0x2400005c
 8001708:	24000038 	.word	0x24000038

0800170c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_4);
 8001710:	2004      	movs	r0, #4
 8001712:	f7ff fd21 	bl	8001158 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_4)
 8001716:	bf00      	nop
 8001718:	f7ff fd32 	bl	8001180 <LL_FLASH_GetLatency>
 800171c:	4603      	mov	r3, r0
 800171e:	2b04      	cmp	r3, #4
 8001720:	d1fa      	bne.n	8001718 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_ConfigSupply(LL_PWR_LDO_SUPPLY);
 8001722:	2002      	movs	r0, #2
 8001724:	f7ff fd3a 	bl	800119c <LL_PWR_ConfigSupply>
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE2);
 8001728:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800172c:	f7ff fd4a 	bl	80011c4 <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() == 0)
 8001730:	bf00      	nop
 8001732:	f7ff fd5b 	bl	80011ec <LL_PWR_IsActiveFlag_VOS>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d0fa      	beq.n	8001732 <SystemClock_Config+0x26>
  {
  }
  LL_RCC_HSI_Enable();
 800173c:	f7ff f9dc 	bl	8000af8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001740:	bf00      	nop
 8001742:	f7ff f9e9 	bl	8000b18 <LL_RCC_HSI_IsReady>
 8001746:	4603      	mov	r3, r0
 8001748:	2b01      	cmp	r3, #1
 800174a:	d1fa      	bne.n	8001742 <SystemClock_Config+0x36>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(64);
 800174c:	2040      	movs	r0, #64	; 0x40
 800174e:	f7ff fa09 	bl	8000b64 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_HSI_SetDivider(LL_RCC_HSI_DIV1);
 8001752:	2000      	movs	r0, #0
 8001754:	f7ff f9f2 	bl	8000b3c <LL_RCC_HSI_SetDivider>
  LL_RCC_PLL_SetSource(LL_RCC_PLLSOURCE_HSI);
 8001758:	2000      	movs	r0, #0
 800175a:	f7ff fad9 	bl	8000d10 <LL_RCC_PLL_SetSource>
  LL_RCC_PLL1P_Enable();
 800175e:	f7ff fb0f 	bl	8000d80 <LL_RCC_PLL1P_Enable>
  LL_RCC_PLL1_SetVCOInputRange(LL_RCC_PLLINPUTRANGE_8_16);
 8001762:	2003      	movs	r0, #3
 8001764:	f7ff fb32 	bl	8000dcc <LL_RCC_PLL1_SetVCOInputRange>
  LL_RCC_PLL1_SetVCOOutputRange(LL_RCC_PLLVCORANGE_WIDE);
 8001768:	2000      	movs	r0, #0
 800176a:	f7ff fb19 	bl	8000da0 <LL_RCC_PLL1_SetVCOOutputRange>
  LL_RCC_PLL1_SetM(4);
 800176e:	2004      	movs	r0, #4
 8001770:	f7ff fb5a 	bl	8000e28 <LL_RCC_PLL1_SetM>
  LL_RCC_PLL1_SetN(30);
 8001774:	201e      	movs	r0, #30
 8001776:	f7ff fb3f 	bl	8000df8 <LL_RCC_PLL1_SetN>
  LL_RCC_PLL1_SetP(2);
 800177a:	2002      	movs	r0, #2
 800177c:	f7ff fb6a 	bl	8000e54 <LL_RCC_PLL1_SetP>
  LL_RCC_PLL1_SetQ(2);
 8001780:	2002      	movs	r0, #2
 8001782:	f7ff fb7d 	bl	8000e80 <LL_RCC_PLL1_SetQ>
  LL_RCC_PLL1_SetR(2);
 8001786:	2002      	movs	r0, #2
 8001788:	f7ff fb90 	bl	8000eac <LL_RCC_PLL1_SetR>
  LL_RCC_PLL1_Enable();
 800178c:	f7ff fad4 	bl	8000d38 <LL_RCC_PLL1_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL1_IsReady() != 1)
 8001790:	bf00      	nop
 8001792:	f7ff fae1 	bl	8000d58 <LL_RCC_PLL1_IsReady>
 8001796:	4603      	mov	r3, r0
 8001798:	2b01      	cmp	r3, #1
 800179a:	d1fa      	bne.n	8001792 <SystemClock_Config+0x86>
  {
  }

   /* Intermediate AHB prescaler 2 when target frequency clock is higher than 80 MHz */
   LL_RCC_SetAHBPrescaler(LL_RCC_AHB_DIV_2);
 800179c:	2008      	movs	r0, #8
 800179e:	f7ff fa3f 	bl	8000c20 <LL_RCC_SetAHBPrescaler>

  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL1);
 80017a2:	2003      	movs	r0, #3
 80017a4:	f7ff fa06 	bl	8000bb4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL1)
 80017a8:	bf00      	nop
 80017aa:	f7ff fa17 	bl	8000bdc <LL_RCC_GetSysClkSource>
 80017ae:	4603      	mov	r3, r0
 80017b0:	2b18      	cmp	r3, #24
 80017b2:	d1fa      	bne.n	80017aa <SystemClock_Config+0x9e>
  {

  }
  LL_RCC_SetSysPrescaler(LL_RCC_SYSCLK_DIV_1);
 80017b4:	2000      	movs	r0, #0
 80017b6:	f7ff fa1f 	bl	8000bf8 <LL_RCC_SetSysPrescaler>
  LL_RCC_SetAHBPrescaler(LL_RCC_AHB_DIV_1);
 80017ba:	2000      	movs	r0, #0
 80017bc:	f7ff fa30 	bl	8000c20 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_2);
 80017c0:	2040      	movs	r0, #64	; 0x40
 80017c2:	f7ff fa41 	bl	8000c48 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 80017c6:	f44f 6080 	mov.w	r0, #1024	; 0x400
 80017ca:	f7ff fa51 	bl	8000c70 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetAPB3Prescaler(LL_RCC_APB3_DIV_2);
 80017ce:	2040      	movs	r0, #64	; 0x40
 80017d0:	f7ff fa62 	bl	8000c98 <LL_RCC_SetAPB3Prescaler>
  LL_RCC_SetAPB4Prescaler(LL_RCC_APB4_DIV_2);
 80017d4:	2040      	movs	r0, #64	; 0x40
 80017d6:	f7ff fa73 	bl	8000cc0 <LL_RCC_SetAPB4Prescaler>

  LL_Init1msTick(240000000);
 80017da:	4804      	ldr	r0, [pc, #16]	; (80017ec <SystemClock_Config+0xe0>)
 80017dc:	f001 fb14 	bl	8002e08 <LL_Init1msTick>

  LL_SetSystemCoreClock(240000000);
 80017e0:	4802      	ldr	r0, [pc, #8]	; (80017ec <SystemClock_Config+0xe0>)
 80017e2:	f001 fb1f 	bl	8002e24 <LL_SetSystemCoreClock>
}
 80017e6:	bf00      	nop
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	0e4e1c00 	.word	0x0e4e1c00

080017f0 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  LL_RCC_PLL2P_Enable();
 80017f4:	f7ff fb94 	bl	8000f20 <LL_RCC_PLL2P_Enable>
  LL_RCC_PLL2_SetVCOInputRange(LL_RCC_PLLINPUTRANGE_2_4);
 80017f8:	2001      	movs	r0, #1
 80017fa:	f7ff fbb7 	bl	8000f6c <LL_RCC_PLL2_SetVCOInputRange>
  LL_RCC_PLL2_SetVCOOutputRange(LL_RCC_PLLVCORANGE_WIDE);
 80017fe:	2000      	movs	r0, #0
 8001800:	f7ff fb9e 	bl	8000f40 <LL_RCC_PLL2_SetVCOOutputRange>
  LL_RCC_PLL2_SetM(32);
 8001804:	2020      	movs	r0, #32
 8001806:	f7ff fbdf 	bl	8000fc8 <LL_RCC_PLL2_SetM>
  LL_RCC_PLL2_SetN(100);
 800180a:	2064      	movs	r0, #100	; 0x64
 800180c:	f7ff fbc4 	bl	8000f98 <LL_RCC_PLL2_SetN>
  LL_RCC_PLL2_SetP(4);
 8001810:	2004      	movs	r0, #4
 8001812:	f7ff fbef 	bl	8000ff4 <LL_RCC_PLL2_SetP>
  LL_RCC_PLL2_SetQ(2);
 8001816:	2002      	movs	r0, #2
 8001818:	f7ff fc02 	bl	8001020 <LL_RCC_PLL2_SetQ>
  LL_RCC_PLL2_SetR(2);
 800181c:	2002      	movs	r0, #2
 800181e:	f7ff fc15 	bl	800104c <LL_RCC_PLL2_SetR>
  LL_RCC_PLL2_Enable();
 8001822:	f7ff fb59 	bl	8000ed8 <LL_RCC_PLL2_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL2_IsReady() != 1)
 8001826:	bf00      	nop
 8001828:	f7ff fb66 	bl	8000ef8 <LL_RCC_PLL2_IsReady>
 800182c:	4603      	mov	r3, r0
 800182e:	2b01      	cmp	r3, #1
 8001830:	d1fa      	bne.n	8001828 <PeriphCommonClock_Config+0x38>
  {
  }

}
 8001832:	bf00      	nop
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}

08001838 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b094      	sub	sp, #80	; 0x50
 800183c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 800183e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001842:	2200      	movs	r2, #0
 8001844:	601a      	str	r2, [r3, #0]
 8001846:	605a      	str	r2, [r3, #4]
 8001848:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 800184a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]
 800185a:	615a      	str	r2, [r3, #20]
  LL_ADC_CommonInitTypeDef ADC_CommonInitStruct = {0};
 800185c:	f107 031c 	add.w	r3, r7, #28
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
 8001864:	605a      	str	r2, [r3, #4]
 8001866:	609a      	str	r2, [r3, #8]
 8001868:	60da      	str	r2, [r3, #12]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800186a:	1d3b      	adds	r3, r7, #4
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]
 8001878:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_PLL2P);
 800187a:	2000      	movs	r0, #0
 800187c:	f7ff fa34 	bl	8000ce8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8001880:	2020      	movs	r0, #32
 8001882:	f7ff fbf9 	bl	8001078 <LL_AHB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8001886:	2001      	movs	r0, #1
 8001888:	f7ff fc12 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 800188c:	2020      	movs	r0, #32
 800188e:	f7ff fc0f 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  /**ADC1 GPIO Configuration
  PA6   ------> ADC1_INP3
  PA7   ------> ADC1_INN3
  PF11   ------> ADC1_INP2
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8001892:	23c0      	movs	r3, #192	; 0xc0
 8001894:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001896:	2303      	movs	r3, #3
 8001898:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800189a:	2300      	movs	r3, #0
 800189c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800189e:	1d3b      	adds	r3, r7, #4
 80018a0:	4619      	mov	r1, r3
 80018a2:	4856      	ldr	r0, [pc, #344]	; (80019fc <MX_ADC1_Init+0x1c4>)
 80018a4:	f000 fd7e 	bl	80023a4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_11;
 80018a8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018ac:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 80018ae:	2303      	movs	r3, #3
 80018b0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80018b2:	2300      	movs	r3, #0
 80018b4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018b6:	1d3b      	adds	r3, r7, #4
 80018b8:	4619      	mov	r1, r3
 80018ba:	4851      	ldr	r0, [pc, #324]	; (8001a00 <MX_ADC1_Init+0x1c8>)
 80018bc:	f000 fd72 	bl	80023a4 <LL_GPIO_Init>

  /* ADC1 DMA Init */

  /* ADC1 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_0, LL_DMAMUX1_REQ_ADC1);
 80018c0:	2209      	movs	r2, #9
 80018c2:	2100      	movs	r1, #0
 80018c4:	484f      	ldr	r0, [pc, #316]	; (8001a04 <MX_ADC1_Init+0x1cc>)
 80018c6:	f7ff f891 	bl	80009ec <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_0, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 80018ca:	2200      	movs	r2, #0
 80018cc:	2100      	movs	r1, #0
 80018ce:	484d      	ldr	r0, [pc, #308]	; (8001a04 <MX_ADC1_Init+0x1cc>)
 80018d0:	f7fe ff5a 	bl	8000788 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_0, LL_DMA_PRIORITY_LOW);
 80018d4:	2200      	movs	r2, #0
 80018d6:	2100      	movs	r1, #0
 80018d8:	484a      	ldr	r0, [pc, #296]	; (8001a04 <MX_ADC1_Init+0x1cc>)
 80018da:	f7ff f839 	bl	8000950 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MODE_CIRCULAR);
 80018de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80018e2:	2100      	movs	r1, #0
 80018e4:	4847      	ldr	r0, [pc, #284]	; (8001a04 <MX_ADC1_Init+0x1cc>)
 80018e6:	f7fe ff75 	bl	80007d4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_PERIPH_NOINCREMENT);
 80018ea:	2200      	movs	r2, #0
 80018ec:	2100      	movs	r1, #0
 80018ee:	4845      	ldr	r0, [pc, #276]	; (8001a04 <MX_ADC1_Init+0x1cc>)
 80018f0:	f7fe ff96 	bl	8000820 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_0, LL_DMA_MEMORY_INCREMENT);
 80018f4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018f8:	2100      	movs	r1, #0
 80018fa:	4842      	ldr	r0, [pc, #264]	; (8001a04 <MX_ADC1_Init+0x1cc>)
 80018fc:	f7fe ffb6 	bl	800086c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_0, LL_DMA_PDATAALIGN_HALFWORD);
 8001900:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001904:	2100      	movs	r1, #0
 8001906:	483f      	ldr	r0, [pc, #252]	; (8001a04 <MX_ADC1_Init+0x1cc>)
 8001908:	f7fe ffd6 	bl	80008b8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_0, LL_DMA_MDATAALIGN_HALFWORD);
 800190c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001910:	2100      	movs	r1, #0
 8001912:	483c      	ldr	r0, [pc, #240]	; (8001a04 <MX_ADC1_Init+0x1cc>)
 8001914:	f7fe fff6 	bl	8000904 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_0);
 8001918:	2100      	movs	r1, #0
 800191a:	483a      	ldr	r0, [pc, #232]	; (8001a04 <MX_ADC1_Init+0x1cc>)
 800191c:	f7ff f896 	bl	8000a4c <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  LL_ADC_SetOverSamplingScope(ADC1, LL_ADC_OVS_DISABLE);
 8001920:	2100      	movs	r1, #0
 8001922:	4839      	ldr	r0, [pc, #228]	; (8001a08 <MX_ADC1_Init+0x1d0>)
 8001924:	f7fe fe96 	bl	8000654 <LL_ADC_SetOverSamplingScope>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_16B;
 8001928:	2300      	movs	r3, #0
 800192a:	647b      	str	r3, [r7, #68]	; 0x44
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 800192c:	2300      	movs	r3, #0
 800192e:	64fb      	str	r3, [r7, #76]	; 0x4c
  LL_ADC_Init(ADC1, &ADC_InitStruct);
 8001930:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001934:	4619      	mov	r1, r3
 8001936:	4834      	ldr	r0, [pc, #208]	; (8001a08 <MX_ADC1_Init+0x1d0>)
 8001938:	f000 fbe4 	bl	8002104 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 800193c:	2300      	movs	r3, #0
 800193e:	62fb      	str	r3, [r7, #44]	; 0x2c
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8001940:	2301      	movs	r3, #1
 8001942:	633b      	str	r3, [r7, #48]	; 0x30
  ADC_REG_InitStruct.SequencerDiscont = DISABLE;
 8001944:	2300      	movs	r3, #0
 8001946:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001948:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800194c:	63bb      	str	r3, [r7, #56]	; 0x38
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 800194e:	2300      	movs	r3, #0
 8001950:	643b      	str	r3, [r7, #64]	; 0x40
  LL_ADC_REG_Init(ADC1, &ADC_REG_InitStruct);
 8001952:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001956:	4619      	mov	r1, r3
 8001958:	482b      	ldr	r0, [pc, #172]	; (8001a08 <MX_ADC1_Init+0x1d0>)
 800195a:	f000 fbff 	bl	800215c <LL_ADC_REG_Init>
  ADC_CommonInitStruct.CommonClock = LL_ADC_CLOCK_ASYNC_DIV1;
 800195e:	2300      	movs	r3, #0
 8001960:	61fb      	str	r3, [r7, #28]
  ADC_CommonInitStruct.Multimode = LL_ADC_MULTI_INDEPENDENT;
 8001962:	2300      	movs	r3, #0
 8001964:	623b      	str	r3, [r7, #32]
  LL_ADC_CommonInit(__LL_ADC_COMMON_INSTANCE(ADC1), &ADC_CommonInitStruct);
 8001966:	f107 031c 	add.w	r3, r7, #28
 800196a:	4619      	mov	r1, r3
 800196c:	4827      	ldr	r0, [pc, #156]	; (8001a0c <MX_ADC1_Init+0x1d4>)
 800196e:	f000 fb71 	bl	8002054 <LL_ADC_CommonInit>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC1);
 8001972:	4825      	ldr	r0, [pc, #148]	; (8001a08 <MX_ADC1_Init+0x1d0>)
 8001974:	f7fe fe84 	bl	8000680 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC1);
 8001978:	4823      	ldr	r0, [pc, #140]	; (8001a08 <MX_ADC1_Init+0x1d0>)
 800197a:	f7fe fe93 	bl	80006a4 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  __IO uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 800197e:	4b24      	ldr	r3, [pc, #144]	; (8001a10 <MX_ADC1_Init+0x1d8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	099b      	lsrs	r3, r3, #6
 8001984:	4a23      	ldr	r2, [pc, #140]	; (8001a14 <MX_ADC1_Init+0x1dc>)
 8001986:	fba2 2303 	umull	r2, r3, r2, r3
 800198a:	099a      	lsrs	r2, r3, #6
 800198c:	4613      	mov	r3, r2
 800198e:	009b      	lsls	r3, r3, #2
 8001990:	4413      	add	r3, r2
 8001992:	005b      	lsls	r3, r3, #1
 8001994:	461a      	mov	r2, r3
 8001996:	4b20      	ldr	r3, [pc, #128]	; (8001a18 <MX_ADC1_Init+0x1e0>)
 8001998:	fba3 2302 	umull	r2, r3, r3, r2
 800199c:	08db      	lsrs	r3, r3, #3
 800199e:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 80019a0:	e002      	b.n	80019a8 <MX_ADC1_Init+0x170>
  {
    wait_loop_index--;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	3b01      	subs	r3, #1
 80019a6:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d1f9      	bne.n	80019a2 <MX_ADC1_Init+0x16a>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_2);
 80019ae:	4a1b      	ldr	r2, [pc, #108]	; (8001a1c <MX_ADC1_Init+0x1e4>)
 80019b0:	2106      	movs	r1, #6
 80019b2:	4815      	ldr	r0, [pc, #84]	; (8001a08 <MX_ADC1_Init+0x1d0>)
 80019b4:	f7fe fdd3 	bl	800055e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SAMPLINGTIME_64CYCLES_5);
 80019b8:	2205      	movs	r2, #5
 80019ba:	4918      	ldr	r1, [pc, #96]	; (8001a1c <MX_ADC1_Init+0x1e4>)
 80019bc:	4812      	ldr	r0, [pc, #72]	; (8001a08 <MX_ADC1_Init+0x1d0>)
 80019be:	f7fe fdfa 	bl	80005b6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_2, LL_ADC_SINGLE_ENDED);
 80019c2:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80019c6:	4915      	ldr	r1, [pc, #84]	; (8001a1c <MX_ADC1_Init+0x1e4>)
 80019c8:	480f      	ldr	r0, [pc, #60]	; (8001a08 <MX_ADC1_Init+0x1d0>)
 80019ca:	f7fe fe1f 	bl	800060c <LL_ADC_SetChannelSingleDiff>

  /** Configure Regular Channel
  */

  LL_ADC_REG_SetSequencerRanks(ADC1, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_3);
 80019ce:	4a14      	ldr	r2, [pc, #80]	; (8001a20 <MX_ADC1_Init+0x1e8>)
 80019d0:	210c      	movs	r1, #12
 80019d2:	480d      	ldr	r0, [pc, #52]	; (8001a08 <MX_ADC1_Init+0x1d0>)
 80019d4:	f7fe fdc3 	bl	800055e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC1, LL_ADC_CHANNEL_3, LL_ADC_SAMPLINGTIME_64CYCLES_5);
 80019d8:	2205      	movs	r2, #5
 80019da:	4911      	ldr	r1, [pc, #68]	; (8001a20 <MX_ADC1_Init+0x1e8>)
 80019dc:	480a      	ldr	r0, [pc, #40]	; (8001a08 <MX_ADC1_Init+0x1d0>)
 80019de:	f7fe fdea 	bl	80005b6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC1, LL_ADC_CHANNEL_3, LL_ADC_DIFFERENTIAL_ENDED);
 80019e2:	4a10      	ldr	r2, [pc, #64]	; (8001a24 <MX_ADC1_Init+0x1ec>)
 80019e4:	490e      	ldr	r1, [pc, #56]	; (8001a20 <MX_ADC1_Init+0x1e8>)
 80019e6:	4808      	ldr	r0, [pc, #32]	; (8001a08 <MX_ADC1_Init+0x1d0>)
 80019e8:	f7fe fe10 	bl	800060c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC1_Init 2 */
  ADC1->PCSEL = (1U << 2) | (1U << 3);
 80019ec:	4b06      	ldr	r3, [pc, #24]	; (8001a08 <MX_ADC1_Init+0x1d0>)
 80019ee:	220c      	movs	r2, #12
 80019f0:	61da      	str	r2, [r3, #28]



  /* USER CODE END ADC1_Init 2 */

}
 80019f2:	bf00      	nop
 80019f4:	3750      	adds	r7, #80	; 0x50
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	58020000 	.word	0x58020000
 8001a00:	58021400 	.word	0x58021400
 8001a04:	40020000 	.word	0x40020000
 8001a08:	40022000 	.word	0x40022000
 8001a0c:	40022300 	.word	0x40022300
 8001a10:	24000000 	.word	0x24000000
 8001a14:	053e2d63 	.word	0x053e2d63
 8001a18:	cccccccd 	.word	0xcccccccd
 8001a1c:	08600004 	.word	0x08600004
 8001a20:	0c900008 	.word	0x0c900008
 8001a24:	47ff0000 	.word	0x47ff0000

08001a28 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b090      	sub	sp, #64	; 0x40
 8001a2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  LL_ADC_InitTypeDef ADC_InitStruct = {0};
 8001a2e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001a32:	2200      	movs	r2, #0
 8001a34:	601a      	str	r2, [r3, #0]
 8001a36:	605a      	str	r2, [r3, #4]
 8001a38:	609a      	str	r2, [r3, #8]
  LL_ADC_REG_InitTypeDef ADC_REG_InitStruct = {0};
 8001a3a:	f107 031c 	add.w	r3, r7, #28
 8001a3e:	2200      	movs	r2, #0
 8001a40:	601a      	str	r2, [r3, #0]
 8001a42:	605a      	str	r2, [r3, #4]
 8001a44:	609a      	str	r2, [r3, #8]
 8001a46:	60da      	str	r2, [r3, #12]
 8001a48:	611a      	str	r2, [r3, #16]
 8001a4a:	615a      	str	r2, [r3, #20]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a4c:	1d3b      	adds	r3, r7, #4
 8001a4e:	2200      	movs	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
 8001a52:	605a      	str	r2, [r3, #4]
 8001a54:	609a      	str	r2, [r3, #8]
 8001a56:	60da      	str	r2, [r3, #12]
 8001a58:	611a      	str	r2, [r3, #16]
 8001a5a:	615a      	str	r2, [r3, #20]

  LL_RCC_SetADCClockSource(LL_RCC_ADC_CLKSOURCE_PLL2P);
 8001a5c:	2000      	movs	r0, #0
 8001a5e:	f7ff f943 	bl	8000ce8 <LL_RCC_SetADCClockSource>

  /* Peripheral clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_ADC12);
 8001a62:	2020      	movs	r0, #32
 8001a64:	f7ff fb08 	bl	8001078 <LL_AHB1_GRP1_EnableClock>

  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8001a68:	2004      	movs	r0, #4
 8001a6a:	f7ff fb21 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 8001a6e:	2002      	movs	r0, #2
 8001a70:	f7ff fb1e 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  /**ADC2 GPIO Configuration
  PC1   ------> ADC2_INP11
  PB0   ------> ADC2_INN5
  PB1   ------> ADC2_INP5
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8001a74:	2302      	movs	r3, #2
 8001a76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a78:	2303      	movs	r3, #3
 8001a7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a80:	1d3b      	adds	r3, r7, #4
 8001a82:	4619      	mov	r1, r3
 8001a84:	4850      	ldr	r0, [pc, #320]	; (8001bc8 <MX_ADC2_Init+0x1a0>)
 8001a86:	f000 fc8d 	bl	80023a4 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_0|LL_GPIO_PIN_1;
 8001a8a:	2303      	movs	r3, #3
 8001a8c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ANALOG;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a96:	1d3b      	adds	r3, r7, #4
 8001a98:	4619      	mov	r1, r3
 8001a9a:	484c      	ldr	r0, [pc, #304]	; (8001bcc <MX_ADC2_Init+0x1a4>)
 8001a9c:	f000 fc82 	bl	80023a4 <LL_GPIO_Init>

  /* ADC2 DMA Init */

  /* ADC2 Init */
  LL_DMA_SetPeriphRequest(DMA1, LL_DMA_STREAM_1, LL_DMAMUX1_REQ_ADC2);
 8001aa0:	220a      	movs	r2, #10
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	484a      	ldr	r0, [pc, #296]	; (8001bd0 <MX_ADC2_Init+0x1a8>)
 8001aa6:	f7fe ffa1 	bl	80009ec <LL_DMA_SetPeriphRequest>

  LL_DMA_SetDataTransferDirection(DMA1, LL_DMA_STREAM_1, LL_DMA_DIRECTION_PERIPH_TO_MEMORY);
 8001aaa:	2200      	movs	r2, #0
 8001aac:	2101      	movs	r1, #1
 8001aae:	4848      	ldr	r0, [pc, #288]	; (8001bd0 <MX_ADC2_Init+0x1a8>)
 8001ab0:	f7fe fe6a 	bl	8000788 <LL_DMA_SetDataTransferDirection>

  LL_DMA_SetStreamPriorityLevel(DMA1, LL_DMA_STREAM_1, LL_DMA_PRIORITY_LOW);
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	4845      	ldr	r0, [pc, #276]	; (8001bd0 <MX_ADC2_Init+0x1a8>)
 8001aba:	f7fe ff49 	bl	8000950 <LL_DMA_SetStreamPriorityLevel>

  LL_DMA_SetMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MODE_CIRCULAR);
 8001abe:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	4842      	ldr	r0, [pc, #264]	; (8001bd0 <MX_ADC2_Init+0x1a8>)
 8001ac6:	f7fe fe85 	bl	80007d4 <LL_DMA_SetMode>

  LL_DMA_SetPeriphIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_PERIPH_NOINCREMENT);
 8001aca:	2200      	movs	r2, #0
 8001acc:	2101      	movs	r1, #1
 8001ace:	4840      	ldr	r0, [pc, #256]	; (8001bd0 <MX_ADC2_Init+0x1a8>)
 8001ad0:	f7fe fea6 	bl	8000820 <LL_DMA_SetPeriphIncMode>

  LL_DMA_SetMemoryIncMode(DMA1, LL_DMA_STREAM_1, LL_DMA_MEMORY_INCREMENT);
 8001ad4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001ad8:	2101      	movs	r1, #1
 8001ada:	483d      	ldr	r0, [pc, #244]	; (8001bd0 <MX_ADC2_Init+0x1a8>)
 8001adc:	f7fe fec6 	bl	800086c <LL_DMA_SetMemoryIncMode>

  LL_DMA_SetPeriphSize(DMA1, LL_DMA_STREAM_1, LL_DMA_PDATAALIGN_HALFWORD);
 8001ae0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001ae4:	2101      	movs	r1, #1
 8001ae6:	483a      	ldr	r0, [pc, #232]	; (8001bd0 <MX_ADC2_Init+0x1a8>)
 8001ae8:	f7fe fee6 	bl	80008b8 <LL_DMA_SetPeriphSize>

  LL_DMA_SetMemorySize(DMA1, LL_DMA_STREAM_1, LL_DMA_MDATAALIGN_HALFWORD);
 8001aec:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001af0:	2101      	movs	r1, #1
 8001af2:	4837      	ldr	r0, [pc, #220]	; (8001bd0 <MX_ADC2_Init+0x1a8>)
 8001af4:	f7fe ff06 	bl	8000904 <LL_DMA_SetMemorySize>

  LL_DMA_DisableFifoMode(DMA1, LL_DMA_STREAM_1);
 8001af8:	2101      	movs	r1, #1
 8001afa:	4835      	ldr	r0, [pc, #212]	; (8001bd0 <MX_ADC2_Init+0x1a8>)
 8001afc:	f7fe ffa6 	bl	8000a4c <LL_DMA_DisableFifoMode>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  LL_ADC_SetOverSamplingScope(ADC2, LL_ADC_OVS_DISABLE);
 8001b00:	2100      	movs	r1, #0
 8001b02:	4834      	ldr	r0, [pc, #208]	; (8001bd4 <MX_ADC2_Init+0x1ac>)
 8001b04:	f7fe fda6 	bl	8000654 <LL_ADC_SetOverSamplingScope>
  ADC_InitStruct.Resolution = LL_ADC_RESOLUTION_16B;
 8001b08:	2300      	movs	r3, #0
 8001b0a:	637b      	str	r3, [r7, #52]	; 0x34
  ADC_InitStruct.LowPowerMode = LL_ADC_LP_MODE_NONE;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_ADC_Init(ADC2, &ADC_InitStruct);
 8001b10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001b14:	4619      	mov	r1, r3
 8001b16:	482f      	ldr	r0, [pc, #188]	; (8001bd4 <MX_ADC2_Init+0x1ac>)
 8001b18:	f000 faf4 	bl	8002104 <LL_ADC_Init>
  ADC_REG_InitStruct.TriggerSource = LL_ADC_REG_TRIG_SOFTWARE;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61fb      	str	r3, [r7, #28]
  ADC_REG_InitStruct.SequencerLength = LL_ADC_REG_SEQ_SCAN_ENABLE_2RANKS;
 8001b20:	2301      	movs	r3, #1
 8001b22:	623b      	str	r3, [r7, #32]
  ADC_REG_InitStruct.SequencerDiscont = DISABLE;
 8001b24:	2300      	movs	r3, #0
 8001b26:	627b      	str	r3, [r7, #36]	; 0x24
  ADC_REG_InitStruct.ContinuousMode = LL_ADC_REG_CONV_CONTINUOUS;
 8001b28:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  ADC_REG_InitStruct.Overrun = LL_ADC_REG_OVR_DATA_PRESERVED;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	633b      	str	r3, [r7, #48]	; 0x30
  LL_ADC_REG_Init(ADC2, &ADC_REG_InitStruct);
 8001b32:	f107 031c 	add.w	r3, r7, #28
 8001b36:	4619      	mov	r1, r3
 8001b38:	4826      	ldr	r0, [pc, #152]	; (8001bd4 <MX_ADC2_Init+0x1ac>)
 8001b3a:	f000 fb0f 	bl	800215c <LL_ADC_REG_Init>

  /* Disable ADC deep power down (enabled by default after reset state) */
  LL_ADC_DisableDeepPowerDown(ADC2);
 8001b3e:	4825      	ldr	r0, [pc, #148]	; (8001bd4 <MX_ADC2_Init+0x1ac>)
 8001b40:	f7fe fd9e 	bl	8000680 <LL_ADC_DisableDeepPowerDown>
  /* Enable ADC internal voltage regulator */
  LL_ADC_EnableInternalRegulator(ADC2);
 8001b44:	4823      	ldr	r0, [pc, #140]	; (8001bd4 <MX_ADC2_Init+0x1ac>)
 8001b46:	f7fe fdad 	bl	80006a4 <LL_ADC_EnableInternalRegulator>
  /* Note: Variable divided by 2 to compensate partially */
  /* CPU processing cycles (depends on compilation optimization). */
  /* Note: If system core clock frequency is below 200kHz, wait time */
  /* is only a few CPU processing cycles. */
  __IO uint32_t wait_loop_index;
  wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US * (SystemCoreClock / (100000 * 2))) / 10);
 8001b4a:	4b23      	ldr	r3, [pc, #140]	; (8001bd8 <MX_ADC2_Init+0x1b0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	099b      	lsrs	r3, r3, #6
 8001b50:	4a22      	ldr	r2, [pc, #136]	; (8001bdc <MX_ADC2_Init+0x1b4>)
 8001b52:	fba2 2303 	umull	r2, r3, r2, r3
 8001b56:	099a      	lsrs	r2, r3, #6
 8001b58:	4613      	mov	r3, r2
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	4413      	add	r3, r2
 8001b5e:	005b      	lsls	r3, r3, #1
 8001b60:	461a      	mov	r2, r3
 8001b62:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <MX_ADC2_Init+0x1b8>)
 8001b64:	fba3 2302 	umull	r2, r3, r3, r2
 8001b68:	08db      	lsrs	r3, r3, #3
 8001b6a:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 8001b6c:	e002      	b.n	8001b74 <MX_ADC2_Init+0x14c>
  {
    wait_loop_index--;
 8001b6e:	683b      	ldr	r3, [r7, #0]
 8001b70:	3b01      	subs	r3, #1
 8001b72:	603b      	str	r3, [r7, #0]
  while(wait_loop_index != 0)
 8001b74:	683b      	ldr	r3, [r7, #0]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d1f9      	bne.n	8001b6e <MX_ADC2_Init+0x146>
  }

  /** Configure Regular Channel
  */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_1, LL_ADC_CHANNEL_5);
 8001b7a:	4a1a      	ldr	r2, [pc, #104]	; (8001be4 <MX_ADC2_Init+0x1bc>)
 8001b7c:	2106      	movs	r1, #6
 8001b7e:	4815      	ldr	r0, [pc, #84]	; (8001bd4 <MX_ADC2_Init+0x1ac>)
 8001b80:	f7fe fced 	bl	800055e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_5, LL_ADC_SAMPLINGTIME_64CYCLES_5);
 8001b84:	2205      	movs	r2, #5
 8001b86:	4917      	ldr	r1, [pc, #92]	; (8001be4 <MX_ADC2_Init+0x1bc>)
 8001b88:	4812      	ldr	r0, [pc, #72]	; (8001bd4 <MX_ADC2_Init+0x1ac>)
 8001b8a:	f7fe fd14 	bl	80005b6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_5, LL_ADC_DIFFERENTIAL_ENDED);
 8001b8e:	4a16      	ldr	r2, [pc, #88]	; (8001be8 <MX_ADC2_Init+0x1c0>)
 8001b90:	4914      	ldr	r1, [pc, #80]	; (8001be4 <MX_ADC2_Init+0x1bc>)
 8001b92:	4810      	ldr	r0, [pc, #64]	; (8001bd4 <MX_ADC2_Init+0x1ac>)
 8001b94:	f7fe fd3a 	bl	800060c <LL_ADC_SetChannelSingleDiff>
  /* USER CODE BEGIN ADC2_Init 2 */
  LL_ADC_REG_SetSequencerRanks(ADC2, LL_ADC_REG_RANK_2, LL_ADC_CHANNEL_11);
 8001b98:	4a14      	ldr	r2, [pc, #80]	; (8001bec <MX_ADC2_Init+0x1c4>)
 8001b9a:	210c      	movs	r1, #12
 8001b9c:	480d      	ldr	r0, [pc, #52]	; (8001bd4 <MX_ADC2_Init+0x1ac>)
 8001b9e:	f7fe fcde 	bl	800055e <LL_ADC_REG_SetSequencerRanks>
  LL_ADC_SetChannelSamplingTime(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SAMPLINGTIME_64CYCLES_5);
 8001ba2:	2205      	movs	r2, #5
 8001ba4:	4911      	ldr	r1, [pc, #68]	; (8001bec <MX_ADC2_Init+0x1c4>)
 8001ba6:	480b      	ldr	r0, [pc, #44]	; (8001bd4 <MX_ADC2_Init+0x1ac>)
 8001ba8:	f7fe fd05 	bl	80005b6 <LL_ADC_SetChannelSamplingTime>
  LL_ADC_SetChannelSingleDiff(ADC2, LL_ADC_CHANNEL_11, LL_ADC_SINGLE_ENDED);
 8001bac:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001bb0:	490e      	ldr	r1, [pc, #56]	; (8001bec <MX_ADC2_Init+0x1c4>)
 8001bb2:	4808      	ldr	r0, [pc, #32]	; (8001bd4 <MX_ADC2_Init+0x1ac>)
 8001bb4:	f7fe fd2a 	bl	800060c <LL_ADC_SetChannelSingleDiff>

  ADC2->PCSEL = (1U << 5) | (1U << 11);
 8001bb8:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <MX_ADC2_Init+0x1ac>)
 8001bba:	f44f 6202 	mov.w	r2, #2080	; 0x820
 8001bbe:	61da      	str	r2, [r3, #28]
  /* USER CODE END ADC2_Init 2 */

}
 8001bc0:	bf00      	nop
 8001bc2:	3740      	adds	r7, #64	; 0x40
 8001bc4:	46bd      	mov	sp, r7
 8001bc6:	bd80      	pop	{r7, pc}
 8001bc8:	58020800 	.word	0x58020800
 8001bcc:	58020400 	.word	0x58020400
 8001bd0:	40020000 	.word	0x40020000
 8001bd4:	40022100 	.word	0x40022100
 8001bd8:	24000000 	.word	0x24000000
 8001bdc:	053e2d63 	.word	0x053e2d63
 8001be0:	cccccccd 	.word	0xcccccccd
 8001be4:	14f00020 	.word	0x14f00020
 8001be8:	47ff0000 	.word	0x47ff0000
 8001bec:	2e300800 	.word	0x2e300800

08001bf0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b09e      	sub	sp, #120	; 0x78
 8001bf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001bf6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
 8001c04:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 8001c06:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c0a:	2220      	movs	r2, #32
 8001c0c:	2100      	movs	r1, #0
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f001 f918 	bl	8002e44 <memset>
  LL_TIM_BDTR_InitTypeDef TIM_BDTRInitStruct = {0};
 8001c14:	f107 031c 	add.w	r3, r7, #28
 8001c18:	2228      	movs	r2, #40	; 0x28
 8001c1a:	2100      	movs	r1, #0
 8001c1c:	4618      	mov	r0, r3
 8001c1e:	f001 f911 	bl	8002e44 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c22:	1d3b      	adds	r3, r7, #4
 8001c24:	2200      	movs	r2, #0
 8001c26:	601a      	str	r2, [r3, #0]
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	609a      	str	r2, [r3, #8]
 8001c2c:	60da      	str	r2, [r3, #12]
 8001c2e:	611a      	str	r2, [r3, #16]
 8001c30:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001c32:	2001      	movs	r0, #1
 8001c34:	f7ff fa58 	bl	80010e8 <LL_APB2_GRP1_EnableClock>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  TIM_InitStruct.Prescaler = 0;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	66bb      	str	r3, [r7, #104]	; 0x68
  TIM_InitStruct.Autoreload = 1199;
 8001c42:	f240 43af 	movw	r3, #1199	; 0x4af
 8001c46:	66fb      	str	r3, [r7, #108]	; 0x6c
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	673b      	str	r3, [r7, #112]	; 0x70
  TIM_InitStruct.RepetitionCounter = 0;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	677b      	str	r3, [r7, #116]	; 0x74
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8001c50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001c54:	4619      	mov	r1, r3
 8001c56:	4836      	ldr	r0, [pc, #216]	; (8001d30 <MX_TIM1_Init+0x140>)
 8001c58:	f000 fca2 	bl	80025a0 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001c5c:	4834      	ldr	r0, [pc, #208]	; (8001d30 <MX_TIM1_Init+0x140>)
 8001c5e:	f7ff fae9 	bl	8001234 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8001c62:	2100      	movs	r1, #0
 8001c64:	4832      	ldr	r0, [pc, #200]	; (8001d30 <MX_TIM1_Init+0x140>)
 8001c66:	f7ff fbb7 	bl	80013d8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM1, LL_TIM_CHANNEL_CH1);
 8001c6a:	2101      	movs	r1, #1
 8001c6c:	4830      	ldr	r0, [pc, #192]	; (8001d30 <MX_TIM1_Init+0x140>)
 8001c6e:	f7ff fb55 	bl	800131c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8001c72:	2360      	movs	r3, #96	; 0x60
 8001c74:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8001c76:	2300      	movs	r3, #0
 8001c78:	64bb      	str	r3, [r7, #72]	; 0x48
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  TIM_OC_InitStruct.CompareValue = 600;
 8001c7e:	f44f 7316 	mov.w	r3, #600	; 0x258
 8001c82:	653b      	str	r3, [r7, #80]	; 0x50
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001c84:	2300      	movs	r3, #0
 8001c86:	657b      	str	r3, [r7, #84]	; 0x54
  TIM_OC_InitStruct.OCNPolarity = LL_TIM_OCPOLARITY_HIGH;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	65bb      	str	r3, [r7, #88]	; 0x58
  TIM_OC_InitStruct.OCIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	65fb      	str	r3, [r7, #92]	; 0x5c
  TIM_OC_InitStruct.OCNIdleState = LL_TIM_OCIDLESTATE_LOW;
 8001c90:	2300      	movs	r3, #0
 8001c92:	663b      	str	r3, [r7, #96]	; 0x60
  LL_TIM_OC_Init(TIM1, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8001c94:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001c98:	461a      	mov	r2, r3
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	4824      	ldr	r0, [pc, #144]	; (8001d30 <MX_TIM1_Init+0x140>)
 8001c9e:	f000 fd13 	bl	80026c8 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM1, LL_TIM_CHANNEL_CH1);
 8001ca2:	2101      	movs	r1, #1
 8001ca4:	4822      	ldr	r0, [pc, #136]	; (8001d30 <MX_TIM1_Init+0x140>)
 8001ca6:	f7ff fae7 	bl	8001278 <LL_TIM_OC_DisableFast>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001caa:	2100      	movs	r1, #0
 8001cac:	4820      	ldr	r0, [pc, #128]	; (8001d30 <MX_TIM1_Init+0x140>)
 8001cae:	f7ff fba9 	bl	8001404 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8001cb2:	2100      	movs	r1, #0
 8001cb4:	481e      	ldr	r0, [pc, #120]	; (8001d30 <MX_TIM1_Init+0x140>)
 8001cb6:	f7ff fbb8 	bl	800142a <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001cba:	481d      	ldr	r0, [pc, #116]	; (8001d30 <MX_TIM1_Init+0x140>)
 8001cbc:	f7ff fbc8 	bl	8001450 <LL_TIM_DisableMasterSlaveMode>
  TIM_BDTRInitStruct.OSSRState = LL_TIM_OSSR_DISABLE;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	61fb      	str	r3, [r7, #28]
  TIM_BDTRInitStruct.OSSIState = LL_TIM_OSSI_DISABLE;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	623b      	str	r3, [r7, #32]
  TIM_BDTRInitStruct.LockLevel = LL_TIM_LOCKLEVEL_OFF;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_BDTRInitStruct.DeadTime = 10;
 8001ccc:	230a      	movs	r3, #10
 8001cce:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
  TIM_BDTRInitStruct.BreakState = LL_TIM_BREAK_DISABLE;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	857b      	strh	r3, [r7, #42]	; 0x2a
  TIM_BDTRInitStruct.BreakPolarity = LL_TIM_BREAK_POLARITY_HIGH;
 8001cd6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cda:	62fb      	str	r3, [r7, #44]	; 0x2c
  TIM_BDTRInitStruct.BreakFilter = LL_TIM_BREAK_FILTER_FDIV1;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	633b      	str	r3, [r7, #48]	; 0x30
  TIM_BDTRInitStruct.Break2State = LL_TIM_BREAK2_DISABLE;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	637b      	str	r3, [r7, #52]	; 0x34
  TIM_BDTRInitStruct.Break2Polarity = LL_TIM_BREAK2_POLARITY_HIGH;
 8001ce4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ce8:	63bb      	str	r3, [r7, #56]	; 0x38
  TIM_BDTRInitStruct.Break2Filter = LL_TIM_BREAK2_FILTER_FDIV1;
 8001cea:	2300      	movs	r3, #0
 8001cec:	63fb      	str	r3, [r7, #60]	; 0x3c
  TIM_BDTRInitStruct.AutomaticOutput = LL_TIM_AUTOMATICOUTPUT_DISABLE;
 8001cee:	2300      	movs	r3, #0
 8001cf0:	643b      	str	r3, [r7, #64]	; 0x40
  LL_TIM_BDTR_Init(TIM1, &TIM_BDTRInitStruct);
 8001cf2:	f107 031c 	add.w	r3, r7, #28
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	480d      	ldr	r0, [pc, #52]	; (8001d30 <MX_TIM1_Init+0x140>)
 8001cfa:	f000 fd45 	bl	8002788 <LL_TIM_BDTR_Init>
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 8001cfe:	2010      	movs	r0, #16
 8001d00:	f7ff f9d6 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  /**TIM1 GPIO Configuration
  PE8   ------> TIM1_CH1N
  PE9   ------> TIM1_CH1
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8|LL_GPIO_PIN_9;
 8001d04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001d08:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001d0a:	2302      	movs	r3, #2
 8001d0c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001d12:	2300      	movs	r3, #0
 8001d14:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001d16:	2300      	movs	r3, #0
 8001d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_1;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001d1e:	1d3b      	adds	r3, r7, #4
 8001d20:	4619      	mov	r1, r3
 8001d22:	4804      	ldr	r0, [pc, #16]	; (8001d34 <MX_TIM1_Init+0x144>)
 8001d24:	f000 fb3e 	bl	80023a4 <LL_GPIO_Init>

}
 8001d28:	bf00      	nop
 8001d2a:	3778      	adds	r7, #120	; 0x78
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	bd80      	pop	{r7, pc}
 8001d30:	40010000 	.word	0x40010000
 8001d34:	58021000 	.word	0x58021000

08001d38 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0

  /* Init with LL driver */
  /* DMA controller clock enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001d3c:	2001      	movs	r0, #1
 8001d3e:	f7ff f99b 	bl	8001078 <LL_AHB1_GRP1_EnableClock>

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream0_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d42:	f7fe fb83 	bl	800044c <__NVIC_GetPriorityGrouping>
 8001d46:	4603      	mov	r3, r0
 8001d48:	2200      	movs	r2, #0
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7fe fbd3 	bl	80004f8 <NVIC_EncodePriority>
 8001d52:	4603      	mov	r3, r0
 8001d54:	4619      	mov	r1, r3
 8001d56:	200b      	movs	r0, #11
 8001d58:	f7fe fba4 	bl	80004a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8001d5c:	200b      	movs	r0, #11
 8001d5e:	f7fe fb83 	bl	8000468 <__NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  NVIC_SetPriority(DMA1_Stream1_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001d62:	f7fe fb73 	bl	800044c <__NVIC_GetPriorityGrouping>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2200      	movs	r2, #0
 8001d6a:	2100      	movs	r1, #0
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f7fe fbc3 	bl	80004f8 <NVIC_EncodePriority>
 8001d72:	4603      	mov	r3, r0
 8001d74:	4619      	mov	r1, r3
 8001d76:	200c      	movs	r0, #12
 8001d78:	f7fe fb94 	bl	80004a4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8001d7c:	200c      	movs	r0, #12
 8001d7e:	f7fe fb73 	bl	8000468 <__NVIC_EnableIRQ>

}
 8001d82:	bf00      	nop
 8001d84:	bd80      	pop	{r7, pc}
	...

08001d88 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b086      	sub	sp, #24
 8001d8c:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d8e:	463b      	mov	r3, r7
 8001d90:	2200      	movs	r2, #0
 8001d92:	601a      	str	r2, [r3, #0]
 8001d94:	605a      	str	r2, [r3, #4]
 8001d96:	609a      	str	r2, [r3, #8]
 8001d98:	60da      	str	r2, [r3, #12]
 8001d9a:	611a      	str	r2, [r3, #16]
 8001d9c:	615a      	str	r2, [r3, #20]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOC);
 8001d9e:	2004      	movs	r0, #4
 8001da0:	f7ff f986 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOA);
 8001da4:	2001      	movs	r0, #1
 8001da6:	f7ff f983 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOB);
 8001daa:	2002      	movs	r0, #2
 8001dac:	f7ff f980 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOF);
 8001db0:	2020      	movs	r0, #32
 8001db2:	f7ff f97d 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>
  LL_AHB4_GRP1_EnableClock(LL_AHB4_GRP1_PERIPH_GPIOE);
 8001db6:	2010      	movs	r0, #16
 8001db8:	f7ff f97a 	bl	80010b0 <LL_AHB4_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LL_GPIO_PIN_6);
 8001dbc:	2140      	movs	r1, #64	; 0x40
 8001dbe:	480b      	ldr	r0, [pc, #44]	; (8001dec <MX_GPIO_Init+0x64>)
 8001dc0:	f7ff fb74 	bl	80014ac <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6;
 8001dc4:	2340      	movs	r3, #64	; 0x40
 8001dc6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8001dcc:	2300      	movs	r3, #0
 8001dce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_DOWN;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001dd8:	463b      	mov	r3, r7
 8001dda:	4619      	mov	r1, r3
 8001ddc:	4803      	ldr	r0, [pc, #12]	; (8001dec <MX_GPIO_Init+0x64>)
 8001dde:	f000 fae1 	bl	80023a4 <LL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001de2:	bf00      	nop
 8001de4:	3718      	adds	r7, #24
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bd80      	pop	{r7, pc}
 8001dea:	bf00      	nop
 8001dec:	58020800 	.word	0x58020800

08001df0 <adc_to_voltage>:

/* USER CODE BEGIN 4 */
float adc_to_voltage(uint16_t adc_val) {
 8001df0:	b480      	push	{r7}
 8001df2:	b083      	sub	sp, #12
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	4603      	mov	r3, r0
 8001df8:	80fb      	strh	r3, [r7, #6]
    return 0.00999f * adc_val - 332.58f;
 8001dfa:	88fb      	ldrh	r3, [r7, #6]
 8001dfc:	ee07 3a90 	vmov	s15, r3
 8001e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e04:	ed9f 7a07 	vldr	s14, [pc, #28]	; 8001e24 <adc_to_voltage+0x34>
 8001e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e0c:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001e28 <adc_to_voltage+0x38>
 8001e10:	ee77 7ac7 	vsub.f32	s15, s15, s14
}
 8001e14:	eeb0 0a67 	vmov.f32	s0, s15
 8001e18:	370c      	adds	r7, #12
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	3c23ad19 	.word	0x3c23ad19
 8001e28:	43a64a3d 	.word	0x43a64a3d

08001e2c <adc_to_current>:



float adc_to_current(uint16_t adc_val) {
 8001e2c:	b480      	push	{r7}
 8001e2e:	b087      	sub	sp, #28
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	80fb      	strh	r3, [r7, #6]
    const float k = 2282.0f;   // Współczynnik (przykład)
 8001e36:	4b13      	ldr	r3, [pc, #76]	; (8001e84 <adc_to_current+0x58>)
 8001e38:	613b      	str	r3, [r7, #16]
    const float d = 13814.0f;  // Przesunięcie (przykład)
 8001e3a:	4b13      	ldr	r3, [pc, #76]	; (8001e88 <adc_to_current+0x5c>)
 8001e3c:	60fb      	str	r3, [r7, #12]

    float current = (adc_val - d) / k;
 8001e3e:	88fb      	ldrh	r3, [r7, #6]
 8001e40:	ee07 3a90 	vmov	s15, r3
 8001e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e48:	edd7 7a03 	vldr	s15, [r7, #12]
 8001e4c:	ee77 6a67 	vsub.f32	s13, s14, s15
 8001e50:	ed97 7a04 	vldr	s14, [r7, #16]
 8001e54:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e58:	edc7 7a05 	vstr	s15, [r7, #20]
    if (current < 0.0f) {
 8001e5c:	edd7 7a05 	vldr	s15, [r7, #20]
 8001e60:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e68:	d502      	bpl.n	8001e70 <adc_to_current+0x44>
        current = 0.0f; // Ograniczamy do zera
 8001e6a:	f04f 0300 	mov.w	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
    }
    return current;
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	ee07 3a90 	vmov	s15, r3
}
 8001e76:	eeb0 0a67 	vmov.f32	s0, s15
 8001e7a:	371c      	adds	r7, #28
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e82:	4770      	bx	lr
 8001e84:	450ea000 	.word	0x450ea000
 8001e88:	4657d800 	.word	0x4657d800

08001e8c <regulate_duty_fast>:

void regulate_duty_fast(uint16_t target_duty)
{
 8001e8c:	b480      	push	{r7}
 8001e8e:	b083      	sub	sp, #12
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	4603      	mov	r3, r0
 8001e94:	80fb      	strh	r3, [r7, #6]


    if (current_inductor < threshold) {
 8001e96:	4b24      	ldr	r3, [pc, #144]	; (8001f28 <regulate_duty_fast+0x9c>)
 8001e98:	ed93 7a00 	vldr	s14, [r3]
 8001e9c:	4b23      	ldr	r3, [pc, #140]	; (8001f2c <regulate_duty_fast+0xa0>)
 8001e9e:	edd3 7a00 	vldr	s15, [r3]
 8001ea2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ea6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eaa:	d515      	bpl.n	8001ed8 <regulate_duty_fast+0x4c>
        if (duty + step_fast < target_duty) {
 8001eac:	4b20      	ldr	r3, [pc, #128]	; (8001f30 <regulate_duty_fast+0xa4>)
 8001eae:	881b      	ldrh	r3, [r3, #0]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	4b20      	ldr	r3, [pc, #128]	; (8001f34 <regulate_duty_fast+0xa8>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	441a      	add	r2, r3
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	da08      	bge.n	8001ed0 <regulate_duty_fast+0x44>
            duty += step_fast;
 8001ebe:	4b1c      	ldr	r3, [pc, #112]	; (8001f30 <regulate_duty_fast+0xa4>)
 8001ec0:	881b      	ldrh	r3, [r3, #0]
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b1b      	ldr	r3, [pc, #108]	; (8001f34 <regulate_duty_fast+0xa8>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4413      	add	r3, r2
 8001eca:	4a1a      	ldr	r2, [pc, #104]	; (8001f34 <regulate_duty_fast+0xa8>)
 8001ecc:	6013      	str	r3, [r2, #0]
        } else {
            duty = target_duty;
        }
    }
    // Jeśli prąd przekracza limit, nie zwiększamy dalej
}
 8001ece:	e024      	b.n	8001f1a <regulate_duty_fast+0x8e>
            duty = target_duty;
 8001ed0:	88fb      	ldrh	r3, [r7, #6]
 8001ed2:	4a18      	ldr	r2, [pc, #96]	; (8001f34 <regulate_duty_fast+0xa8>)
 8001ed4:	6013      	str	r3, [r2, #0]
}
 8001ed6:	e020      	b.n	8001f1a <regulate_duty_fast+0x8e>
    else if (current_inductor < max_current) {
 8001ed8:	4b13      	ldr	r3, [pc, #76]	; (8001f28 <regulate_duty_fast+0x9c>)
 8001eda:	ed93 7a00 	vldr	s14, [r3]
 8001ede:	4b16      	ldr	r3, [pc, #88]	; (8001f38 <regulate_duty_fast+0xac>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ee8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eec:	d400      	bmi.n	8001ef0 <regulate_duty_fast+0x64>
}
 8001eee:	e014      	b.n	8001f1a <regulate_duty_fast+0x8e>
        if (duty + step_slow < target_duty) {
 8001ef0:	4b12      	ldr	r3, [pc, #72]	; (8001f3c <regulate_duty_fast+0xb0>)
 8001ef2:	881b      	ldrh	r3, [r3, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4b0f      	ldr	r3, [pc, #60]	; (8001f34 <regulate_duty_fast+0xa8>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	441a      	add	r2, r3
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	da08      	bge.n	8001f14 <regulate_duty_fast+0x88>
            duty += step_slow;
 8001f02:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <regulate_duty_fast+0xb0>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	461a      	mov	r2, r3
 8001f08:	4b0a      	ldr	r3, [pc, #40]	; (8001f34 <regulate_duty_fast+0xa8>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4413      	add	r3, r2
 8001f0e:	4a09      	ldr	r2, [pc, #36]	; (8001f34 <regulate_duty_fast+0xa8>)
 8001f10:	6013      	str	r3, [r2, #0]
}
 8001f12:	e002      	b.n	8001f1a <regulate_duty_fast+0x8e>
            duty = target_duty;
 8001f14:	88fb      	ldrh	r3, [r7, #6]
 8001f16:	4a07      	ldr	r2, [pc, #28]	; (8001f34 <regulate_duty_fast+0xa8>)
 8001f18:	6013      	str	r3, [r2, #0]
}
 8001f1a:	bf00      	nop
 8001f1c:	370c      	adds	r7, #12
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f24:	4770      	bx	lr
 8001f26:	bf00      	nop
 8001f28:	2400003c 	.word	0x2400003c
 8001f2c:	24000010 	.word	0x24000010
 8001f30:	2400000c 	.word	0x2400000c
 8001f34:	2400004c 	.word	0x2400004c
 8001f38:	24000008 	.word	0x24000008
 8001f3c:	2400000e 	.word	0x2400000e

08001f40 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f44:	e7fe      	b.n	8001f44 <NMI_Handler+0x4>

08001f46 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f46:	b480      	push	{r7}
 8001f48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f4a:	e7fe      	b.n	8001f4a <HardFault_Handler+0x4>

08001f4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f50:	e7fe      	b.n	8001f50 <MemManage_Handler+0x4>

08001f52 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f52:	b480      	push	{r7}
 8001f54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f56:	e7fe      	b.n	8001f56 <BusFault_Handler+0x4>

08001f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f5c:	e7fe      	b.n	8001f5c <UsageFault_Handler+0x4>

08001f5e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f5e:	b480      	push	{r7}
 8001f60:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f62:	bf00      	nop
 8001f64:	46bd      	mov	sp, r7
 8001f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6a:	4770      	bx	lr

08001f6c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f70:	bf00      	nop
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f7a:	b480      	push	{r7}
 8001f7c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f7e:	bf00      	nop
 8001f80:	46bd      	mov	sp, r7
 8001f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f86:	4770      	bx	lr

08001f88 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f8c:	bf00      	nop
 8001f8e:	46bd      	mov	sp, r7
 8001f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f94:	4770      	bx	lr

08001f96 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream0_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE END DMA1_Stream1_IRQn 0 */

  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001fa8:	bf00      	nop
 8001faa:	46bd      	mov	sp, r7
 8001fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb0:	4770      	bx	lr
	...

08001fb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001fb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001fec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001fb8:	f7fe f98e 	bl	80002d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001fbc:	480c      	ldr	r0, [pc, #48]	; (8001ff0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001fbe:	490d      	ldr	r1, [pc, #52]	; (8001ff4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001fc0:	4a0d      	ldr	r2, [pc, #52]	; (8001ff8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001fc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001fc4:	e002      	b.n	8001fcc <LoopCopyDataInit>

08001fc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001fc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001fc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001fca:	3304      	adds	r3, #4

08001fcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001fcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001fce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001fd0:	d3f9      	bcc.n	8001fc6 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001fd2:	4a0a      	ldr	r2, [pc, #40]	; (8001ffc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001fd4:	4c0a      	ldr	r4, [pc, #40]	; (8002000 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001fd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001fd8:	e001      	b.n	8001fde <LoopFillZerobss>

08001fda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001fda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001fdc:	3204      	adds	r2, #4

08001fde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001fde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001fe0:	d3fb      	bcc.n	8001fda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001fe2:	f000 ff37 	bl	8002e54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001fe6:	f7ff fa71 	bl	80014cc <main>
  bx  lr
 8001fea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001fec:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ff0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ff4:	24000014 	.word	0x24000014
  ldr r2, =_sidata
 8001ff8:	08002edc 	.word	0x08002edc
  ldr r2, =_sbss
 8001ffc:	2400001c 	.word	0x2400001c
  ldr r4, =_ebss
 8002000:	24000060 	.word	0x24000060

08002004 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002004:	e7fe      	b.n	8002004 <ADC3_IRQHandler>

08002006 <LL_ADC_REG_SetSequencerLength>:
{
 8002006:	b480      	push	{r7}
 8002008:	b083      	sub	sp, #12
 800200a:	af00      	add	r7, sp, #0
 800200c:	6078      	str	r0, [r7, #4]
 800200e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	f023 020f 	bic.w	r2, r3, #15
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	431a      	orrs	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002020:	bf00      	nop
 8002022:	370c      	adds	r7, #12
 8002024:	46bd      	mov	sp, r7
 8002026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202a:	4770      	bx	lr

0800202c <LL_ADC_IsEnabled>:
{
 800202c:	b480      	push	{r7}
 800202e:	b083      	sub	sp, #12
 8002030:	af00      	add	r7, sp, #0
 8002032:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	f003 0301 	and.w	r3, r3, #1
 800203c:	2b01      	cmp	r3, #1
 800203e:	d101      	bne.n	8002044 <LL_ADC_IsEnabled+0x18>
 8002040:	2301      	movs	r3, #1
 8002042:	e000      	b.n	8002046 <LL_ADC_IsEnabled+0x1a>
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	370c      	adds	r7, #12
 800204a:	46bd      	mov	sp, r7
 800204c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002050:	4770      	bx	lr
	...

08002054 <LL_ADC_CommonInit>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC common registers are initialized
  *          - ERROR: ADC common registers are not initialized
  */
ErrorStatus LL_ADC_CommonInit(ADC_Common_TypeDef *ADCxy_COMMON, LL_ADC_CommonInitTypeDef *ADC_CommonInitStruct)
{
 8002054:	b590      	push	{r4, r7, lr}
 8002056:	b085      	sub	sp, #20
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800205e:	2300      	movs	r3, #0
 8002060:	73fb      	strb	r3, [r7, #15]
  /* Note: Hardware constraint (refer to description of functions             */
  /*       "LL_ADC_SetCommonXXX()" and "LL_ADC_SetMultiXXX()"):               */
  /*       On this STM32 series, setting of these features is conditioned to   */
  /*       ADC state:                                                         */
  /*       All ADC instances of the ADC common group must be disabled.        */
  if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(ADCxy_COMMON) == 0UL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	4a22      	ldr	r2, [pc, #136]	; (80020f0 <LL_ADC_CommonInit+0x9c>)
 8002066:	4293      	cmp	r3, r2
 8002068:	d10e      	bne.n	8002088 <LL_ADC_CommonInit+0x34>
 800206a:	4822      	ldr	r0, [pc, #136]	; (80020f4 <LL_ADC_CommonInit+0xa0>)
 800206c:	f7ff ffde 	bl	800202c <LL_ADC_IsEnabled>
 8002070:	4604      	mov	r4, r0
 8002072:	4821      	ldr	r0, [pc, #132]	; (80020f8 <LL_ADC_CommonInit+0xa4>)
 8002074:	f7ff ffda 	bl	800202c <LL_ADC_IsEnabled>
 8002078:	4603      	mov	r3, r0
 800207a:	4323      	orrs	r3, r4
 800207c:	2b00      	cmp	r3, #0
 800207e:	bf0c      	ite	eq
 8002080:	2301      	moveq	r3, #1
 8002082:	2300      	movne	r3, #0
 8002084:	b2db      	uxtb	r3, r3
 8002086:	e008      	b.n	800209a <LL_ADC_CommonInit+0x46>
 8002088:	481c      	ldr	r0, [pc, #112]	; (80020fc <LL_ADC_CommonInit+0xa8>)
 800208a:	f7ff ffcf 	bl	800202c <LL_ADC_IsEnabled>
 800208e:	4603      	mov	r3, r0
 8002090:	2b00      	cmp	r3, #0
 8002092:	bf0c      	ite	eq
 8002094:	2301      	moveq	r3, #1
 8002096:	2300      	movne	r3, #0
 8002098:	b2db      	uxtb	r3, r3
 800209a:	2b00      	cmp	r3, #0
 800209c:	d020      	beq.n	80020e0 <LL_ADC_CommonInit+0x8c>
    /*  - multimode (if several ADC instances available on the                */
    /*    selected device)                                                    */
    /*    - Set ADC multimode configuration                                   */
    /*    - Set ADC multimode DMA transfer                                    */
    /*    - Set ADC multimode: delay between 2 sampling phases                */
    if (ADC_CommonInitStruct->Multimode != LL_ADC_MULTI_INDEPENDENT)
 800209e:	683b      	ldr	r3, [r7, #0]
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d012      	beq.n	80020cc <LL_ADC_CommonInit+0x78>
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	4b15      	ldr	r3, [pc, #84]	; (8002100 <LL_ADC_CommonInit+0xac>)
 80020ac:	4013      	ands	r3, r2
 80020ae:	683a      	ldr	r2, [r7, #0]
 80020b0:	6811      	ldr	r1, [r2, #0]
 80020b2:	683a      	ldr	r2, [r7, #0]
 80020b4:	6852      	ldr	r2, [r2, #4]
 80020b6:	4311      	orrs	r1, r2
 80020b8:	683a      	ldr	r2, [r7, #0]
 80020ba:	6892      	ldr	r2, [r2, #8]
 80020bc:	4311      	orrs	r1, r2
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	68d2      	ldr	r2, [r2, #12]
 80020c2:	430a      	orrs	r2, r1
 80020c4:	431a      	orrs	r2, r3
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	609a      	str	r2, [r3, #8]
 80020ca:	e00b      	b.n	80020e4 <LL_ADC_CommonInit+0x90>
                 | ADC_CommonInitStruct->MultiTwoSamplingDelay
                );
    }
    else
    {
      MODIFY_REG(ADCxy_COMMON->CCR,
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	689a      	ldr	r2, [r3, #8]
 80020d0:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <LL_ADC_CommonInit+0xac>)
 80020d2:	4013      	ands	r3, r2
 80020d4:	683a      	ldr	r2, [r7, #0]
 80020d6:	6812      	ldr	r2, [r2, #0]
 80020d8:	431a      	orrs	r2, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	609a      	str	r2, [r3, #8]
 80020de:	e001      	b.n	80020e4 <LL_ADC_CommonInit+0x90>
  }
  else
  {
    /* Initialization error: One or several ADC instances belonging to        */
    /* the same ADC common instance are not disabled.                         */
    status = ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80020e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd90      	pop	{r4, r7, pc}
 80020ee:	bf00      	nop
 80020f0:	40022300 	.word	0x40022300
 80020f4:	40022000 	.word	0x40022000
 80020f8:	40022100 	.word	0x40022100
 80020fc:	58026000 	.word	0x58026000
 8002100:	ffc030e0 	.word	0xffc030e0

08002104 <LL_ADC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_Init(ADC_TypeDef *ADCx, LL_ADC_InitTypeDef *ADC_InitStruct)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 800210e:	2300      	movs	r3, #0
 8002110:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_LEFT_BIT_SHIFT(ADC_InitStruct->LeftBitShift));
  assert_param(IS_LL_ADC_LOW_POWER(ADC_InitStruct->LowPowerMode));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 8002112:	6878      	ldr	r0, [r7, #4]
 8002114:	f7ff ff8a 	bl	800202c <LL_ADC_IsEnabled>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d115      	bne.n	800214a <LL_ADC_Init+0x46>
               ADC_InitStruct->Resolution
               | ADC_InitStruct->LowPowerMode
              );
    }
#else
    MODIFY_REG(ADCx->CFGR,
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	68da      	ldr	r2, [r3, #12]
 8002122:	4b0d      	ldr	r3, [pc, #52]	; (8002158 <LL_ADC_Init+0x54>)
 8002124:	4013      	ands	r3, r2
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	6811      	ldr	r1, [r2, #0]
 800212a:	683a      	ldr	r2, [r7, #0]
 800212c:	6892      	ldr	r2, [r2, #8]
 800212e:	430a      	orrs	r2, r1
 8002130:	431a      	orrs	r2, r3
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	60da      	str	r2, [r3, #12]
               ADC_InitStruct->Resolution
               | ADC_InitStruct->LowPowerMode
              );
#endif

    MODIFY_REG(ADCx->CFGR2, ADC_CFGR2_LSHIFT, ADC_InitStruct->LeftBitShift);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	f023 4270 	bic.w	r2, r3, #4026531840	; 0xf0000000
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	431a      	orrs	r2, r3
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	611a      	str	r2, [r3, #16]
 8002148:	e001      	b.n	800214e <LL_ADC_Init+0x4a>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 800214e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002150:	4618      	mov	r0, r3
 8002152:	3710      	adds	r7, #16
 8002154:	46bd      	mov	sp, r7
 8002156:	bd80      	pop	{r7, pc}
 8002158:	ffffbfe3 	.word	0xffffbfe3

0800215c <LL_ADC_REG_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: ADC registers are initialized
  *          - ERROR: ADC registers are not initialized
  */
ErrorStatus LL_ADC_REG_Init(ADC_TypeDef *ADCx, LL_ADC_REG_InitTypeDef *ADC_REG_InitStruct)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b084      	sub	sp, #16
 8002160:	af00      	add	r7, sp, #0
 8002162:	6078      	str	r0, [r7, #4]
 8002164:	6039      	str	r1, [r7, #0]
  ErrorStatus status = SUCCESS;
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_ADC_REG_DATA_TRANSFER_MODE(ADC_REG_InitStruct->DataTransferMode));
  assert_param(IS_LL_ADC_REG_OVR_DATA_BEHAVIOR(ADC_REG_InitStruct->Overrun));

  /* Note: Hardware constraint (refer to description of this function):       */
  /*       ADC instance must be disabled.                                     */
  if (LL_ADC_IsEnabled(ADCx) == 0UL)
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f7ff ff5e 	bl	800202c <LL_ADC_IsEnabled>
 8002170:	4603      	mov	r3, r0
 8002172:	2b00      	cmp	r3, #0
 8002174:	d132      	bne.n	80021dc <LL_ADC_REG_Init+0x80>
    /*    - Set ADC group regular conversion data transfer: no transfer or    */
    /*      transfer by DMA, and DMA requests mode                            */
    /*    - Set ADC group regular overrun behavior                            */
    /* Note: On this STM32 series, ADC trigger edge is set to value 0x0 by     */
    /*       setting of trigger source to SW start.                           */
    if (ADC_REG_InitStruct->SequencerLength != LL_ADC_REG_SEQ_SCAN_DISABLE)
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d015      	beq.n	80021aa <LL_ADC_REG_Init+0x4e>
    {
      MODIFY_REG(ADCx->CFGR,
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	68da      	ldr	r2, [r3, #12]
 8002182:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <LL_ADC_REG_Init+0x90>)
 8002184:	4013      	ands	r3, r2
 8002186:	683a      	ldr	r2, [r7, #0]
 8002188:	6811      	ldr	r1, [r2, #0]
 800218a:	683a      	ldr	r2, [r7, #0]
 800218c:	6892      	ldr	r2, [r2, #8]
 800218e:	4311      	orrs	r1, r2
 8002190:	683a      	ldr	r2, [r7, #0]
 8002192:	68d2      	ldr	r2, [r2, #12]
 8002194:	4311      	orrs	r1, r2
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	6912      	ldr	r2, [r2, #16]
 800219a:	4311      	orrs	r1, r2
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	6952      	ldr	r2, [r2, #20]
 80021a0:	430a      	orrs	r2, r1
 80021a2:	431a      	orrs	r2, r3
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	60da      	str	r2, [r3, #12]
 80021a8:	e011      	b.n	80021ce <LL_ADC_REG_Init+0x72>
                 | ADC_REG_InitStruct->Overrun
                );
    }
    else
    {
      MODIFY_REG(ADCx->CFGR,
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	68da      	ldr	r2, [r3, #12]
 80021ae:	4b0f      	ldr	r3, [pc, #60]	; (80021ec <LL_ADC_REG_Init+0x90>)
 80021b0:	4013      	ands	r3, r2
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	6811      	ldr	r1, [r2, #0]
 80021b6:	683a      	ldr	r2, [r7, #0]
 80021b8:	68d2      	ldr	r2, [r2, #12]
 80021ba:	4311      	orrs	r1, r2
 80021bc:	683a      	ldr	r2, [r7, #0]
 80021be:	6912      	ldr	r2, [r2, #16]
 80021c0:	4311      	orrs	r1, r2
 80021c2:	683a      	ldr	r2, [r7, #0]
 80021c4:	6952      	ldr	r2, [r2, #20]
 80021c6:	430a      	orrs	r2, r1
 80021c8:	431a      	orrs	r2, r3
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	60da      	str	r2, [r3, #12]
                 | ADC_REG_InitStruct->Overrun
                );
    }

    /* Set ADC group regular sequencer length and scan direction */
    LL_ADC_REG_SetSequencerLength(ADCx, ADC_REG_InitStruct->SequencerLength);
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	4619      	mov	r1, r3
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff ff16 	bl	8002006 <LL_ADC_REG_SetSequencerLength>
 80021da:	e001      	b.n	80021e0 <LL_ADC_REG_Init+0x84>
  }
  else
  {
    /* Initialization error: ADC instance is not disabled. */
    status = ERROR;
 80021dc:	2301      	movs	r3, #1
 80021de:	73fb      	strb	r3, [r7, #15]
  }
  return status;
 80021e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3710      	adds	r7, #16
 80021e6:	46bd      	mov	sp, r7
 80021e8:	bd80      	pop	{r7, pc}
 80021ea:	bf00      	nop
 80021ec:	fff0c01c 	.word	0xfff0c01c

080021f0 <LL_GPIO_SetPinMode>:
{
 80021f0:	b480      	push	{r7}
 80021f2:	b085      	sub	sp, #20
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	60f8      	str	r0, [r7, #12]
 80021f8:	60b9      	str	r1, [r7, #8]
 80021fa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, ((Pin * Pin) * GPIO_MODER_MODE0), ((Pin * Pin) * Mode));
 80021fc:	68fb      	ldr	r3, [r7, #12]
 80021fe:	6819      	ldr	r1, [r3, #0]
 8002200:	68bb      	ldr	r3, [r7, #8]
 8002202:	fb03 f203 	mul.w	r2, r3, r3
 8002206:	4613      	mov	r3, r2
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	4413      	add	r3, r2
 800220c:	43db      	mvns	r3, r3
 800220e:	ea01 0203 	and.w	r2, r1, r3
 8002212:	68bb      	ldr	r3, [r7, #8]
 8002214:	fb03 f303 	mul.w	r3, r3, r3
 8002218:	6879      	ldr	r1, [r7, #4]
 800221a:	fb01 f303 	mul.w	r3, r1, r3
 800221e:	431a      	orrs	r2, r3
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	601a      	str	r2, [r3, #0]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr

08002230 <LL_GPIO_SetPinOutputType>:
{
 8002230:	b480      	push	{r7}
 8002232:	b085      	sub	sp, #20
 8002234:	af00      	add	r7, sp, #0
 8002236:	60f8      	str	r0, [r7, #12]
 8002238:	60b9      	str	r1, [r7, #8]
 800223a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	685a      	ldr	r2, [r3, #4]
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	43db      	mvns	r3, r3
 8002244:	401a      	ands	r2, r3
 8002246:	68bb      	ldr	r3, [r7, #8]
 8002248:	6879      	ldr	r1, [r7, #4]
 800224a:	fb01 f303 	mul.w	r3, r1, r3
 800224e:	431a      	orrs	r2, r3
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	605a      	str	r2, [r3, #4]
}
 8002254:	bf00      	nop
 8002256:	3714      	adds	r7, #20
 8002258:	46bd      	mov	sp, r7
 800225a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800225e:	4770      	bx	lr

08002260 <LL_GPIO_SetPinSpeed>:
{
 8002260:	b480      	push	{r7}
 8002262:	b085      	sub	sp, #20
 8002264:	af00      	add	r7, sp, #0
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, ((Pin * Pin) * GPIO_OSPEEDR_OSPEED0), ((Pin * Pin) * Speed));
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	6899      	ldr	r1, [r3, #8]
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	fb03 f203 	mul.w	r2, r3, r3
 8002276:	4613      	mov	r3, r2
 8002278:	005b      	lsls	r3, r3, #1
 800227a:	4413      	add	r3, r2
 800227c:	43db      	mvns	r3, r3
 800227e:	ea01 0203 	and.w	r2, r1, r3
 8002282:	68bb      	ldr	r3, [r7, #8]
 8002284:	fb03 f303 	mul.w	r3, r3, r3
 8002288:	6879      	ldr	r1, [r7, #4]
 800228a:	fb01 f303 	mul.w	r3, r1, r3
 800228e:	431a      	orrs	r2, r3
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	609a      	str	r2, [r3, #8]
}
 8002294:	bf00      	nop
 8002296:	3714      	adds	r7, #20
 8002298:	46bd      	mov	sp, r7
 800229a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229e:	4770      	bx	lr

080022a0 <LL_GPIO_SetPinPull>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	b085      	sub	sp, #20
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	60f8      	str	r0, [r7, #12]
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, ((Pin * Pin) * GPIO_PUPDR_PUPD0), ((Pin * Pin) * Pull));
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	68d9      	ldr	r1, [r3, #12]
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	fb03 f203 	mul.w	r2, r3, r3
 80022b6:	4613      	mov	r3, r2
 80022b8:	005b      	lsls	r3, r3, #1
 80022ba:	4413      	add	r3, r2
 80022bc:	43db      	mvns	r3, r3
 80022be:	ea01 0203 	and.w	r2, r1, r3
 80022c2:	68bb      	ldr	r3, [r7, #8]
 80022c4:	fb03 f303 	mul.w	r3, r3, r3
 80022c8:	6879      	ldr	r1, [r7, #4]
 80022ca:	fb01 f303 	mul.w	r3, r1, r3
 80022ce:	431a      	orrs	r2, r3
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	60da      	str	r2, [r3, #12]
}
 80022d4:	bf00      	nop
 80022d6:	3714      	adds	r7, #20
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <LL_GPIO_SetAFPin_0_7>:
{
 80022e0:	b480      	push	{r7}
 80022e2:	b085      	sub	sp, #20
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], ((((Pin * Pin) * Pin) * Pin) * GPIO_AFRL_AFSEL0),
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	6a19      	ldr	r1, [r3, #32]
 80022f0:	68bb      	ldr	r3, [r7, #8]
 80022f2:	fb03 f303 	mul.w	r3, r3, r3
 80022f6:	68ba      	ldr	r2, [r7, #8]
 80022f8:	fb02 f303 	mul.w	r3, r2, r3
 80022fc:	68ba      	ldr	r2, [r7, #8]
 80022fe:	fb03 f202 	mul.w	r2, r3, r2
 8002302:	4613      	mov	r3, r2
 8002304:	011b      	lsls	r3, r3, #4
 8002306:	1a9b      	subs	r3, r3, r2
 8002308:	43db      	mvns	r3, r3
 800230a:	ea01 0203 	and.w	r2, r1, r3
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	fb03 f303 	mul.w	r3, r3, r3
 8002314:	68b9      	ldr	r1, [r7, #8]
 8002316:	fb01 f303 	mul.w	r3, r1, r3
 800231a:	68b9      	ldr	r1, [r7, #8]
 800231c:	fb01 f303 	mul.w	r3, r1, r3
 8002320:	6879      	ldr	r1, [r7, #4]
 8002322:	fb01 f303 	mul.w	r3, r1, r3
 8002326:	431a      	orrs	r2, r3
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	621a      	str	r2, [r3, #32]
}
 800232c:	bf00      	nop
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <LL_GPIO_SetAFPin_8_15>:
{
 8002338:	b480      	push	{r7}
 800233a:	b085      	sub	sp, #20
 800233c:	af00      	add	r7, sp, #0
 800233e:	60f8      	str	r0, [r7, #12]
 8002340:	60b9      	str	r1, [r7, #8]
 8002342:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (((((Pin >> 8U) * (Pin >> 8U)) * (Pin >> 8U)) * (Pin >> 8U)) * GPIO_AFRH_AFSEL8),
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	0a1b      	lsrs	r3, r3, #8
 800234c:	68ba      	ldr	r2, [r7, #8]
 800234e:	0a12      	lsrs	r2, r2, #8
 8002350:	fb02 f303 	mul.w	r3, r2, r3
 8002354:	68ba      	ldr	r2, [r7, #8]
 8002356:	0a12      	lsrs	r2, r2, #8
 8002358:	fb02 f303 	mul.w	r3, r2, r3
 800235c:	68ba      	ldr	r2, [r7, #8]
 800235e:	0a12      	lsrs	r2, r2, #8
 8002360:	fb03 f202 	mul.w	r2, r3, r2
 8002364:	4613      	mov	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	43db      	mvns	r3, r3
 800236c:	ea01 0203 	and.w	r2, r1, r3
 8002370:	68bb      	ldr	r3, [r7, #8]
 8002372:	0a1b      	lsrs	r3, r3, #8
 8002374:	68b9      	ldr	r1, [r7, #8]
 8002376:	0a09      	lsrs	r1, r1, #8
 8002378:	fb01 f303 	mul.w	r3, r1, r3
 800237c:	68b9      	ldr	r1, [r7, #8]
 800237e:	0a09      	lsrs	r1, r1, #8
 8002380:	fb01 f303 	mul.w	r3, r1, r3
 8002384:	68b9      	ldr	r1, [r7, #8]
 8002386:	0a09      	lsrs	r1, r1, #8
 8002388:	fb01 f303 	mul.w	r3, r1, r3
 800238c:	6879      	ldr	r1, [r7, #4]
 800238e:	fb01 f303 	mul.w	r3, r1, r3
 8002392:	431a      	orrs	r2, r3
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002398:	bf00      	nop
 800239a:	3714      	adds	r7, #20
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	b088      	sub	sp, #32
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	6078      	str	r0, [r7, #4]
 80023ac:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80023ae:	683b      	ldr	r3, [r7, #0]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b4:	693b      	ldr	r3, [r7, #16]
 80023b6:	fa93 f3a3 	rbit	r3, r3
 80023ba:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80023c0:	697b      	ldr	r3, [r7, #20]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d101      	bne.n	80023ca <LL_GPIO_Init+0x26>
  {
    return 32U;
 80023c6:	2320      	movs	r3, #32
 80023c8:	e003      	b.n	80023d2 <LL_GPIO_Init+0x2e>
  }
  return __builtin_clz(value);
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	fab3 f383 	clz	r3, r3
 80023d0:	b2db      	uxtb	r3, r3
 80023d2:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 80023d4:	e048      	b.n	8002468 <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001UL << pinpos);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	681a      	ldr	r2, [r3, #0]
 80023da:	2101      	movs	r1, #1
 80023dc:	69fb      	ldr	r3, [r7, #28]
 80023de:	fa01 f303 	lsl.w	r3, r1, r3
 80023e2:	4013      	ands	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00000000U)
 80023e6:	69bb      	ldr	r3, [r7, #24]
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d03a      	beq.n	8002462 <LL_GPIO_Init+0xbe>
    {

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d003      	beq.n	80023fc <LL_GPIO_Init+0x58>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2b02      	cmp	r3, #2
 80023fa:	d10e      	bne.n	800241a <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80023fc:	683b      	ldr	r3, [r7, #0]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	461a      	mov	r2, r3
 8002402:	69b9      	ldr	r1, [r7, #24]
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ff2b 	bl	8002260 <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	6819      	ldr	r1, [r3, #0]
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	68db      	ldr	r3, [r3, #12]
 8002412:	461a      	mov	r2, r3
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7ff ff0b 	bl	8002230 <LL_GPIO_SetPinOutputType>

      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	461a      	mov	r2, r3
 8002420:	69b9      	ldr	r1, [r7, #24]
 8002422:	6878      	ldr	r0, [r7, #4]
 8002424:	f7ff ff3c 	bl	80022a0 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	2b02      	cmp	r3, #2
 800242e:	d111      	bne.n	8002454 <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Alternate function configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002430:	69bb      	ldr	r3, [r7, #24]
 8002432:	2bff      	cmp	r3, #255	; 0xff
 8002434:	d807      	bhi.n	8002446 <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	461a      	mov	r2, r3
 800243c:	69b9      	ldr	r1, [r7, #24]
 800243e:	6878      	ldr	r0, [r7, #4]
 8002440:	f7ff ff4e 	bl	80022e0 <LL_GPIO_SetAFPin_0_7>
 8002444:	e006      	b.n	8002454 <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	695b      	ldr	r3, [r3, #20]
 800244a:	461a      	mov	r2, r3
 800244c:	69b9      	ldr	r1, [r7, #24]
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	f7ff ff72 	bl	8002338 <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	461a      	mov	r2, r3
 800245a:	69b9      	ldr	r1, [r7, #24]
 800245c:	6878      	ldr	r0, [r7, #4]
 800245e:	f7ff fec7 	bl	80021f0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	3301      	adds	r3, #1
 8002466:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681a      	ldr	r2, [r3, #0]
 800246c:	69fb      	ldr	r3, [r7, #28]
 800246e:	fa22 f303 	lsr.w	r3, r2, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1af      	bne.n	80023d6 <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8002476:	2300      	movs	r3, #0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3720      	adds	r7, #32
 800247c:	46bd      	mov	sp, r7
 800247e:	bd80      	pop	{r7, pc}

08002480 <LL_TIM_SetPrescaler>:
{
 8002480:	b480      	push	{r7}
 8002482:	b083      	sub	sp, #12
 8002484:	af00      	add	r7, sp, #0
 8002486:	6078      	str	r0, [r7, #4]
 8002488:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	683a      	ldr	r2, [r7, #0]
 800248e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002490:	bf00      	nop
 8002492:	370c      	adds	r7, #12
 8002494:	46bd      	mov	sp, r7
 8002496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249a:	4770      	bx	lr

0800249c <LL_TIM_SetAutoReload>:
{
 800249c:	b480      	push	{r7}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
 80024a4:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	683a      	ldr	r2, [r7, #0]
 80024aa:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80024ac:	bf00      	nop
 80024ae:	370c      	adds	r7, #12
 80024b0:	46bd      	mov	sp, r7
 80024b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b6:	4770      	bx	lr

080024b8 <LL_TIM_SetRepetitionCounter>:
{
 80024b8:	b480      	push	{r7}
 80024ba:	b083      	sub	sp, #12
 80024bc:	af00      	add	r7, sp, #0
 80024be:	6078      	str	r0, [r7, #4]
 80024c0:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	683a      	ldr	r2, [r7, #0]
 80024c6:	631a      	str	r2, [r3, #48]	; 0x30
}
 80024c8:	bf00      	nop
 80024ca:	370c      	adds	r7, #12
 80024cc:	46bd      	mov	sp, r7
 80024ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d2:	4770      	bx	lr

080024d4 <LL_TIM_OC_SetCompareCH1>:
{
 80024d4:	b480      	push	{r7}
 80024d6:	b083      	sub	sp, #12
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
 80024dc:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	683a      	ldr	r2, [r7, #0]
 80024e2:	635a      	str	r2, [r3, #52]	; 0x34
}
 80024e4:	bf00      	nop
 80024e6:	370c      	adds	r7, #12
 80024e8:	46bd      	mov	sp, r7
 80024ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ee:	4770      	bx	lr

080024f0 <LL_TIM_OC_SetCompareCH2>:
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
 80024f8:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	683a      	ldr	r2, [r7, #0]
 80024fe:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_TIM_OC_SetCompareCH3>:
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	63da      	str	r2, [r3, #60]	; 0x3c
}
 800251c:	bf00      	nop
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <LL_TIM_OC_SetCompareCH4>:
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
 8002530:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	641a      	str	r2, [r3, #64]	; 0x40
}
 8002538:	bf00      	nop
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr

08002544 <LL_TIM_OC_SetCompareCH5>:
{
 8002544:	b480      	push	{r7}
 8002546:	b083      	sub	sp, #12
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
 800254c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	659a      	str	r2, [r3, #88]	; 0x58
}
 8002558:	bf00      	nop
 800255a:	370c      	adds	r7, #12
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr

08002564 <LL_TIM_OC_SetCompareCH6>:
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
 800256c:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	683a      	ldr	r2, [r7, #0]
 8002572:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8002574:	bf00      	nop
 8002576:	370c      	adds	r7, #12
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr

08002580 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f043 0201 	orr.w	r2, r3, #1
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	615a      	str	r2, [r3, #20]
}
 8002594:	bf00      	nop
 8002596:	370c      	adds	r7, #12
 8002598:	46bd      	mov	sp, r7
 800259a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800259e:	4770      	bx	lr

080025a0 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, const LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b084      	sub	sp, #16
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a3d      	ldr	r2, [pc, #244]	; (80026a8 <LL_TIM_Init+0x108>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d013      	beq.n	80025e0 <LL_TIM_Init+0x40>
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025be:	d00f      	beq.n	80025e0 <LL_TIM_Init+0x40>
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	4a3a      	ldr	r2, [pc, #232]	; (80026ac <LL_TIM_Init+0x10c>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d00b      	beq.n	80025e0 <LL_TIM_Init+0x40>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	4a39      	ldr	r2, [pc, #228]	; (80026b0 <LL_TIM_Init+0x110>)
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d007      	beq.n	80025e0 <LL_TIM_Init+0x40>
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	4a38      	ldr	r2, [pc, #224]	; (80026b4 <LL_TIM_Init+0x114>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d003      	beq.n	80025e0 <LL_TIM_Init+0x40>
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	4a37      	ldr	r2, [pc, #220]	; (80026b8 <LL_TIM_Init+0x118>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d106      	bne.n	80025ee <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80025e6:	683b      	ldr	r3, [r7, #0]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a2d      	ldr	r2, [pc, #180]	; (80026a8 <LL_TIM_Init+0x108>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d01f      	beq.n	8002636 <LL_TIM_Init+0x96>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025fc:	d01b      	beq.n	8002636 <LL_TIM_Init+0x96>
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	4a2a      	ldr	r2, [pc, #168]	; (80026ac <LL_TIM_Init+0x10c>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d017      	beq.n	8002636 <LL_TIM_Init+0x96>
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	4a29      	ldr	r2, [pc, #164]	; (80026b0 <LL_TIM_Init+0x110>)
 800260a:	4293      	cmp	r3, r2
 800260c:	d013      	beq.n	8002636 <LL_TIM_Init+0x96>
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	4a28      	ldr	r2, [pc, #160]	; (80026b4 <LL_TIM_Init+0x114>)
 8002612:	4293      	cmp	r3, r2
 8002614:	d00f      	beq.n	8002636 <LL_TIM_Init+0x96>
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	4a27      	ldr	r2, [pc, #156]	; (80026b8 <LL_TIM_Init+0x118>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d00b      	beq.n	8002636 <LL_TIM_Init+0x96>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	4a26      	ldr	r2, [pc, #152]	; (80026bc <LL_TIM_Init+0x11c>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d007      	beq.n	8002636 <LL_TIM_Init+0x96>
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	4a25      	ldr	r2, [pc, #148]	; (80026c0 <LL_TIM_Init+0x120>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d003      	beq.n	8002636 <LL_TIM_Init+0x96>
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	4a24      	ldr	r2, [pc, #144]	; (80026c4 <LL_TIM_Init+0x124>)
 8002632:	4293      	cmp	r3, r2
 8002634:	d106      	bne.n	8002644 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	68db      	ldr	r3, [r3, #12]
 8002640:	4313      	orrs	r3, r2
 8002642:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	68fa      	ldr	r2, [r7, #12]
 8002648:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	4619      	mov	r1, r3
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f7ff ff23 	bl	800249c <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	881b      	ldrh	r3, [r3, #0]
 800265a:	4619      	mov	r1, r3
 800265c:	6878      	ldr	r0, [r7, #4]
 800265e:	f7ff ff0f 	bl	8002480 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	4a10      	ldr	r2, [pc, #64]	; (80026a8 <LL_TIM_Init+0x108>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d00f      	beq.n	800268a <LL_TIM_Init+0xea>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4a12      	ldr	r2, [pc, #72]	; (80026b8 <LL_TIM_Init+0x118>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d00b      	beq.n	800268a <LL_TIM_Init+0xea>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	4a11      	ldr	r2, [pc, #68]	; (80026bc <LL_TIM_Init+0x11c>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d007      	beq.n	800268a <LL_TIM_Init+0xea>
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	4a10      	ldr	r2, [pc, #64]	; (80026c0 <LL_TIM_Init+0x120>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d003      	beq.n	800268a <LL_TIM_Init+0xea>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4a0f      	ldr	r2, [pc, #60]	; (80026c4 <LL_TIM_Init+0x124>)
 8002686:	4293      	cmp	r3, r2
 8002688:	d105      	bne.n	8002696 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	691b      	ldr	r3, [r3, #16]
 800268e:	4619      	mov	r1, r3
 8002690:	6878      	ldr	r0, [r7, #4]
 8002692:	f7ff ff11 	bl	80024b8 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff ff72 	bl	8002580 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3710      	adds	r7, #16
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	40010000 	.word	0x40010000
 80026ac:	40000400 	.word	0x40000400
 80026b0:	40000800 	.word	0x40000800
 80026b4:	40000c00 	.word	0x40000c00
 80026b8:	40010400 	.word	0x40010400
 80026bc:	40014000 	.word	0x40014000
 80026c0:	40014400 	.word	0x40014400
 80026c4:	40014800 	.word	0x40014800

080026c8 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, const LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b086      	sub	sp, #24
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	60f8      	str	r0, [r7, #12]
 80026d0:	60b9      	str	r1, [r7, #8]
 80026d2:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 80026d4:	2301      	movs	r3, #1
 80026d6:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026de:	d045      	beq.n	800276c <LL_TIM_OC_Init+0xa4>
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80026e6:	d848      	bhi.n	800277a <LL_TIM_OC_Init+0xb2>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026ee:	d036      	beq.n	800275e <LL_TIM_OC_Init+0x96>
 80026f0:	68bb      	ldr	r3, [r7, #8]
 80026f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026f6:	d840      	bhi.n	800277a <LL_TIM_OC_Init+0xb2>
 80026f8:	68bb      	ldr	r3, [r7, #8]
 80026fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026fe:	d027      	beq.n	8002750 <LL_TIM_OC_Init+0x88>
 8002700:	68bb      	ldr	r3, [r7, #8]
 8002702:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002706:	d838      	bhi.n	800277a <LL_TIM_OC_Init+0xb2>
 8002708:	68bb      	ldr	r3, [r7, #8]
 800270a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800270e:	d018      	beq.n	8002742 <LL_TIM_OC_Init+0x7a>
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002716:	d830      	bhi.n	800277a <LL_TIM_OC_Init+0xb2>
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d003      	beq.n	8002726 <LL_TIM_OC_Init+0x5e>
 800271e:	68bb      	ldr	r3, [r7, #8]
 8002720:	2b10      	cmp	r3, #16
 8002722:	d007      	beq.n	8002734 <LL_TIM_OC_Init+0x6c>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8002724:	e029      	b.n	800277a <LL_TIM_OC_Init+0xb2>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8002726:	6879      	ldr	r1, [r7, #4]
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f000 f897 	bl	800285c <OC1Config>
 800272e:	4603      	mov	r3, r0
 8002730:	75fb      	strb	r3, [r7, #23]
      break;
 8002732:	e023      	b.n	800277c <LL_TIM_OC_Init+0xb4>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8002734:	6879      	ldr	r1, [r7, #4]
 8002736:	68f8      	ldr	r0, [r7, #12]
 8002738:	f000 f910 	bl	800295c <OC2Config>
 800273c:	4603      	mov	r3, r0
 800273e:	75fb      	strb	r3, [r7, #23]
      break;
 8002740:	e01c      	b.n	800277c <LL_TIM_OC_Init+0xb4>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8002742:	6879      	ldr	r1, [r7, #4]
 8002744:	68f8      	ldr	r0, [r7, #12]
 8002746:	f000 f98d 	bl	8002a64 <OC3Config>
 800274a:	4603      	mov	r3, r0
 800274c:	75fb      	strb	r3, [r7, #23]
      break;
 800274e:	e015      	b.n	800277c <LL_TIM_OC_Init+0xb4>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8002750:	6879      	ldr	r1, [r7, #4]
 8002752:	68f8      	ldr	r0, [r7, #12]
 8002754:	f000 fa0a 	bl	8002b6c <OC4Config>
 8002758:	4603      	mov	r3, r0
 800275a:	75fb      	strb	r3, [r7, #23]
      break;
 800275c:	e00e      	b.n	800277c <LL_TIM_OC_Init+0xb4>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 800275e:	6879      	ldr	r1, [r7, #4]
 8002760:	68f8      	ldr	r0, [r7, #12]
 8002762:	f000 fa6f 	bl	8002c44 <OC5Config>
 8002766:	4603      	mov	r3, r0
 8002768:	75fb      	strb	r3, [r7, #23]
      break;
 800276a:	e007      	b.n	800277c <LL_TIM_OC_Init+0xb4>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800276c:	6879      	ldr	r1, [r7, #4]
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f000 facc 	bl	8002d0c <OC6Config>
 8002774:	4603      	mov	r3, r0
 8002776:	75fb      	strb	r3, [r7, #23]
      break;
 8002778:	e000      	b.n	800277c <LL_TIM_OC_Init+0xb4>
      break;
 800277a:	bf00      	nop
  }

  return result;
 800277c:	7dfb      	ldrb	r3, [r7, #23]
}
 800277e:	4618      	mov	r0, r3
 8002780:	3718      	adds	r7, #24
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <LL_TIM_BDTR_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: Break and Dead Time is initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_BDTR_Init(TIM_TypeDef *TIMx, const LL_TIM_BDTR_InitTypeDef *TIM_BDTRInitStruct)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  uint32_t tmpbdtr = 0;
 8002792:	2300      	movs	r3, #0
 8002794:	60fb      	str	r3, [r7, #12]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
  the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, TIM_BDTRInitStruct->DeadTime);
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800279c:	683a      	ldr	r2, [r7, #0]
 800279e:	7b12      	ldrb	r2, [r2, #12]
 80027a0:	4313      	orrs	r3, r2
 80027a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, TIM_BDTRInitStruct->LockLevel);
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, TIM_BDTRInitStruct->OSSIState);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	4313      	orrs	r3, r2
 80027be:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, TIM_BDTRInitStruct->OSSRState);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80027c6:	683b      	ldr	r3, [r7, #0]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4313      	orrs	r3, r2
 80027cc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, TIM_BDTRInitStruct->BreakState);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80027d4:	683a      	ldr	r2, [r7, #0]
 80027d6:	89d2      	ldrh	r2, [r2, #14]
 80027d8:	4313      	orrs	r3, r2
 80027da:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, TIM_BDTRInitStruct->BreakPolarity);
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	4313      	orrs	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, TIM_BDTRInitStruct->AutomaticOutput);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80027f0:	683b      	ldr	r3, [r7, #0]
 80027f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f4:	4313      	orrs	r3, r2
 80027f6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, TIM_BDTRInitStruct->BreakFilter);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	695b      	ldr	r3, [r3, #20]
 8002802:	4313      	orrs	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
#if defined(TIM_BDTR_BKBID)
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, TIM_BDTRInitStruct->BreakAFMode);
#endif /*TIM_BDTR_BKBID */

  if (IS_TIM_BKIN2_INSTANCE(TIMx))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a12      	ldr	r2, [pc, #72]	; (8002854 <LL_TIM_BDTR_Init+0xcc>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d003      	beq.n	8002816 <LL_TIM_BDTR_Init+0x8e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a11      	ldr	r2, [pc, #68]	; (8002858 <LL_TIM_BDTR_Init+0xd0>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d114      	bne.n	8002840 <LL_TIM_BDTR_Init+0xb8>
#if defined(TIM_BDTR_BKBID)
    assert_param(IS_LL_TIM_BREAK2_AFMODE(TIM_BDTRInitStruct->Break2AFMode));
#endif /*TIM_BDTR_BKBID */

    /* Set the BREAK2 input related BDTR bit-fields */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (TIM_BDTRInitStruct->Break2Filter));
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6a1b      	ldr	r3, [r3, #32]
 8002820:	4313      	orrs	r3, r2
 8002822:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, TIM_BDTRInitStruct->Break2State);
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	699b      	ldr	r3, [r3, #24]
 800282e:	4313      	orrs	r3, r2
 8002830:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, TIM_BDTRInitStruct->Break2Polarity);
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, TIM_BDTRInitStruct->Break2AFMode);
#endif /*TIM_BDTR_BKBID */
  }

  /* Set TIMx_BDTR */
  LL_TIM_WriteReg(TIMx, BDTR, tmpbdtr);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	68fa      	ldr	r2, [r7, #12]
 8002844:	645a      	str	r2, [r3, #68]	; 0x44

  return SUCCESS;
 8002846:	2300      	movs	r3, #0
}
 8002848:	4618      	mov	r0, r3
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr
 8002854:	40010000 	.word	0x40010000
 8002858:	40010400 	.word	0x40010400

0800285c <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b086      	sub	sp, #24
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
 8002864:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6a1b      	ldr	r3, [r3, #32]
 800286a:	f023 0201 	bic.w	r2, r3, #1
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	f023 0303 	bic.w	r3, r3, #3
 800288a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800288c:	68fa      	ldr	r2, [r7, #12]
 800288e:	4b2d      	ldr	r3, [pc, #180]	; (8002944 <OC1Config+0xe8>)
 8002890:	4013      	ands	r3, r2
 8002892:	683a      	ldr	r2, [r7, #0]
 8002894:	6812      	ldr	r2, [r2, #0]
 8002896:	4313      	orrs	r3, r2
 8002898:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	f023 0202 	bic.w	r2, r3, #2
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	4313      	orrs	r3, r2
 80028a6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	f023 0201 	bic.w	r2, r3, #1
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	4a23      	ldr	r2, [pc, #140]	; (8002948 <OC1Config+0xec>)
 80028ba:	4293      	cmp	r3, r2
 80028bc:	d00f      	beq.n	80028de <OC1Config+0x82>
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a22      	ldr	r2, [pc, #136]	; (800294c <OC1Config+0xf0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d00b      	beq.n	80028de <OC1Config+0x82>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4a21      	ldr	r2, [pc, #132]	; (8002950 <OC1Config+0xf4>)
 80028ca:	4293      	cmp	r3, r2
 80028cc:	d007      	beq.n	80028de <OC1Config+0x82>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a20      	ldr	r2, [pc, #128]	; (8002954 <OC1Config+0xf8>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d003      	beq.n	80028de <OC1Config+0x82>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a1f      	ldr	r2, [pc, #124]	; (8002958 <OC1Config+0xfc>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d11e      	bne.n	800291c <OC1Config+0xc0>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f023 0208 	bic.w	r2, r3, #8
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	695b      	ldr	r3, [r3, #20]
 80028e8:	009b      	lsls	r3, r3, #2
 80028ea:	4313      	orrs	r3, r2
 80028ec:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 80028ee:	697b      	ldr	r3, [r7, #20]
 80028f0:	f023 0204 	bic.w	r2, r3, #4
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	699b      	ldr	r3, [r3, #24]
 8002908:	4313      	orrs	r3, r2
 800290a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800290c:	693b      	ldr	r3, [r7, #16]
 800290e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	69db      	ldr	r3, [r3, #28]
 8002916:	005b      	lsls	r3, r3, #1
 8002918:	4313      	orrs	r3, r2
 800291a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	693a      	ldr	r2, [r7, #16]
 8002920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68fa      	ldr	r2, [r7, #12]
 8002926:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	68db      	ldr	r3, [r3, #12]
 800292c:	4619      	mov	r1, r3
 800292e:	6878      	ldr	r0, [r7, #4]
 8002930:	f7ff fdd0 	bl	80024d4 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800293a:	2300      	movs	r3, #0
}
 800293c:	4618      	mov	r0, r3
 800293e:	3718      	adds	r7, #24
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	fffeff8f 	.word	0xfffeff8f
 8002948:	40010000 	.word	0x40010000
 800294c:	40010400 	.word	0x40010400
 8002950:	40014000 	.word	0x40014000
 8002954:	40014400 	.word	0x40014400
 8002958:	40014800 	.word	0x40014800

0800295c <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800295c:	b580      	push	{r7, lr}
 800295e:	b086      	sub	sp, #24
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6a1b      	ldr	r3, [r3, #32]
 800296a:	f023 0210 	bic.w	r2, r3, #16
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6a1b      	ldr	r3, [r3, #32]
 8002976:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	685b      	ldr	r3, [r3, #4]
 800297c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	699b      	ldr	r3, [r3, #24]
 8002982:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800298a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	4b2f      	ldr	r3, [pc, #188]	; (8002a4c <OC2Config+0xf0>)
 8002990:	4013      	ands	r3, r2
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	6812      	ldr	r2, [r2, #0]
 8002996:	0212      	lsls	r2, r2, #8
 8002998:	4313      	orrs	r3, r2
 800299a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f023 0220 	bic.w	r2, r3, #32
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	691b      	ldr	r3, [r3, #16]
 80029a6:	011b      	lsls	r3, r3, #4
 80029a8:	4313      	orrs	r3, r2
 80029aa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80029ac:	697b      	ldr	r3, [r7, #20]
 80029ae:	f023 0210 	bic.w	r2, r3, #16
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	011b      	lsls	r3, r3, #4
 80029b8:	4313      	orrs	r3, r2
 80029ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a24      	ldr	r2, [pc, #144]	; (8002a50 <OC2Config+0xf4>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d00f      	beq.n	80029e4 <OC2Config+0x88>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	4a23      	ldr	r2, [pc, #140]	; (8002a54 <OC2Config+0xf8>)
 80029c8:	4293      	cmp	r3, r2
 80029ca:	d00b      	beq.n	80029e4 <OC2Config+0x88>
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a22      	ldr	r2, [pc, #136]	; (8002a58 <OC2Config+0xfc>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d007      	beq.n	80029e4 <OC2Config+0x88>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	4a21      	ldr	r2, [pc, #132]	; (8002a5c <OC2Config+0x100>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d003      	beq.n	80029e4 <OC2Config+0x88>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a20      	ldr	r2, [pc, #128]	; (8002a60 <OC2Config+0x104>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d11f      	bne.n	8002a24 <OC2Config+0xc8>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 80029e4:	697b      	ldr	r3, [r7, #20]
 80029e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	695b      	ldr	r3, [r3, #20]
 80029ee:	019b      	lsls	r3, r3, #6
 80029f0:	4313      	orrs	r3, r2
 80029f2:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 80029f4:	697b      	ldr	r3, [r7, #20]
 80029f6:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	019b      	lsls	r3, r3, #6
 8002a00:	4313      	orrs	r3, r2
 8002a02:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	4313      	orrs	r3, r2
 8002a12:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8002a14:	693b      	ldr	r3, [r7, #16]
 8002a16:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	69db      	ldr	r3, [r3, #28]
 8002a1e:	00db      	lsls	r3, r3, #3
 8002a20:	4313      	orrs	r3, r2
 8002a22:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	693a      	ldr	r2, [r7, #16]
 8002a28:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	68fa      	ldr	r2, [r7, #12]
 8002a2e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	4619      	mov	r1, r3
 8002a36:	6878      	ldr	r0, [r7, #4]
 8002a38:	f7ff fd5a 	bl	80024f0 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	697a      	ldr	r2, [r7, #20]
 8002a40:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002a42:	2300      	movs	r3, #0
}
 8002a44:	4618      	mov	r0, r3
 8002a46:	3718      	adds	r7, #24
 8002a48:	46bd      	mov	sp, r7
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	feff8fff 	.word	0xfeff8fff
 8002a50:	40010000 	.word	0x40010000
 8002a54:	40010400 	.word	0x40010400
 8002a58:	40014000 	.word	0x40014000
 8002a5c:	40014400 	.word	0x40014400
 8002a60:	40014800 	.word	0x40014800

08002a64 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b086      	sub	sp, #24
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
 8002a6c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	685b      	ldr	r3, [r3, #4]
 8002a84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	69db      	ldr	r3, [r3, #28]
 8002a8a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	f023 0303 	bic.w	r3, r3, #3
 8002a92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8002a94:	68fa      	ldr	r2, [r7, #12]
 8002a96:	4b2f      	ldr	r3, [pc, #188]	; (8002b54 <OC3Config+0xf0>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	683a      	ldr	r2, [r7, #0]
 8002a9c:	6812      	ldr	r2, [r2, #0]
 8002a9e:	4313      	orrs	r3, r2
 8002aa0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8002aa2:	697b      	ldr	r3, [r7, #20]
 8002aa4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	691b      	ldr	r3, [r3, #16]
 8002aac:	021b      	lsls	r3, r3, #8
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002ab8:	683b      	ldr	r3, [r7, #0]
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	021b      	lsls	r3, r3, #8
 8002abe:	4313      	orrs	r3, r2
 8002ac0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	4a24      	ldr	r2, [pc, #144]	; (8002b58 <OC3Config+0xf4>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d00f      	beq.n	8002aea <OC3Config+0x86>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a23      	ldr	r2, [pc, #140]	; (8002b5c <OC3Config+0xf8>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d00b      	beq.n	8002aea <OC3Config+0x86>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	4a22      	ldr	r2, [pc, #136]	; (8002b60 <OC3Config+0xfc>)
 8002ad6:	4293      	cmp	r3, r2
 8002ad8:	d007      	beq.n	8002aea <OC3Config+0x86>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a21      	ldr	r2, [pc, #132]	; (8002b64 <OC3Config+0x100>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d003      	beq.n	8002aea <OC3Config+0x86>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a20      	ldr	r2, [pc, #128]	; (8002b68 <OC3Config+0x104>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d11f      	bne.n	8002b2a <OC3Config+0xc6>
    assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
    assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	695b      	ldr	r3, [r3, #20]
 8002af4:	029b      	lsls	r3, r3, #10
 8002af6:	4313      	orrs	r3, r2
 8002af8:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002b00:	683b      	ldr	r3, [r7, #0]
 8002b02:	689b      	ldr	r3, [r3, #8]
 8002b04:	029b      	lsls	r3, r3, #10
 8002b06:	4313      	orrs	r3, r2
 8002b08:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	4313      	orrs	r3, r2
 8002b18:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	69db      	ldr	r3, [r3, #28]
 8002b24:	015b      	lsls	r3, r3, #5
 8002b26:	4313      	orrs	r3, r2
 8002b28:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	693a      	ldr	r2, [r7, #16]
 8002b2e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	68fa      	ldr	r2, [r7, #12]
 8002b34:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	68db      	ldr	r3, [r3, #12]
 8002b3a:	4619      	mov	r1, r3
 8002b3c:	6878      	ldr	r0, [r7, #4]
 8002b3e:	f7ff fce5 	bl	800250c <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	697a      	ldr	r2, [r7, #20]
 8002b46:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002b48:	2300      	movs	r3, #0
}
 8002b4a:	4618      	mov	r0, r3
 8002b4c:	3718      	adds	r7, #24
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	bd80      	pop	{r7, pc}
 8002b52:	bf00      	nop
 8002b54:	fffeff8f 	.word	0xfffeff8f
 8002b58:	40010000 	.word	0x40010000
 8002b5c:	40010400 	.word	0x40010400
 8002b60:	40014000 	.word	0x40014000
 8002b64:	40014400 	.word	0x40014400
 8002b68:	40014800 	.word	0x40014800

08002b6c <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b086      	sub	sp, #24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
 8002b74:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCMODE(TIM_OCInitStruct->OCMode));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a1b      	ldr	r3, [r3, #32]
 8002b7a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	69db      	ldr	r3, [r3, #28]
 8002b92:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 8002b9c:	68fa      	ldr	r2, [r7, #12]
 8002b9e:	4b23      	ldr	r3, [pc, #140]	; (8002c2c <OC4Config+0xc0>)
 8002ba0:	4013      	ands	r3, r2
 8002ba2:	683a      	ldr	r2, [r7, #0]
 8002ba4:	6812      	ldr	r2, [r2, #0]
 8002ba6:	0212      	lsls	r2, r2, #8
 8002ba8:	4313      	orrs	r3, r2
 8002baa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8002bac:	693b      	ldr	r3, [r7, #16]
 8002bae:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	031b      	lsls	r3, r3, #12
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	685b      	ldr	r3, [r3, #4]
 8002bc6:	031b      	lsls	r3, r3, #12
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	4a18      	ldr	r2, [pc, #96]	; (8002c30 <OC4Config+0xc4>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d00f      	beq.n	8002bf4 <OC4Config+0x88>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	4a17      	ldr	r2, [pc, #92]	; (8002c34 <OC4Config+0xc8>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d00b      	beq.n	8002bf4 <OC4Config+0x88>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	4a16      	ldr	r2, [pc, #88]	; (8002c38 <OC4Config+0xcc>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d007      	beq.n	8002bf4 <OC4Config+0x88>
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	4a15      	ldr	r2, [pc, #84]	; (8002c3c <OC4Config+0xd0>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d003      	beq.n	8002bf4 <OC4Config+0x88>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	4a14      	ldr	r2, [pc, #80]	; (8002c40 <OC4Config+0xd4>)
 8002bf0:	4293      	cmp	r3, r2
 8002bf2:	d107      	bne.n	8002c04 <OC4Config+0x98>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8002bfa:	683b      	ldr	r3, [r7, #0]
 8002bfc:	699b      	ldr	r3, [r3, #24]
 8002bfe:	019b      	lsls	r3, r3, #6
 8002c00:	4313      	orrs	r3, r2
 8002c02:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	697a      	ldr	r2, [r7, #20]
 8002c08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68fa      	ldr	r2, [r7, #12]
 8002c0e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	4619      	mov	r1, r3
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f7ff fc86 	bl	8002528 <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	693a      	ldr	r2, [r7, #16]
 8002c20:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002c22:	2300      	movs	r3, #0
}
 8002c24:	4618      	mov	r0, r3
 8002c26:	3718      	adds	r7, #24
 8002c28:	46bd      	mov	sp, r7
 8002c2a:	bd80      	pop	{r7, pc}
 8002c2c:	feff8fff 	.word	0xfeff8fff
 8002c30:	40010000 	.word	0x40010000
 8002c34:	40010400 	.word	0x40010400
 8002c38:	40014000 	.word	0x40014000
 8002c3c:	40014400 	.word	0x40014400
 8002c40:	40014800 	.word	0x40014800

08002c44 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002c44:	b580      	push	{r7, lr}
 8002c46:	b084      	sub	sp, #16
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
 8002c4c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a1b      	ldr	r3, [r3, #32]
 8002c52:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a1b      	ldr	r3, [r3, #32]
 8002c5e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c64:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 8002c66:	68ba      	ldr	r2, [r7, #8]
 8002c68:	4b22      	ldr	r3, [pc, #136]	; (8002cf4 <OC5Config+0xb0>)
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	683a      	ldr	r2, [r7, #0]
 8002c6e:	6812      	ldr	r2, [r2, #0]
 8002c70:	4313      	orrs	r3, r2
 8002c72:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	041b      	lsls	r3, r3, #16
 8002c80:	4313      	orrs	r3, r2
 8002c82:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	685b      	ldr	r3, [r3, #4]
 8002c8e:	041b      	lsls	r3, r3, #16
 8002c90:	4313      	orrs	r3, r2
 8002c92:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	4a18      	ldr	r2, [pc, #96]	; (8002cf8 <OC5Config+0xb4>)
 8002c98:	4293      	cmp	r3, r2
 8002c9a:	d00f      	beq.n	8002cbc <OC5Config+0x78>
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	4a17      	ldr	r2, [pc, #92]	; (8002cfc <OC5Config+0xb8>)
 8002ca0:	4293      	cmp	r3, r2
 8002ca2:	d00b      	beq.n	8002cbc <OC5Config+0x78>
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	4a16      	ldr	r2, [pc, #88]	; (8002d00 <OC5Config+0xbc>)
 8002ca8:	4293      	cmp	r3, r2
 8002caa:	d007      	beq.n	8002cbc <OC5Config+0x78>
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <OC5Config+0xc0>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <OC5Config+0x78>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <OC5Config+0xc4>)
 8002cb8:	4293      	cmp	r3, r2
 8002cba:	d109      	bne.n	8002cd0 <OC5Config+0x8c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	699b      	ldr	r3, [r3, #24]
 8002cc8:	021b      	lsls	r3, r3, #8
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	68ba      	ldr	r2, [r7, #8]
 8002cd4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	68db      	ldr	r3, [r3, #12]
 8002cda:	4619      	mov	r1, r3
 8002cdc:	6878      	ldr	r0, [r7, #4]
 8002cde:	f7ff fc31 	bl	8002544 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3710      	adds	r7, #16
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	fffeff8f 	.word	0xfffeff8f
 8002cf8:	40010000 	.word	0x40010000
 8002cfc:	40010400 	.word	0x40010400
 8002d00:	40014000 	.word	0x40014000
 8002d04:	40014400 	.word	0x40014400
 8002d08:	40014800 	.word	0x40014800

08002d0c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, const LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	6a1b      	ldr	r3, [r3, #32]
 8002d1a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	6a1b      	ldr	r3, [r3, #32]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d2c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 8002d2e:	68ba      	ldr	r2, [r7, #8]
 8002d30:	4b22      	ldr	r3, [pc, #136]	; (8002dbc <OC6Config+0xb0>)
 8002d32:	4013      	ands	r3, r2
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	6812      	ldr	r2, [r2, #0]
 8002d38:	0212      	lsls	r2, r2, #8
 8002d3a:	4313      	orrs	r3, r2
 8002d3c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	051b      	lsls	r3, r3, #20
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	051b      	lsls	r3, r3, #20
 8002d5a:	4313      	orrs	r3, r2
 8002d5c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a17      	ldr	r2, [pc, #92]	; (8002dc0 <OC6Config+0xb4>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00f      	beq.n	8002d86 <OC6Config+0x7a>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a16      	ldr	r2, [pc, #88]	; (8002dc4 <OC6Config+0xb8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <OC6Config+0x7a>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a15      	ldr	r2, [pc, #84]	; (8002dc8 <OC6Config+0xbc>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <OC6Config+0x7a>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a14      	ldr	r2, [pc, #80]	; (8002dcc <OC6Config+0xc0>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <OC6Config+0x7a>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a13      	ldr	r2, [pc, #76]	; (8002dd0 <OC6Config+0xc4>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d109      	bne.n	8002d9a <OC6Config+0x8e>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	029b      	lsls	r3, r3, #10
 8002d94:	431a      	orrs	r2, r3
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68ba      	ldr	r2, [r7, #8]
 8002d9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	4619      	mov	r1, r3
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f7ff fbdc 	bl	8002564 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8002db2:	2300      	movs	r3, #0
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3710      	adds	r7, #16
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	feff8fff 	.word	0xfeff8fff
 8002dc0:	40010000 	.word	0x40010000
 8002dc4:	40010400 	.word	0x40010400
 8002dc8:	40014000 	.word	0x40014000
 8002dcc:	40014400 	.word	0x40014400
 8002dd0:	40014800 	.word	0x40014800

08002dd4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Frequency of Ticks (Hz)
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002dd4:	b480      	push	{r7}
 8002dd6:	b083      	sub	sp, #12
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002dde:	687a      	ldr	r2, [r7, #4]
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002de6:	4a07      	ldr	r2, [pc, #28]	; (8002e04 <LL_InitTick+0x30>)
 8002de8:	3b01      	subs	r3, #1
 8002dea:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002dec:	4b05      	ldr	r3, [pc, #20]	; (8002e04 <LL_InitTick+0x30>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002df2:	4b04      	ldr	r3, [pc, #16]	; (8002e04 <LL_InitTick+0x30>)
 8002df4:	2205      	movs	r2, #5
 8002df6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002df8:	bf00      	nop
 8002dfa:	370c      	adds	r7, #12
 8002dfc:	46bd      	mov	sp, r7
 8002dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e02:	4770      	bx	lr
 8002e04:	e000e010 	.word	0xe000e010

08002e08 <LL_Init1msTick>:
  *         @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
#endif /* DUAL_CORE */
void LL_Init1msTick(uint32_t CPU_Frequency)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(CPU_Frequency, 1000U);
 8002e10:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002e14:	6878      	ldr	r0, [r7, #4]
 8002e16:	f7ff ffdd 	bl	8002dd4 <LL_InitTick>
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
	...

08002e24 <LL_SetSystemCoreClock>:
  *         @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
#endif /* DUAL_CORE */
void LL_SetSystemCoreClock(uint32_t CPU_Frequency)
{
 8002e24:	b480      	push	{r7}
 8002e26:	b083      	sub	sp, #12
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = CPU_Frequency;
 8002e2c:	4a04      	ldr	r2, [pc, #16]	; (8002e40 <LL_SetSystemCoreClock+0x1c>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6013      	str	r3, [r2, #0]
}
 8002e32:	bf00      	nop
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	24000000 	.word	0x24000000

08002e44 <memset>:
 8002e44:	4402      	add	r2, r0
 8002e46:	4603      	mov	r3, r0
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d100      	bne.n	8002e4e <memset+0xa>
 8002e4c:	4770      	bx	lr
 8002e4e:	f803 1b01 	strb.w	r1, [r3], #1
 8002e52:	e7f9      	b.n	8002e48 <memset+0x4>

08002e54 <__libc_init_array>:
 8002e54:	b570      	push	{r4, r5, r6, lr}
 8002e56:	4d0d      	ldr	r5, [pc, #52]	; (8002e8c <__libc_init_array+0x38>)
 8002e58:	4c0d      	ldr	r4, [pc, #52]	; (8002e90 <__libc_init_array+0x3c>)
 8002e5a:	1b64      	subs	r4, r4, r5
 8002e5c:	10a4      	asrs	r4, r4, #2
 8002e5e:	2600      	movs	r6, #0
 8002e60:	42a6      	cmp	r6, r4
 8002e62:	d109      	bne.n	8002e78 <__libc_init_array+0x24>
 8002e64:	4d0b      	ldr	r5, [pc, #44]	; (8002e94 <__libc_init_array+0x40>)
 8002e66:	4c0c      	ldr	r4, [pc, #48]	; (8002e98 <__libc_init_array+0x44>)
 8002e68:	f000 f818 	bl	8002e9c <_init>
 8002e6c:	1b64      	subs	r4, r4, r5
 8002e6e:	10a4      	asrs	r4, r4, #2
 8002e70:	2600      	movs	r6, #0
 8002e72:	42a6      	cmp	r6, r4
 8002e74:	d105      	bne.n	8002e82 <__libc_init_array+0x2e>
 8002e76:	bd70      	pop	{r4, r5, r6, pc}
 8002e78:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e7c:	4798      	blx	r3
 8002e7e:	3601      	adds	r6, #1
 8002e80:	e7ee      	b.n	8002e60 <__libc_init_array+0xc>
 8002e82:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e86:	4798      	blx	r3
 8002e88:	3601      	adds	r6, #1
 8002e8a:	e7f2      	b.n	8002e72 <__libc_init_array+0x1e>
 8002e8c:	08002ed4 	.word	0x08002ed4
 8002e90:	08002ed4 	.word	0x08002ed4
 8002e94:	08002ed4 	.word	0x08002ed4
 8002e98:	08002ed8 	.word	0x08002ed8

08002e9c <_init>:
 8002e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e9e:	bf00      	nop
 8002ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ea2:	bc08      	pop	{r3}
 8002ea4:	469e      	mov	lr, r3
 8002ea6:	4770      	bx	lr

08002ea8 <_fini>:
 8002ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002eaa:	bf00      	nop
 8002eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002eae:	bc08      	pop	{r3}
 8002eb0:	469e      	mov	lr, r3
 8002eb2:	4770      	bx	lr
